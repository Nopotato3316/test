{"remainingRequest":"C:\\Users\\ren\\Desktop\\test\\mytable\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\ren\\Desktop\\test\\mytable\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ren\\Desktop\\test\\mytable\\src\\components\\mytinymce\\tinymce.min.js","dependencies":[{"path":"C:\\Users\\ren\\Desktop\\test\\mytable\\src\\components\\mytinymce\\tinymce.min.js","mtime":1633891664000},{"path":"C:\\Users\\ren\\Desktop\\test\\mytable\\babel.config.js","mtime":1634872674031},{"path":"C:\\Users\\ren\\Desktop\\test\\mytable\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ren\\Desktop\\test\\mytable\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ren\\Desktop\\test\\mytable\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF90eXBlb2YgPSByZXF1aXJlKCJDOi9Vc2Vycy9yZW4vRGVza3RvcC90ZXN0L215dGFibGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mIikuZGVmYXVsdDsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL3dlYi51cmwuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmdsb2JhbC10aGlzLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMud2Vhay1tYXAuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmFuY2hvci5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC1hbGwuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1hcnJheS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZXZlcnkuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWxsLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtaW5kZXguanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5kZXgtb2YuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmpvaW4uanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5sYXN0LWluZGV4LW9mLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLXJpZ2h0LmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNsaWNlLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zdWJhcnJheS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZml4ZWQuanMiKTsKCi8qKgogKiBDb3B5cmlnaHQgKGMpIFRpbnkgVGVjaG5vbG9naWVzLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBMR1BMIG9yIGEgY29tbWVyY2lhbCBsaWNlbnNlLgogKiBGb3IgTEdQTCBzZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi4KICogRm9yIGNvbW1lcmNpYWwgbGljZW5zZXMgc2VlIGh0dHBzOi8vd3d3LnRpbnkuY2xvdWQvCiAqCiAqIFZlcnNpb246IDUuMTAuMCAoMjAyMS0xMC0xMSkKICovCiFmdW5jdGlvbiAoKSB7CiAgInVzZSBzdHJpY3QiOwoKICBmdW5jdGlvbiByKGUpIHsKICAgIGlmIChudWxsID09PSBlKSByZXR1cm4gIm51bGwiOwogICAgaWYgKHZvaWQgMCA9PT0gZSkgcmV0dXJuICJ1bmRlZmluZWQiOwoKICAgIHZhciB0ID0gX3R5cGVvZihlKTsKCiAgICByZXR1cm4gIm9iamVjdCIgPT0gdCAmJiAoQXJyYXkucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoZSkgfHwgZS5jb25zdHJ1Y3RvciAmJiAiQXJyYXkiID09PSBlLmNvbnN0cnVjdG9yLm5hbWUpID8gImFycmF5IiA6ICJvYmplY3QiID09IHQgJiYgKFN0cmluZy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihlKSB8fCBlLmNvbnN0cnVjdG9yICYmICJTdHJpbmciID09PSBlLmNvbnN0cnVjdG9yLm5hbWUpID8gInN0cmluZyIgOiB0OwogIH0KCiAgZnVuY3Rpb24gZihvKSB7CiAgICByZXR1cm4gbShmdW5jdGlvbiAoZSwgdCkgewogICAgICBpZiAoZS5sZW5ndGggIT09IHQubGVuZ3RoKSByZXR1cm4gITE7CgogICAgICBmb3IgKHZhciBuID0gZS5sZW5ndGgsIHIgPSAwOyByIDwgbjsgcisrKSB7CiAgICAgICAgaWYgKCFvLmVxKGVbcl0sIHRbcl0pKSByZXR1cm4gITE7CiAgICAgIH0KCiAgICAgIHJldHVybiAhMDsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gZChsKSB7CiAgICByZXR1cm4gbShmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiwKICAgICAgICAgIHIsCiAgICAgICAgICBvLAogICAgICAgICAgaSA9IE9iamVjdC5rZXlzKGUpLAogICAgICAgICAgYSA9IE9iamVjdC5rZXlzKHQpOwogICAgICBpZiAociA9IGYoZyksIG8gPSBmdW5jdGlvbiBvKGUpIHsKICAgICAgICByZXR1cm4gdCA9IG4sIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpLnNvcnQodCk7CiAgICAgICAgdmFyIHQ7CiAgICAgIH0sICFtKGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgcmV0dXJuIHIuZXEobyhlKSwgbyh0KSk7CiAgICAgIH0pLmVxKGksIGEpKSByZXR1cm4gITE7CgogICAgICBmb3IgKHZhciB1ID0gaS5sZW5ndGgsIHMgPSAwOyBzIDwgdTsgcysrKSB7CiAgICAgICAgdmFyIGMgPSBpW3NdOwogICAgICAgIGlmICghbC5lcShlW2NdLCB0W2NdKSkgcmV0dXJuICExOwogICAgICB9CgogICAgICByZXR1cm4gITA7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGUocikgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBuID0gX3R5cGVvZih0ID0gZSksIChudWxsID09PSB0ID8gIm51bGwiIDogIm9iamVjdCIgPT0gbiAmJiAoQXJyYXkucHJvdG90eXBlLmlzUHJvdG90eXBlT2YodCkgfHwgdC5jb25zdHJ1Y3RvciAmJiAiQXJyYXkiID09PSB0LmNvbnN0cnVjdG9yLm5hbWUpID8gImFycmF5IiA6ICJvYmplY3QiID09IG4gJiYgKFN0cmluZy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZih0KSB8fCB0LmNvbnN0cnVjdG9yICYmICJTdHJpbmciID09PSB0LmNvbnN0cnVjdG9yLm5hbWUpID8gInN0cmluZyIgOiBuKSA9PT0gcjsKICAgICAgdmFyIHQsIG47CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gdCh0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIF90eXBlb2YoZSkgPT09IHQ7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gbih0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHQgPT09IGU7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gSyhlKSB7CiAgICByZXR1cm4gbnVsbCA9PSBlOwogIH0KCiAgZnVuY3Rpb24gVihlKSB7CiAgICByZXR1cm4gIUsoZSk7CiAgfQoKICBmdW5jdGlvbiB0ZSgpIHt9CgogIGZ1bmN0aW9uIGkobiwgcikgewogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgZm9yICh2YXIgZSA9IFtdLCB0ID0gMDsgdCA8IGFyZ3VtZW50cy5sZW5ndGg7IHQrKykgewogICAgICAgIGVbdF0gPSBhcmd1bWVudHNbdF07CiAgICAgIH0KCiAgICAgIHJldHVybiBuKHIuYXBwbHkobnVsbCwgZSkpOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIGEodCwgbikgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB0KG4oZSkpOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIEooZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGU7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gdShlKSB7CiAgICByZXR1cm4gZTsKICB9CgogIGZ1bmN0aW9uIG8oZSwgdCkgewogICAgcmV0dXJuIGUgPT09IHQ7CiAgfQoKICB2YXIgbSA9IGZ1bmN0aW9uIG0oZSkgewogICAgcmV0dXJuIHsKICAgICAgZXE6IGUKICAgIH07CiAgfSwKICAgICAgZyA9IG0oZnVuY3Rpb24gKGUsIHQpIHsKICAgIHJldHVybiBlID09PSB0OwogIH0pLAogICAgICBwID0gbShmdW5jdGlvbiAoZSwgdCkgewogICAgaWYgKGUgPT09IHQpIHJldHVybiAhMDsKICAgIHZhciBuID0gcihlKTsKICAgIHJldHVybiBuID09PSByKHQpICYmICgtMSAhPT0gWyJ1bmRlZmluZWQiLCAiYm9vbGVhbiIsICJudW1iZXIiLCAic3RyaW5nIiwgImZ1bmN0aW9uIiwgInhtbCIsICJudWxsIl0uaW5kZXhPZihuKSA/IGUgPT09IHQgOiAiYXJyYXkiID09PSBuID8gZihwKS5lcShlLCB0KSA6ICJvYmplY3QiID09PSBuICYmIGQocCkuZXEoZSwgdCkpOwogIH0pLAogICAgICBYID0gZSgic3RyaW5nIiksCiAgICAgIGggPSBlKCJvYmplY3QiKSwKICAgICAgUyA9IGUoImFycmF5IiksCiAgICAgIGwgPSBuKG51bGwpLAogICAgICB2ID0gdCgiYm9vbGVhbiIpLAogICAgICBiID0gbih2b2lkIDApLAogICAgICB5ID0gdCgiZnVuY3Rpb24iKSwKICAgICAgRSA9IHQoIm51bWJlciIpOwoKICBmdW5jdGlvbiBBKHIpIHsKICAgIGZvciAodmFyIG8gPSBbXSwgZSA9IDE7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHsKICAgICAgb1tlIC0gMV0gPSBhcmd1bWVudHNbZV07CiAgICB9CgogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgZm9yICh2YXIgZSA9IFtdLCB0ID0gMDsgdCA8IGFyZ3VtZW50cy5sZW5ndGg7IHQrKykgewogICAgICAgIGVbdF0gPSBhcmd1bWVudHNbdF07CiAgICAgIH0KCiAgICAgIHZhciBuID0gby5jb25jYXQoZSk7CiAgICAgIHJldHVybiByLmFwcGx5KG51bGwsIG4pOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIHModCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiAhdChlKTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBDKGUpIHsKICAgIHJldHVybiBlKCk7CiAgfQoKICBmdW5jdGlvbiB4KGUpIHsKICAgIGUoKTsKICB9CgogIGZ1bmN0aW9uIGMoKSB7CiAgICByZXR1cm4gTjsKICB9CgogIHZhciBSID0gSighMSksCiAgICAgIHcgPSBKKCEwKSwKICAgICAgTiA9IHsKICAgIGZvbGQ6IGZ1bmN0aW9uIGZvbGQoZSwgdCkgewogICAgICByZXR1cm4gZSgpOwogICAgfSwKICAgIGlzU29tZTogUiwKICAgIGlzTm9uZTogdywKICAgIGdldE9yOiB1LAogICAgZ2V0T3JUaHVuazogaywKICAgIGdldE9yRGllOiBmdW5jdGlvbiBnZXRPckRpZShlKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihlIHx8ICJlcnJvcjogZ2V0T3JEaWUgY2FsbGVkIG9uIG5vbmUuIik7CiAgICB9LAogICAgZ2V0T3JOdWxsOiBKKG51bGwpLAogICAgZ2V0T3JVbmRlZmluZWQ6IEoodm9pZCAwKSwKICAgIG9yOiB1LAogICAgb3JUaHVuazogaywKICAgIG1hcDogYywKICAgIGVhY2g6IHRlLAogICAgYmluZDogYywKICAgIGV4aXN0czogUiwKICAgIGZvcmFsbDogdywKICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKCkgewogICAgICByZXR1cm4gTjsKICAgIH0sCiAgICB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KCkgewogICAgICByZXR1cm4gW107CiAgICB9LAogICAgdG9TdHJpbmc6IEooIm5vbmUoKSIpCiAgfTsKCiAgZnVuY3Rpb24gayhlKSB7CiAgICByZXR1cm4gZSgpOwogIH0KCiAgZnVuY3Rpb24gXyhlLCB0KSB7CiAgICByZXR1cm4geWUuY2FsbChlLCB0KTsKICB9CgogIGZ1bmN0aW9uIEQoZSwgdCkgewogICAgcmV0dXJuIC0xIDwgXyhlLCB0KTsKICB9CgogIGZ1bmN0aW9uIEYoZSwgdCkgewogICAgZm9yICh2YXIgbiA9IDAsIHIgPSBlLmxlbmd0aDsgbiA8IHI7IG4rKykgewogICAgICBpZiAodChlW25dLCBuKSkgcmV0dXJuICEwOwogICAgfQoKICAgIHJldHVybiAhMTsKICB9CgogIGZ1bmN0aW9uIFQoZSwgdCkgewogICAgZm9yICh2YXIgbiA9IGUubGVuZ3RoLCByID0gbmV3IEFycmF5KG4pLCBvID0gMDsgbyA8IG47IG8rKykgewogICAgICB2YXIgaSA9IGVbb107CiAgICAgIHJbb10gPSB0KGksIG8pOwogICAgfQoKICAgIHJldHVybiByOwogIH0KCiAgZnVuY3Rpb24gWShlLCB0KSB7CiAgICBmb3IgKHZhciBuID0gMCwgciA9IGUubGVuZ3RoOyBuIDwgcjsgbisrKSB7CiAgICAgIHQoZVtuXSwgbik7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBPKGUsIHQpIHsKICAgIGZvciAodmFyIG4gPSBlLmxlbmd0aCAtIDE7IDAgPD0gbjsgbi0tKSB7CiAgICAgIHQoZVtuXSwgbik7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBCKGUsIHQpIHsKICAgIGZvciAodmFyIG4gPSBbXSwgciA9IFtdLCBvID0gMCwgaSA9IGUubGVuZ3RoOyBvIDwgaTsgbysrKSB7CiAgICAgIHZhciBhID0gZVtvXTsKICAgICAgKHQoYSwgbykgPyBuIDogcikucHVzaChhKTsKICAgIH0KCiAgICByZXR1cm4gewogICAgICBwYXNzOiBuLAogICAgICBmYWlsOiByCiAgICB9OwogIH0KCiAgZnVuY3Rpb24gVShlLCB0KSB7CiAgICBmb3IgKHZhciBuID0gW10sIHIgPSAwLCBvID0gZS5sZW5ndGg7IHIgPCBvOyByKyspIHsKICAgICAgdmFyIGkgPSBlW3JdOwogICAgICB0KGksIHIpICYmIG4ucHVzaChpKTsKICAgIH0KCiAgICByZXR1cm4gbjsKICB9CgogIGZ1bmN0aW9uIFAoZSwgbiwgcikgewogICAgcmV0dXJuIE8oZSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgciA9IG4ociwgZSwgdCk7CiAgICB9KSwgcjsKICB9CgogIGZ1bmN0aW9uIEwoZSwgbiwgcikgewogICAgcmV0dXJuIFkoZSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgciA9IG4ociwgZSwgdCk7CiAgICB9KSwgcjsKICB9CgogIGZ1bmN0aW9uIEkoZSwgdCwgbikgewogICAgZm9yICh2YXIgciA9IDAsIG8gPSBlLmxlbmd0aDsgciA8IG87IHIrKykgewogICAgICB2YXIgaSA9IGVbcl07CiAgICAgIGlmICh0KGksIHIpKSByZXR1cm4gdmUuc29tZShpKTsKICAgICAgaWYgKG4oaSwgcikpIGJyZWFrOwogICAgfQoKICAgIHJldHVybiB2ZS5ub25lKCk7CiAgfQoKICBmdW5jdGlvbiBNKGUsIHQpIHsKICAgIHJldHVybiBJKGUsIHQsIFIpOwogIH0KCiAgZnVuY3Rpb24geihlLCB0KSB7CiAgICBmb3IgKHZhciBuID0gMCwgciA9IGUubGVuZ3RoOyBuIDwgcjsgbisrKSB7CiAgICAgIGlmICh0KGVbbl0sIG4pKSByZXR1cm4gdmUuc29tZShuKTsKICAgIH0KCiAgICByZXR1cm4gdmUubm9uZSgpOwogIH0KCiAgZnVuY3Rpb24gSChlLCB0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgZm9yICh2YXIgdCA9IFtdLCBuID0gMCwgciA9IGUubGVuZ3RoOyBuIDwgcjsgKytuKSB7CiAgICAgICAgaWYgKCFTKGVbbl0pKSB0aHJvdyBuZXcgRXJyb3IoIkFyci5mbGF0dGVuIGl0ZW0gIiArIG4gKyAiIHdhcyBub3QgYW4gYXJyYXksIGlucHV0OiAiICsgZSk7CiAgICAgICAgQ2UuYXBwbHkodCwgZVtuXSk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0OwogICAgfShUKGUsIHQpKTsKICB9CgogIGZ1bmN0aW9uIGooZSwgdCkgewogICAgZm9yICh2YXIgbiA9IDAsIHIgPSBlLmxlbmd0aDsgbiA8IHI7ICsrbikgewogICAgICBpZiAoITAgIT09IHQoZVtuXSwgbikpIHJldHVybiAhMTsKICAgIH0KCiAgICByZXR1cm4gITA7CiAgfQoKICBmdW5jdGlvbiBxKGUpIHsKICAgIHZhciB0ID0gYmUuY2FsbChlLCAwKTsKICAgIHJldHVybiB0LnJldmVyc2UoKSwgdDsKICB9CgogIGZ1bmN0aW9uICQoZSwgdCkgewogICAgcmV0dXJuIFUoZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuICFEKHQsIGUpOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBXKGUsIHQpIHsKICAgIHZhciBuID0gYmUuY2FsbChlLCAwKTsKICAgIHJldHVybiBuLnNvcnQodCksIG47CiAgfQoKICBmdW5jdGlvbiBHKGUsIHQpIHsKICAgIHJldHVybiAwIDw9IHQgJiYgdCA8IGUubGVuZ3RoID8gdmUuc29tZShlW3RdKSA6IHZlLm5vbmUoKTsKICB9CgogIGZ1bmN0aW9uIFEoZSkgewogICAgcmV0dXJuIEcoZSwgMCk7CiAgfQoKICBmdW5jdGlvbiBaKGUpIHsKICAgIHJldHVybiBHKGUsIGUubGVuZ3RoIC0gMSk7CiAgfQoKICBmdW5jdGlvbiBlZShlLCB0KSB7CiAgICBmb3IgKHZhciBuID0gMDsgbiA8IGUubGVuZ3RoOyBuKyspIHsKICAgICAgdmFyIHIgPSB0KGVbbl0sIG4pOwogICAgICBpZiAoci5pc1NvbWUoKSkgcmV0dXJuIHI7CiAgICB9CgogICAgcmV0dXJuIHZlLm5vbmUoKTsKICB9CgogIGZ1bmN0aW9uIG5lKGUsIHQpIHsKICAgIGZvciAodmFyIG4gPSB3ZShlKSwgciA9IDAsIG8gPSBuLmxlbmd0aDsgciA8IG87IHIrKykgewogICAgICB2YXIgaSA9IG5bcl07CiAgICAgIHQoZVtpXSwgaSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiByZShlLCBuKSB7CiAgICByZXR1cm4gRWUoZSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBrOiB0LAogICAgICAgIHY6IG4oZSwgdCkKICAgICAgfTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gb2UobikgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIG5bdF0gPSBlOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIGllKGUsIG4sIHIsIG8pIHsKICAgIHJldHVybiBuZShlLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAobihlLCB0KSA/IHIgOiBvKShlLCB0KTsKICAgIH0pLCAxOwogIH0KCiAgZnVuY3Rpb24gYWUoZSwgdCkgewogICAgdmFyIG4gPSB7fTsKICAgIHJldHVybiBpZShlLCB0LCBvZShuKSwgdGUpLCBuOwogIH0KCiAgZnVuY3Rpb24gdWUoZSwgdCkgewogICAgcmV0dXJuIE5lKGUsIHQpID8gdmUuZnJvbShlW3RdKSA6IHZlLm5vbmUoKTsKICB9CgogIGZ1bmN0aW9uIHNlKGUsIHQpIHsKICAgIHJldHVybiBOZShlLCB0KSAmJiB2b2lkIDAgIT09IGVbdF0gJiYgbnVsbCAhPT0gZVt0XTsKICB9CgogIGZ1bmN0aW9uIGNlKGUsIHQsIG4pIHsKICAgIHZhciByLCBvOwogICAgaWYgKCFlKSByZXR1cm4gITE7CgogICAgaWYgKG4gPSBuIHx8IGUsIHZvaWQgMCAhPT0gZS5sZW5ndGgpIHsKICAgICAgZm9yIChyID0gMCwgbyA9IGUubGVuZ3RoOyByIDwgbzsgcisrKSB7CiAgICAgICAgaWYgKCExID09PSB0LmNhbGwobiwgZVtyXSwgciwgZSkpIHJldHVybiAhMTsKICAgICAgfQogICAgfSBlbHNlIGZvciAociBpbiBlKSB7CiAgICAgIGlmIChOZShlLCByKSAmJiAhMSA9PT0gdC5jYWxsKG4sIGVbcl0sIHIsIGUpKSByZXR1cm4gITE7CiAgICB9CgogICAgcmV0dXJuICEwOwogIH0KCiAgZnVuY3Rpb24gbGUobiwgcikgewogICAgdmFyIG8gPSBbXTsKICAgIHJldHVybiBjZShuLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICBvLnB1c2gocihlLCB0LCBuKSk7CiAgICB9KSwgbzsKICB9CgogIGZ1bmN0aW9uIGZlKG4sIHIpIHsKICAgIHZhciBvID0gW107CiAgICByZXR1cm4gY2UobiwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgciAmJiAhcihlLCB0LCBuKSB8fCBvLnB1c2goZSk7CiAgICB9KSwgbzsKICB9CgogIGZ1bmN0aW9uIGRlKGUsIHQpIHsKICAgIGlmIChlKSBmb3IgKHZhciBuID0gMCwgciA9IGUubGVuZ3RoOyBuIDwgcjsgbisrKSB7CiAgICAgIGlmIChlW25dID09PSB0KSByZXR1cm4gbjsKICAgIH0KICAgIHJldHVybiAtMTsKICB9CgogIGZ1bmN0aW9uIG1lKGUsIHQsIG4sIHIpIHsKICAgIGZvciAodmFyIG8gPSBiKG4pID8gZVswXSA6IG4sIGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkrKykgewogICAgICBvID0gdC5jYWxsKHIsIG8sIGVbaV0sIGkpOwogICAgfQoKICAgIHJldHVybiBvOwogIH0KCiAgZnVuY3Rpb24gZ2UoZSwgdCwgbikgewogICAgZm9yICh2YXIgciA9IDAsIG8gPSBlLmxlbmd0aDsgciA8IG87IHIrKykgewogICAgICBpZiAodC5jYWxsKG4sIGVbcl0sIHIsIGUpKSByZXR1cm4gcjsKICAgIH0KCiAgICByZXR1cm4gLTE7CiAgfQoKICBmdW5jdGlvbiBwZShlKSB7CiAgICByZXR1cm4gZVtlLmxlbmd0aCAtIDFdOwogIH0KCiAgdmFyIGhlID0gZnVuY3Rpb24gaGUobikgewogICAgZnVuY3Rpb24gZSgpIHsKICAgICAgcmV0dXJuIG87CiAgICB9CgogICAgZnVuY3Rpb24gdChlKSB7CiAgICAgIHJldHVybiBlKG4pOwogICAgfQoKICAgIHZhciByID0gSihuKSwKICAgICAgICBvID0gewogICAgICBmb2xkOiBmdW5jdGlvbiBmb2xkKGUsIHQpIHsKICAgICAgICByZXR1cm4gdChuKTsKICAgICAgfSwKICAgICAgaXNTb21lOiB3LAogICAgICBpc05vbmU6IFIsCiAgICAgIGdldE9yOiByLAogICAgICBnZXRPclRodW5rOiByLAogICAgICBnZXRPckRpZTogciwKICAgICAgZ2V0T3JOdWxsOiByLAogICAgICBnZXRPclVuZGVmaW5lZDogciwKICAgICAgb3I6IGUsCiAgICAgIG9yVGh1bms6IGUsCiAgICAgIG1hcDogZnVuY3Rpb24gbWFwKGUpIHsKICAgICAgICByZXR1cm4gaGUoZShuKSk7CiAgICAgIH0sCiAgICAgIGVhY2g6IGZ1bmN0aW9uIGVhY2goZSkgewogICAgICAgIGUobik7CiAgICAgIH0sCiAgICAgIGJpbmQ6IHQsCiAgICAgIGV4aXN0czogdCwKICAgICAgZm9yYWxsOiB0LAogICAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihlKSB7CiAgICAgICAgcmV0dXJuIGUobikgPyBvIDogTjsKICAgICAgfSwKICAgICAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHsKICAgICAgICByZXR1cm4gW25dOwogICAgICB9LAogICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuICJzb21lKCIgKyBuICsgIikiOwogICAgICB9CiAgICB9OwogICAgcmV0dXJuIG87CiAgfSwKICAgICAgdmUgPSB7CiAgICBzb21lOiBoZSwKICAgIG5vbmU6IGMsCiAgICBmcm9tOiBmdW5jdGlvbiBmcm9tKGUpIHsKICAgICAgcmV0dXJuIG51bGwgPT0gZSA/IE4gOiBoZShlKTsKICAgIH0KICB9LAogICAgICBiZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZSwKICAgICAgeWUgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiwKICAgICAgQ2UgPSBBcnJheS5wcm90b3R5cGUucHVzaCwKICAgICAgeGUgPSB5KEFycmF5LmZyb20pID8gQXJyYXkuZnJvbSA6IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gYmUuY2FsbChlKTsKICB9LAogICAgICB3ZSA9IE9iamVjdC5rZXlzLAogICAgICBTZSA9IE9iamVjdC5oYXNPd25Qcm9wZXJ0eSwKICAgICAgRWUgPSBmdW5jdGlvbiBFZShlLCByKSB7CiAgICB2YXIgbyA9IHt9OwogICAgcmV0dXJuIG5lKGUsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHZhciBuID0gcihlLCB0KTsKICAgICAgb1tuLmtdID0gbi52OwogICAgfSksIG87CiAgfSwKICAgICAgTmUgPSBmdW5jdGlvbiBOZShlLCB0KSB7CiAgICByZXR1cm4gU2UuY2FsbChlLCB0KTsKICB9LAogICAgICBrZSA9IEFycmF5LmlzQXJyYXksCiAgICAgIF9lMiA9IGZ1bmN0aW9uIF9lKCkgewogICAgcmV0dXJuIChfZTIgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIChlKSB7CiAgICAgIGZvciAodmFyIHQsIG4gPSAxLCByID0gYXJndW1lbnRzLmxlbmd0aDsgbiA8IHI7IG4rKykgewogICAgICAgIGZvciAodmFyIG8gaW4gdCA9IGFyZ3VtZW50c1tuXSkgewogICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIG8pICYmIChlW29dID0gdFtvXSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gZTsKICAgIH0pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKCiAgZnVuY3Rpb24gQWUoZSwgdCwgbikgewogICAgaWYgKG4gfHwgMiA9PT0gYXJndW1lbnRzLmxlbmd0aCkgZm9yICh2YXIgciwgbyA9IDAsIGkgPSB0Lmxlbmd0aDsgbyA8IGk7IG8rKykgewogICAgICAhciAmJiBvIGluIHQgfHwgKChyID0gciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0LCAwLCBvKSlbb10gPSB0W29dKTsKICAgIH0KICAgIHJldHVybiBlLmNvbmNhdChyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQpKTsKICB9CgogIGZ1bmN0aW9uIFJlKG4pIHsKICAgIHZhciByLAogICAgICAgIG8gPSAhMTsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgIGZvciAodmFyIGUgPSBbXSwgdCA9IDA7IHQgPCBhcmd1bWVudHMubGVuZ3RoOyB0KyspIHsKICAgICAgICBlW3RdID0gYXJndW1lbnRzW3RdOwogICAgICB9CgogICAgICByZXR1cm4gbyB8fCAobyA9ICEwLCByID0gbi5hcHBseShudWxsLCBlKSksIHI7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gRGUoZSwgdCkgewogICAgdmFyIG4gPSBTdHJpbmcodCkudG9Mb3dlckNhc2UoKTsKICAgIHJldHVybiBNKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBlLnNlYXJjaChuKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gVGUoZSwgdCkgewogICAgcmV0dXJuIC0xICE9PSBlLmluZGV4T2YodCk7CiAgfQoKICBmdW5jdGlvbiBPZSh0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGUucmVwbGFjZSh0LCAiIik7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gQmUoZSkgewogICAgcmV0dXJuIDAgPCBlLmxlbmd0aDsKICB9CgogIGZ1bmN0aW9uIFBlKGUpIHsKICAgIHJldHVybiAhQmUoZSk7CiAgfQoKICBmdW5jdGlvbiBMZSh0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIFRlKGUsIHQpOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIEllKGUpIHsKICAgIHJldHVybiB3aW5kb3cubWF0Y2hNZWRpYShlKS5tYXRjaGVzOwogIH0KCiAgZnVuY3Rpb24gTWUoZSkgewogICAgcmV0dXJuIG51bGwgPT0gZSA/ICIiIDogKCIiICsgZSkucmVwbGFjZSh3dCwgIiIpOwogIH0KCiAgZnVuY3Rpb24gRmUoZSwgdCkgewogICAgcmV0dXJuIHQgPyAhKCJhcnJheSIgIT09IHQgfHwgIWtlKGUpKSB8fCBfdHlwZW9mKGUpID09PSB0IDogdm9pZCAwICE9PSBlOwogIH0KCiAgZnVuY3Rpb24gVWUoZSwgdCkgewogICAgZm9yICh2YXIgbiA9IFtdLCByID0gZnVuY3Rpb24gcihlKSB7CiAgICAgIHJldHVybiBuLnB1c2goZSksIHQoZSk7CiAgICB9LCBvID0gdChlKTsgKG8gPSBvLmJpbmQocikpLmlzU29tZSgpOykgewogICAgICA7CiAgICB9CgogICAgcmV0dXJuIG47CiAgfQoKICBmdW5jdGlvbiB6ZShlLCB0KSB7CiAgICB2YXIgbiA9IGUuZG9tOwogICAgaWYgKDEgIT09IG4ubm9kZVR5cGUpIHJldHVybiAhMTsKICAgIHZhciByID0gbjsKICAgIGlmICh2b2lkIDAgIT09IHIubWF0Y2hlcykgcmV0dXJuIHIubWF0Y2hlcyh0KTsKICAgIGlmICh2b2lkIDAgIT09IHIubXNNYXRjaGVzU2VsZWN0b3IpIHJldHVybiByLm1zTWF0Y2hlc1NlbGVjdG9yKHQpOwogICAgaWYgKHZvaWQgMCAhPT0gci53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHJldHVybiByLndlYmtpdE1hdGNoZXNTZWxlY3Rvcih0KTsKICAgIGlmICh2b2lkIDAgIT09IHIubW96TWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gci5tb3pNYXRjaGVzU2VsZWN0b3IodCk7CiAgICB0aHJvdyBuZXcgRXJyb3IoIkJyb3dzZXIgbGFja3MgbmF0aXZlIHNlbGVjdG9ycyIpOwogIH0KCiAgZnVuY3Rpb24gSGUoZSkgewogICAgcmV0dXJuIDEgIT09IGUubm9kZVR5cGUgJiYgOSAhPT0gZS5ub2RlVHlwZSAmJiAxMSAhPT0gZS5ub2RlVHlwZSB8fCAwID09PSBlLmNoaWxkRWxlbWVudENvdW50OwogIH0KCiAgZnVuY3Rpb24gamUoZSwgdCkgewogICAgcmV0dXJuIGUuZG9tID09PSB0LmRvbTsKICB9CgogIGZ1bmN0aW9uIFZlKGUsIHQpIHsKICAgIHJldHVybiBkdCgpLmJyb3dzZXIuaXNJRSgpID8gKG4gPSBlLmRvbSwgciA9IHQuZG9tLCBvID0gTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlksIDAgIT0gKG4uY29tcGFyZURvY3VtZW50UG9zaXRpb24ocikgJiBvKSkgOiAoaSA9IGUuZG9tKSAhPT0gKGEgPSB0LmRvbSkgJiYgaS5jb250YWlucyhhKTsKICAgIHZhciBuLCByLCBvLCBpLCBhOwogIH0KCiAgZnVuY3Rpb24gcWUoKSB7CiAgICByZXR1cm4gWGUoMCwgMCk7CiAgfQoKICBmdW5jdGlvbiAkZShlKSB7CiAgICBmdW5jdGlvbiB0KGUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gbiA9PT0gZTsKICAgICAgfTsKICAgIH0KCiAgICB2YXIgbiA9IGUuY3VycmVudCwKICAgICAgICByID0gZS52ZXJzaW9uOwogICAgcmV0dXJuIHsKICAgICAgY3VycmVudDogbiwKICAgICAgdmVyc2lvbjogciwKICAgICAgaXNFZGdlOiB0KCJFZGdlIiksCiAgICAgIGlzQ2hyb21lOiB0KCJDaHJvbWUiKSwKICAgICAgaXNJRTogdCgiSUUiKSwKICAgICAgaXNPcGVyYTogdCgiT3BlcmEiKSwKICAgICAgaXNGaXJlZm94OiB0KG50KSwKICAgICAgaXNTYWZhcmk6IHQoIlNhZmFyaSIpCiAgICB9OwogIH0KCiAgZnVuY3Rpb24gV2UoZSkgewogICAgZnVuY3Rpb24gdChlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIG4gPT09IGU7CiAgICAgIH07CiAgICB9CgogICAgdmFyIG4gPSBlLmN1cnJlbnQsCiAgICAgICAgciA9IGUudmVyc2lvbjsKICAgIHJldHVybiB7CiAgICAgIGN1cnJlbnQ6IG4sCiAgICAgIHZlcnNpb246IHIsCiAgICAgIGlzV2luZG93czogdChpdCksCiAgICAgIGlzaU9TOiB0KCJpT1MiKSwKICAgICAgaXNBbmRyb2lkOiB0KGF0KSwKICAgICAgaXNPU1g6IHQoIk9TWCIpLAogICAgICBpc0xpbnV4OiB0KCJMaW51eCIpLAogICAgICBpc1NvbGFyaXM6IHQodXQpLAogICAgICBpc0ZyZWVCU0Q6IHQoc3QpLAogICAgICBpc0Nocm9tZU9TOiB0KGN0KQogICAgfTsKICB9CgogIGZ1bmN0aW9uIEtlKGUpIHsKICAgIGlmIChudWxsID09IGUpIHRocm93IG5ldyBFcnJvcigiTm9kZSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQiKTsKICAgIHJldHVybiB7CiAgICAgIGRvbTogZQogICAgfTsKICB9CgogIHZhciBYZSA9IGZ1bmN0aW9uIFhlKGUsIHQpIHsKICAgIHJldHVybiB7CiAgICAgIG1ham9yOiBlLAogICAgICBtaW5vcjogdAogICAgfTsKICB9LAogICAgICBZZSA9IHsKICAgIG51OiBYZSwKICAgIGRldGVjdDogZnVuY3Rpb24gZGV0ZWN0KGUsIHQpIHsKICAgICAgdmFyIG4sCiAgICAgICAgICByLAogICAgICAgICAgbyA9IFN0cmluZyh0KS50b0xvd2VyQ2FzZSgpOwogICAgICByZXR1cm4gMCA9PT0gZS5sZW5ndGggPyBxZSgpIDogKHIgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgZS5sZW5ndGg7IG4rKykgewogICAgICAgICAgdmFyIHIgPSBlW25dOwogICAgICAgICAgaWYgKHIudGVzdCh0KSkgcmV0dXJuIHI7CiAgICAgICAgfQogICAgICB9KGUsIG4gPSBvKSkgPyBYZShpKDEpLCBpKDIpKSA6IHsKICAgICAgICBtYWpvcjogMCwKICAgICAgICBtaW5vcjogMAogICAgICB9OwoKICAgICAgZnVuY3Rpb24gaShlKSB7CiAgICAgICAgcmV0dXJuIE51bWJlcihuLnJlcGxhY2UociwgIiQiICsgZSkpOwogICAgICB9CiAgICB9LAogICAgdW5rbm93bjogcWUKICB9LAogICAgICBHZSA9IGZ1bmN0aW9uIEdlKGUsIHQpIHsKICAgIHJldHVybiAiIiA9PT0gKG4gPSB0KSB8fCBlLmxlbmd0aCA+PSBuLmxlbmd0aCAmJiBlLnN1YnN0cigwLCAwICsgbi5sZW5ndGgpID09PSBuOwogICAgdmFyIG47CiAgfSwKICAgICAgSmUgPSBPZSgvXlxzK3xccyskL2cpLAogICAgICBRZSA9IE9lKC9eXHMrL2cpLAogICAgICBaZSA9IE9lKC9ccyskL2cpLAogICAgICBldCA9IC8uKj92ZXJzaW9uXC9cID8oWzAtOV0rKVwuKFswLTldKykuKi8sCiAgICAgIHR0ID0gewogICAgYnJvd3NlcnM6IEooW3sKICAgICAgbmFtZTogIkVkZ2UiLAogICAgICB2ZXJzaW9uUmVnZXhlczogWy8uKj9lZGdlXC8gPyhbMC05XSspXC4oWzAtOV0rKSQvXSwKICAgICAgc2VhcmNoOiBmdW5jdGlvbiBzZWFyY2goZSkgewogICAgICAgIHJldHVybiBUZShlLCAiZWRnZS8iKSAmJiBUZShlLCAiY2hyb21lIikgJiYgVGUoZSwgInNhZmFyaSIpICYmIFRlKGUsICJhcHBsZXdlYmtpdCIpOwogICAgICB9CiAgICB9LCB7CiAgICAgIG5hbWU6ICJDaHJvbWUiLAogICAgICBicmFuZDogIkNocm9taXVtIiwKICAgICAgdmVyc2lvblJlZ2V4ZXM6IFsvLio/Y2hyb21lXC8oWzAtOV0rKVwuKFswLTldKykuKi8sIGV0XSwKICAgICAgc2VhcmNoOiBmdW5jdGlvbiBzZWFyY2goZSkgewogICAgICAgIHJldHVybiBUZShlLCAiY2hyb21lIikgJiYgIVRlKGUsICJjaHJvbWVmcmFtZSIpOwogICAgICB9CiAgICB9LCB7CiAgICAgIG5hbWU6ICJJRSIsCiAgICAgIHZlcnNpb25SZWdleGVzOiBbLy4qP21zaWVcID8oWzAtOV0rKVwuKFswLTldKykuKi8sIC8uKj9ydjooWzAtOV0rKVwuKFswLTldKykuKi9dLAogICAgICBzZWFyY2g6IGZ1bmN0aW9uIHNlYXJjaChlKSB7CiAgICAgICAgcmV0dXJuIFRlKGUsICJtc2llIikgfHwgVGUoZSwgInRyaWRlbnQiKTsKICAgICAgfQogICAgfSwgewogICAgICBuYW1lOiAiT3BlcmEiLAogICAgICB2ZXJzaW9uUmVnZXhlczogW2V0LCAvLio/b3BlcmFcLyhbMC05XSspXC4oWzAtOV0rKS4qL10sCiAgICAgIHNlYXJjaDogTGUoIm9wZXJhIikKICAgIH0sIHsKICAgICAgbmFtZTogIkZpcmVmb3giLAogICAgICB2ZXJzaW9uUmVnZXhlczogWy8uKj9maXJlZm94XC9cID8oWzAtOV0rKVwuKFswLTldKykuKi9dLAogICAgICBzZWFyY2g6IExlKCJmaXJlZm94IikKICAgIH0sIHsKICAgICAgbmFtZTogIlNhZmFyaSIsCiAgICAgIHZlcnNpb25SZWdleGVzOiBbZXQsIC8uKj9jcHUgb3MgKFswLTldKylfKFswLTldKykuKi9dLAogICAgICBzZWFyY2g6IGZ1bmN0aW9uIHNlYXJjaChlKSB7CiAgICAgICAgcmV0dXJuIChUZShlLCAic2FmYXJpIikgfHwgVGUoZSwgIm1vYmlsZS8iKSkgJiYgVGUoZSwgImFwcGxld2Via2l0Iik7CiAgICAgIH0KICAgIH1dKSwKICAgIG9zZXM6IEooW3sKICAgICAgbmFtZTogIldpbmRvd3MiLAogICAgICBzZWFyY2g6IExlKCJ3aW4iKSwKICAgICAgdmVyc2lvblJlZ2V4ZXM6IFsvLio/d2luZG93c1wgbnRcID8oWzAtOV0rKVwuKFswLTldKykuKi9dCiAgICB9LCB7CiAgICAgIG5hbWU6ICJpT1MiLAogICAgICBzZWFyY2g6IGZ1bmN0aW9uIHNlYXJjaChlKSB7CiAgICAgICAgcmV0dXJuIFRlKGUsICJpcGhvbmUiKSB8fCBUZShlLCAiaXBhZCIpOwogICAgICB9LAogICAgICB2ZXJzaW9uUmVnZXhlczogWy8uKj92ZXJzaW9uXC9cID8oWzAtOV0rKVwuKFswLTldKykuKi8sIC8uKmNwdSBvcyAoWzAtOV0rKV8oWzAtOV0rKS4qLywgLy4qY3B1IGlwaG9uZSBvcyAoWzAtOV0rKV8oWzAtOV0rKS4qL10KICAgIH0sIHsKICAgICAgbmFtZTogIkFuZHJvaWQiLAogICAgICBzZWFyY2g6IExlKCJhbmRyb2lkIiksCiAgICAgIHZlcnNpb25SZWdleGVzOiBbLy4qP2FuZHJvaWRcID8oWzAtOV0rKVwuKFswLTldKykuKi9dCiAgICB9LCB7CiAgICAgIG5hbWU6ICJPU1giLAogICAgICBzZWFyY2g6IExlKCJtYWMgb3MgeCIpLAogICAgICB2ZXJzaW9uUmVnZXhlczogWy8uKj9tYWNcIG9zXCB4XCA/KFswLTldKylfKFswLTldKykuKi9dCiAgICB9LCB7CiAgICAgIG5hbWU6ICJMaW51eCIsCiAgICAgIHNlYXJjaDogTGUoImxpbnV4IiksCiAgICAgIHZlcnNpb25SZWdleGVzOiBbXQogICAgfSwgewogICAgICBuYW1lOiAiU29sYXJpcyIsCiAgICAgIHNlYXJjaDogTGUoInN1bm9zIiksCiAgICAgIHZlcnNpb25SZWdleGVzOiBbXQogICAgfSwgewogICAgICBuYW1lOiAiRnJlZUJTRCIsCiAgICAgIHNlYXJjaDogTGUoImZyZWVic2QiKSwKICAgICAgdmVyc2lvblJlZ2V4ZXM6IFtdCiAgICB9LCB7CiAgICAgIG5hbWU6ICJDaHJvbWVPUyIsCiAgICAgIHNlYXJjaDogTGUoImNyb3MiKSwKICAgICAgdmVyc2lvblJlZ2V4ZXM6IFsvLio/Y2hyb21lXC8oWzAtOV0rKVwuKFswLTldKykuKi9dCiAgICB9XSkKICB9LAogICAgICBudCA9ICJGaXJlZm94IiwKICAgICAgcnQgPSBmdW5jdGlvbiBydCgpIHsKICAgIHJldHVybiAkZSh7CiAgICAgIGN1cnJlbnQ6IHZvaWQgMCwKICAgICAgdmVyc2lvbjogWWUudW5rbm93bigpCiAgICB9KTsKICB9LAogICAgICBvdCA9ICRlLAogICAgICBpdCA9IChKKCJFZGdlIiksIEooIkNocm9tZSIpLCBKKCJJRSIpLCBKKCJPcGVyYSIpLCBKKG50KSwgSigiU2FmYXJpIiksICJXaW5kb3dzIiksCiAgICAgIGF0ID0gIkFuZHJvaWQiLAogICAgICB1dCA9ICJTb2xhcmlzIiwKICAgICAgc3QgPSAiRnJlZUJTRCIsCiAgICAgIGN0ID0gIkNocm9tZU9TIiwKICAgICAgbHQgPSBmdW5jdGlvbiBsdCgpIHsKICAgIHJldHVybiBXZSh7CiAgICAgIGN1cnJlbnQ6IHZvaWQgMCwKICAgICAgdmVyc2lvbjogWWUudW5rbm93bigpCiAgICB9KTsKICB9LAogICAgICBmdCA9IFdlLAogICAgICBkdCA9IChKKGl0KSwgSigiaU9TIiksIEooYXQpLCBKKCJMaW51eCIpLCBKKCJPU1giKSwgSih1dCksIEooc3QpLCBKKGN0KSwgUmUoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGUgPSBuYXZpZ2F0b3IudXNlckFnZW50LCB0ID0gdmUuZnJvbShuYXZpZ2F0b3IudXNlckFnZW50RGF0YSksIG4gPSBJZSwgcCA9IHR0LmJyb3dzZXJzKCksIGggPSB0dC5vc2VzKCksIHYgPSB0LmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHIgPSBwLCBlZShlLmJyYW5kcywgZnVuY3Rpb24gKHQpIHsKICAgICAgICB2YXIgbiA9IHQuYnJhbmQudG9Mb3dlckNhc2UoKTsKICAgICAgICByZXR1cm4gTShyLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQ7CiAgICAgICAgICByZXR1cm4gbiA9PT0gKG51bGwgPT09ICh0ID0gZS5icmFuZCkgfHwgdm9pZCAwID09PSB0ID8gdm9pZCAwIDogdC50b0xvd2VyQ2FzZSgpKTsKICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGN1cnJlbnQ6IGUubmFtZSwKICAgICAgICAgICAgdmVyc2lvbjogWWUubnUocGFyc2VJbnQodC52ZXJzaW9uLCAxMCksIDApCiAgICAgICAgICB9OwogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgdmFyIHI7CiAgICB9KS5vclRodW5rKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIERlKHAsIG4gPSBlKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdCA9IFllLmRldGVjdChlLnZlcnNpb25SZWdleGVzLCBuKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgY3VycmVudDogZS5uYW1lLAogICAgICAgICAgdmVyc2lvbjogdAogICAgICAgIH07CiAgICAgIH0pOwogICAgICB2YXIgbjsKICAgIH0pLmZvbGQocnQsIG90KSwgYiA9IERlKGgsIHIgPSBlKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBZZS5kZXRlY3QoZS52ZXJzaW9uUmVnZXhlcywgcik7CiAgICAgIHJldHVybiB7CiAgICAgICAgY3VycmVudDogZS5uYW1lLAogICAgICAgIHZlcnNpb246IHQKICAgICAgfTsKICAgIH0pLmZvbGQobHQsIGZ0KSwgewogICAgICBicm93c2VyOiB2LAogICAgICBvczogYiwKICAgICAgZGV2aWNlVHlwZTogKGkgPSB2LCBhID0gZSwgdSA9IG4sIHMgPSAobyA9IGIpLmlzaU9TKCkgJiYgITAgPT09IC9pcGFkL2kudGVzdChhKSwgYyA9IG8uaXNpT1MoKSAmJiAhcywgZiA9IChsID0gby5pc2lPUygpIHx8IG8uaXNBbmRyb2lkKCkpIHx8IHUoIihwb2ludGVyOmNvYXJzZSkiKSwgZCA9IHMgfHwgIWMgJiYgbCAmJiB1KCIobWluLWRldmljZS13aWR0aDo3NjhweCkiKSwgbSA9IGMgfHwgbCAmJiAhZCwgZyA9IGkuaXNTYWZhcmkoKSAmJiBvLmlzaU9TKCkgJiYgITEgPT09IC9zYWZhcmkvaS50ZXN0KGEpLCB7CiAgICAgICAgaXNpUGFkOiBKKHMpLAogICAgICAgIGlzaVBob25lOiBKKGMpLAogICAgICAgIGlzVGFibGV0OiBKKGQpLAogICAgICAgIGlzUGhvbmU6IEoobSksCiAgICAgICAgaXNUb3VjaDogSihmKSwKICAgICAgICBpc0FuZHJvaWQ6IG8uaXNBbmRyb2lkLAogICAgICAgIGlzaU9TOiBvLmlzaU9TLAogICAgICAgIGlzV2ViVmlldzogSihnKSwKICAgICAgICBpc0Rlc2t0b3A6IEooIW0gJiYgIWQgJiYgIWcpCiAgICAgIH0pCiAgICB9OwogICAgdmFyIGUsIHQsIG4sIHIsIG8sIGksIGEsIHUsIHMsIGMsIGwsIGYsIGQsIG0sIGcsIHAsIGgsIHYsIGI7CiAgfSkpLAogICAgICBtdCA9IG5hdmlnYXRvci51c2VyQWdlbnQsCiAgICAgIGd0ID0gZHQoKSwKICAgICAgcHQgPSBndC5icm93c2VyLAogICAgICBodCA9IGd0Lm9zLAogICAgICB2dCA9IGd0LmRldmljZVR5cGUsCiAgICAgIGJ0ID0gL1dlYktpdC8udGVzdChtdCkgJiYgIXB0LmlzRWRnZSgpLAogICAgICB5dCA9ICJGb3JtRGF0YSIgaW4gd2luZG93ICYmICJGaWxlUmVhZGVyIiBpbiB3aW5kb3cgJiYgIlVSTCIgaW4gd2luZG93ICYmICEhVVJMLmNyZWF0ZU9iamVjdFVSTCwKICAgICAgQ3QgPSAtMSAhPT0gbXQuaW5kZXhPZigiV2luZG93cyBQaG9uZSIpLAogICAgICB4dCA9IHsKICAgIG9wZXJhOiBwdC5pc09wZXJhKCksCiAgICB3ZWJraXQ6IGJ0LAogICAgaWU6ICEoIXB0LmlzSUUoKSAmJiAhcHQuaXNFZGdlKCkpICYmIHB0LnZlcnNpb24ubWFqb3IsCiAgICBnZWNrbzogcHQuaXNGaXJlZm94KCksCiAgICBtYWM6IGh0LmlzT1NYKCkgfHwgaHQuaXNpT1MoKSwKICAgIGlPUzogdnQuaXNpUGFkKCkgfHwgdnQuaXNpUGhvbmUoKSwKICAgIGFuZHJvaWQ6IGh0LmlzQW5kcm9pZCgpLAogICAgY29udGVudEVkaXRhYmxlOiAhMCwKICAgIHRyYW5zcGFyZW50U3JjOiAiZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IiwKICAgIGNhcmV0QWZ0ZXI6ICEwLAogICAgcmFuZ2U6IHdpbmRvdy5nZXRTZWxlY3Rpb24gJiYgIlJhbmdlIiBpbiB3aW5kb3csCiAgICBkb2N1bWVudE1vZGU6IHB0LmlzSUUoKSA/IGRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCA3IDogMTAsCiAgICBmaWxlQXBpOiB5dCwKICAgIGNlRmFsc2U6ICEwLAogICAgY2FjaGVTdWZmaXg6IG51bGwsCiAgICBjb250YWluZXI6IG51bGwsCiAgICBleHBlcmltZW50YWxTaGFkb3dEb206ICExLAogICAgY2FuSGF2ZUNTUDogIXB0LmlzSUUoKSwKICAgIGRlc2t0b3A6IHZ0LmlzRGVza3RvcCgpLAogICAgd2luZG93c1Bob25lOiBDdCwKICAgIGJyb3dzZXI6IHsKICAgICAgY3VycmVudDogcHQuY3VycmVudCwKICAgICAgdmVyc2lvbjogcHQudmVyc2lvbiwKICAgICAgaXNDaHJvbWU6IHB0LmlzQ2hyb21lLAogICAgICBpc0VkZ2U6IHB0LmlzRWRnZSwKICAgICAgaXNGaXJlZm94OiBwdC5pc0ZpcmVmb3gsCiAgICAgIGlzSUU6IHB0LmlzSUUsCiAgICAgIGlzT3BlcmE6IHB0LmlzT3BlcmEsCiAgICAgIGlzU2FmYXJpOiBwdC5pc1NhZmFyaQogICAgfSwKICAgIG9zOiB7CiAgICAgIGN1cnJlbnQ6IGh0LmN1cnJlbnQsCiAgICAgIHZlcnNpb246IGh0LnZlcnNpb24sCiAgICAgIGlzQW5kcm9pZDogaHQuaXNBbmRyb2lkLAogICAgICBpc0Nocm9tZU9TOiBodC5pc0Nocm9tZU9TLAogICAgICBpc0ZyZWVCU0Q6IGh0LmlzRnJlZUJTRCwKICAgICAgaXNpT1M6IGh0LmlzaU9TLAogICAgICBpc0xpbnV4OiBodC5pc0xpbnV4LAogICAgICBpc09TWDogaHQuaXNPU1gsCiAgICAgIGlzU29sYXJpczogaHQuaXNTb2xhcmlzLAogICAgICBpc1dpbmRvd3M6IGh0LmlzV2luZG93cwogICAgfSwKICAgIGRldmljZVR5cGU6IHsKICAgICAgaXNEZXNrdG9wOiB2dC5pc0Rlc2t0b3AsCiAgICAgIGlzaVBhZDogdnQuaXNpUGFkLAogICAgICBpc2lQaG9uZTogdnQuaXNpUGhvbmUsCiAgICAgIGlzUGhvbmU6IHZ0LmlzUGhvbmUsCiAgICAgIGlzVGFibGV0OiB2dC5pc1RhYmxldCwKICAgICAgaXNUb3VjaDogdnQuaXNUb3VjaCwKICAgICAgaXNXZWJWaWV3OiB2dC5pc1dlYlZpZXcKICAgIH0KICB9LAogICAgICB3dCA9IC9eXHMqfFxzKiQvZywKICAgICAgU3QgPSBmdW5jdGlvbiBTdChlLCBuLCByLCBvKSB7CiAgICBvID0gbyB8fCB0aGlzLCBlICYmIGNlKGUgPSByID8gZVtyXSA6IGUsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHJldHVybiAhMSAhPT0gbi5jYWxsKG8sIGUsIHQsIHIpICYmIHZvaWQgU3QoZSwgbiwgciwgbyk7CiAgICB9KTsKICB9LAogICAgICBFdCA9IHsKICAgIHRyaW06IE1lLAogICAgaXNBcnJheToga2UsCiAgICBpczogRmUsCiAgICB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KGUpIHsKICAgICAgaWYgKGtlKGUpKSByZXR1cm4gZTsKCiAgICAgIGZvciAodmFyIHQgPSBbXSwgbiA9IDAsIHIgPSBlLmxlbmd0aDsgbiA8IHI7IG4rKykgewogICAgICAgIHRbbl0gPSBlW25dOwogICAgICB9CgogICAgICByZXR1cm4gdDsKICAgIH0sCiAgICBtYWtlTWFwOiBmdW5jdGlvbiBtYWtlTWFwKGUsIHQsIG4pIHsKICAgICAgdmFyIHI7CgogICAgICBmb3IgKHQgPSB0IHx8ICIsIiwgbiA9IG4gfHwge30sIHIgPSAoZSA9ICJzdHJpbmciID09IHR5cGVvZiAoZSA9IGUgfHwgW10pID8gZS5zcGxpdCh0KSA6IGUpLmxlbmd0aDsgci0tOykgewogICAgICAgIG5bZVtyXV0gPSB7fTsKICAgICAgfQoKICAgICAgcmV0dXJuIG47CiAgICB9LAogICAgZWFjaDogY2UsCiAgICBtYXA6IGxlLAogICAgZ3JlcDogZmUsCiAgICBpbkFycmF5OiBkZSwKICAgIGhhc093bjogTmUsCiAgICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChlKSB7CiAgICAgIGZvciAodmFyIHQgPSBbXSwgbiA9IDE7IG4gPCBhcmd1bWVudHMubGVuZ3RoOyBuKyspIHsKICAgICAgICB0W24gLSAxXSA9IGFyZ3VtZW50c1tuXTsKICAgICAgfQoKICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCB0Lmxlbmd0aDsgcisrKSB7CiAgICAgICAgdmFyIG8sCiAgICAgICAgICAgIGksCiAgICAgICAgICAgIGEgPSB0W3JdOwoKICAgICAgICBmb3IgKG8gaW4gYSkgewogICAgICAgICAgIU5lKGEsIG8pIHx8IHZvaWQgMCAhPT0gKGkgPSBhW29dKSAmJiAoZVtvXSA9IGkpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGU7CiAgICB9LAogICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoZSwgdCwgbikgewogICAgICB2YXIgciwKICAgICAgICAgIG8sCiAgICAgICAgICBpLAogICAgICAgICAgYSA9IHRoaXMsCiAgICAgICAgICB1ID0gMCwKICAgICAgICAgIHMgPSAoZSA9IC9eKChzdGF0aWMpICk/KFtcdy5dKykoOihbXHcuXSspKT8vLmV4ZWMoZSkpWzNdLm1hdGNoKC8oXnxcLikoXHcrKSQvaSlbMl0sCiAgICAgICAgICBjID0gYS5jcmVhdGVOUyhlWzNdLnJlcGxhY2UoL1wuXHcrJC8sICIiKSwgbik7CgogICAgICBpZiAoIWNbc10pIHsKICAgICAgICBpZiAoInN0YXRpYyIgPT09IGVbMl0pIHJldHVybiBjW3NdID0gdCwgdm9pZCAodGhpcy5vbkNyZWF0ZSAmJiB0aGlzLm9uQ3JlYXRlKGVbMl0sIGVbM10sIGNbc10pKTsKICAgICAgICB0W3NdIHx8ICh0W3NdID0gZnVuY3Rpb24gKCkge30sIHUgPSAxKSwgY1tzXSA9IHRbc10sIGEuZXh0ZW5kKGNbc10ucHJvdG90eXBlLCB0KSwgZVs1XSAmJiAociA9IGEucmVzb2x2ZShlWzVdKS5wcm90b3R5cGUsIG8gPSBlWzVdLm1hdGNoKC9cLihcdyspJC9pKVsxXSwgaSA9IGNbc10sIGNbc10gPSB1ID8gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHJbb10uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9IDogZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID0gcltvXSwgaS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0sIGNbc10ucHJvdG90eXBlW3NdID0gY1tzXSwgYS5lYWNoKHIsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICBjW3NdLnByb3RvdHlwZVt0XSA9IHJbdF07CiAgICAgICAgfSksIGEuZWFjaCh0LCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgclt0XSA/IGNbc10ucHJvdG90eXBlW3RdID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPSByW3RdLCBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9IDogdCAhPT0gcyAmJiAoY1tzXS5wcm90b3R5cGVbdF0gPSBlKTsKICAgICAgICB9KSksIGEuZWFjaCh0LnN0YXRpYywgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgIGNbc11bdF0gPSBlOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgd2FsazogU3QsCiAgICBjcmVhdGVOUzogZnVuY3Rpb24gY3JlYXRlTlMoZSwgdCkgewogICAgICB2YXIgbiwgcjsKCiAgICAgIGZvciAodCA9IHQgfHwgd2luZG93LCBlID0gZS5zcGxpdCgiLiIpLCBuID0gMDsgbiA8IGUubGVuZ3RoOyBuKyspIHsKICAgICAgICB0W3IgPSBlW25dXSB8fCAodFtyXSA9IHt9KSwgdCA9IHRbcl07CiAgICAgIH0KCiAgICAgIHJldHVybiB0OwogICAgfSwKICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoZSwgdCkgewogICAgICB2YXIgbiwgcjsKCiAgICAgIGZvciAodCA9IHQgfHwgd2luZG93LCBuID0gMCwgciA9IChlID0gZS5zcGxpdCgiLiIpKS5sZW5ndGg7IG4gPCByICYmICh0ID0gdFtlW25dXSk7IG4rKykgewogICAgICAgIDsKICAgICAgfQoKICAgICAgcmV0dXJuIHQ7CiAgICB9LAogICAgZXhwbG9kZTogZnVuY3Rpb24gZXhwbG9kZShlLCB0KSB7CiAgICAgIHJldHVybiAhZSB8fCBGZShlLCAiYXJyYXkiKSA/IGUgOiBsZShlLnNwbGl0KHQgfHwgIiwiKSwgTWUpOwogICAgfSwKICAgIF9hZGRDYWNoZVN1ZmZpeDogZnVuY3Rpb24gX2FkZENhY2hlU3VmZml4KGUpIHsKICAgICAgdmFyIHQgPSB4dC5jYWNoZVN1ZmZpeDsKICAgICAgcmV0dXJuIHQgJiYgKGUgKz0gKC0xID09PSBlLmluZGV4T2YoIj8iKSA/ICI/IiA6ICImIikgKyB0KSwgZTsKICAgIH0KICB9LAogICAgICBOdCA9IHsKICAgIGZyb21IdG1sOiBmdW5jdGlvbiBmcm9tSHRtbChlLCB0KSB7CiAgICAgIHZhciBuID0gKHQgfHwgZG9jdW1lbnQpLmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICBpZiAobi5pbm5lckhUTUwgPSBlLCAhbi5oYXNDaGlsZE5vZGVzKCkgfHwgMSA8IG4uY2hpbGROb2Rlcy5sZW5ndGgpIHRocm93IGNvbnNvbGUuZXJyb3IoIkhUTUwgZG9lcyBub3QgaGF2ZSBhIHNpbmdsZSByb290IG5vZGUiLCBlKSwgbmV3IEVycm9yKCJIVE1MIG11c3QgaGF2ZSBhIHNpbmdsZSByb290IG5vZGUiKTsKICAgICAgcmV0dXJuIEtlKG4uY2hpbGROb2Rlc1swXSk7CiAgICB9LAogICAgZnJvbVRhZzogZnVuY3Rpb24gZnJvbVRhZyhlLCB0KSB7CiAgICAgIHZhciBuID0gKHQgfHwgZG9jdW1lbnQpLmNyZWF0ZUVsZW1lbnQoZSk7CiAgICAgIHJldHVybiBLZShuKTsKICAgIH0sCiAgICBmcm9tVGV4dDogZnVuY3Rpb24gZnJvbVRleHQoZSwgdCkgewogICAgICB2YXIgbiA9ICh0IHx8IGRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShlKTsKICAgICAgcmV0dXJuIEtlKG4pOwogICAgfSwKICAgIGZyb21Eb206IEtlLAogICAgZnJvbVBvaW50OiBmdW5jdGlvbiBmcm9tUG9pbnQoZSwgdCwgbikgewogICAgICByZXR1cm4gdmUuZnJvbShlLmRvbS5lbGVtZW50RnJvbVBvaW50KHQsIG4pKS5tYXAoS2UpOwogICAgfQogIH07CgogIGZ1bmN0aW9uIGt0KGUpIHsKICAgIHJldHVybiBlLmRvbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogIH0KCiAgZnVuY3Rpb24gX3QoZSkgewogICAgcmV0dXJuIGUuZG9tLm5vZGVUeXBlOwogIH0KCiAgZnVuY3Rpb24gQXQodCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBfdChlKSA9PT0gdDsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBSdChlKSB7CiAgICByZXR1cm4gTnQuZnJvbURvbShlLmRvbS5vd25lckRvY3VtZW50KTsKICB9CgogIGZ1bmN0aW9uIER0KGUpIHsKICAgIHJldHVybiBBbihlKSA/IGUgOiBSdChlKTsKICB9CgogIGZ1bmN0aW9uIFR0KGUpIHsKICAgIHJldHVybiBOdC5mcm9tRG9tKER0KGUpLmRvbS5kZWZhdWx0Vmlldyk7CiAgfQoKICBmdW5jdGlvbiBPdChlKSB7CiAgICByZXR1cm4gdmUuZnJvbShlLmRvbS5wYXJlbnROb2RlKS5tYXAoTnQuZnJvbURvbSk7CiAgfQoKICBmdW5jdGlvbiBCdChlKSB7CiAgICByZXR1cm4gdmUuZnJvbShlLmRvbS5wcmV2aW91c1NpYmxpbmcpLm1hcChOdC5mcm9tRG9tKTsKICB9CgogIGZ1bmN0aW9uIFB0KGUpIHsKICAgIHJldHVybiB2ZS5mcm9tKGUuZG9tLm5leHRTaWJsaW5nKS5tYXAoTnQuZnJvbURvbSk7CiAgfQoKICBmdW5jdGlvbiBMdChlKSB7CiAgICByZXR1cm4gcShVZShlLCBCdCkpOwogIH0KCiAgZnVuY3Rpb24gSXQoZSkgewogICAgcmV0dXJuIFVlKGUsIFB0KTsKICB9CgogIGZ1bmN0aW9uIE10KGUsIHQpIHsKICAgIHZhciBuID0gZS5kb20uY2hpbGROb2RlczsKICAgIHJldHVybiB2ZS5mcm9tKG5bdF0pLm1hcChOdC5mcm9tRG9tKTsKICB9CgogIGZ1bmN0aW9uIEZ0KGUpIHsKICAgIHJldHVybiBNdChlLCAwKTsKICB9CgogIGZ1bmN0aW9uIFV0KGUpIHsKICAgIHJldHVybiBNdChlLCBlLmRvbS5jaGlsZE5vZGVzLmxlbmd0aCAtIDEpOwogIH0KCiAgZnVuY3Rpb24genQoZSkgewogICAgcmV0dXJuIGUuZG9tLmNoaWxkTm9kZXMubGVuZ3RoOwogIH0KCiAgZnVuY3Rpb24gSHQoZSkgewogICAgcmV0dXJuIFJuKGUpICYmIFYoZS5kb20uaG9zdCk7CiAgfQoKICBmdW5jdGlvbiBqdCh0KSB7CiAgICByZXR1cm4gSHQodCkgPyB0IDogZnVuY3Rpb24gKCkgewogICAgICB2YXIgZSA9IER0KHQpLmRvbS5oZWFkOwogICAgICBpZiAobnVsbCA9PSBlKSB0aHJvdyBuZXcgRXJyb3IoIkhlYWQgaXMgbm90IGF2YWlsYWJsZSB5ZXQiKTsKICAgICAgcmV0dXJuIE50LmZyb21Eb20oZSk7CiAgICB9KCk7CiAgfQoKICBmdW5jdGlvbiBWdChlKSB7CiAgICByZXR1cm4gTnQuZnJvbURvbShlLmRvbS5ob3N0KTsKICB9CgogIGZ1bmN0aW9uIHF0KHQsIG4pIHsKICAgIE90KHQpLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgZS5kb20uaW5zZXJ0QmVmb3JlKG4uZG9tLCB0LmRvbSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uICR0KGUsIHQpIHsKICAgIFB0KGUpLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICBPdChlKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgUG4oZSwgdCk7CiAgICAgIH0pOwogICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcXQoZSwgdCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIFd0KHQsIG4pIHsKICAgIEZ0KHQpLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICBQbih0LCBuKTsKICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgIHQuZG9tLmluc2VydEJlZm9yZShuLmRvbSwgZS5kb20pOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBLdCh0LCBlKSB7CiAgICBZKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgIFBuKHQsIGUpOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBYdChlKSB7CiAgICBlLmRvbS50ZXh0Q29udGVudCA9ICIiLCBZKERuKGUpLCBmdW5jdGlvbiAoZSkgewogICAgICBMbihlKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gWXQoZSkgewogICAgdmFyIHQsCiAgICAgICAgbiA9IERuKGUpOwogICAgMCA8IG4ubGVuZ3RoICYmICh0ID0gZSwgWShuLCBmdW5jdGlvbiAoZSkgewogICAgICBxdCh0LCBlKTsKICAgIH0pKSwgTG4oZSk7CiAgfQoKICBmdW5jdGlvbiBHdChlLCB0KSB7CiAgICByZXR1cm4gdm9pZCAwICE9PSBlID8gZSA6IHZvaWQgMCAhPT0gdCA/IHQgOiAwOwogIH0KCiAgZnVuY3Rpb24gSnQoZSkgewogICAgdmFyIHQgPSB2b2lkIDAgIT09IGUgPyBlLmRvbSA6IGRvY3VtZW50LAogICAgICAgIG4gPSB0LmJvZHkuc2Nyb2xsTGVmdCB8fCB0LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LAogICAgICAgIHIgPSB0LmJvZHkuc2Nyb2xsVG9wIHx8IHQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDsKICAgIHJldHVybiBGbihuLCByKTsKICB9CgogIGZ1bmN0aW9uIFF0KGUsIHQsIG4pIHsKICAgIHZhciByID0gKHZvaWQgMCAhPT0gbiA/IG4uZG9tIDogZG9jdW1lbnQpLmRlZmF1bHRWaWV3OwogICAgciAmJiByLnNjcm9sbFRvKGUsIHQpOwogIH0KCiAgZnVuY3Rpb24gWnQoZSwgdCkgewogICAgZHQoKS5icm93c2VyLmlzU2FmYXJpKCkgJiYgeShlLmRvbS5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKSA/IGUuZG9tLnNjcm9sbEludG9WaWV3SWZOZWVkZWQoITEpIDogZS5kb20uc2Nyb2xsSW50b1ZpZXcodCk7CiAgfQoKICBmdW5jdGlvbiBlbihlLCB0LCBuLCByKSB7CiAgICByZXR1cm4gewogICAgICB4OiBlLAogICAgICB5OiB0LAogICAgICB3aWR0aDogbiwKICAgICAgaGVpZ2h0OiByLAogICAgICByaWdodDogZSArIG4sCiAgICAgIGJvdHRvbTogdCArIHIKICAgIH07CiAgfQoKICBmdW5jdGlvbiB0bihlKSB7CiAgICB2YXIgciA9IHZvaWQgMCA9PT0gZSA/IHdpbmRvdyA6IGUsCiAgICAgICAgdCA9IHIuZG9jdW1lbnQsCiAgICAgICAgbyA9IEp0KE50LmZyb21Eb20odCkpLAogICAgICAgIG4gPSB2b2lkIDAgPT09IHIgPyB3aW5kb3cgOiByOwogICAgcmV0dXJuIChkdCgpLmJyb3dzZXIuaXNGaXJlZm94KCkgPyB2ZS5ub25lKCkgOiB2ZS5mcm9tKG4udmlzdWFsVmlld3BvcnQpKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGUgPSByLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwKICAgICAgICAgIHQgPSBlLmNsaWVudFdpZHRoLAogICAgICAgICAgbiA9IGUuY2xpZW50SGVpZ2h0OwogICAgICByZXR1cm4gZW4oby5sZWZ0LCBvLnRvcCwgdCwgbik7CiAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gZW4oTWF0aC5tYXgoZS5wYWdlTGVmdCwgby5sZWZ0KSwgTWF0aC5tYXgoZS5wYWdlVG9wLCBvLnRvcCksIGUud2lkdGgsIGUuaGVpZ2h0KTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gbm4odCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiAhIWUgJiYgZS5ub2RlVHlwZSA9PT0gdDsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBybihlKSB7CiAgICByZXR1cm4gZSAmJiAhT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpOwogIH0KCiAgZnVuY3Rpb24gb24oZSkgewogICAgdmFyIG4gPSBlLm1hcChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gZS50b0xvd2VyQ2FzZSgpOwogICAgfSk7CiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgaWYgKGUgJiYgZS5ub2RlTmFtZSkgewogICAgICAgIHZhciB0ID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgIHJldHVybiBEKG4sIHQpOwogICAgICB9CgogICAgICByZXR1cm4gITE7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gYW4ociwgZSkgewogICAgdmFyIG8gPSBlLnRvTG93ZXJDYXNlKCkuc3BsaXQoIiAiKTsKICAgIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgICBpZiAoem4oZSkpIGZvciAodmFyIHQgPSAwOyB0IDwgby5sZW5ndGg7IHQrKykgewogICAgICAgIHZhciBuID0gZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZSwgbnVsbCk7CiAgICAgICAgaWYgKChuID8gbi5nZXRQcm9wZXJ0eVZhbHVlKHIpIDogbnVsbCkgPT09IG9bdF0pIHJldHVybiAhMDsKICAgICAgfQogICAgICByZXR1cm4gITE7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gdW4odCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB6bihlKSAmJiBlLmhhc0F0dHJpYnV0ZSh0KTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBzbihlKSB7CiAgICByZXR1cm4gem4oZSkgJiYgZS5oYXNBdHRyaWJ1dGUoImRhdGEtbWNlLWJvZ3VzIik7CiAgfQoKICBmdW5jdGlvbiBjbihlKSB7CiAgICByZXR1cm4gem4oZSkgJiYgIlRBQkxFIiA9PT0gZS50YWdOYW1lOwogIH0KCiAgZnVuY3Rpb24gbG4odCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIGlmICh6bihlKSkgewogICAgICAgIGlmIChlLmNvbnRlbnRFZGl0YWJsZSA9PT0gdCkgcmV0dXJuICEwOwogICAgICAgIGlmIChlLmdldEF0dHJpYnV0ZSgiZGF0YS1tY2UtY29udGVudGVkaXRhYmxlIikgPT09IHQpIHJldHVybiAhMDsKICAgICAgfQoKICAgICAgcmV0dXJuICExOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIGZuKGUsIHQsIG4pIHsKICAgIHJldHVybiB2b2lkIDAgPT09IG4gJiYgKG4gPSBvKSwgZS5leGlzdHMoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIG4oZSwgdCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGRuKGUsIHQsIG4pIHsKICAgIHJldHVybiBlLmlzU29tZSgpICYmIHQuaXNTb21lKCkgPyB2ZS5zb21lKG4oZS5nZXRPckRpZSgpLCB0LmdldE9yRGllKCkpKSA6IHZlLm5vbmUoKTsKICB9CgogIGZ1bmN0aW9uIG1uKGUpIHsKICAgIHJldHVybiB2b2lkIDAgIT09IGUuc3R5bGUgJiYgeShlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gZ24oZSwgdCwgbikgewogICAgaWYgKCEoWChuKSB8fCB2KG4pIHx8IEUobikpKSB0aHJvdyBjb25zb2xlLmVycm9yKCJJbnZhbGlkIGNhbGwgdG8gQXR0cmlidXRlLnNldC4gS2V5ICIsIHQsICI6OiBWYWx1ZSAiLCBuLCAiOjogRWxlbWVudCAiLCBlKSwgbmV3IEVycm9yKCJBdHRyaWJ1dGUgdmFsdWUgd2FzIG5vdCBzaW1wbGUiKTsKICAgIGUuc2V0QXR0cmlidXRlKHQsIG4gKyAiIik7CiAgfQoKICBmdW5jdGlvbiBwbihlLCB0LCBuKSB7CiAgICBnbihlLmRvbSwgdCwgbik7CiAgfQoKICBmdW5jdGlvbiBobihlLCB0KSB7CiAgICB2YXIgbiA9IGUuZG9tOwogICAgbmUodCwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgZ24obiwgdCwgZSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIHZuKGUsIHQpIHsKICAgIHZhciBuID0gZS5kb20uZ2V0QXR0cmlidXRlKHQpOwogICAgcmV0dXJuIG51bGwgPT09IG4gPyB2b2lkIDAgOiBuOwogIH0KCiAgZnVuY3Rpb24gYm4oZSwgdCkgewogICAgcmV0dXJuIHZlLmZyb20odm4oZSwgdCkpOwogIH0KCiAgZnVuY3Rpb24geW4oZSwgdCkgewogICAgZS5kb20ucmVtb3ZlQXR0cmlidXRlKHQpOwogIH0KCiAgZnVuY3Rpb24gQ24oZSwgdCkgewogICAgdmFyIG4gPSBlLmRvbTsKICAgIG5lKHQsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICFmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICAgIGlmICghWChuKSkgdGhyb3cgY29uc29sZS5lcnJvcigiSW52YWxpZCBjYWxsIHRvIENTUy5zZXQuIFByb3BlcnR5ICIsIHQsICI6OiBWYWx1ZSAiLCBuLCAiOjogRWxlbWVudCAiLCBlKSwgbmV3IEVycm9yKCJDU1MgdmFsdWUgbXVzdCBiZSBhIHN0cmluZzogIiArIG4pOwogICAgICAgIG1uKGUpICYmIGUuc3R5bGUuc2V0UHJvcGVydHkodCwgbik7CiAgICAgIH0obiwgdCwgZSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIHhuKGUsIHQpIHsKICAgIHZhciBuID0gZS5kb20sCiAgICAgICAgciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG4pLmdldFByb3BlcnR5VmFsdWUodCk7CiAgICByZXR1cm4gIiIgIT09IHIgfHwgSW4oZSkgPyByIDogUW4obiwgdCk7CiAgfQoKICBmdW5jdGlvbiB3bihlLCB0KSB7CiAgICB2YXIgbiA9IGUuZG9tLAogICAgICAgIHIgPSBRbihuLCB0KTsKICAgIHJldHVybiB2ZS5mcm9tKHIpLmZpbHRlcihmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gMCA8IGUubGVuZ3RoOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBTbihlKSB7CiAgICB2YXIgdCA9IHt9LAogICAgICAgIG4gPSBlLmRvbTsKICAgIGlmIChtbihuKSkgZm9yICh2YXIgciA9IDA7IHIgPCBuLnN0eWxlLmxlbmd0aDsgcisrKSB7CiAgICAgIHZhciBvID0gbi5zdHlsZS5pdGVtKHIpOwogICAgICB0W29dID0gbi5zdHlsZVtvXTsKICAgIH0KICAgIHJldHVybiB0OwogIH0KCiAgZnVuY3Rpb24gRW4oZSkgewogICAgcmV0dXJuIE0oZSwga24pOwogIH0KCiAgZnVuY3Rpb24gTm4oZSwgdCkgewogICAgcmV0dXJuIGUuY2hpbGRyZW4gJiYgRChlLmNoaWxkcmVuLCB0KTsKICB9CgogICJ1bmRlZmluZWQiICE9IHR5cGVvZiB3aW5kb3cgfHwgRnVuY3Rpb24oInJldHVybiB0aGlzOyIpKCk7CgogIHZhciBrbiA9IEF0KDEpLAogICAgICBfbiA9IEF0KDMpLAogICAgICBBbiA9IEF0KDkpLAogICAgICBSbiA9IEF0KDExKSwKICAgICAgRG4gPSBmdW5jdGlvbiBEbihlKSB7CiAgICByZXR1cm4gVChlLmRvbS5jaGlsZE5vZGVzLCBOdC5mcm9tRG9tKTsKICB9LAogICAgICBUbiA9IHkoRWxlbWVudC5wcm90b3R5cGUuYXR0YWNoU2hhZG93KSAmJiB5KE5vZGUucHJvdG90eXBlLmdldFJvb3ROb2RlKSwKICAgICAgT24gPSBKKFRuKSwKICAgICAgQm4gPSBUbiA/IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gTnQuZnJvbURvbShlLmRvbS5nZXRSb290Tm9kZSgpKTsKICB9IDogRHQsCiAgICAgIFBuID0gZnVuY3Rpb24gUG4oZSwgdCkgewogICAgZS5kb20uYXBwZW5kQ2hpbGQodC5kb20pOwogIH0sCiAgICAgIExuID0gZnVuY3Rpb24gTG4oZSkgewogICAgdmFyIHQgPSBlLmRvbTsKICAgIG51bGwgIT09IHQucGFyZW50Tm9kZSAmJiB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCk7CiAgfSwKICAgICAgSW4gPSBmdW5jdGlvbiBJbihlKSB7CiAgICB2YXIgdCA9IF9uKGUpID8gZS5kb20ucGFyZW50Tm9kZSA6IGUuZG9tOwogICAgaWYgKG51bGwgPT0gdCB8fCBudWxsID09PSB0Lm93bmVyRG9jdW1lbnQpIHJldHVybiAhMTsKICAgIHZhciBuID0gdC5vd25lckRvY3VtZW50LAogICAgICAgIHIgPSBOdC5mcm9tRG9tKHQpLAogICAgICAgIG8gPSBCbihyKTsKICAgIHJldHVybiAoSHQobykgPyB2ZS5zb21lKG8pIDogdmUubm9uZSgpKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIG4uYm9keS5jb250YWlucyh0KTsKICAgIH0sIGEoSW4sIFZ0KSk7CiAgfSwKICAgICAgTW4gPSBmdW5jdGlvbiBNbihuLCByKSB7CiAgICByZXR1cm4gewogICAgICBsZWZ0OiBuLAogICAgICB0b3A6IHIsCiAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gdHJhbnNsYXRlKGUsIHQpIHsKICAgICAgICByZXR1cm4gTW4obiArIGUsIHIgKyB0KTsKICAgICAgfQogICAgfTsKICB9LAogICAgICBGbiA9IE1uLAogICAgICBVbiA9IGZ1bmN0aW9uIFVuKGUpIHsKICAgIHZhciB0LAogICAgICAgIG4gPSBlLmRvbSwKICAgICAgICByID0gbi5vd25lckRvY3VtZW50LmJvZHk7CiAgICByZXR1cm4gciA9PT0gbiA/IEZuKHIub2Zmc2V0TGVmdCwgci5vZmZzZXRUb3ApIDogSW4oZSkgPyAodCA9IG4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIEZuKHQubGVmdCwgdC50b3ApKSA6IEZuKDAsIDApOwogIH0sCiAgICAgIHpuID0gbm4oMSksCiAgICAgIEhuID0gb24oWyJ0ZXh0YXJlYSIsICJpbnB1dCJdKSwKICAgICAgam4gPSBubigzKSwKICAgICAgVm4gPSBubig4KSwKICAgICAgcW4gPSBubig5KSwKICAgICAgJG4gPSBubigxMSksCiAgICAgIFduID0gb24oWyJiciJdKSwKICAgICAgS24gPSBvbihbImltZyJdKSwKICAgICAgWG4gPSBsbigidHJ1ZSIpLAogICAgICBZbiA9IGxuKCJmYWxzZSIpLAogICAgICBHbiA9IG9uKFsidGQiLCAidGgiXSksCiAgICAgIEpuID0gb24oWyJ2aWRlbyIsICJhdWRpbyIsICJvYmplY3QiLCAiZW1iZWQiXSksCiAgICAgIFFuID0gZnVuY3Rpb24gUW4oZSwgdCkgewogICAgcmV0dXJuIG1uKGUpID8gZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHQpIDogIiI7CiAgfSwKICAgICAgWm4gPSBkdCgpLmJyb3dzZXIsCiAgICAgIGVyID0ge30sCiAgICAgIHRyID0gewogICAgZXhwb3J0czogZXIKICB9OwoKICBmdW5jdGlvbiBucihlKSB7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgdGhyb3cgZTsKICAgIH0sIDApOwogIH0KCiAgIWZ1bmN0aW9uICgpIHsKICAgIHZhciBlID0gdGhpcywKICAgICAgICB0ID0gZnVuY3Rpb24gdCgpIHsKICAgICAgdmFyIGUsCiAgICAgICAgICB0LAogICAgICAgICAgbiwKICAgICAgICAgIHIgPSB7CiAgICAgICAgZXhwb3J0czoge30KICAgICAgfTsKCiAgICAgIGZ1bmN0aW9uIG8oKSB7fQoKICAgICAgZnVuY3Rpb24gaShlKSB7CiAgICAgICAgaWYgKCJvYmplY3QiICE9IF90eXBlb2YodGhpcykpIHRocm93IG5ldyBUeXBlRXJyb3IoIlByb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ldyIpOwogICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCJub3QgYSBmdW5jdGlvbiIpOwogICAgICAgIHRoaXMuX3N0YXRlID0gMCwgdGhpcy5faGFuZGxlZCA9ICExLCB0aGlzLl92YWx1ZSA9IHZvaWQgMCwgdGhpcy5fZGVmZXJyZWRzID0gW10sIGYoZSwgdGhpcyk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGEobiwgcikgewogICAgICAgIGZvciAoOyAzID09PSBuLl9zdGF0ZTspIHsKICAgICAgICAgIG4gPSBuLl92YWx1ZTsKICAgICAgICB9CgogICAgICAgIDAgIT09IG4uX3N0YXRlID8gKG4uX2hhbmRsZWQgPSAhMCwgaS5faW1tZWRpYXRlRm4oZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGUsCiAgICAgICAgICAgICAgdCA9IDEgPT09IG4uX3N0YXRlID8gci5vbkZ1bGZpbGxlZCA6IHIub25SZWplY3RlZDsKCiAgICAgICAgICBpZiAobnVsbCAhPT0gdCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGUgPSB0KG4uX3ZhbHVlKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgIHJldHVybiB2b2lkIHMoci5wcm9taXNlLCBlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdShyLnByb21pc2UsIGUpOwogICAgICAgICAgfSBlbHNlICgxID09PSBuLl9zdGF0ZSA/IHUgOiBzKShyLnByb21pc2UsIG4uX3ZhbHVlKTsKICAgICAgICB9KSkgOiBuLl9kZWZlcnJlZHMucHVzaChyKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gdSh0LCBlKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmIChlID09PSB0KSB0aHJvdyBuZXcgVHlwZUVycm9yKCJBIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIHdpdGggaXRzZWxmLiIpOwoKICAgICAgICAgIGlmIChlICYmICgib2JqZWN0IiA9PSBfdHlwZW9mKGUpIHx8ICJmdW5jdGlvbiIgPT0gdHlwZW9mIGUpKSB7CiAgICAgICAgICAgIHZhciBuID0gZS50aGVuOwogICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIGkpIHJldHVybiB0Ll9zdGF0ZSA9IDMsIHQuX3ZhbHVlID0gZSwgdm9pZCBjKHQpOwogICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgbikgcmV0dXJuIHZvaWQgZigociA9IG4sIG8gPSBlLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgci5hcHBseShvLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9KSwgdCk7CiAgICAgICAgICB9CgogICAgICAgICAgdC5fc3RhdGUgPSAxLCB0Ll92YWx1ZSA9IGUsIGModCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgcyh0LCBlKTsKICAgICAgICB9CgogICAgICAgIHZhciByLCBvOwogICAgICB9CgogICAgICBmdW5jdGlvbiBzKGUsIHQpIHsKICAgICAgICBlLl9zdGF0ZSA9IDIsIGUuX3ZhbHVlID0gdCwgYyhlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gYyhlKSB7CiAgICAgICAgMiA9PT0gZS5fc3RhdGUgJiYgMCA9PT0gZS5fZGVmZXJyZWRzLmxlbmd0aCAmJiBpLl9pbW1lZGlhdGVGbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICBlLl9oYW5kbGVkIHx8IGkuX3VuaGFuZGxlZFJlamVjdGlvbkZuKGUuX3ZhbHVlKTsKICAgICAgICB9KTsKCiAgICAgICAgZm9yICh2YXIgdCA9IDAsIG4gPSBlLl9kZWZlcnJlZHMubGVuZ3RoOyB0IDwgbjsgdCsrKSB7CiAgICAgICAgICBhKGUsIGUuX2RlZmVycmVkc1t0XSk7CiAgICAgICAgfQoKICAgICAgICBlLl9kZWZlcnJlZHMgPSBudWxsOwogICAgICB9CgogICAgICBmdW5jdGlvbiBsKGUsIHQsIG4pIHsKICAgICAgICB0aGlzLm9uRnVsZmlsbGVkID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgZSA/IGUgOiBudWxsLCB0aGlzLm9uUmVqZWN0ZWQgPSAiZnVuY3Rpb24iID09IHR5cGVvZiB0ID8gdCA6IG51bGwsIHRoaXMucHJvbWlzZSA9IG47CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGYoZSwgdCkgewogICAgICAgIHZhciBuID0gITE7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBlKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIG4gfHwgKG4gPSAhMCwgdSh0LCBlKSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBuIHx8IChuID0gITAsIHModCwgZSkpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgaWYgKG4pIHJldHVybjsKICAgICAgICAgIG4gPSAhMCwgcyh0LCBlKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGUgPSByLCB0ID0gInVuZGVmaW5lZCIgIT0gdHlwZW9mIGdsb2JhbFRoaXMgPyBnbG9iYWxUaGlzIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBnbG9iYWwgPyBnbG9iYWwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiB7fSwgbiA9IHNldFRpbWVvdXQsIGkucHJvdG90eXBlLmNhdGNoID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIGUpOwogICAgICB9LCBpLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICB2YXIgbiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG8pOwogICAgICAgIHJldHVybiBhKHRoaXMsIG5ldyBsKGUsIHQsIG4pKSwgbjsKICAgICAgfSwgaS5hbGwgPSBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB1ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSk7CiAgICAgICAgcmV0dXJuIG5ldyBpKGZ1bmN0aW9uIChvLCBpKSB7CiAgICAgICAgICBpZiAoMCA9PT0gdS5sZW5ndGgpIHJldHVybiBvKFtdKTsKCiAgICAgICAgICBmb3IgKHZhciBhID0gdS5sZW5ndGgsIGUgPSAwOyBlIDwgdS5sZW5ndGg7IGUrKykgewogICAgICAgICAgICAhZnVuY3Rpb24gdChuLCBlKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGlmIChlICYmICgib2JqZWN0IiA9PSBfdHlwZW9mKGUpIHx8ICJmdW5jdGlvbiIgPT0gdHlwZW9mIGUpKSB7CiAgICAgICAgICAgICAgICAgIHZhciByID0gZS50aGVuOwogICAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgcikgcmV0dXJuIHIuY2FsbChlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgIHQobiwgZSk7CiAgICAgICAgICAgICAgICAgIH0sIGkpLCAwOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHVbbl0gPSBlLCAwID09IC0tYSAmJiBvKHUpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIGkoZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KGUsIHVbZV0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9LCBpLnJlc29sdmUgPSBmdW5jdGlvbiAodCkgewogICAgICAgIHJldHVybiB0ICYmICJvYmplY3QiID09IF90eXBlb2YodCkgJiYgdC5jb25zdHJ1Y3RvciA9PT0gaSA/IHQgOiBuZXcgaShmdW5jdGlvbiAoZSkgewogICAgICAgICAgZSh0KTsKICAgICAgICB9KTsKICAgICAgfSwgaS5yZWplY3QgPSBmdW5jdGlvbiAobikgewogICAgICAgIHJldHVybiBuZXcgaShmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgdChuKTsKICAgICAgICB9KTsKICAgICAgfSwgaS5yYWNlID0gZnVuY3Rpb24gKG8pIHsKICAgICAgICByZXR1cm4gbmV3IGkoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgIGZvciAodmFyIG4gPSAwLCByID0gby5sZW5ndGg7IG4gPCByOyBuKyspIHsKICAgICAgICAgICAgb1tuXS50aGVuKGUsIHQpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9LCBpLl9pbW1lZGlhdGVGbiA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIHNldEltbWVkaWF0ZSA/IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgc2V0SW1tZWRpYXRlKGUpOwogICAgICB9IDogZnVuY3Rpb24gKGUpIHsKICAgICAgICBuKGUsIDApOwogICAgICB9LCBpLl91bmhhbmRsZWRSZWplY3Rpb25GbiA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgInVuZGVmaW5lZCIgIT0gdHlwZW9mIGNvbnNvbGUgJiYgY29uc29sZSAmJiBjb25zb2xlLndhcm4oIlBvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjoiLCBlKTsKICAgICAgfSwgaS5fc2V0SW1tZWRpYXRlRm4gPSBmdW5jdGlvbiAoZSkgewogICAgICAgIGkuX2ltbWVkaWF0ZUZuID0gZTsKICAgICAgfSwgaS5fc2V0VW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmdW5jdGlvbiAoZSkgewogICAgICAgIGkuX3VuaGFuZGxlZFJlamVjdGlvbkZuID0gZTsKICAgICAgfSwgZS5leHBvcnRzID8gZS5leHBvcnRzID0gaSA6IHQuUHJvbWlzZSB8fCAodC5Qcm9taXNlID0gaSk7CiAgICAgIHZhciBkID0gci5leHBvcnRzOwogICAgICByZXR1cm4gewogICAgICAgIGJvbHRFeHBvcnQ6ICgidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogRnVuY3Rpb24oInJldHVybiB0aGlzOyIpKCkpLlByb21pc2UgfHwgZAogICAgICB9OwogICAgfTsKCiAgICAib2JqZWN0IiA9PSBfdHlwZW9mKGVyKSAmJiB2b2lkIDAgIT09IHRyID8gdHIuZXhwb3J0cyA9IHQoKSA6IChlID0gInVuZGVmaW5lZCIgIT0gdHlwZW9mIGdsb2JhbFRoaXMgPyBnbG9iYWxUaGlzIDogZSB8fCBzZWxmKS5FcGhveENvbnRhY3RXcmFwcGVyID0gdCgpOwogIH0oKTsKCiAgZnVuY3Rpb24gcnIoZSkgewogICAgcmV0dXJuIHNyKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIG5ldyBpcihlKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gb3IoYSkgewogICAgaWYgKCFTKGEpKSB0aHJvdyBuZXcgRXJyb3IoImNhc2VzIG11c3QgYmUgYW4gYXJyYXkiKTsKICAgIGlmICgwID09PSBhLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCJ0aGVyZSBtdXN0IGJlIGF0IGxlYXN0IG9uZSBjYXNlIik7CiAgICB2YXIgdSA9IFtdLAogICAgICAgIG4gPSB7fTsKICAgIHJldHVybiBZKGEsIGZ1bmN0aW9uIChlLCByKSB7CiAgICAgIHZhciB0ID0gd2UoZSk7CiAgICAgIGlmICgxICE9PSB0Lmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCJvbmUgYW5kIG9ubHkgb25lIG5hbWUgcGVyIGNhc2UiKTsKICAgICAgdmFyIG8gPSB0WzBdLAogICAgICAgICAgaSA9IGVbb107CiAgICAgIGlmICh2b2lkIDAgIT09IG5bb10pIHRocm93IG5ldyBFcnJvcigiZHVwbGljYXRlIGtleSBkZXRlY3RlZDoiICsgbyk7CiAgICAgIGlmICgiY2F0YSIgPT09IG8pIHRocm93IG5ldyBFcnJvcigiY2Fubm90IGhhdmUgYSBjYXNlIG5hbWVkIGNhdGEgKHNvcnJ5KSIpOwogICAgICBpZiAoIVMoaSkpIHRocm93IG5ldyBFcnJvcigiY2FzZSBhcmd1bWVudHMgbXVzdCBiZSBhbiBhcnJheSIpOwogICAgICB1LnB1c2gobyksIG5bb10gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgZm9yICh2YXIgbiA9IFtdLCBlID0gMDsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykgewogICAgICAgICAgbltlXSA9IGFyZ3VtZW50c1tlXTsKICAgICAgICB9CgogICAgICAgIHZhciB0ID0gbi5sZW5ndGg7CiAgICAgICAgaWYgKHQgIT09IGkubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoIldyb25nIG51bWJlciBvZiBhcmd1bWVudHMgdG8gY2FzZSAiICsgbyArICIuIEV4cGVjdGVkICIgKyBpLmxlbmd0aCArICIgKCIgKyBpICsgIiksIGdvdCAiICsgdCk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGZvbGQ6IGZ1bmN0aW9uIGZvbGQoKSB7CiAgICAgICAgICAgIGZvciAodmFyIGUgPSBbXSwgdCA9IDA7IHQgPCBhcmd1bWVudHMubGVuZ3RoOyB0KyspIHsKICAgICAgICAgICAgICBlW3RdID0gYXJndW1lbnRzW3RdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZS5sZW5ndGggIT09IGEubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoIldyb25nIG51bWJlciBvZiBhcmd1bWVudHMgdG8gZm9sZC4gRXhwZWN0ZWQgIiArIGEubGVuZ3RoICsgIiwgZ290ICIgKyBlLmxlbmd0aCk7CiAgICAgICAgICAgIHJldHVybiBlW3JdLmFwcGx5KG51bGwsIG4pOwogICAgICAgICAgfSwKICAgICAgICAgIG1hdGNoOiBmdW5jdGlvbiBtYXRjaChlKSB7CiAgICAgICAgICAgIHZhciB0ID0gd2UoZSk7CiAgICAgICAgICAgIGlmICh1Lmxlbmd0aCAhPT0gdC5sZW5ndGgpIHRocm93IG5ldyBFcnJvcigiV3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBtYXRjaC4gRXhwZWN0ZWQ6ICIgKyB1LmpvaW4oIiwiKSArICJcbkFjdHVhbDogIiArIHQuam9pbigiLCIpKTsKICAgICAgICAgICAgaWYgKCFqKHUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIEQodCwgZSk7CiAgICAgICAgICAgIH0pKSB0aHJvdyBuZXcgRXJyb3IoIk5vdCBhbGwgYnJhbmNoZXMgd2VyZSBzcGVjaWZpZWQgd2hlbiB1c2luZyBtYXRjaC4gU3BlY2lmaWVkOiAiICsgdC5qb2luKCIsICIpICsgIlxuUmVxdWlyZWQ6ICIgKyB1LmpvaW4oIiwgIikpOwogICAgICAgICAgICByZXR1cm4gZVtvXS5hcHBseShudWxsLCBuKTsKICAgICAgICAgIH0sCiAgICAgICAgICBsb2c6IGZ1bmN0aW9uIGxvZyhlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsIHsKICAgICAgICAgICAgICBjb25zdHJ1Y3RvcnM6IHUsCiAgICAgICAgICAgICAgY29uc3RydWN0b3I6IG8sCiAgICAgICAgICAgICAgcGFyYW1zOiBuCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH07CiAgICB9KSwgbjsKICB9CgogIHZhciBpciA9IHRyLmV4cG9ydHMuYm9sdEV4cG9ydCwKICAgICAgYXIgPSBmdW5jdGlvbiBhcihlKSB7CiAgICBmdW5jdGlvbiByKGUpIHsKICAgICAgbygpID8gaShlKSA6IHQucHVzaChlKTsKICAgIH0KCiAgICB2YXIgbiA9IHZlLm5vbmUoKSwKICAgICAgICB0ID0gW10sCiAgICAgICAgbyA9IGZ1bmN0aW9uIG8oKSB7CiAgICAgIHJldHVybiBuLmlzU29tZSgpOwogICAgfSwKICAgICAgICBpID0gZnVuY3Rpb24gaSh0KSB7CiAgICAgIG4uZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgdChlKTsKICAgICAgICB9LCAwKTsKICAgICAgfSk7CiAgICB9OwoKICAgIHJldHVybiBlKGZ1bmN0aW9uIChlKSB7CiAgICAgIG8oKSB8fCAobiA9IHZlLnNvbWUoZSksIFkodCwgaSksIHQgPSBbXSk7CiAgICB9KSwgewogICAgICBnZXQ6IHIsCiAgICAgIG1hcDogZnVuY3Rpb24gbWFwKG4pIHsKICAgICAgICByZXR1cm4gYXIoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIHIoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdChuKGUpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9LAogICAgICBpc1JlYWR5OiBvCiAgICB9OwogIH0sCiAgICAgIHVyID0gewogICAgbnU6IGFyLAogICAgcHVyZTogZnVuY3Rpb24gcHVyZSh0KSB7CiAgICAgIHJldHVybiBhcihmdW5jdGlvbiAoZSkgewogICAgICAgIGUodCk7CiAgICAgIH0pOwogICAgfQogIH0sCiAgICAgIHNyID0gZnVuY3Rpb24gc3IobikgewogICAgZnVuY3Rpb24gZShlKSB7CiAgICAgIG4oKS50aGVuKGUsIG5yKTsKICAgIH0KCiAgICByZXR1cm4gewogICAgICBtYXA6IGZ1bmN0aW9uIG1hcChlKSB7CiAgICAgICAgcmV0dXJuIHNyKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBuKCkudGhlbihlKTsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgYmluZDogZnVuY3Rpb24gYmluZCh0KSB7CiAgICAgICAgcmV0dXJuIHNyKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBuKCkudGhlbihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gdChlKS50b1Byb21pc2UoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9LAogICAgICBhbm9uQmluZDogZnVuY3Rpb24gYW5vbkJpbmQoZSkgewogICAgICAgIHJldHVybiBzcihmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gbigpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gZS50b1Byb21pc2UoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9LAogICAgICB0b0xhenk6IGZ1bmN0aW9uIHRvTGF6eSgpIHsKICAgICAgICByZXR1cm4gdXIubnUoZSk7CiAgICAgIH0sCiAgICAgIHRvQ2FjaGVkOiBmdW5jdGlvbiB0b0NhY2hlZCgpIHsKICAgICAgICB2YXIgZSA9IG51bGw7CiAgICAgICAgcmV0dXJuIHNyKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBlID0gbnVsbCA9PT0gZSA/IG4oKSA6IGU7CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIHRvUHJvbWlzZTogbiwKICAgICAgZ2V0OiBlCiAgICB9OwogIH0sCiAgICAgIGNyID0gZnVuY3Rpb24gY3IobikgewogICAgcmV0dXJuIHsKICAgICAgaXNWYWx1ZTogdywKICAgICAgaXNFcnJvcjogUiwKICAgICAgZ2V0T3I6IEoobiksCiAgICAgIGdldE9yVGh1bms6IEoobiksCiAgICAgIGdldE9yRGllOiBKKG4pLAogICAgICBvcjogZnVuY3Rpb24gb3IoZSkgewogICAgICAgIHJldHVybiBjcihuKTsKICAgICAgfSwKICAgICAgb3JUaHVuazogZnVuY3Rpb24gb3JUaHVuayhlKSB7CiAgICAgICAgcmV0dXJuIGNyKG4pOwogICAgICB9LAogICAgICBmb2xkOiBmdW5jdGlvbiBmb2xkKGUsIHQpIHsKICAgICAgICByZXR1cm4gdChuKTsKICAgICAgfSwKICAgICAgbWFwOiBmdW5jdGlvbiBtYXAoZSkgewogICAgICAgIHJldHVybiBjcihlKG4pKTsKICAgICAgfSwKICAgICAgbWFwRXJyb3I6IGZ1bmN0aW9uIG1hcEVycm9yKGUpIHsKICAgICAgICByZXR1cm4gY3Iobik7CiAgICAgIH0sCiAgICAgIGVhY2g6IGZ1bmN0aW9uIGVhY2goZSkgewogICAgICAgIGUobik7CiAgICAgIH0sCiAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoZSkgewogICAgICAgIHJldHVybiBlKG4pOwogICAgICB9LAogICAgICBleGlzdHM6IGZ1bmN0aW9uIGV4aXN0cyhlKSB7CiAgICAgICAgcmV0dXJuIGUobik7CiAgICAgIH0sCiAgICAgIGZvcmFsbDogZnVuY3Rpb24gZm9yYWxsKGUpIHsKICAgICAgICByZXR1cm4gZShuKTsKICAgICAgfSwKICAgICAgdG9PcHRpb25hbDogZnVuY3Rpb24gdG9PcHRpb25hbCgpIHsKICAgICAgICByZXR1cm4gdmUuc29tZShuKTsKICAgICAgfQogICAgfTsKICB9LAogICAgICBsciA9IGZ1bmN0aW9uIGxyKG4pIHsKICAgIHJldHVybiB7CiAgICAgIGlzVmFsdWU6IFIsCiAgICAgIGlzRXJyb3I6IHcsCiAgICAgIGdldE9yOiB1LAogICAgICBnZXRPclRodW5rOiBmdW5jdGlvbiBnZXRPclRodW5rKGUpIHsKICAgICAgICByZXR1cm4gZSgpOwogICAgICB9LAogICAgICBnZXRPckRpZTogZnVuY3Rpb24gZ2V0T3JEaWUoKSB7CiAgICAgICAgcmV0dXJuIGUgPSBTdHJpbmcobiksIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlKTsKICAgICAgICB9KCk7CiAgICAgICAgdmFyIGU7CiAgICAgIH0sCiAgICAgIG9yOiB1LAogICAgICBvclRodW5rOiBmdW5jdGlvbiBvclRodW5rKGUpIHsKICAgICAgICByZXR1cm4gZSgpOwogICAgICB9LAogICAgICBmb2xkOiBmdW5jdGlvbiBmb2xkKGUsIHQpIHsKICAgICAgICByZXR1cm4gZShuKTsKICAgICAgfSwKICAgICAgbWFwOiBmdW5jdGlvbiBtYXAoZSkgewogICAgICAgIHJldHVybiBscihuKTsKICAgICAgfSwKICAgICAgbWFwRXJyb3I6IGZ1bmN0aW9uIG1hcEVycm9yKGUpIHsKICAgICAgICByZXR1cm4gbHIoZShuKSk7CiAgICAgIH0sCiAgICAgIGVhY2g6IHRlLAogICAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKGUpIHsKICAgICAgICByZXR1cm4gbHIobik7CiAgICAgIH0sCiAgICAgIGV4aXN0czogUiwKICAgICAgZm9yYWxsOiB3LAogICAgICB0b09wdGlvbmFsOiB2ZS5ub25lCiAgICB9OwogIH0sCiAgICAgIGZyID0gewogICAgdmFsdWU6IGNyLAogICAgZXJyb3I6IGxyLAogICAgZnJvbU9wdGlvbjogZnVuY3Rpb24gZnJvbU9wdGlvbihlLCB0KSB7CiAgICAgIHJldHVybiBlLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBscih0KTsKICAgICAgfSwgY3IpOwogICAgfQogIH07CgogIGZ1bmN0aW9uIGRyKGUpIHsKICAgIHJldHVybiBlLmZvbGQodSwgdSk7CiAgfQoKICBmdW5jdGlvbiBtcihlLCB0LCBuLCByLCBvKSB7CiAgICByZXR1cm4gZShuLCByKSA/IHZlLnNvbWUobikgOiB5KG8pICYmIG8obikgPyB2ZS5ub25lKCkgOiB0KG4sIHIsIG8pOwogIH0KCiAgZnVuY3Rpb24gZ3IoZSwgdCwgbikgewogICAgZm9yICh2YXIgciA9IGUuZG9tLCBvID0geShuKSA/IG4gOiBSOyByLnBhcmVudE5vZGU7KSB7CiAgICAgIHZhciByID0gci5wYXJlbnROb2RlLAogICAgICAgICAgaSA9IE50LmZyb21Eb20ocik7CiAgICAgIGlmICh0KGkpKSByZXR1cm4gdmUuc29tZShpKTsKICAgICAgaWYgKG8oaSkpIGJyZWFrOwogICAgfQoKICAgIHJldHVybiB2ZS5ub25lKCk7CiAgfQoKICBmdW5jdGlvbiBwcihlLCB0LCBuKSB7CiAgICByZXR1cm4gbXIoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgcmV0dXJuIHQoZSk7CiAgICB9LCBnciwgZSwgdCwgbik7CiAgfQoKICBmdW5jdGlvbiBocihlLCB0LCBuKSB7CiAgICByZXR1cm4gZ3IoZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHplKGUsIHQpOwogICAgfSwgbik7CiAgfQoKICBmdW5jdGlvbiB2cihlLCB0KSB7CiAgICByZXR1cm4gbiA9IHQsIEhlKHIgPSB2b2lkIDAgPT09IGUgPyBkb2N1bWVudCA6IGUuZG9tKSA/IHZlLm5vbmUoKSA6IHZlLmZyb20oci5xdWVyeVNlbGVjdG9yKG4pKS5tYXAoTnQuZnJvbURvbSk7CiAgICB2YXIgbiwgcjsKICB9CgogIGZ1bmN0aW9uIGJyKGUsIHQsIG4pIHsKICAgIHJldHVybiBtcih6ZSwgaHIsIGUsIHQsIG4pOwogIH0KCiAgZnVuY3Rpb24geXIoZSwgdCkgewogICAgcmV0dXJuICJudW1iZXIiICE9IHR5cGVvZiB0ICYmICh0ID0gMCksIHNldFRpbWVvdXQoZSwgdCk7CiAgfQoKICBmdW5jdGlvbiBDcihlLCB0KSB7CiAgICByZXR1cm4gIm51bWJlciIgIT0gdHlwZW9mIHQgJiYgKHQgPSAxKSwgc2V0SW50ZXJ2YWwoZSwgdCk7CiAgfQoKICBmdW5jdGlvbiB4cihuLCByKSB7CiAgICBmdW5jdGlvbiBlKCkgewogICAgICBmb3IgKHZhciBlID0gW10sIHQgPSAwOyB0IDwgYXJndW1lbnRzLmxlbmd0aDsgdCsrKSB7CiAgICAgICAgZVt0XSA9IGFyZ3VtZW50c1t0XTsKICAgICAgfQoKICAgICAgY2xlYXJUaW1lb3V0KG8pLCBvID0geXIoZnVuY3Rpb24gKCkgewogICAgICAgIG4uYXBwbHkodGhpcywgZSk7CiAgICAgIH0sIHIpOwogICAgfQoKICAgIHZhciBvOwogICAgcmV0dXJuIGUuc3RvcCA9IGZ1bmN0aW9uICgpIHsKICAgICAgY2xlYXJUaW1lb3V0KG8pOwogICAgfSwgZTsKICB9CgogIGZ1bmN0aW9uIHdyKG0sIGcpIHsKICAgIGZ1bmN0aW9uIG4oZSwgdCwgbikgewogICAgICB2YXIgciwKICAgICAgICAgIG8gPSBFdC5fYWRkQ2FjaGVTdWZmaXgoZSksCiAgICAgICAgICBpID0gdWUoaCwgbykuZ2V0T3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGlkOiAibWNlLXUiICsgcCsrLAogICAgICAgICAgcGFzc2VkOiBbXSwKICAgICAgICAgIGZhaWxlZDogW10sCiAgICAgICAgICBjb3VudDogMAogICAgICAgIH07CiAgICAgIH0pOwoKICAgICAgZnVuY3Rpb24gYShlLCB0KSB7CiAgICAgICAgZm9yICh2YXIgbiA9IGUubGVuZ3RoOyBuLS07KSB7CiAgICAgICAgICBlW25dKCk7CiAgICAgICAgfQoKICAgICAgICBpLnN0YXR1cyA9IHQsIGkucGFzc2VkID0gW10sIGkuZmFpbGVkID0gW10sIHIgJiYgKHIub25sb2FkID0gbnVsbCwgci5vbmVycm9yID0gbnVsbCwgciA9IG51bGwpOwogICAgICB9CgogICAgICBmdW5jdGlvbiB1KCkgewogICAgICAgIHJldHVybiBhKGkucGFzc2VkLCAyKSwgMDsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gcygpIHsKICAgICAgICByZXR1cm4gYShpLmZhaWxlZCwgMyk7CiAgICAgIH0KCiAgICAgIChoW29dID0gaSkuY291bnQrKzsKCiAgICAgIHZhciBjLAogICAgICAgICAgbCwKICAgICAgICAgIGYsCiAgICAgICAgICBkID0gZnVuY3Rpb24gZCgpIHsKICAgICAgICB2YXIgZSA9IGQ7CiAgICAgICAgIWZ1bmN0aW9uICgpIHsKICAgICAgICAgIGZvciAodmFyIGUgPSBtLnN0eWxlU2hlZXRzLCB0ID0gZS5sZW5ndGg7IHQtLTspIHsKICAgICAgICAgICAgdmFyIG4gPSBlW3RdLm93bmVyTm9kZTsKICAgICAgICAgICAgaWYgKG4gJiYgbi5pZCA9PT0gci5pZCkgcmV0dXJuIHUoKSwgMTsKICAgICAgICAgIH0KICAgICAgICB9KCkgJiYgKERhdGUubm93KCkgLSBsIDwgeSA/IF9yLnNldFRpbWVvdXQoZSkgOiBzKCkpOwogICAgICB9OwoKICAgICAgdCAmJiBpLnBhc3NlZC5wdXNoKHQpLCBuICYmIGkuZmFpbGVkLnB1c2gobiksIDEgIT09IGkuc3RhdHVzICYmICgyICE9PSBpLnN0YXR1cyA/IDMgIT09IGkuc3RhdHVzID8gKGkuc3RhdHVzID0gMSwgaG4oYyA9IE50LmZyb21UYWcoImxpbmsiLCBiLmRvbSksIHsKICAgICAgICByZWw6ICJzdHlsZXNoZWV0IiwKICAgICAgICB0eXBlOiAidGV4dC9jc3MiLAogICAgICAgIGlkOiBpLmlkCiAgICAgIH0pLCBsID0gRGF0ZS5ub3coKSwgZy5jb250ZW50Q3NzQ29ycyAmJiBwbihjLCAiY3Jvc3NPcmlnaW4iLCAiYW5vbnltb3VzIiksIGcucmVmZXJyZXJQb2xpY3kgJiYgcG4oYywgInJlZmVycmVycG9saWN5IiwgZy5yZWZlcnJlclBvbGljeSksIChyID0gYy5kb20pLm9ubG9hZCA9IGQsIHIub25lcnJvciA9IHMsIGYgPSBjLCBQbihqdCh2KSwgZiksIHBuKGMsICJocmVmIiwgbykpIDogcygpIDogdSgpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvKHQpIHsKICAgICAgcmV0dXJuIHJyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgbih0LCBpKGUsIEooZnIudmFsdWUodCkpKSwgaShlLCBKKGZyLmVycm9yKHQpKSkpOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiB0KGUpIHsKICAgICAgdmFyIG4gPSBFdC5fYWRkQ2FjaGVTdWZmaXgoZSk7CgogICAgICB1ZShoLCBuKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIHQ7CiAgICAgICAgMCA9PSAtLWUuY291bnQgJiYgKGRlbGV0ZSBoW25dLCB0ID0gZS5pZCwgdnIoanQodiksICIjIiArIHQpLmVhY2goTG4pKTsKICAgICAgfSk7CiAgICB9CgogICAgdm9pZCAwID09PSBnICYmIChnID0ge30pOwogICAgdmFyIHAgPSAwLAogICAgICAgIGggPSB7fSwKICAgICAgICB2ID0gTnQuZnJvbURvbShtKSwKICAgICAgICBiID0gRHQodiksCiAgICAgICAgeSA9IGcubWF4TG9hZFRpbWUgfHwgNWUzOwogICAgcmV0dXJuIHsKICAgICAgbG9hZDogbiwKICAgICAgbG9hZEFsbDogZnVuY3Rpb24gbG9hZEFsbChlLCBuLCByKSB7CiAgICAgICAgdmFyIGEsCiAgICAgICAgICAgIHQgPSBUKGUsIG8pOwogICAgICAgIGEgPSB0LCBycihmdW5jdGlvbiAocikgewogICAgICAgICAgdmFyIG8gPSBbXSwKICAgICAgICAgICAgICBpID0gMDsKICAgICAgICAgIDAgPT09IGEubGVuZ3RoID8gcihbXSkgOiBZKGEsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgIHZhciBuOwogICAgICAgICAgICBlLmdldCgobiA9IHQsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgb1tuXSA9IGUsICsraSA+PSBhLmxlbmd0aCAmJiByKG8pOwogICAgICAgICAgICB9KSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KS5nZXQoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0ID0gQihlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gZS5pc1ZhbHVlKCk7CiAgICAgICAgICB9KTsKICAgICAgICAgIDAgPCB0LmZhaWwubGVuZ3RoID8gcih0LmZhaWwubWFwKGRyKSkgOiBuKHQucGFzcy5tYXAoZHIpKTsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgdW5sb2FkOiB0LAogICAgICB1bmxvYWRBbGw6IGZ1bmN0aW9uIHVubG9hZEFsbChlKSB7CiAgICAgICAgWShlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdChlKTsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgX3NldFJlZmVycmVyUG9saWN5OiBmdW5jdGlvbiBfc2V0UmVmZXJyZXJQb2xpY3koZSkgewogICAgICAgIGcucmVmZXJyZXJQb2xpY3kgPSBlOwogICAgICB9CiAgICB9OwogIH0KCiAgb3IoW3sKICAgIGJvdGhFcnJvcnM6IFsiZXJyb3IxIiwgImVycm9yMiJdCiAgfSwgewogICAgZmlyc3RFcnJvcjogWyJlcnJvcjEiLCAidmFsdWUyIl0KICB9LCB7CiAgICBzZWNvbmRFcnJvcjogWyJ2YWx1ZTEiLCAiZXJyb3IyIl0KICB9LCB7CiAgICBib3RoVmFsdWVzOiBbInZhbHVlMSIsICJ2YWx1ZTIiXQogIH1dKTsKCiAgdmFyIFNyLAogICAgICBFciwKICAgICAgTnIgPSBmdW5jdGlvbiBOcihlLCB0KSB7CiAgICByZXR1cm4gTShlLmRvbS5jaGlsZE5vZGVzLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gdChOdC5mcm9tRG9tKGUpKTsKICAgIH0pLm1hcChOdC5mcm9tRG9tKTsKICB9LAogICAgICBrciA9IHdpbmRvdy5Qcm9taXNlIHx8IGlyLAogICAgICBfciA9IHsKICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZTogZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGUsIHQpIHsKICAgICAgU3IgPyBTci50aGVuKGUpIDogU3IgPSBuZXcga3IoZnVuY3Rpb24gKGUpIHsKICAgICAgICAoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgIGZvciAodmFyIG4gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLCByID0gWyJtcyIsICJtb3oiLCAid2Via2l0Il0sIG8gPSAwOyBvIDwgci5sZW5ndGggJiYgIW47IG8rKykgewogICAgICAgICAgICBuID0gd2luZG93W3Jbb10gKyAiUmVxdWVzdEFuaW1hdGlvbkZyYW1lIl07CiAgICAgICAgICB9CgogICAgICAgICAgKG4gPSBuIHx8IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGUsIDApOwogICAgICAgICAgfSkoZSwgdCk7CiAgICAgICAgfSkoZSwgdCA9IHQgfHwgZG9jdW1lbnQuYm9keSk7CiAgICAgIH0pLnRoZW4oZSk7CiAgICB9LAogICAgc2V0VGltZW91dDogeXIsCiAgICBzZXRJbnRlcnZhbDogQ3IsCiAgICBzZXRFZGl0b3JUaW1lb3V0OiBmdW5jdGlvbiBzZXRFZGl0b3JUaW1lb3V0KGUsIHQsIG4pIHsKICAgICAgcmV0dXJuIHlyKGZ1bmN0aW9uICgpIHsKICAgICAgICBlLnJlbW92ZWQgfHwgdCgpOwogICAgICB9LCBuKTsKICAgIH0sCiAgICBzZXRFZGl0b3JJbnRlcnZhbDogZnVuY3Rpb24gc2V0RWRpdG9ySW50ZXJ2YWwoZSwgdCwgbikgewogICAgICB2YXIgciA9IENyKGZ1bmN0aW9uICgpIHsKICAgICAgICBlLnJlbW92ZWQgPyBjbGVhckludGVydmFsKHIpIDogdCgpOwogICAgICB9LCBuKTsKICAgICAgcmV0dXJuIHI7CiAgICB9LAogICAgZGVib3VuY2U6IHhyLAogICAgdGhyb3R0bGU6IHhyLAogICAgY2xlYXJJbnRlcnZhbDogZnVuY3Rpb24gKF9jbGVhckludGVydmFsKSB7CiAgICAgIGZ1bmN0aW9uIGNsZWFySW50ZXJ2YWwoX3gyKSB7CiAgICAgICAgcmV0dXJuIF9jbGVhckludGVydmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIGNsZWFySW50ZXJ2YWwudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF9jbGVhckludGVydmFsLnRvU3RyaW5nKCk7CiAgICAgIH07CgogICAgICByZXR1cm4gY2xlYXJJbnRlcnZhbDsKICAgIH0oZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGNsZWFySW50ZXJ2YWwoZSk7CiAgICB9KSwKICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKF9jbGVhclRpbWVvdXQpIHsKICAgICAgZnVuY3Rpb24gY2xlYXJUaW1lb3V0KF94MykgewogICAgICAgIHJldHVybiBfY2xlYXJUaW1lb3V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIGNsZWFyVGltZW91dC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX2NsZWFyVGltZW91dC50b1N0cmluZygpOwogICAgICB9OwoKICAgICAgcmV0dXJuIGNsZWFyVGltZW91dDsKICAgIH0oZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChlKTsKICAgIH0pCiAgfSwKICAgICAgQXIgPSAoRXIgPSBuZXcgV2Vha01hcCgpLCB7CiAgICBmb3JFbGVtZW50OiBmdW5jdGlvbiBmb3JFbGVtZW50KGUsIHQpIHsKICAgICAgdmFyIG4gPSBCbihlKS5kb207CiAgICAgIHJldHVybiB2ZS5mcm9tKEVyLmdldChuKSkuZ2V0T3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGUgPSB3cihuLCB0KTsKICAgICAgICByZXR1cm4gRXIuc2V0KG4sIGUpLCBlOwogICAgICB9KTsKICAgIH0KICB9KSwKICAgICAgUnIgPSAoRHIucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5ub2RlOwogIH0sIERyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB0aGlzLm5vZGUgPSB0aGlzLmZpbmRTaWJsaW5nKHRoaXMubm9kZSwgImZpcnN0Q2hpbGQiLCAibmV4dFNpYmxpbmciLCBlKSwgdGhpcy5ub2RlOwogIH0sIERyLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB0aGlzLm5vZGUgPSB0aGlzLmZpbmRTaWJsaW5nKHRoaXMubm9kZSwgImxhc3RDaGlsZCIsICJwcmV2aW91c1NpYmxpbmciLCBlKSwgdGhpcy5ub2RlOwogIH0sIERyLnByb3RvdHlwZS5wcmV2MiA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gdGhpcy5ub2RlID0gdGhpcy5maW5kUHJldmlvdXNOb2RlKHRoaXMubm9kZSwgImxhc3RDaGlsZCIsICJwcmV2aW91c1NpYmxpbmciLCBlKSwgdGhpcy5ub2RlOwogIH0sIERyLnByb3RvdHlwZS5maW5kU2libGluZyA9IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7CiAgICB2YXIgbywgaTsKCiAgICBpZiAoZSkgewogICAgICBpZiAoIXIgJiYgZVt0XSkgcmV0dXJuIGVbdF07CgogICAgICBpZiAoZSAhPT0gdGhpcy5yb290Tm9kZSkgewogICAgICAgIGlmIChvID0gZVtuXSkgcmV0dXJuIG87CgogICAgICAgIGZvciAoaSA9IGUucGFyZW50Tm9kZTsgaSAmJiBpICE9PSB0aGlzLnJvb3ROb2RlOyBpID0gaS5wYXJlbnROb2RlKSB7CiAgICAgICAgICBpZiAobyA9IGlbbl0pIHJldHVybiBvOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIERyLnByb3RvdHlwZS5maW5kUHJldmlvdXNOb2RlID0gZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsKICAgIHZhciBvLCBpLCBhOwoKICAgIGlmIChlICYmIChvID0gZVtuXSwgIXRoaXMucm9vdE5vZGUgfHwgbyAhPT0gdGhpcy5yb290Tm9kZSkpIHsKICAgICAgaWYgKG8pIHsKICAgICAgICBpZiAoIXIpIGZvciAoYSA9IG9bdF07IGE7IGEgPSBhW3RdKSB7CiAgICAgICAgICBpZiAoIWFbdF0pIHJldHVybiBhOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbzsKICAgICAgfQoKICAgICAgcmV0dXJuIChpID0gZS5wYXJlbnROb2RlKSAmJiBpICE9PSB0aGlzLnJvb3ROb2RlID8gaSA6IHZvaWQgMDsKICAgIH0KICB9LCBEcik7CgogIGZ1bmN0aW9uIERyKGUsIHQpIHsKICAgIHRoaXMubm9kZSA9IGUsIHRoaXMucm9vdE5vZGUgPSB0LCB0aGlzLmN1cnJlbnQgPSB0aGlzLmN1cnJlbnQuYmluZCh0aGlzKSwgdGhpcy5uZXh0ID0gdGhpcy5uZXh0LmJpbmQodGhpcyksIHRoaXMucHJldiA9IHRoaXMucHJldi5iaW5kKHRoaXMpLCB0aGlzLnByZXYyID0gdGhpcy5wcmV2Mi5iaW5kKHRoaXMpOwogIH0KCiAgZnVuY3Rpb24gVHIodCkgewogICAgdmFyIG47CiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIG4gPSBuIHx8IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgZm9yICh2YXIgbiA9IHt9LCByID0gMCwgbyA9IGUubGVuZ3RoOyByIDwgbzsgcisrKSB7CiAgICAgICAgICB2YXIgaSA9IGVbcl07CiAgICAgICAgICBuW1N0cmluZyhpKV0gPSB0KGksIHIpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG47CiAgICAgIH0odCwgdyksIE5lKG4sIGt0KGUpKTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBPcihlKSB7CiAgICByZXR1cm4ga24oZSkgJiYgIWxvKGUpOwogIH0KCiAgZnVuY3Rpb24gQnIoZSkgewogICAgcmV0dXJuIGtuKGUpICYmICJiciIgPT09IGt0KGUpOwogIH0KCiAgZnVuY3Rpb24gUHIoZSkgewogICAgcmV0dXJuIEVvKGUpICYmIChlID0gZS5wYXJlbnROb2RlKSwgU28oZSkgJiYgZS5oYXNBdHRyaWJ1dGUoImRhdGEtbWNlLWNhcmV0Iik7CiAgfQoKICBmdW5jdGlvbiBMcihlKSB7CiAgICByZXR1cm4gRW8oZSkgJiYgeG8oZS5kYXRhKTsKICB9CgogIGZ1bmN0aW9uIElyKGUpIHsKICAgIHJldHVybiBQcihlKSB8fCBMcihlKTsKICB9CgogIGZ1bmN0aW9uIE1yKGUpIHsKICAgIHJldHVybiBlLmZpcnN0Q2hpbGQgIT09IGUubGFzdENoaWxkIHx8ICFXbihlLmZpcnN0Q2hpbGQpOwogIH0KCiAgZnVuY3Rpb24gRnIoZSkgewogICAgdmFyIHQgPSBlLmNvbnRhaW5lcigpOwogICAgcmV0dXJuICEham4odCkgJiYgKHQuZGF0YS5jaGFyQXQoZS5vZmZzZXQoKSkgPT09IENvIHx8IGUuaXNBdFN0YXJ0KCkgJiYgTHIodC5wcmV2aW91c1NpYmxpbmcpKTsKICB9CgogIGZ1bmN0aW9uIFVyKGUpIHsKICAgIHZhciB0ID0gZS5jb250YWluZXIoKTsKICAgIHJldHVybiAhIWpuKHQpICYmICh0LmRhdGEuY2hhckF0KGUub2Zmc2V0KCkgLSAxKSA9PT0gQ28gfHwgZS5pc0F0RW5kKCkgJiYgTHIodC5uZXh0U2libGluZykpOwogIH0KCiAgZnVuY3Rpb24genIoZSkgewogICAgcmV0dXJuIGUgJiYgZS5oYXNBdHRyaWJ1dGUoImRhdGEtbWNlLWNhcmV0IikgPyAoc24obiA9ICh0ID0gZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYnIiKSlbdC5sZW5ndGggLSAxXSkgJiYgbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pLCBlLnJlbW92ZUF0dHJpYnV0ZSgiZGF0YS1tY2UtY2FyZXQiKSwgZS5yZW1vdmVBdHRyaWJ1dGUoImRhdGEtbWNlLWJvZ3VzIiksIGUucmVtb3ZlQXR0cmlidXRlKCJzdHlsZSIpLCBlLnJlbW92ZUF0dHJpYnV0ZSgiX21vel9hYnNwb3MiKSwgZSkgOiBudWxsOwogICAgdmFyIHQsIG47CiAgfQoKICBmdW5jdGlvbiBIcihlKSB7CiAgICByZXR1cm4gUHIoZS5zdGFydENvbnRhaW5lcik7CiAgfQoKICBmdW5jdGlvbiBqcihlKSB7CiAgICByZXR1cm4gIVBvKGUpICYmIChEbyhlKSA/ICFUbyhlLnBhcmVudE5vZGUpIDogT28oZSkgfHwgUm8oZSkgfHwgQm8oZSkgfHwgTG8oZSkpOwogIH0KCiAgZnVuY3Rpb24gVnIoZSwgdCkgewogICAgcmV0dXJuIGpyKGUpICYmIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIGZvciAoZSA9IGUucGFyZW50Tm9kZTsgZSAmJiBlICE9PSB0OyBlID0gZS5wYXJlbnROb2RlKSB7CiAgICAgICAgaWYgKExvKGUpKSByZXR1cm4gITE7CiAgICAgICAgaWYgKF9vKGUpKSByZXR1cm4gITA7CiAgICAgIH0KCiAgICAgIHJldHVybiAhMDsKICAgIH0oZSwgdCk7CiAgfQoKICBmdW5jdGlvbiBxcihlKSB7CiAgICByZXR1cm4gSW8udGVzdChlKTsKICB9CgogIGZ1bmN0aW9uICRyKGUsIHQpIHsKICAgIHJldHVybiBqcihlKSAmJiAhMSA9PT0gKGEgPSB0LCBqbihpID0gZSkgJiYgcXIoaS5kYXRhKSAmJiAhMSA9PT0gKG4gPSBpLCByID0gTnQuZnJvbURvbShhKSwgaHIoTnQuZnJvbURvbShuKSwgInByZSxjb2RlIiwgQShqZSwgcikpLmlzU29tZSgpKSkgfHwgem4obyA9IGUpICYmICJBIiA9PT0gby5ub2RlTmFtZSAmJiAhby5oYXNBdHRyaWJ1dGUoImhyZWYiKSAmJiAoby5oYXNBdHRyaWJ1dGUoIm5hbWUiKSB8fCBvLmhhc0F0dHJpYnV0ZSgiaWQiKSkgfHwgTW8oZSk7CiAgICB2YXIgbiwgciwgbywgaSwgYTsKICB9CgogIGZ1bmN0aW9uIFdyKGUsIHQpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiA9IDA7CiAgICAgIGlmICgkcihlLCBlKSkgcmV0dXJuICExOwogICAgICB2YXIgciA9IGUuZmlyc3RDaGlsZDsKICAgICAgaWYgKCFyKSByZXR1cm4gITA7CiAgICAgIHZhciBvID0gbmV3IFJyKHIsIGUpOwoKICAgICAgZG8gewogICAgICAgIGlmICh0KSB7CiAgICAgICAgICBpZiAoVW8ocikpIHsKICAgICAgICAgICAgciA9IG8ubmV4dCghMCk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChGbyhyKSkgewogICAgICAgICAgICByID0gby5uZXh0KCk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKFduKHIpKSBuKyssIHIgPSBvLm5leHQoKTtlbHNlIHsKICAgICAgICAgIGlmICgkcihyLCBlKSkgcmV0dXJuICExOwogICAgICAgICAgciA9IG8ubmV4dCgpOwogICAgICAgIH0KICAgICAgfSB3aGlsZSAocik7CgogICAgICByZXR1cm4gbiA8PSAxOwogICAgfShlLmRvbSwgdCA9IHZvaWQgMCA9PT0gdCB8fCB0KTsKICB9CgogIGZ1bmN0aW9uIEtyKGUsIHQpIHsKICAgIHJldHVybiBWKGUpICYmICgkcihlLCB0KSB8fCBPcihOdC5mcm9tRG9tKGUpKSk7CiAgfQoKICBmdW5jdGlvbiBYcihlKSB7CiAgICByZXR1cm4gInNwYW4iID09PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgJiYgImJvb2ttYXJrIiA9PT0gZS5nZXRBdHRyaWJ1dGUoImRhdGEtbWNlLXR5cGUiKTsKICB9CgogIGZ1bmN0aW9uIFlyKGUsIHQpIHsKICAgIHZhciBuLAogICAgICAgIHIsCiAgICAgICAgbywKICAgICAgICBpID0ge307CgogICAgaWYgKGUpIHsKICAgICAgZm9yIChlID0gZS5zcGxpdCgiLCIpLCB0ID0gdCB8fCAxMCwgbiA9IDA7IG4gPCBlLmxlbmd0aDsgbiArPSAyKSB7CiAgICAgICAgciA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoZVtuXSwgdCkpLCBLb1tyXSB8fCAobyA9ICImIiArIGVbbiArIDFdICsgIjsiLCBpW3JdID0gbywgaVtvXSA9IHIpOwogICAgICB9CgogICAgICByZXR1cm4gaTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIEdyKGUsIHQpIHsKICAgIHJldHVybiBlLnJlcGxhY2UodCA/IGpvIDogVm8sIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBLb1tlXSB8fCBlOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBKcihlLCB0KSB7CiAgICByZXR1cm4gZS5yZXBsYWNlKHQgPyBqbyA6IFZvLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gMSA8IGUubGVuZ3RoID8gIiYjIiArICgxMDI0ICogKGUuY2hhckNvZGVBdCgwKSAtIDU1Mjk2KSArIChlLmNoYXJDb2RlQXQoMSkgLSA1NjMyMCkgKyA2NTUzNikgKyAiOyIgOiBLb1tlXSB8fCAiJiMiICsgZS5jaGFyQ29kZUF0KDApICsgIjsiOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBRcihlLCB0LCBuKSB7CiAgICByZXR1cm4gbiA9IG4gfHwgWW8sIGUucmVwbGFjZSh0ID8gam8gOiBWbywgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIEtvW2VdIHx8IG5bZV0gfHwgZTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gWnIoZSwgdCkgewogICAgcmV0dXJuIChlID0gRXQudHJpbShlKSkgPyBlLnNwbGl0KHQgfHwgIiAiKSA6IFtdOwogIH0KCiAgZnVuY3Rpb24gZW8oZSwgbikgewogICAgdmFyIHI7CiAgICByZXR1cm4gZSAmJiAociA9IHt9LCBlaShlID0gInN0cmluZyIgPT0gdHlwZW9mIGUgPyB7CiAgICAgICIqIjogZQogICAgfSA6IGUsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHJbdF0gPSByW3QudG9VcHBlckNhc2UoKV0gPSAoIm1hcCIgPT09IG4gPyBabyA6IG5pKShlLCAvWywgXS8pOwogICAgfSkpLCByOwogIH0KCiAgZnVuY3Rpb24gdG8oaSkgewogICAgZnVuY3Rpb24gZShlLCB0LCBuKSB7CiAgICAgIHZhciByID0gaVtlXTsKICAgICAgcmV0dXJuIHIgPyByID0gWm8ociwgL1ssIF0vLCBabyhyLnRvVXBwZXJDYXNlKCksIC9bLCBdLykpIDogKHIgPSBKb1tlXSkgfHwgKHIgPSBabyh0LCAiICIsIFpvKHQudG9VcHBlckNhc2UoKSwgIiAiKSksIHIgPSB0aShyLCBuKSwgSm9bZV0gPSByKSwgcjsKICAgIH0KCiAgICB2YXIgdCwKICAgICAgICBzLAogICAgICAgIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGEsCiAgICAgICAgdSwKICAgICAgICBjLAogICAgICAgIFMgPSB7fSwKICAgICAgICBsID0ge30sCiAgICAgICAgRSA9IFtdLAogICAgICAgIGYgPSB7fSwKICAgICAgICBkID0ge30sCiAgICAgICAgbSA9ICh0ID0gKGkgPSBpIHx8IHt9KS5zY2hlbWEsIGMgPSB7fSwgSm9bdF0gfHwgKHMgPSAiaWQgYWNjZXNza2V5IGNsYXNzIGRpciBsYW5nIHN0eWxlIHRhYmluZGV4IHRpdGxlIHJvbGUiLCBuID0gImFkZHJlc3MgYmxvY2txdW90ZSBkaXYgZGwgZmllbGRzZXQgZm9ybSBoMSBoMiBoMyBoNCBoNSBoNiBociBtZW51IG9sIHAgcHJlIHRhYmxlIHVsIiwgciA9ICJhIGFiYnIgYiBiZG8gYnIgYnV0dG9uIGNpdGUgY29kZSBkZWwgZGZuIGVtIGVtYmVkIGkgaWZyYW1lIGltZyBpbnB1dCBpbnMga2JkIGxhYmVsIG1hcCBub3NjcmlwdCBvYmplY3QgcSBzIHNhbXAgc2NyaXB0IHNlbGVjdCBzbWFsbCBzcGFuIHN0cm9uZyBzdWIgc3VwIHRleHRhcmVhIHUgdmFyICN0ZXh0ICNjb21tZW50IiwgImh0bWw0IiAhPT0gdCAmJiAocyArPSAiIGNvbnRlbnRlZGl0YWJsZSBjb250ZXh0bWVudSBkcmFnZ2FibGUgZHJvcHpvbmUgaGlkZGVuIHNwZWxsY2hlY2sgdHJhbnNsYXRlIiwgbiArPSAiIGFydGljbGUgYXNpZGUgZGV0YWlscyBkaWFsb2cgZmlndXJlIG1haW4gaGVhZGVyIGZvb3RlciBoZ3JvdXAgc2VjdGlvbiBuYXYiLCByICs9ICIgYXVkaW8gY2FudmFzIGNvbW1hbmQgZGF0YWxpc3QgbWFyayBtZXRlciBvdXRwdXQgcGljdHVyZSBwcm9ncmVzcyB0aW1lIHdiciB2aWRlbyBydWJ5IGJkaSBrZXlnZW4iKSwgImh0bWw1LXN0cmljdCIgIT09IHQgJiYgKHMgKz0gIiB4bWw6bGFuZyIsIHIgPSBbciwgdSA9ICJhY3JvbnltIGFwcGxldCBiYXNlZm9udCBiaWcgZm9udCBzdHJpa2UgdHQiXS5qb2luKCIgIiksIGVpKFpyKHUpLCBmdW5jdGlvbiAoZSkgewogICAgICBnKGUsICIiLCByKTsKICAgIH0pLCBuID0gW24sIGEgPSAiY2VudGVyIGRpciBpc2luZGV4IG5vZnJhbWVzIl0uam9pbigiICIpLCBvID0gW24sIHJdLmpvaW4oIiAiKSwgZWkoWnIoYSksIGZ1bmN0aW9uIChlKSB7CiAgICAgIGcoZSwgIiIsIG8pOwogICAgfSkpLCBvID0gbyB8fCBbbiwgcl0uam9pbigiICIpLCBnKCJodG1sIiwgIm1hbmlmZXN0IiwgImhlYWQgYm9keSIpLCBnKCJoZWFkIiwgIiIsICJiYXNlIGNvbW1hbmQgbGluayBtZXRhIG5vc2NyaXB0IHNjcmlwdCBzdHlsZSB0aXRsZSIpLCBnKCJ0aXRsZSBociBub3NjcmlwdCBiciIpLCBnKCJiYXNlIiwgImhyZWYgdGFyZ2V0IiksIGcoImxpbmsiLCAiaHJlZiByZWwgbWVkaWEgaHJlZmxhbmcgdHlwZSBzaXplcyBocmVmbGFuZyIpLCBnKCJtZXRhIiwgIm5hbWUgaHR0cC1lcXVpdiBjb250ZW50IGNoYXJzZXQiKSwgZygic3R5bGUiLCAibWVkaWEgdHlwZSBzY29wZWQiKSwgZygic2NyaXB0IiwgInNyYyBhc3luYyBkZWZlciB0eXBlIGNoYXJzZXQiKSwgZygiYm9keSIsICJvbmFmdGVycHJpbnQgb25iZWZvcmVwcmludCBvbmJlZm9yZXVubG9hZCBvbmJsdXIgb25lcnJvciBvbmZvY3VzIG9uaGFzaGNoYW5nZSBvbmxvYWQgb25tZXNzYWdlIG9ub2ZmbGluZSBvbm9ubGluZSBvbnBhZ2VoaWRlIG9ucGFnZXNob3cgb25wb3BzdGF0ZSBvbnJlc2l6ZSBvbnNjcm9sbCBvbnN0b3JhZ2Ugb251bmxvYWQiLCBvKSwgZygiYWRkcmVzcyBkdCBkZCBkaXYgY2FwdGlvbiIsICIiLCBvKSwgZygiaDEgaDIgaDMgaDQgaDUgaDYgcHJlIHAgYWJiciBjb2RlIHZhciBzYW1wIGtiZCBzdWIgc3VwIGkgYiB1IGJkbyBzcGFuIGxlZ2VuZCBlbSBzdHJvbmcgc21hbGwgcyBjaXRlIGRmbiIsICIiLCByKSwgZygiYmxvY2txdW90ZSIsICJjaXRlIiwgbyksIGcoIm9sIiwgInJldmVyc2VkIHN0YXJ0IHR5cGUiLCAibGkiKSwgZygidWwiLCAiIiwgImxpIiksIGcoImxpIiwgInZhbHVlIiwgbyksIGcoImRsIiwgIiIsICJkdCBkZCIpLCBnKCJhIiwgImhyZWYgdGFyZ2V0IHJlbCBtZWRpYSBocmVmbGFuZyB0eXBlIiwgciksIGcoInEiLCAiY2l0ZSIsIHIpLCBnKCJpbnMgZGVsIiwgImNpdGUgZGF0ZXRpbWUiLCBvKSwgZygiaW1nIiwgInNyYyBzaXplcyBzcmNzZXQgYWx0IHVzZW1hcCBpc21hcCB3aWR0aCBoZWlnaHQiKSwgZygiaWZyYW1lIiwgInNyYyBuYW1lIHdpZHRoIGhlaWdodCIsIG8pLCBnKCJlbWJlZCIsICJzcmMgdHlwZSB3aWR0aCBoZWlnaHQiKSwgZygib2JqZWN0IiwgImRhdGEgdHlwZSB0eXBlbXVzdG1hdGNoIG5hbWUgdXNlbWFwIGZvcm0gd2lkdGggaGVpZ2h0IiwgW28sICJwYXJhbSJdLmpvaW4oIiAiKSksIGcoInBhcmFtIiwgIm5hbWUgdmFsdWUiKSwgZygibWFwIiwgIm5hbWUiLCBbbywgImFyZWEiXS5qb2luKCIgIikpLCBnKCJhcmVhIiwgImFsdCBjb29yZHMgc2hhcGUgaHJlZiB0YXJnZXQgcmVsIG1lZGlhIGhyZWZsYW5nIHR5cGUiKSwgZygidGFibGUiLCAiYm9yZGVyIiwgImNhcHRpb24gY29sZ3JvdXAgdGhlYWQgdGZvb3QgdGJvZHkgdHIiICsgKCJodG1sNCIgPT09IHQgPyAiIGNvbCIgOiAiIikpLCBnKCJjb2xncm91cCIsICJzcGFuIiwgImNvbCIpLCBnKCJjb2wiLCAic3BhbiIpLCBnKCJ0Ym9keSB0aGVhZCB0Zm9vdCIsICIiLCAidHIiKSwgZygidHIiLCAiIiwgInRkIHRoIiksIGcoInRkIiwgImNvbHNwYW4gcm93c3BhbiBoZWFkZXJzIiwgbyksIGcoInRoIiwgImNvbHNwYW4gcm93c3BhbiBoZWFkZXJzIHNjb3BlIGFiYnIiLCBvKSwgZygiZm9ybSIsICJhY2NlcHQtY2hhcnNldCBhY3Rpb24gYXV0b2NvbXBsZXRlIGVuY3R5cGUgbWV0aG9kIG5hbWUgbm92YWxpZGF0ZSB0YXJnZXQiLCBvKSwgZygiZmllbGRzZXQiLCAiZGlzYWJsZWQgZm9ybSBuYW1lIiwgW28sICJsZWdlbmQiXS5qb2luKCIgIikpLCBnKCJsYWJlbCIsICJmb3JtIGZvciIsIHIpLCBnKCJpbnB1dCIsICJhY2NlcHQgYWx0IGF1dG9jb21wbGV0ZSBjaGVja2VkIGRpcm5hbWUgZGlzYWJsZWQgZm9ybSBmb3JtYWN0aW9uIGZvcm1lbmN0eXBlIGZvcm1tZXRob2QgZm9ybW5vdmFsaWRhdGUgZm9ybXRhcmdldCBoZWlnaHQgbGlzdCBtYXggbWF4bGVuZ3RoIG1pbiBtdWx0aXBsZSBuYW1lIHBhdHRlcm4gcmVhZG9ubHkgcmVxdWlyZWQgc2l6ZSBzcmMgc3RlcCB0eXBlIHZhbHVlIHdpZHRoIiksIGcoImJ1dHRvbiIsICJkaXNhYmxlZCBmb3JtIGZvcm1hY3Rpb24gZm9ybWVuY3R5cGUgZm9ybW1ldGhvZCBmb3Jtbm92YWxpZGF0ZSBmb3JtdGFyZ2V0IG5hbWUgdHlwZSB2YWx1ZSIsICJodG1sNCIgPT09IHQgPyBvIDogciksIGcoInNlbGVjdCIsICJkaXNhYmxlZCBmb3JtIG11bHRpcGxlIG5hbWUgcmVxdWlyZWQgc2l6ZSIsICJvcHRpb24gb3B0Z3JvdXAiKSwgZygib3B0Z3JvdXAiLCAiZGlzYWJsZWQgbGFiZWwiLCAib3B0aW9uIiksIGcoIm9wdGlvbiIsICJkaXNhYmxlZCBsYWJlbCBzZWxlY3RlZCB2YWx1ZSIpLCBnKCJ0ZXh0YXJlYSIsICJjb2xzIGRpcm5hbWUgZGlzYWJsZWQgZm9ybSBtYXhsZW5ndGggbmFtZSByZWFkb25seSByZXF1aXJlZCByb3dzIHdyYXAiKSwgZygibWVudSIsICJ0eXBlIGxhYmVsIiwgW28sICJsaSJdLmpvaW4oIiAiKSksIGcoIm5vc2NyaXB0IiwgIiIsIG8pLCAiaHRtbDQiICE9PSB0ICYmIChnKCJ3YnIiKSwgZygicnVieSIsICIiLCBbciwgInJ0IHJwIl0uam9pbigiICIpKSwgZygiZmlnY2FwdGlvbiIsICIiLCBvKSwgZygibWFyayBydCBycCBzdW1tYXJ5IGJkaSIsICIiLCByKSwgZygiY2FudmFzIiwgIndpZHRoIGhlaWdodCIsIG8pLCBnKCJ2aWRlbyIsICJzcmMgY3Jvc3NvcmlnaW4gcG9zdGVyIHByZWxvYWQgYXV0b3BsYXkgbWVkaWFncm91cCBsb29wIG11dGVkIGNvbnRyb2xzIHdpZHRoIGhlaWdodCBidWZmZXJlZCIsIFtvLCAidHJhY2sgc291cmNlIl0uam9pbigiICIpKSwgZygiYXVkaW8iLCAic3JjIGNyb3Nzb3JpZ2luIHByZWxvYWQgYXV0b3BsYXkgbWVkaWFncm91cCBsb29wIG11dGVkIGNvbnRyb2xzIGJ1ZmZlcmVkIHZvbHVtZSIsIFtvLCAidHJhY2sgc291cmNlIl0uam9pbigiICIpKSwgZygicGljdHVyZSIsICIiLCAiaW1nIHNvdXJjZSIpLCBnKCJzb3VyY2UiLCAic3JjIHNyY3NldCB0eXBlIG1lZGlhIHNpemVzIiksIGcoInRyYWNrIiwgImtpbmQgc3JjIHNyY2xhbmcgbGFiZWwgZGVmYXVsdCIpLCBnKCJkYXRhbGlzdCIsICIiLCBbciwgIm9wdGlvbiJdLmpvaW4oIiAiKSksIGcoImFydGljbGUgc2VjdGlvbiBuYXYgYXNpZGUgbWFpbiBoZWFkZXIgZm9vdGVyIiwgIiIsIG8pLCBnKCJoZ3JvdXAiLCAiIiwgImgxIGgyIGgzIGg0IGg1IGg2IiksIGcoImZpZ3VyZSIsICIiLCBbbywgImZpZ2NhcHRpb24iXS5qb2luKCIgIikpLCBnKCJ0aW1lIiwgImRhdGV0aW1lIiwgciksIGcoImRpYWxvZyIsICJvcGVuIiwgbyksIGcoImNvbW1hbmQiLCAidHlwZSBsYWJlbCBpY29uIGRpc2FibGVkIGNoZWNrZWQgcmFkaW9ncm91cCBjb21tYW5kIiksIGcoIm91dHB1dCIsICJmb3IgZm9ybSBuYW1lIiwgciksIGcoInByb2dyZXNzIiwgInZhbHVlIG1heCIsIHIpLCBnKCJtZXRlciIsICJ2YWx1ZSBtaW4gbWF4IGxvdyBoaWdoIG9wdGltdW0iLCByKSwgZygiZGV0YWlscyIsICJvcGVuIiwgW28sICJzdW1tYXJ5Il0uam9pbigiICIpKSwgZygia2V5Z2VuIiwgImF1dG9mb2N1cyBjaGFsbGVuZ2UgZGlzYWJsZWQgZm9ybSBrZXl0eXBlIG5hbWUiKSksICJodG1sNS1zdHJpY3QiICE9PSB0ICYmIChwKCJzY3JpcHQiLCAibGFuZ3VhZ2UgeG1sOnNwYWNlIiksIHAoInN0eWxlIiwgInhtbDpzcGFjZSIpLCBwKCJvYmplY3QiLCAiZGVjbGFyZSBjbGFzc2lkIGNvZGUgY29kZWJhc2UgY29kZXR5cGUgYXJjaGl2ZSBzdGFuZGJ5IGFsaWduIGJvcmRlciBoc3BhY2UgdnNwYWNlIiksIHAoImVtYmVkIiwgImFsaWduIG5hbWUgaHNwYWNlIHZzcGFjZSIpLCBwKCJwYXJhbSIsICJ2YWx1ZXR5cGUgdHlwZSIpLCBwKCJhIiwgImNoYXJzZXQgbmFtZSByZXYgc2hhcGUgY29vcmRzIiksIHAoImJyIiwgImNsZWFyIiksIHAoImFwcGxldCIsICJjb2RlYmFzZSBhcmNoaXZlIGNvZGUgb2JqZWN0IGFsdCBuYW1lIHdpZHRoIGhlaWdodCBhbGlnbiBoc3BhY2UgdnNwYWNlIiksIHAoImltZyIsICJuYW1lIGxvbmdkZXNjIGFsaWduIGJvcmRlciBoc3BhY2UgdnNwYWNlIiksIHAoImlmcmFtZSIsICJsb25nZGVzYyBmcmFtZWJvcmRlciBtYXJnaW53aWR0aCBtYXJnaW5oZWlnaHQgc2Nyb2xsaW5nIGFsaWduIiksIHAoImZvbnQgYmFzZWZvbnQiLCAic2l6ZSBjb2xvciBmYWNlIiksIHAoImlucHV0IiwgInVzZW1hcCBhbGlnbiIpLCBwKCJzZWxlY3QiKSwgcCgidGV4dGFyZWEiKSwgcCgiaDEgaDIgaDMgaDQgaDUgaDYgZGl2IHAgbGVnZW5kIGNhcHRpb24iLCAiYWxpZ24iKSwgcCgidWwiLCAidHlwZSBjb21wYWN0IiksIHAoImxpIiwgInR5cGUiKSwgcCgib2wgZGwgbWVudSBkaXIiLCAiY29tcGFjdCIpLCBwKCJwcmUiLCAid2lkdGggeG1sOnNwYWNlIiksIHAoImhyIiwgImFsaWduIG5vc2hhZGUgc2l6ZSB3aWR0aCIpLCBwKCJpc2luZGV4IiwgInByb21wdCIpLCBwKCJ0YWJsZSIsICJzdW1tYXJ5IHdpZHRoIGZyYW1lIHJ1bGVzIGNlbGxzcGFjaW5nIGNlbGxwYWRkaW5nIGFsaWduIGJnY29sb3IiKSwgcCgiY29sIiwgIndpZHRoIGFsaWduIGNoYXIgY2hhcm9mZiB2YWxpZ24iKSwgcCgiY29sZ3JvdXAiLCAid2lkdGggYWxpZ24gY2hhciBjaGFyb2ZmIHZhbGlnbiIpLCBwKCJ0aGVhZCIsICJhbGlnbiBjaGFyIGNoYXJvZmYgdmFsaWduIiksIHAoInRyIiwgImFsaWduIGNoYXIgY2hhcm9mZiB2YWxpZ24gYmdjb2xvciIpLCBwKCJ0aCIsICJheGlzIGFsaWduIGNoYXIgY2hhcm9mZiB2YWxpZ24gbm93cmFwIGJnY29sb3Igd2lkdGggaGVpZ2h0IiksIHAoImZvcm0iLCAiYWNjZXB0IiksIHAoInRkIiwgImFiYnIgYXhpcyBzY29wZSBhbGlnbiBjaGFyIGNoYXJvZmYgdmFsaWduIG5vd3JhcCBiZ2NvbG9yIHdpZHRoIGhlaWdodCIpLCBwKCJ0Zm9vdCIsICJhbGlnbiBjaGFyIGNoYXJvZmYgdmFsaWduIiksIHAoInRib2R5IiwgImFsaWduIGNoYXIgY2hhcm9mZiB2YWxpZ24iKSwgcCgiYXJlYSIsICJub2hyZWYiKSwgcCgiYm9keSIsICJiYWNrZ3JvdW5kIGJnY29sb3IgdGV4dCBsaW5rIHZsaW5rIGFsaW5rIikpLCAiaHRtbDQiICE9PSB0ICYmIChwKCJpbnB1dCBidXR0b24gc2VsZWN0IHRleHRhcmVhIiwgImF1dG9mb2N1cyIpLCBwKCJpbnB1dCB0ZXh0YXJlYSIsICJwbGFjZWhvbGRlciIpLCBwKCJhIiwgImRvd25sb2FkIiksIHAoImxpbmsgc2NyaXB0IGltZyIsICJjcm9zc29yaWdpbiIpLCBwKCJpbWciLCAibG9hZGluZyIpLCBwKCJpZnJhbWUiLCAic2FuZGJveCBzZWFtbGVzcyBhbGxvd2Z1bGxzY3JlZW4gbG9hZGluZyIpKSwgZWkoWnIoImEgZm9ybSBtZXRlciBwcm9ncmVzcyBkZm4iKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgY1tlXSAmJiBkZWxldGUgY1tlXS5jaGlsZHJlbltlXTsKICAgIH0pLCBkZWxldGUgYy5jYXB0aW9uLmNoaWxkcmVuLnRhYmxlLCBkZWxldGUgYy5zY3JpcHQsIEpvW3RdID0gYykpOwoKICAgIGZ1bmN0aW9uIGcoZSwgdCwgbikgewogICAgICBmdW5jdGlvbiByKGUsIHQpIHsKICAgICAgICBmb3IgKHZhciBuID0ge30sIHIgPSAwLCBvID0gZS5sZW5ndGg7IHIgPCBvOyByKyspIHsKICAgICAgICAgIG5bZVtyXV0gPSB0IHx8IHt9OwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG47CiAgICAgIH0KCiAgICAgIHZhciBvLCBpOwogICAgICB0ID0gdCB8fCAiIiwgInN0cmluZyIgPT0gdHlwZW9mIChuID0gbiB8fCBbXSkgJiYgKG4gPSBacihuKSk7CgogICAgICBmb3IgKHZhciBhID0gWnIoZSksIHUgPSBhLmxlbmd0aDsgdS0tOykgewogICAgICAgIGkgPSB7CiAgICAgICAgICBhdHRyaWJ1dGVzOiByKG8gPSBacihbcywgdF0uam9pbigiICIpKSksCiAgICAgICAgICBhdHRyaWJ1dGVzT3JkZXI6IG8sCiAgICAgICAgICBjaGlsZHJlbjogcihuLCBRbykKICAgICAgICB9LCBjW2FbdV1dID0gaTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHAoZSwgdCkgewogICAgICBmb3IgKHZhciBuLCByLCBvLCBpID0gWnIoZSksIGEgPSBpLmxlbmd0aCwgdSA9IFpyKHQpOyBhLS07KSB7CiAgICAgICAgZm9yIChuID0gY1tpW2FdXSwgciA9IDAsIG8gPSB1Lmxlbmd0aDsgciA8IG87IHIrKykgewogICAgICAgICAgbi5hdHRyaWJ1dGVzW3Vbcl1dID0ge30sIG4uYXR0cmlidXRlc09yZGVyLnB1c2godVtyXSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgITEgPT09IGkudmVyaWZ5X2h0bWwgJiYgKGkudmFsaWRfZWxlbWVudHMgPSAiKlsqXSIpOwoKICAgIHZhciBoID0gZW8oaS52YWxpZF9zdHlsZXMpLAogICAgICAgIHYgPSBlbyhpLmludmFsaWRfc3R5bGVzLCAibWFwIiksCiAgICAgICAgYiA9IGVvKGkudmFsaWRfY2xhc3NlcywgIm1hcCIpLAogICAgICAgIHkgPSBlKCJ3aGl0ZXNwYWNlX2VsZW1lbnRzIiwgInByZSBzY3JpcHQgbm9zY3JpcHQgc3R5bGUgdGV4dGFyZWEgdmlkZW8gYXVkaW8gaWZyYW1lIG9iamVjdCBjb2RlIiksCiAgICAgICAgQyA9IGUoInNlbGZfY2xvc2luZ19lbGVtZW50cyIsICJjb2xncm91cCBkZCBkdCBsaSBvcHRpb24gcCB0ZCB0Zm9vdCB0aCB0aGVhZCB0ciIpLAogICAgICAgIHggPSBlKCJzaG9ydF9lbmRlZF9lbGVtZW50cyIsICJhcmVhIGJhc2UgYmFzZWZvbnQgYnIgY29sIGZyYW1lIGhyIGltZyBpbnB1dCBpc2luZGV4IGxpbmsgbWV0YSBwYXJhbSBlbWJlZCBzb3VyY2Ugd2JyIHRyYWNrIiksCiAgICAgICAgdyA9IGUoImJvb2xlYW5fYXR0cmlidXRlcyIsICJjaGVja2VkIGNvbXBhY3QgZGVjbGFyZSBkZWZlciBkaXNhYmxlZCBpc21hcCBtdWx0aXBsZSBub2hyZWYgbm9yZXNpemUgbm9zaGFkZSBub3dyYXAgcmVhZG9ubHkgc2VsZWN0ZWQgYXV0b3BsYXkgbG9vcCBjb250cm9scyIpLAogICAgICAgIE4gPSAidGQgdGggaWZyYW1lIHZpZGVvIGF1ZGlvIG9iamVjdCBzY3JpcHQgY29kZSIsCiAgICAgICAgayA9IGUoIm5vbl9lbXB0eV9lbGVtZW50cyIsIE4gKyAiIHByZSIsIHgpLAogICAgICAgIF8gPSBlKCJtb3ZlX2NhcmV0X2JlZm9yZV9vbl9lbnRlcl9lbGVtZW50cyIsIE4gKyAiIHRhYmxlIiwgeCksCiAgICAgICAgQSA9IGUoInRleHRfYmxvY2tfZWxlbWVudHMiLCAiaDEgaDIgaDMgaDQgaDUgaDYgcCBkaXYgYWRkcmVzcyBwcmUgZm9ybSBibG9ja3F1b3RlIGNlbnRlciBkaXIgZmllbGRzZXQgaGVhZGVyIGZvb3RlciBhcnRpY2xlIHNlY3Rpb24gaGdyb3VwIGFzaWRlIG1haW4gbmF2IGZpZ3VyZSIpLAogICAgICAgIFIgPSBlKCJibG9ja19lbGVtZW50cyIsICJociB0YWJsZSB0Ym9keSB0aGVhZCB0Zm9vdCB0aCB0ciB0ZCBsaSBvbCB1bCBjYXB0aW9uIGRsIGR0IGRkIG5vc2NyaXB0IG1lbnUgaXNpbmRleCBvcHRpb24gZGF0YWxpc3Qgc2VsZWN0IG9wdGdyb3VwIGZpZ2NhcHRpb24gZGV0YWlscyBzdW1tYXJ5IiwgQSksCiAgICAgICAgRCA9IGUoInRleHRfaW5saW5lX2VsZW1lbnRzIiwgInNwYW4gc3Ryb25nIGIgZW0gaSBmb250IHN0cmlrZSB1IHZhciBjaXRlIGRmbiBjb2RlIG1hcmsgcSBzdXAgc3ViIHNhbXAiKTsKCiAgICBmdW5jdGlvbiBUKGUpIHsKICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoIl4iICsgZS5yZXBsYWNlKC8oWz8rKl0pL2csICIuJDEiKSArICIkIik7CiAgICB9CgogICAgZnVuY3Rpb24gTyhlKSB7CiAgICAgIHZhciB0LAogICAgICAgICAgbiwKICAgICAgICAgIHIsCiAgICAgICAgICBvLAogICAgICAgICAgaSwKICAgICAgICAgIGEsCiAgICAgICAgICB1LAogICAgICAgICAgcywKICAgICAgICAgIGMsCiAgICAgICAgICBsLAogICAgICAgICAgZiwKICAgICAgICAgIGQsCiAgICAgICAgICBtLAogICAgICAgICAgZywKICAgICAgICAgIHAsCiAgICAgICAgICBoLAogICAgICAgICAgdiwKICAgICAgICAgIGIsCiAgICAgICAgICB5ID0gL14oWyMrXC1dKT8oW15cWyFcL10rKSg/OlwvKFteXFshXSspKT8oPzooIT8pXFsoW15cXV0rKV0pPyQvLAogICAgICAgICAgQyA9IC9eKFshXC1dKT8oXHcrW1xcOl06XHcrfFtePTo8XSspPyg/OihbPTo8XSkoLiopKT8kLywKICAgICAgICAgIHggPSAvWyo/K10vOwoKICAgICAgaWYgKGUpIHsKICAgICAgICB2YXIgdyA9IFpyKGUsICIsIik7CgogICAgICAgIGZvciAoU1siQCJdICYmIChoID0gU1siQCJdLmF0dHJpYnV0ZXMsIHYgPSBTWyJAIl0uYXR0cmlidXRlc09yZGVyKSwgdCA9IDAsIG4gPSB3Lmxlbmd0aDsgdCA8IG47IHQrKykgewogICAgICAgICAgaWYgKGkgPSB5LmV4ZWMod1t0XSkpIHsKICAgICAgICAgICAgaWYgKGcgPSBpWzFdLCBjID0gaVsyXSwgcCA9IGlbM10sIHMgPSBpWzVdLCBhID0gewogICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGQgPSB7fSwKICAgICAgICAgICAgICBhdHRyaWJ1dGVzT3JkZXI6IG0gPSBbXQogICAgICAgICAgICB9LCAiIyIgPT09IGcgJiYgKGEucGFkZEVtcHR5ID0gITApLCAiLSIgPT09IGcgJiYgKGEucmVtb3ZlRW1wdHkgPSAhMCksICIhIiA9PT0gaVs0XSAmJiAoYS5yZW1vdmVFbXB0eUF0dHJzID0gITApLCBoICYmIChuZShoLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgIGRbdF0gPSBlOwogICAgICAgICAgICB9KSwgbS5wdXNoLmFwcGx5KG0sIHYpKSwgcykgZm9yIChyID0gMCwgbyA9IChzID0gWnIocywgInwiKSkubGVuZ3RoOyByIDwgbzsgcisrKSB7CiAgICAgICAgICAgICAgKGkgPSBDLmV4ZWMoc1tyXSkpICYmICh1ID0ge30sIGYgPSBpWzFdLCBsID0gaVsyXS5yZXBsYWNlKC9bXFw6XTovZywgIjoiKSwgZyA9IGlbM10sIGIgPSBpWzRdLCAiISIgPT09IGYgJiYgKGEuYXR0cmlidXRlc1JlcXVpcmVkID0gYS5hdHRyaWJ1dGVzUmVxdWlyZWQgfHwgW10sIGEuYXR0cmlidXRlc1JlcXVpcmVkLnB1c2gobCksIHUucmVxdWlyZWQgPSAhMCksICItIiAhPT0gZiA/IChnICYmICgiPSIgPT09IGcgJiYgKGEuYXR0cmlidXRlc0RlZmF1bHQgPSBhLmF0dHJpYnV0ZXNEZWZhdWx0IHx8IFtdLCBhLmF0dHJpYnV0ZXNEZWZhdWx0LnB1c2goewogICAgICAgICAgICAgICAgbmFtZTogbCwKICAgICAgICAgICAgICAgIHZhbHVlOiBiCiAgICAgICAgICAgICAgfSksIHUuZGVmYXVsdFZhbHVlID0gYiksICI6IiA9PT0gZyAmJiAoYS5hdHRyaWJ1dGVzRm9yY2VkID0gYS5hdHRyaWJ1dGVzRm9yY2VkIHx8IFtdLCBhLmF0dHJpYnV0ZXNGb3JjZWQucHVzaCh7CiAgICAgICAgICAgICAgICBuYW1lOiBsLAogICAgICAgICAgICAgICAgdmFsdWU6IGIKICAgICAgICAgICAgICB9KSwgdS5mb3JjZWRWYWx1ZSA9IGIpLCAiPCIgPT09IGcgJiYgKHUudmFsaWRWYWx1ZXMgPSBabyhiLCAiPyIpKSksIHgudGVzdChsKSA/IChhLmF0dHJpYnV0ZVBhdHRlcm5zID0gYS5hdHRyaWJ1dGVQYXR0ZXJucyB8fCBbXSwgdS5wYXR0ZXJuID0gVChsKSwgYS5hdHRyaWJ1dGVQYXR0ZXJucy5wdXNoKHUpKSA6IChkW2xdIHx8IG0ucHVzaChsKSwgZFtsXSA9IHUpKSA6IChkZWxldGUgZFtsXSwgbS5zcGxpY2UocmkobSwgbCksIDEpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaCB8fCAiQCIgIT09IGMgfHwgKGggPSBkLCB2ID0gbSksIHAgJiYgKGEub3V0cHV0TmFtZSA9IGMsIFNbcF0gPSBhKSwgeC50ZXN0KGMpID8gKGEucGF0dGVybiA9IFQoYyksIEUucHVzaChhKSkgOiBTW2NdID0gYTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBCKGUpIHsKICAgICAgUyA9IHt9LCBFID0gW10sIE8oZSksIGVpKG0sIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgbFt0XSA9IGUuY2hpbGRyZW47CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIFAoZSkgewogICAgICB2YXIgYSA9IC9eKH4pPyguKykkLzsKICAgICAgZSAmJiAoSm8udGV4dF9ibG9ja19lbGVtZW50cyA9IEpvLmJsb2NrX2VsZW1lbnRzID0gbnVsbCwgZWkoWnIoZSwgIiwiKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdCwKICAgICAgICAgICAgbiA9IGEuZXhlYyhlKSwKICAgICAgICAgICAgciA9ICJ+IiA9PT0gblsxXSwKICAgICAgICAgICAgbyA9IHIgPyAic3BhbiIgOiAiZGl2IiwKICAgICAgICAgICAgaSA9IG5bMl07CiAgICAgICAgbFtpXSA9IGxbb10sIGZbaV0gPSBvLCByIHx8IChSW2kudG9VcHBlckNhc2UoKV0gPSB7fSwgUltpXSA9IHt9KSwgU1tpXSB8fCAodCA9IFNbb10sIGRlbGV0ZSAodCA9IHRpKHt9LCB0KSkucmVtb3ZlRW1wdHlBdHRycywgZGVsZXRlIHQucmVtb3ZlRW1wdHksIFNbaV0gPSB0KSwgZWkobCwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgIGVbb10gJiYgKGxbdF0gPSBlID0gdGkoe30sIGxbdF0pLCBlW2ldID0gZVtvXSk7CiAgICAgICAgfSk7CiAgICAgIH0pKTsKICAgIH0KCiAgICBmdW5jdGlvbiBMKGUpIHsKICAgICAgdmFyIG8gPSAvXihbK1wtXT8pKFtBLVphLXowLTlfXC0uXHUwMGI3XHUwMGMwLVx1MDBkNlx1MDBkOC1cdTAwZjZcdTAwZjgtXHUwMzdkXHUwMzdmLVx1MWZmZlx1MjAwYy1cdTIwMGRcdTIwM2YtXHUyMDQwXHUyMDcwLVx1MjE4Zlx1MmMwMC1cdTJmZWZcdTMwMDEtXHVkN2ZmXHVmOTAwLVx1ZmRjZlx1ZmRmMC1cdWZmZmRdKylcWyhbXlxdXSspXSQvOwogICAgICBKb1tpLnNjaGVtYV0gPSBudWxsLCBlICYmIGVpKFpyKGUsICIsIiksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIHQsCiAgICAgICAgICAgIG4sCiAgICAgICAgICAgIHIgPSBvLmV4ZWMoZSk7CiAgICAgICAgciAmJiAobiA9IHJbMV0sIHQgPSBuID8gbFtyWzJdXSA6IGxbclsyXV0gPSB7CiAgICAgICAgICAiI2NvbW1lbnQiOiB7fQogICAgICAgIH0sIHQgPSBsW3JbMl1dLCBlaShacihyWzNdLCAifCIpLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgIi0iID09PSBuID8gZGVsZXRlIHRbZV0gOiB0W2VdID0ge307CiAgICAgICAgfSkpOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBJKGUpIHsKICAgICAgdmFyIHQsCiAgICAgICAgICBuID0gU1tlXTsKICAgICAgaWYgKG4pIHJldHVybiBuOwoKICAgICAgZm9yICh0ID0gRS5sZW5ndGg7IHQtLTspIHsKICAgICAgICBpZiAoKG4gPSBFW3RdKS5wYXR0ZXJuLnRlc3QoZSkpIHJldHVybiBuOwogICAgICB9CiAgICB9CgogICAgZWkoKGkuc3BlY2lhbCB8fCAic2NyaXB0IG5vc2NyaXB0IGlmcmFtZSBub2ZyYW1lcyBub2VtYmVkIHRpdGxlIHN0eWxlIHRleHRhcmVhIHhtcCIpLnNwbGl0KCIgIiksIGZ1bmN0aW9uIChlKSB7CiAgICAgIGRbZV0gPSBuZXcgUmVnRXhwKCI8LyIgKyBlICsgIltePl0qPiIsICJnaSIpOwogICAgfSksIGkudmFsaWRfZWxlbWVudHMgPyBCKGkudmFsaWRfZWxlbWVudHMpIDogKGVpKG0sIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIFNbdF0gPSB7CiAgICAgICAgYXR0cmlidXRlczogZS5hdHRyaWJ1dGVzLAogICAgICAgIGF0dHJpYnV0ZXNPcmRlcjogZS5hdHRyaWJ1dGVzT3JkZXIKICAgICAgfSwgbFt0XSA9IGUuY2hpbGRyZW47CiAgICB9KSwgImh0bWw1IiAhPT0gaS5zY2hlbWEgJiYgZWkoWnIoInN0cm9uZy9iIGVtL2kiKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBacihlLCAiLyIpOwogICAgICBTW3RbMV1dLm91dHB1dE5hbWUgPSB0WzBdOwogICAgfSksIGVpKFpyKCJvbCB1bCBzdWIgc3VwIGJsb2NrcXVvdGUgc3BhbiBmb250IGEgdGFibGUgdGJvZHkgc3Ryb25nIGVtIGIgaSIpLCBmdW5jdGlvbiAoZSkgewogICAgICBTW2VdICYmIChTW2VdLnJlbW92ZUVtcHR5ID0gITApOwogICAgfSksIGVpKFpyKCJwIGgxIGgyIGgzIGg0IGg1IGg2IHRoIHRkIHByZSBkaXYgYWRkcmVzcyBjYXB0aW9uIGxpIiksIGZ1bmN0aW9uIChlKSB7CiAgICAgIFNbZV0ucGFkZEVtcHR5ID0gITA7CiAgICB9KSwgZWkoWnIoInNwYW4iKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgU1tlXS5yZW1vdmVFbXB0eUF0dHJzID0gITA7CiAgICB9KSksIFAoaS5jdXN0b21fZWxlbWVudHMpLCBMKGkudmFsaWRfY2hpbGRyZW4pLCBPKGkuZXh0ZW5kZWRfdmFsaWRfZWxlbWVudHMpLCBMKCIrb2xbdWx8b2xdLCt1bFt1bHxvbF0iKSwgZWkoewogICAgICBkZDogImRsIiwKICAgICAgZHQ6ICJkbCIsCiAgICAgIGxpOiAidWwgb2wiLAogICAgICB0ZDogInRyIiwKICAgICAgdGg6ICJ0ciIsCiAgICAgIHRyOiAidGJvZHkgdGhlYWQgdGZvb3QiLAogICAgICB0Ym9keTogInRhYmxlIiwKICAgICAgdGhlYWQ6ICJ0YWJsZSIsCiAgICAgIHRmb290OiAidGFibGUiLAogICAgICBsZWdlbmQ6ICJmaWVsZHNldCIsCiAgICAgIGFyZWE6ICJtYXAiLAogICAgICBwYXJhbTogInZpZGVvIGF1ZGlvIG9iamVjdCIKICAgIH0sIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIFNbdF0gJiYgKFNbdF0ucGFyZW50c1JlcXVpcmVkID0gWnIoZSkpOwogICAgfSksIGkuaW52YWxpZF9lbGVtZW50cyAmJiBlaShuaShpLmludmFsaWRfZWxlbWVudHMpLCBmdW5jdGlvbiAoZSkgewogICAgICBTW2VdICYmIGRlbGV0ZSBTW2VdOwogICAgfSksIEkoInNwYW4iKSB8fCBPKCJzcGFuWyFkYXRhLW1jZS10eXBlfCpdIik7CiAgICB2YXIgTSA9IEooaCksCiAgICAgICAgRiA9IEoodiksCiAgICAgICAgVSA9IEooYiksCiAgICAgICAgeiA9IEoodyksCiAgICAgICAgSCA9IEooUiksCiAgICAgICAgaiA9IEooQSksCiAgICAgICAgViA9IEooRCksCiAgICAgICAgcSA9IEooeCksCiAgICAgICAgJCA9IEooQyksCiAgICAgICAgVyA9IEooayksCiAgICAgICAgSyA9IEooXyksCiAgICAgICAgWCA9IEooeSksCiAgICAgICAgWSA9IEooZCksCiAgICAgICAgRyA9IEooZik7CiAgICByZXR1cm4gewogICAgICBjaGlsZHJlbjogbCwKICAgICAgZWxlbWVudHM6IFMsCiAgICAgIGdldFZhbGlkU3R5bGVzOiBNLAogICAgICBnZXRWYWxpZENsYXNzZXM6IFUsCiAgICAgIGdldEJsb2NrRWxlbWVudHM6IEgsCiAgICAgIGdldEludmFsaWRTdHlsZXM6IEYsCiAgICAgIGdldFNob3J0RW5kZWRFbGVtZW50czogcSwKICAgICAgZ2V0VGV4dEJsb2NrRWxlbWVudHM6IGosCiAgICAgIGdldFRleHRJbmxpbmVFbGVtZW50czogViwKICAgICAgZ2V0Qm9vbEF0dHJzOiB6LAogICAgICBnZXRFbGVtZW50UnVsZTogSSwKICAgICAgZ2V0U2VsZkNsb3NpbmdFbGVtZW50czogJCwKICAgICAgZ2V0Tm9uRW1wdHlFbGVtZW50czogVywKICAgICAgZ2V0TW92ZUNhcmV0QmVmb3JlT25FbnRlckVsZW1lbnRzOiBLLAogICAgICBnZXRXaGl0ZVNwYWNlRWxlbWVudHM6IFgsCiAgICAgIGdldFNwZWNpYWxFbGVtZW50czogWSwKICAgICAgaXNWYWxpZENoaWxkOiBmdW5jdGlvbiBpc1ZhbGlkQ2hpbGQoZSwgdCkgewogICAgICAgIHZhciBuID0gbFtlLnRvTG93ZXJDYXNlKCldOwogICAgICAgIHJldHVybiAhKCFuIHx8ICFuW3QudG9Mb3dlckNhc2UoKV0pOwogICAgICB9LAogICAgICBpc1ZhbGlkOiBmdW5jdGlvbiBpc1ZhbGlkKGUsIHQpIHsKICAgICAgICB2YXIgbiwKICAgICAgICAgICAgciwKICAgICAgICAgICAgbyA9IEkoZSk7CgogICAgICAgIGlmIChvKSB7CiAgICAgICAgICBpZiAoIXQpIHJldHVybiAhMDsKICAgICAgICAgIGlmIChvLmF0dHJpYnV0ZXNbdF0pIHJldHVybiAhMDsKICAgICAgICAgIGlmIChuID0gby5hdHRyaWJ1dGVQYXR0ZXJucykgZm9yIChyID0gbi5sZW5ndGg7IHItLTspIHsKICAgICAgICAgICAgaWYgKG5bcl0ucGF0dGVybi50ZXN0KGUpKSByZXR1cm4gITA7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gITE7CiAgICAgIH0sCiAgICAgIGdldEN1c3RvbUVsZW1lbnRzOiBHLAogICAgICBhZGRWYWxpZEVsZW1lbnRzOiBPLAogICAgICBzZXRWYWxpZEVsZW1lbnRzOiBCLAogICAgICBhZGRDdXN0b21FbGVtZW50czogUCwKICAgICAgYWRkVmFsaWRDaGlsZHJlbjogTAogICAgfTsKICB9CgogIGZ1bmN0aW9uIG5vKGUsIHQsIG4sIHIpIHsKICAgIGZ1bmN0aW9uIG8oZSkgewogICAgICByZXR1cm4gMSA8IChlID0gcGFyc2VJbnQoZSwgMTApLnRvU3RyaW5nKDE2KSkubGVuZ3RoID8gZSA6ICIwIiArIGU7CiAgICB9CgogICAgcmV0dXJuICIjIiArIG8odCkgKyBvKG4pICsgbyhyKTsKICB9CgogIGZ1bmN0aW9uIHJvKGIsIGUpIHsKICAgIHZhciB1LAogICAgICAgIG8sCiAgICAgICAgeSA9IHRoaXMsCiAgICAgICAgQyA9IC9yZ2JccypcKFxzKihbMC05XSspXHMqLFxzKihbMC05XSspXHMqLFxzKihbMC05XSspXHMqXCkvZ2ksCiAgICAgICAgeCA9IC8oPzp1cmwoPzooPzpcKFxzKlwiKFteXCJdKylcIlxzKlwpKXwoPzpcKFxzKlwnKFteXCddKylcJ1xzKlwpKXwoPzpcKFxzKihbXilcc10rKVxzKlwpKSkpfCg/OlwnKFteXCddKylcJyl8KD86XCIoW15cIl0rKVwiKS9naSwKICAgICAgICB3ID0gL1xzKihbXjpdKyk6XHMqKFteO10rKTs/L2csCiAgICAgICAgUyA9IC9ccyskLywKICAgICAgICBFID0ge30sCiAgICAgICAgTiA9IGJvOwogICAgYiA9IGIgfHwge30sIGUgJiYgKHUgPSBlLmdldFZhbGlkU3R5bGVzKCksIG8gPSBlLmdldEludmFsaWRTdHlsZXMoKSk7CgogICAgZm9yICh2YXIgdCA9ICgiXFxcIiBcXCcgXFw7IFxcOiA7IDogIiArIE4pLnNwbGl0KCIgIiksIGsgPSAwOyBrIDwgdC5sZW5ndGg7IGsrKykgewogICAgICBFW3Rba11dID0gTiArIGssIEVbTiArIGtdID0gdFtrXTsKICAgIH0KCiAgICByZXR1cm4gewogICAgICB0b0hleDogZnVuY3Rpb24gdG9IZXgoZSkgewogICAgICAgIHJldHVybiBlLnJlcGxhY2UoQywgbm8pOwogICAgICB9LAogICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UoZSkgewogICAgICAgIGZ1bmN0aW9uIHQoZSwgdCwgbikgewogICAgICAgICAgdmFyIHIgPSBwW2UgKyAiLXRvcCIgKyB0XTsKCiAgICAgICAgICBpZiAocikgewogICAgICAgICAgICB2YXIgbyA9IHBbZSArICItcmlnaHQiICsgdF07CgogICAgICAgICAgICBpZiAobykgewogICAgICAgICAgICAgIHZhciBpID0gcFtlICsgIi1ib3R0b20iICsgdF07CgogICAgICAgICAgICAgIGlmIChpKSB7CiAgICAgICAgICAgICAgICB2YXIgYSA9IHBbZSArICItbGVmdCIgKyB0XTsKCiAgICAgICAgICAgICAgICBpZiAoYSkgewogICAgICAgICAgICAgICAgICB2YXIgdSA9IFtyLCBvLCBpLCBhXTsKCiAgICAgICAgICAgICAgICAgIGZvciAoayA9IHUubGVuZ3RoIC0gMTsgay0tICYmIHVba10gPT09IHVbayArIDFdOykgewogICAgICAgICAgICAgICAgICAgIDsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgLTEgPCBrICYmIG4gfHwgKHBbZSArIHRdID0gLTEgPT09IGsgPyB1WzBdIDogdS5qb2luKCIgIiksIGRlbGV0ZSBwW2UgKyAiLXRvcCIgKyB0XSwgZGVsZXRlIHBbZSArICItcmlnaHQiICsgdF0sIGRlbGV0ZSBwW2UgKyAiLWJvdHRvbSIgKyB0XSwgZGVsZXRlIHBbZSArICItbGVmdCIgKyB0XSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBuKGUpIHsKICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgIG4gPSBwW2VdOwoKICAgICAgICAgIGlmIChuKSB7CiAgICAgICAgICAgIGZvciAodCA9IChuID0gbi5zcGxpdCgiICIpKS5sZW5ndGg7IHQtLTspIHsKICAgICAgICAgICAgICBpZiAoblt0XSAhPT0gblswXSkgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcFtlXSA9IG5bMF0sIDE7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiByKGUpIHsKICAgICAgICAgIHJldHVybiBmID0gITAsIEVbZV07CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1KGUsIHQpIHsKICAgICAgICAgIHJldHVybiBmICYmIChlID0gZS5yZXBsYWNlKC9cdUZFRkZbMC05XS9nLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gRVtlXTsKICAgICAgICAgIH0pKSwgdCA/IGUgOiBlLnJlcGxhY2UoL1xcKFtcJ1wiOzpdKS9nLCAiJDEiKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG8oZSkgewogICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoZS5zbGljZSgxKSwgMTYpKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGkoZSkgewogICAgICAgICAgcmV0dXJuIGUucmVwbGFjZSgvXFxbMC05YS1mXSsvZ2ksIG8pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYShlLCB0LCBuLCByLCBvLCBpKSB7CiAgICAgICAgICBpZiAobyA9IG8gfHwgaSkgcmV0dXJuICInIiArIChvID0gdShvKSkucmVwbGFjZSgvXCcvZywgIlxcJyIpICsgIiciOwoKICAgICAgICAgIGlmICh0ID0gdSh0IHx8IG4gfHwgciksICFiLmFsbG93X3NjcmlwdF91cmxzKSB7CiAgICAgICAgICAgIHZhciBhID0gdC5yZXBsYWNlKC9bXHNcclxuXSsvZywgIiIpOwogICAgICAgICAgICBpZiAoLyhqYXZhfHZiKXNjcmlwdDovaS50ZXN0KGEpKSByZXR1cm4gIiI7CiAgICAgICAgICAgIGlmICghYi5hbGxvd19zdmdfZGF0YV91cmxzICYmIC9eZGF0YTppbWFnZVwvc3ZnL2kudGVzdChhKSkgcmV0dXJuICIiOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiAidXJsKCciICsgKHQgPSBoID8gaC5jYWxsKHYsIHQsICJzdHlsZSIpIDogdCkucmVwbGFjZSgvXCcvZywgIlxcJyIpICsgIicpIjsKICAgICAgICB9CgogICAgICAgIHZhciBzLAogICAgICAgICAgICBjLAogICAgICAgICAgICBsLAogICAgICAgICAgICBmLAogICAgICAgICAgICBkLAogICAgICAgICAgICBtLAogICAgICAgICAgICBnLAogICAgICAgICAgICBwID0ge30sCiAgICAgICAgICAgIGggPSBiLnVybF9jb252ZXJ0ZXIsCiAgICAgICAgICAgIHYgPSBiLnVybF9jb252ZXJ0ZXJfc2NvcGUgfHwgeTsKCiAgICAgICAgaWYgKGUpIHsKICAgICAgICAgIGZvciAoZSA9IChlID0gZS5yZXBsYWNlKC9bXHUwMDAwLVx1MDAxRl0vZywgIiIpKS5yZXBsYWNlKC9cXFtcIlwnOzpcdUZFRkZdL2csIHIpLnJlcGxhY2UoL1wiW15cIl0rXCJ8XCdbXlwnXStcJy9nLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gZS5yZXBsYWNlKC9bOzpdL2csIHIpOwogICAgICAgICAgfSk7IHMgPSB3LmV4ZWMoZSk7KSB7CiAgICAgICAgICAgIHcubGFzdEluZGV4ID0gcy5pbmRleCArIHNbMF0ubGVuZ3RoLCBjID0gc1sxXS5yZXBsYWNlKFMsICIiKS50b0xvd2VyQ2FzZSgpLCBsID0gc1syXS5yZXBsYWNlKFMsICIiKSwgYyAmJiBsICYmIChjID0gaShjKSwgbCA9IGkobCksIC0xID09PSBjLmluZGV4T2YoTikgJiYgLTEgPT09IGMuaW5kZXhPZignIicpICYmIChiLmFsbG93X3NjcmlwdF91cmxzIHx8ICJiZWhhdmlvciIgIT09IGMgJiYgIS9leHByZXNzaW9uXHMqXCh8XC9cKnxcKlwvLy50ZXN0KGwpKSAmJiAoImZvbnQtd2VpZ2h0IiA9PT0gYyAmJiAiNzAwIiA9PT0gbCA/IGwgPSAiYm9sZCIgOiAiY29sb3IiICE9PSBjICYmICJiYWNrZ3JvdW5kLWNvbG9yIiAhPT0gYyB8fCAobCA9IGwudG9Mb3dlckNhc2UoKSksIGwgPSAobCA9IGwucmVwbGFjZShDLCBubykpLnJlcGxhY2UoeCwgYSksIHBbY10gPSBmID8gdShsLCAhMCkgOiBsKSk7CiAgICAgICAgICB9CgogICAgICAgICAgdCgiYm9yZGVyIiwgIiIsICEwKSwgdCgiYm9yZGVyIiwgIi13aWR0aCIpLCB0KCJib3JkZXIiLCAiLWNvbG9yIiksIHQoImJvcmRlciIsICItc3R5bGUiKSwgdCgicGFkZGluZyIsICIiKSwgdCgibWFyZ2luIiwgIiIpLCBtID0gImJvcmRlci1zdHlsZSIsIGcgPSAiYm9yZGVyLWNvbG9yIiwgbihkID0gImJvcmRlci13aWR0aCIpICYmIG4obSkgJiYgbihnKSAmJiAocC5ib3JkZXIgPSBwW2RdICsgIiAiICsgcFttXSArICIgIiArIHBbZ10sIGRlbGV0ZSBwW2RdLCBkZWxldGUgcFttXSwgZGVsZXRlIHBbZ10pLCAibWVkaXVtIG5vbmUiID09PSBwLmJvcmRlciAmJiBkZWxldGUgcC5ib3JkZXIsICJub25lIiA9PT0gcFsiYm9yZGVyLWltYWdlIl0gJiYgZGVsZXRlIHBbImJvcmRlci1pbWFnZSJdOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHA7CiAgICAgIH0sCiAgICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24gc2VyaWFsaXplKGksIHIpIHsKICAgICAgICBmdW5jdGlvbiBlKGUpIHsKICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgIG4gPSB1W2VdOwogICAgICAgICAgaWYgKG4pIGZvciAodmFyIHIgPSAwLCBvID0gbi5sZW5ndGg7IHIgPCBvOyByKyspIHsKICAgICAgICAgICAgZSA9IG5bcl0sICh0ID0gaVtlXSkgJiYgKGEgKz0gKDAgPCBhLmxlbmd0aCA/ICIgIiA6ICIiKSArIGUgKyAiOiAiICsgdCArICI7Iik7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgYSA9ICIiOwogICAgICAgIHJldHVybiByICYmIHUgPyAoZSgiKiIpLCBlKHIpKSA6IG5lKGksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICB2YXIgbjsKICAgICAgICAgICFlIHx8IG8gJiYgKChuID0gb1siKiJdKSAmJiBuW3RdIHx8IChuID0gb1tyXSkgJiYgblt0XSkgfHwgKGEgKz0gKDAgPCBhLmxlbmd0aCA/ICIgIiA6ICIiKSArIHQgKyAiOiAiICsgZSArICI7Iik7CiAgICAgICAgfSksIGE7CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBvbyhlKSB7CiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIEV2ZW50IHx8IHkoZS5pbml0RXZlbnQpOwogIH0KCiAgZnVuY3Rpb24gaW8oZSwgdCwgbiwgcikgewogICAgdmFyIG8sCiAgICAgICAgaSwKICAgICAgICBhID0gZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsCiAgICAgICAgICBuID0gbnVsbCAhPSByID8gciA6IHt9OwoKICAgICAgZm9yICh0IGluIGUpIHsKICAgICAgICBOZShvaSwgdCkgfHwgKG5bdF0gPSBlW3RdKTsKICAgICAgfQoKICAgICAgcmV0dXJuIFYobi5jb21wb3NlZFBhdGgpICYmIChuLmNvbXBvc2VkUGF0aCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gZS5jb21wb3NlZFBhdGgoKTsKICAgICAgfSksIG47CiAgICB9KHQpOwoKICAgIHJldHVybiBhLnR5cGUgPSBlLCBLKGEudGFyZ2V0KSAmJiAoYS50YXJnZXQgPSBudWxsICE9PSAobyA9IGEuc3JjRWxlbWVudCkgJiYgdm9pZCAwICE9PSBvID8gbyA6IG4pLCAoSygoaSA9IHQpLnByZXZlbnREZWZhdWx0KSB8fCBvbyhpKSkgJiYgKGEucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGEuZGVmYXVsdFByZXZlbnRlZCA9ICEwLCBhLmlzRGVmYXVsdFByZXZlbnRlZCA9IHcsIHkodC5wcmV2ZW50RGVmYXVsdCkgPyB0LnByZXZlbnREZWZhdWx0KCkgOiBvbyh0KSAmJiAodC5yZXR1cm5WYWx1ZSA9ICExKTsKICAgIH0sIGEuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKCkgewogICAgICBhLmNhbmNlbEJ1YmJsZSA9ICEwLCBhLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gdywgeSh0LnN0b3BQcm9wYWdhdGlvbikgPyB0LnN0b3BQcm9wYWdhdGlvbigpIDogb28odCkgJiYgKHQuY2FuY2VsQnViYmxlID0gITApOwogICAgfSwgYS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgIGEuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB3LCBhLnN0b3BQcm9wYWdhdGlvbigpOwogICAgfSwgYS5pc0RlZmF1bHRQcmV2ZW50ZWQgIT09IHcgJiYgYS5pc0RlZmF1bHRQcmV2ZW50ZWQgIT09IFIgJiYgKGEuaXNEZWZhdWx0UHJldmVudGVkID0gITAgPT09IGEuZGVmYXVsdFByZXZlbnRlZCA/IHcgOiBSLCBhLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gITAgPT09IGEuY2FuY2VsQnViYmxlID8gdyA6IFIsIGEuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSBSKSksIGE7CiAgfQoKICBmdW5jdGlvbiBhbyhlLCB0LCBuLCByKSB7CiAgICBlLmFkZEV2ZW50TGlzdGVuZXIgPyBlLmFkZEV2ZW50TGlzdGVuZXIodCwgbiwgciB8fCAhMSkgOiBlLmF0dGFjaEV2ZW50ICYmIGUuYXR0YWNoRXZlbnQoIm9uIiArIHQsIG4pOwogIH0KCiAgZnVuY3Rpb24gdW8oZSwgdCwgbiwgcikgewogICAgZS5yZW1vdmVFdmVudExpc3RlbmVyID8gZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsIG4sIHIgfHwgITEpIDogZS5kZXRhY2hFdmVudCAmJiBlLmRldGFjaEV2ZW50KCJvbiIgKyB0LCBuKTsKICB9CgogIGZ1bmN0aW9uIHNvKGUsIHQpIHsKICAgIHZhciBuLAogICAgICAgIHIsCiAgICAgICAgbywKICAgICAgICBpLAogICAgICAgIGEgPSBpbyhlLnR5cGUsIGUsIGRvY3VtZW50LCB0KTsKICAgIHJldHVybiBWKGkgPSBlKSAmJiBpaS50ZXN0KGkudHlwZSkgJiYgYihlLnBhZ2VYKSAmJiAhYihlLmNsaWVudFgpICYmIChyID0gKG4gPSBhLnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQsIG8gPSBuLmJvZHksIGEucGFnZVggPSBlLmNsaWVudFggKyAociAmJiByLnNjcm9sbExlZnQgfHwgbyAmJiBvLnNjcm9sbExlZnQgfHwgMCkgLSAociAmJiByLmNsaWVudExlZnQgfHwgbyAmJiBvLmNsaWVudExlZnQgfHwgMCksIGEucGFnZVkgPSBlLmNsaWVudFkgKyAociAmJiByLnNjcm9sbFRvcCB8fCBvICYmIG8uc2Nyb2xsVG9wIHx8IDApIC0gKHIgJiYgci5jbGllbnRUb3AgfHwgbyAmJiBvLmNsaWVudFRvcCB8fCAwKSksIGIoYS5tZXRhS2V5KSAmJiAoYS5tZXRhS2V5ID0gITEpLCBhOwogIH0KCiAgdmFyIGNvID0gVHIoWyJoMSIsICJoMiIsICJoMyIsICJoNCIsICJoNSIsICJoNiJdKSwKICAgICAgbG8gPSBUcihbImFydGljbGUiLCAiYXNpZGUiLCAiZGV0YWlscyIsICJkaXYiLCAiZHQiLCAiZmlnY2FwdGlvbiIsICJmb290ZXIiLCAiZm9ybSIsICJmaWVsZHNldCIsICJoZWFkZXIiLCAiaGdyb3VwIiwgImh0bWwiLCAibWFpbiIsICJuYXYiLCAic2VjdGlvbiIsICJzdW1tYXJ5IiwgImJvZHkiLCAicCIsICJkbCIsICJtdWx0aWNvbCIsICJkZCIsICJmaWd1cmUiLCAiYWRkcmVzcyIsICJjZW50ZXIiLCAiYmxvY2txdW90ZSIsICJoMSIsICJoMiIsICJoMyIsICJoNCIsICJoNSIsICJoNiIsICJsaXN0aW5nIiwgInhtcCIsICJwcmUiLCAicGxhaW50ZXh0IiwgIm1lbnUiLCAiZGlyIiwgInVsIiwgIm9sIiwgImxpIiwgImhyIiwgInRhYmxlIiwgInRib2R5IiwgInRoZWFkIiwgInRmb290IiwgInRoIiwgInRyIiwgInRkIiwgImNhcHRpb24iXSksCiAgICAgIGZvID0gVHIoWyJoMSIsICJoMiIsICJoMyIsICJoNCIsICJoNSIsICJoNiIsICJwIiwgImRpdiIsICJhZGRyZXNzIiwgInByZSIsICJmb3JtIiwgImJsb2NrcXVvdGUiLCAiY2VudGVyIiwgImRpciIsICJmaWVsZHNldCIsICJoZWFkZXIiLCAiZm9vdGVyIiwgImFydGljbGUiLCAic2VjdGlvbiIsICJoZ3JvdXAiLCAiYXNpZGUiLCAibmF2IiwgImZpZ3VyZSJdKSwKICAgICAgbW8gPSBUcihbInVsIiwgIm9sIiwgImRsIl0pLAogICAgICBnbyA9IFRyKFsibGkiLCAiZGQiLCAiZHQiXSksCiAgICAgIHBvID0gVHIoWyJ0aGVhZCIsICJ0Ym9keSIsICJ0Zm9vdCJdKSwKICAgICAgaG8gPSBUcihbInRkIiwgInRoIl0pLAogICAgICB2byA9IFRyKFsicHJlIiwgInNjcmlwdCIsICJ0ZXh0YXJlYSIsICJzdHlsZSJdKSwKICAgICAgYm8gPSAiXHVGRUZGIiwKICAgICAgeW8gPSAiXHhhMCIsCiAgICAgIENvID0gYm8sCiAgICAgIHhvID0gZnVuY3Rpb24geG8oZSkgewogICAgcmV0dXJuIGUgPT09IGJvOwogIH0sCiAgICAgIHdvID0gZnVuY3Rpb24gd28oZSkgewogICAgcmV0dXJuIGUucmVwbGFjZSgvXHVGRUZGL2csICIiKTsKICB9LAogICAgICBTbyA9IHpuLAogICAgICBFbyA9IGpuLAogICAgICBObyA9IGZ1bmN0aW9uIE5vKGUpIHsKICAgIHJldHVybiBFbyhlKSAmJiBlLmRhdGFbMF0gPT09IENvOwogIH0sCiAgICAgIGtvID0gZnVuY3Rpb24ga28oZSkgewogICAgcmV0dXJuIEVvKGUpICYmIGUuZGF0YVtlLmRhdGEubGVuZ3RoIC0gMV0gPT09IENvOwogIH0sCiAgICAgIF9vID0gWG4sCiAgICAgIEFvID0gWW4sCiAgICAgIFJvID0gV24sCiAgICAgIERvID0gam4sCiAgICAgIFRvID0gb24oWyJzY3JpcHQiLCAic3R5bGUiLCAidGV4dGFyZWEiXSksCiAgICAgIE9vID0gb24oWyJpbWciLCAiaW5wdXQiLCAidGV4dGFyZWEiLCAiaHIiLCAiaWZyYW1lIiwgInZpZGVvIiwgImF1ZGlvIiwgIm9iamVjdCIsICJlbWJlZCJdKSwKICAgICAgQm8gPSBvbihbInRhYmxlIl0pLAogICAgICBQbyA9IElyLAogICAgICBMbyA9IGZ1bmN0aW9uIExvKGUpIHsKICAgIHJldHVybiAhMSA9PT0gKHpuKHQgPSBlKSAmJiAidHJ1ZSIgPT09IHQuZ2V0QXR0cmlidXRlKCJ1bnNlbGVjdGFibGUiKSkgJiYgQW8oZSk7CiAgICB2YXIgdDsKICB9LAogICAgICBJbyA9IC9eWyBcdFxyXG5dKiQvLAogICAgICBNbyA9IHVuKCJkYXRhLW1jZS1ib29rbWFyayIpLAogICAgICBGbyA9IHVuKCJkYXRhLW1jZS1ib2d1cyIpLAogICAgICBVbyA9IGZ1bmN0aW9uIFVvKGUpIHsKICAgIHJldHVybiB6bihlKSAmJiAiYWxsIiA9PT0gZS5nZXRBdHRyaWJ1dGUoImRhdGEtbWNlLWJvZ3VzIik7CiAgfSwKICAgICAgem8gPSBmdW5jdGlvbiB6byhlLCB0LCBuKSB7CiAgICB2YXIgciA9IG4gfHwgdDsKICAgIGlmICh6bih0KSAmJiBYcih0KSkgcmV0dXJuIHQ7CgogICAgZm9yICh2YXIgbywgaSwgYSwgdSwgcywgYywgbCwgZiwgZCwgbSwgZywgcCA9IHQuY2hpbGROb2RlcywgaCA9IHAubGVuZ3RoIC0gMTsgMCA8PSBoOyBoLS0pIHsKICAgICAgem8oZSwgcFtoXSwgcik7CiAgICB9CgogICAgcmV0dXJuICF6bih0KSB8fCAxID09PSAobyA9IHQuY2hpbGROb2RlcykubGVuZ3RoICYmIFhyKG9bMF0pICYmIHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUob1swXSwgdCksICRuKGEgPSB0KSB8fCBxbihhKSB8fCAkcih0LCByKSB8fCB6bihpID0gdCkgJiYgMCA8IGkuY2hpbGROb2Rlcy5sZW5ndGggfHwgKHMgPSByLCBqbih1ID0gdCkgJiYgMCA8IHUuZGF0YS5sZW5ndGggJiYgKGYgPSBuZXcgUnIoYyA9IHUsIGwgPSBzKS5wcmV2KCExKSwgZCA9IG5ldyBScihjLCBsKS5uZXh0KCExKSwgbSA9IGIoZikgfHwgS3IoZiwgbCksIGcgPSBiKGQpIHx8IEtyKGQsIGwpLCBtICYmIGcpKSB8fCBlLnJlbW92ZSh0KSwgdDsKICB9LAogICAgICBIbyA9IEV0Lm1ha2VNYXAsCiAgICAgIGpvID0gL1smPD5cIlx1MDA2MFx1MDA3RS1cdUQ3RkZcdUUwMDAtXHVGRkVGXXxbXHVEODAwLVx1REJGRl1bXHVEQzAwLVx1REZGRl0vZywKICAgICAgVm8gPSAvWzw+Jlx1MDA3RS1cdUQ3RkZcdUUwMDAtXHVGRkVGXXxbXHVEODAwLVx1REJGRl1bXHVEQzAwLVx1REZGRl0vZywKICAgICAgcW8gPSAvWzw+JlwiXCddL2csCiAgICAgICRvID0gLyYjKFthLXowLTldKyk7P3wmKFthLXowLTldKyk7L2dpLAogICAgICBXbyA9IHsKICAgIDEyODogIlx1MjBBQyIsCiAgICAxMzA6ICJcdTIwMUEiLAogICAgMTMxOiAiXHUwMTkyIiwKICAgIDEzMjogIlx1MjAxRSIsCiAgICAxMzM6ICJcdTIwMjYiLAogICAgMTM0OiAiXHUyMDIwIiwKICAgIDEzNTogIlx1MjAyMSIsCiAgICAxMzY6ICJcdTAyQzYiLAogICAgMTM3OiAiXHUyMDMwIiwKICAgIDEzODogIlx1MDE2MCIsCiAgICAxMzk6ICJcdTIwMzkiLAogICAgMTQwOiAiXHUwMTUyIiwKICAgIDE0MjogIlx1MDE3RCIsCiAgICAxNDU6ICJcdTIwMTgiLAogICAgMTQ2OiAiXHUyMDE5IiwKICAgIDE0NzogIlx1MjAxQyIsCiAgICAxNDg6ICJcdTIwMUQiLAogICAgMTQ5OiAiXHUyMDIyIiwKICAgIDE1MDogIlx1MjAxMyIsCiAgICAxNTE6ICJcdTIwMTQiLAogICAgMTUyOiAiXHUwMkRDIiwKICAgIDE1MzogIlx1MjEyMiIsCiAgICAxNTQ6ICJcdTAxNjEiLAogICAgMTU1OiAiXHUyMDNBIiwKICAgIDE1NjogIlx1MDE1MyIsCiAgICAxNTg6ICJcdTAxN0UiLAogICAgMTU5OiAiXHUwMTc4IgogIH0sCiAgICAgIEtvID0gewogICAgJyInOiAiJnF1b3Q7IiwKICAgICInIjogIiYjMzk7IiwKICAgICI8IjogIiZsdDsiLAogICAgIj4iOiAiJmd0OyIsCiAgICAiJiI6ICImYW1wOyIsCiAgICAiYCI6ICImIzk2OyIKICB9LAogICAgICBYbyA9IHsKICAgICImbHQ7IjogIjwiLAogICAgIiZndDsiOiAiPiIsCiAgICAiJmFtcDsiOiAiJiIsCiAgICAiJnF1b3Q7IjogJyInLAogICAgIiZhcG9zOyI6ICInIgogIH0sCiAgICAgIFlvID0gWXIoIjUwLG5ic3AsNTEsaWV4Y2wsNTIsY2VudCw1Myxwb3VuZCw1NCxjdXJyZW4sNTUseWVuLDU2LGJydmJhciw1NyxzZWN0LDU4LHVtbCw1OSxjb3B5LDVhLG9yZGYsNWIsbGFxdW8sNWMsbm90LDVkLHNoeSw1ZSxyZWcsNWYsbWFjciw1ZyxkZWcsNWgscGx1c21uLDVpLHN1cDIsNWosc3VwMyw1ayxhY3V0ZSw1bCxtaWNybyw1bSxwYXJhLDVuLG1pZGRvdCw1byxjZWRpbCw1cCxzdXAxLDVxLG9yZG0sNXIscmFxdW8sNXMsZnJhYzE0LDV0LGZyYWMxMiw1dSxmcmFjMzQsNXYsaXF1ZXN0LDYwLEFncmF2ZSw2MSxBYWN1dGUsNjIsQWNpcmMsNjMsQXRpbGRlLDY0LEF1bWwsNjUsQXJpbmcsNjYsQUVsaWcsNjcsQ2NlZGlsLDY4LEVncmF2ZSw2OSxFYWN1dGUsNmEsRWNpcmMsNmIsRXVtbCw2YyxJZ3JhdmUsNmQsSWFjdXRlLDZlLEljaXJjLDZmLEl1bWwsNmcsRVRILDZoLE50aWxkZSw2aSxPZ3JhdmUsNmosT2FjdXRlLDZrLE9jaXJjLDZsLE90aWxkZSw2bSxPdW1sLDZuLHRpbWVzLDZvLE9zbGFzaCw2cCxVZ3JhdmUsNnEsVWFjdXRlLDZyLFVjaXJjLDZzLFV1bWwsNnQsWWFjdXRlLDZ1LFRIT1JOLDZ2LHN6bGlnLDcwLGFncmF2ZSw3MSxhYWN1dGUsNzIsYWNpcmMsNzMsYXRpbGRlLDc0LGF1bWwsNzUsYXJpbmcsNzYsYWVsaWcsNzcsY2NlZGlsLDc4LGVncmF2ZSw3OSxlYWN1dGUsN2EsZWNpcmMsN2IsZXVtbCw3YyxpZ3JhdmUsN2QsaWFjdXRlLDdlLGljaXJjLDdmLGl1bWwsN2csZXRoLDdoLG50aWxkZSw3aSxvZ3JhdmUsN2osb2FjdXRlLDdrLG9jaXJjLDdsLG90aWxkZSw3bSxvdW1sLDduLGRpdmlkZSw3byxvc2xhc2gsN3AsdWdyYXZlLDdxLHVhY3V0ZSw3cix1Y2lyYyw3cyx1dW1sLDd0LHlhY3V0ZSw3dSx0aG9ybiw3dix5dW1sLGNpLGZub2Ysc2gsQWxwaGEsc2ksQmV0YSxzaixHYW1tYSxzayxEZWx0YSxzbCxFcHNpbG9uLHNtLFpldGEsc24sRXRhLHNvLFRoZXRhLHNwLElvdGEsc3EsS2FwcGEsc3IsTGFtYmRhLHNzLE11LHN0LE51LHN1LFhpLHN2LE9taWNyb24sdDAsUGksdDEsUmhvLHQzLFNpZ21hLHQ0LFRhdSx0NSxVcHNpbG9uLHQ2LFBoaSx0NyxDaGksdDgsUHNpLHQ5LE9tZWdhLHRoLGFscGhhLHRpLGJldGEsdGosZ2FtbWEsdGssZGVsdGEsdGwsZXBzaWxvbix0bSx6ZXRhLHRuLGV0YSx0byx0aGV0YSx0cCxpb3RhLHRxLGthcHBhLHRyLGxhbWJkYSx0cyxtdSx0dCxudSx0dSx4aSx0dixvbWljcm9uLHUwLHBpLHUxLHJobyx1MixzaWdtYWYsdTMsc2lnbWEsdTQsdGF1LHU1LHVwc2lsb24sdTYscGhpLHU3LGNoaSx1OCxwc2ksdTksb21lZ2EsdWgsdGhldGFzeW0sdWksdXBzaWgsdW0scGl2LDgxMixidWxsLDgxNixoZWxsaXAsODFpLHByaW1lLDgxaixQcmltZSw4MXUsb2xpbmUsODI0LGZyYXNsLDg4byx3ZWllcnAsODhoLGltYWdlLDg4cyxyZWFsLDg5Mix0cmFkZSw4OWwsYWxlZnN5bSw4Y2csbGFyciw4Y2gsdWFyciw4Y2kscmFyciw4Y2osZGFyciw4Y2ssaGFyciw4ZGwsY3JhcnIsOGVnLGxBcnIsOGVoLHVBcnIsOGVpLHJBcnIsOGVqLGRBcnIsOGVrLGhBcnIsOGcwLGZvcmFsbCw4ZzIscGFydCw4ZzMsZXhpc3QsOGc1LGVtcHR5LDhnNyxuYWJsYSw4ZzgsaXNpbiw4Zzksbm90aW4sOGdiLG5pLDhnZixwcm9kLDhnaCxzdW0sOGdpLG1pbnVzLDhnbixsb3dhc3QsOGdxLHJhZGljLDhndCxwcm9wLDhndSxpbmZpbiw4aDAsYW5nLDhoNyxhbmQsOGg4LG9yLDhoOSxjYXAsOGhhLGN1cCw4aGIsaW50LDhoayx0aGVyZTQsOGhzLHNpbSw4aTUsY29uZyw4aTgsYXN5bXAsOGowLG5lLDhqMSxlcXVpdiw4ajQsbGUsOGo1LGdlLDhrMixzdWIsOGszLHN1cCw4azQsbnN1Yiw4azYsc3ViZSw4azcsc3VwZSw4a2wsb3BsdXMsOGtuLG90aW1lcyw4bDUscGVycCw4bTUsc2RvdCw4bzgsbGNlaWwsOG85LHJjZWlsLDhvYSxsZmxvb3IsOG9iLHJmbG9vciw4cDksbGFuZyw4cGEscmFuZyw5ZWEsbG96LDlqMCxzcGFkZXMsOWozLGNsdWJzLDlqNSxoZWFydHMsOWo2LGRpYW1zLGFpLE9FbGlnLGFqLG9lbGlnLGIwLFNjYXJvbixiMSxzY2Fyb24sYm8sWXVtbCxtNixjaXJjLG1zLHRpbGRlLDgwMixlbnNwLDgwMyxlbXNwLDgwOSx0aGluc3AsODBjLHp3bmosODBkLHp3aiw4MGUsbHJtLDgwZixybG0sODBqLG5kYXNoLDgwayxtZGFzaCw4MG8sbHNxdW8sODBwLHJzcXVvLDgwcSxzYnF1byw4MHMsbGRxdW8sODB0LHJkcXVvLDgwdSxiZHF1byw4MTAsZGFnZ2VyLDgxMSxEYWdnZXIsODFnLHBlcm1pbCw4MXAsbHNhcXVvLDgxcSxyc2FxdW8sODVjLGV1cm8iLCAzMiksCiAgICAgIEdvID0gewogICAgZW5jb2RlUmF3OiBHciwKICAgIGVuY29kZUFsbFJhdzogZnVuY3Rpb24gZW5jb2RlQWxsUmF3KGUpIHsKICAgICAgcmV0dXJuICgiIiArIGUpLnJlcGxhY2UocW8sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIEtvW2VdIHx8IGU7CiAgICAgIH0pOwogICAgfSwKICAgIGVuY29kZU51bWVyaWM6IEpyLAogICAgZW5jb2RlTmFtZWQ6IFFyLAogICAgZ2V0RW5jb2RlRnVuYzogZnVuY3Rpb24gZ2V0RW5jb2RlRnVuYyhlLCB0KSB7CiAgICAgIHZhciBuID0gWXIodCkgfHwgWW8sCiAgICAgICAgICByID0gSG8oZS5yZXBsYWNlKC9cKy9nLCAiLCIpKTsKICAgICAgcmV0dXJuIHIubmFtZWQgJiYgci5udW1lcmljID8gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICByZXR1cm4gZS5yZXBsYWNlKHQgPyBqbyA6IFZvLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gS29bZV0gPyBLb1tlXSA6IHZvaWQgMCAhPT0gbltlXSA/IG5bZV0gOiAxIDwgZS5sZW5ndGggPyAiJiMiICsgKDEwMjQgKiAoZS5jaGFyQ29kZUF0KDApIC0gNTUyOTYpICsgKGUuY2hhckNvZGVBdCgxKSAtIDU2MzIwKSArIDY1NTM2KSArICI7IiA6ICImIyIgKyBlLmNoYXJDb2RlQXQoMCkgKyAiOyI7CiAgICAgICAgfSk7CiAgICAgIH0gOiByLm5hbWVkID8gdCA/IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgcmV0dXJuIFFyKGUsIHQsIG4pOwogICAgICB9IDogUXIgOiByLm51bWVyaWMgPyBKciA6IEdyOwogICAgfSwKICAgIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlKGUpIHsKICAgICAgcmV0dXJuIGUucmVwbGFjZSgkbywgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICByZXR1cm4gdCA/IDY1NTM1IDwgKHQgPSAieCIgPT09IHQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgPyBwYXJzZUludCh0LnN1YnN0cigxKSwgMTYpIDogcGFyc2VJbnQodCwgMTApKSA/ICh0IC09IDY1NTM2LCBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2ICsgKHQgPj4gMTApLCA1NjMyMCArICgxMDIzICYgdCkpKSA6IFdvW3RdIHx8IFN0cmluZy5mcm9tQ2hhckNvZGUodCkgOiBYb1tlXSB8fCBZb1tlXSB8fCAobiA9IGUsIChyID0gTnQuZnJvbVRhZygiZGl2IikuZG9tKS5pbm5lckhUTUwgPSBuLCByLnRleHRDb250ZW50IHx8IHIuaW5uZXJUZXh0IHx8IG4pOwogICAgICAgIHZhciBuLCByOwogICAgICB9KTsKICAgIH0KICB9LAogICAgICBKbyA9IHt9LAogICAgICBRbyA9IHt9LAogICAgICBabyA9IEV0Lm1ha2VNYXAsCiAgICAgIGVpID0gRXQuZWFjaCwKICAgICAgdGkgPSBFdC5leHRlbmQsCiAgICAgIG5pID0gRXQuZXhwbG9kZSwKICAgICAgcmkgPSBFdC5pbkFycmF5LAogICAgICBvaSA9IHsKICAgIGtleUxvY2F0aW9uOiAhMCwKICAgIGxheWVyWDogITAsCiAgICBsYXllclk6ICEwLAogICAgcmV0dXJuVmFsdWU6ICEwLAogICAgd2Via2l0TW92ZW1lbnRYOiAhMCwKICAgIHdlYmtpdE1vdmVtZW50WTogITAsCiAgICBrZXlJZGVudGlmaWVyOiAhMCwKICAgIG1velByZXNzdXJlOiAhMAogIH0sCiAgICAgIGlpID0gL14oPzptb3VzZXxjb250ZXh0bWVudSl8Y2xpY2svLAogICAgICBhaSA9ICh1aS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7CiAgICBmdW5jdGlvbiBvKGUpIHsKICAgICAgZi5leGVjdXRlSGFuZGxlcnMoc28oZSB8fCBkLmV2ZW50KSwgaSk7CiAgICB9CgogICAgdmFyIGksCiAgICAgICAgYSwKICAgICAgICB1LAogICAgICAgIHMsCiAgICAgICAgYywKICAgICAgICBsLAogICAgICAgIGYgPSB0aGlzLAogICAgICAgIGQgPSB3aW5kb3c7CgogICAgaWYgKGUgJiYgMyAhPT0gZS5ub2RlVHlwZSAmJiA4ICE9PSBlLm5vZGVUeXBlKSB7CiAgICAgIGVbZi5leHBhbmRvXSA/IGkgPSBlW2YuZXhwYW5kb10gOiAoaSA9IGYuY291bnQrKywgZVtmLmV4cGFuZG9dID0gaSwgZi5ldmVudHNbaV0gPSB7fSksIHIgPSByIHx8IGU7CgogICAgICBmb3IgKHZhciBtID0gdC5zcGxpdCgiICIpLCBnID0gbS5sZW5ndGg7IGctLTspIHsKICAgICAgICBjID0gbywgcyA9IGwgPSAhMSwgIkRPTUNvbnRlbnRMb2FkZWQiID09PSAodSA9IG1bZ10pICYmICh1ID0gInJlYWR5IiksIGYuZG9tTG9hZGVkICYmICJyZWFkeSIgPT09IHUgJiYgImNvbXBsZXRlIiA9PT0gZS5yZWFkeVN0YXRlID8gbi5jYWxsKHIsIHNvKHsKICAgICAgICAgIHR5cGU6IHUKICAgICAgICB9KSkgOiAoZi5oYXNNb3VzZUVudGVyTGVhdmUgfHwgKHMgPSBmLm1vdXNlRW50ZXJMZWF2ZVt1XSkgJiYgKGMgPSBmdW5jdGlvbiBjKGUpIHsKICAgICAgICAgIHZhciB0ID0gZS5jdXJyZW50VGFyZ2V0LAogICAgICAgICAgICAgIG4gPSBlLnJlbGF0ZWRUYXJnZXQ7CiAgICAgICAgICBpZiAobiAmJiB0LmNvbnRhaW5zKSBuID0gdC5jb250YWlucyhuKTtlbHNlIGZvciAoOyBuICYmIG4gIT09IHQ7KSB7CiAgICAgICAgICAgIG4gPSBuLnBhcmVudE5vZGU7CiAgICAgICAgICB9CiAgICAgICAgICBuIHx8ICgoZSA9IHNvKGUgfHwgZC5ldmVudCkpLnR5cGUgPSAibW91c2VvdXQiID09PSBlLnR5cGUgPyAibW91c2VsZWF2ZSIgOiAibW91c2VlbnRlciIsIGUudGFyZ2V0ID0gdCwgZi5leGVjdXRlSGFuZGxlcnMoZSwgaSkpOwogICAgICAgIH0pLCBmLmhhc0ZvY3VzSW4gfHwgImZvY3VzaW4iICE9PSB1ICYmICJmb2N1c291dCIgIT09IHUgfHwgKGwgPSAhMCwgcyA9ICJmb2N1c2luIiA9PT0gdSA/ICJmb2N1cyIgOiAiYmx1ciIsIGMgPSBmdW5jdGlvbiBjKGUpIHsKICAgICAgICAgIChlID0gc28oZSB8fCBkLmV2ZW50KSkudHlwZSA9ICJmb2N1cyIgPT09IGUudHlwZSA/ICJmb2N1c2luIiA6ICJmb2N1c291dCIsIGYuZXhlY3V0ZUhhbmRsZXJzKGUsIGkpOwogICAgICAgIH0pLCAoYSA9IGYuZXZlbnRzW2ldW3VdKSA/ICJyZWFkeSIgPT09IHUgJiYgZi5kb21Mb2FkZWQgPyBuKHNvKHsKICAgICAgICAgIHR5cGU6IHUKICAgICAgICB9KSkgOiBhLnB1c2goewogICAgICAgICAgZnVuYzogbiwKICAgICAgICAgIHNjb3BlOiByCiAgICAgICAgfSkgOiAoZi5ldmVudHNbaV1bdV0gPSBhID0gW3sKICAgICAgICAgIGZ1bmM6IG4sCiAgICAgICAgICBzY29wZTogcgogICAgICAgIH1dLCBhLmZha2VOYW1lID0gcywgYS5jYXB0dXJlID0gbCwgYS5uYXRpdmVIYW5kbGVyID0gYywgInJlYWR5IiA9PT0gdSA/IGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICAgICAgICB2YXIgX3IyLAogICAgICAgICAgICAgIG8gPSBlLmRvY3VtZW50LAogICAgICAgICAgICAgIGkgPSB7CiAgICAgICAgICAgIHR5cGU6ICJyZWFkeSIKICAgICAgICAgIH07CgogICAgICAgICAgbi5kb21Mb2FkZWQgPyB0KGkpIDogKF9yMiA9IGZ1bmN0aW9uIHIoKSB7CiAgICAgICAgICAgIHVvKGUsICJET01Db250ZW50TG9hZGVkIiwgX3IyKSwgdW8oZSwgImxvYWQiLCBfcjIpLCBuLmRvbUxvYWRlZCB8fCAobi5kb21Mb2FkZWQgPSAhMCwgdChpKSksIGUgPSBudWxsOwogICAgICAgICAgfSwgImNvbXBsZXRlIiA9PT0gby5yZWFkeVN0YXRlIHx8ICJpbnRlcmFjdGl2ZSIgPT09IG8ucmVhZHlTdGF0ZSAmJiBvLmJvZHkgPyBfcjIoKSA6IGFvKGUsICJET01Db250ZW50TG9hZGVkIiwgX3IyKSwgbi5kb21Mb2FkZWQgfHwgYW8oZSwgImxvYWQiLCBfcjIpKTsKICAgICAgICB9KGUsIGMsIGYpIDogYW8oZSwgcyB8fCB1LCBjLCBsKSkpOwogICAgICB9CgogICAgICByZXR1cm4gZSA9IGEgPSBudWxsLCBuOwogICAgfQogIH0sIHVpLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAobiwgZSwgdCkgewogICAgdmFyIHIsIG8sIGk7CiAgICBpZiAoIW4gfHwgMyA9PT0gbi5ub2RlVHlwZSB8fCA4ID09PSBuLm5vZGVUeXBlKSByZXR1cm4gdGhpczsKICAgIHZhciBhID0gblt0aGlzLmV4cGFuZG9dOwoKICAgIGlmIChhKSB7CiAgICAgIGlmIChpID0gdGhpcy5ldmVudHNbYV0sIGUpIHsKICAgICAgICBmb3IgKHZhciB1LCBzLCBjLCBsLCBmID0gZS5zcGxpdCgiICIpLCBkID0gZi5sZW5ndGg7IGQtLTspIHsKICAgICAgICAgIGlmIChsID0gaVtvID0gZltkXV0pIHsKICAgICAgICAgICAgaWYgKHQpIGZvciAociA9IGwubGVuZ3RoOyByLS07KSB7CiAgICAgICAgICAgICAgbFtyXS5mdW5jID09PSB0ICYmICh1ID0gbC5uYXRpdmVIYW5kbGVyLCBzID0gbC5mYWtlTmFtZSwgYyA9IGwuY2FwdHVyZSwgKGwgPSBsLnNsaWNlKDAsIHIpLmNvbmNhdChsLnNsaWNlKHIgKyAxKSkpLm5hdGl2ZUhhbmRsZXIgPSB1LCBsLmZha2VOYW1lID0gcywgbC5jYXB0dXJlID0gYywgaVtvXSA9IGwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHQgJiYgMCAhPT0gbC5sZW5ndGggfHwgKGRlbGV0ZSBpW29dLCB1byhuLCBsLmZha2VOYW1lIHx8IG8sIGwubmF0aXZlSGFuZGxlciwgbC5jYXB0dXJlKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgbmUoaSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICB1byhuLCBlLmZha2VOYW1lIHx8IHQsIGUubmF0aXZlSGFuZGxlciwgZS5jYXB0dXJlKTsKICAgICAgfSksIGkgPSB7fTsKCiAgICAgIGZvciAobyBpbiBpKSB7CiAgICAgICAgaWYgKE5lKGksIG8pKSByZXR1cm4gdGhpczsKICAgICAgfQoKICAgICAgZGVsZXRlIHRoaXMuZXZlbnRzW2FdOwoKICAgICAgdHJ5IHsKICAgICAgICBkZWxldGUgblt0aGlzLmV4cGFuZG9dOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgblt0aGlzLmV4cGFuZG9dID0gbnVsbDsKICAgICAgfQogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0sIHVpLnByb3RvdHlwZS5maXJlID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgIHZhciByOwogICAgaWYgKCFlIHx8IDMgPT09IGUubm9kZVR5cGUgfHwgOCA9PT0gZS5ub2RlVHlwZSkgcmV0dXJuIHRoaXM7CgogICAgZm9yICh2YXIgbyA9IHNvKHsKICAgICAgdHlwZTogdCwKICAgICAgdGFyZ2V0OiBlCiAgICB9LCBuKTsgKHIgPSBlW3RoaXMuZXhwYW5kb10pICYmIHRoaXMuZXhlY3V0ZUhhbmRsZXJzKG8sIHIpLCAoZSA9IGUucGFyZW50Tm9kZSB8fCBlLm93bmVyRG9jdW1lbnQgfHwgZS5kZWZhdWx0VmlldyB8fCBlLnBhcmVudFdpbmRvdykgJiYgIW8uaXNQcm9wYWdhdGlvblN0b3BwZWQoKTspIHsKICAgICAgOwogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0sIHVpLnByb3RvdHlwZS5jbGVhbiA9IGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgdCwgbjsKICAgIGlmICghZSB8fCAzID09PSBlLm5vZGVUeXBlIHx8IDggPT09IGUubm9kZVR5cGUpIHJldHVybiB0aGlzOwogICAgaWYgKGVbdGhpcy5leHBhbmRvXSAmJiB0aGlzLnVuYmluZChlKSwgKGUgPSBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID8gZSA6IGUuZG9jdW1lbnQpICYmIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUpIGZvciAodGhpcy51bmJpbmQoZSksIHQgPSAobiA9IGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKSkubGVuZ3RoOyB0LS07KSB7CiAgICAgIChlID0gblt0XSlbdGhpcy5leHBhbmRvXSAmJiB0aGlzLnVuYmluZChlKTsKICAgIH0KICAgIHJldHVybiB0aGlzOwogIH0sIHVpLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5ldmVudHMgPSB7fTsKICB9LCB1aS5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiBlICYmIChlLnByZXZlbnREZWZhdWx0KCksIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpLCAhMTsKICB9LCB1aS5wcm90b3R5cGUuZXhlY3V0ZUhhbmRsZXJzID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgIHZhciBuID0gdGhpcy5ldmVudHNbdF0sCiAgICAgICAgciA9IG4gJiYgbltlLnR5cGVdOwogICAgaWYgKHIpIGZvciAodmFyIG8gPSAwLCBpID0gci5sZW5ndGg7IG8gPCBpOyBvKyspIHsKICAgICAgdmFyIGEgPSByW29dOwogICAgICBpZiAoYSAmJiAhMSA9PT0gYS5mdW5jLmNhbGwoYS5zY29wZSwgZSkgJiYgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHJldHVybjsKICAgIH0KICB9LCB1aS5FdmVudCA9IG5ldyB1aSgpLCB1aSk7CgogIGZ1bmN0aW9uIHVpKCkgewogICAgdGhpcy5kb21Mb2FkZWQgPSAhMSwgdGhpcy5ldmVudHMgPSB7fSwgdGhpcy5jb3VudCA9IDEsIHRoaXMuZXhwYW5kbyA9ICJtY2UtZGF0YS0iICsgKCtuZXcgRGF0ZSgpKS50b1N0cmluZygzMiksIHRoaXMuaGFzTW91c2VFbnRlckxlYXZlID0gIm9ubW91c2VlbnRlciIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmhhc0ZvY3VzSW4gPSAib25mb2N1c2luIiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuY291bnQgPSAxOwogIH0KCiAgZnVuY3Rpb24gc2koZSwgdCwgbikgewogICAgdmFyIHIgPSAiMHgiICsgdCAtIDY1NTM2OwogICAgcmV0dXJuIHIgIT0gciB8fCBuID8gdCA6IHIgPCAwID8gU3RyaW5nLmZyb21DaGFyQ29kZSg2NTUzNiArIHIpIDogU3RyaW5nLmZyb21DaGFyQ29kZShyID4+IDEwIHwgNTUyOTYsIDEwMjMgJiByIHwgNTYzMjApOwogIH0KCiAgdmFyIGNpLAogICAgICBsaSwKICAgICAgZmksCiAgICAgIGRpLAogICAgICBtaSwKICAgICAgZ2ksCiAgICAgIHBpLAogICAgICBoaSwKICAgICAgdmksCiAgICAgIGJpLAogICAgICB5aSwKICAgICAgQ2ksCiAgICAgIHhpLAogICAgICB3aSwKICAgICAgU2ksCiAgICAgIEVpLAogICAgICBOaSwKICAgICAga2kgPSAic2l6emxlIiArIC1uZXcgRGF0ZSgpLAogICAgICBfaSA9IHdpbmRvdy5kb2N1bWVudCwKICAgICAgQWkgPSAwLAogICAgICBSaSA9IDAsCiAgICAgIERpID0gdWEoKSwKICAgICAgVGkgPSB1YSgpLAogICAgICBPaSA9IHVhKCksCiAgICAgIEJpID0gZnVuY3Rpb24gQmkoZSwgdCkgewogICAgcmV0dXJuIGUgPT09IHQgJiYgKGJpID0gITApLCAwOwogIH0sCiAgICAgIFBpID0gInVuZGVmaW5lZCIsCiAgICAgIExpID0ge30uaGFzT3duUHJvcGVydHksCiAgICAgIElpID0gW10sCiAgICAgIE1pID0gSWkucG9wLAogICAgICBGaSA9IElpLnB1c2gsCiAgICAgIFVpID0gSWkucHVzaCwKICAgICAgemkgPSBJaS5zbGljZSwKICAgICAgSGkgPSBJaS5pbmRleE9mIHx8IGZ1bmN0aW9uIChlKSB7CiAgICBmb3IgKHZhciB0ID0gMCwgbiA9IHRoaXMubGVuZ3RoOyB0IDwgbjsgdCsrKSB7CiAgICAgIGlmICh0aGlzW3RdID09PSBlKSByZXR1cm4gdDsKICAgIH0KCiAgICByZXR1cm4gLTE7CiAgfSwKICAgICAgamkgPSAiW1xceDIwXFx0XFxyXFxuXFxmXSIsCiAgICAgIFZpID0gIig/OlxcXFwufFtcXHctXXxbXlxceDAwLVxceGEwXSkrIiwKICAgICAgcWkgPSAiXFxbIiArIGppICsgIiooIiArIFZpICsgIikoPzoiICsgamkgKyAiKihbKl4kfCF+XT89KSIgKyBqaSArICIqKD86JygoPzpcXFxcLnxbXlxcXFwnXSkqKSd8XCIoKD86XFxcXC58W15cXFxcXCJdKSopXCJ8KCIgKyBWaSArICIpKXwpIiArIGppICsgIipcXF0iLAogICAgICAkaSA9ICI6KCIgKyBWaSArICIpKD86XFwoKCgnKCg/OlxcXFwufFteXFxcXCddKSopJ3xcIigoPzpcXFxcLnxbXlxcXFxcIl0pKilcIil8KCg/OlxcXFwufFteXFxcXCgpW1xcXV18IiArIHFpICsgIikqKXwuKilcXCl8KSIsCiAgICAgIFdpID0gbmV3IFJlZ0V4cCgiXiIgKyBqaSArICIrfCgoPzpefFteXFxcXF0pKD86XFxcXC4pKikiICsgamkgKyAiKyQiLCAiZyIpLAogICAgICBLaSA9IG5ldyBSZWdFeHAoIl4iICsgamkgKyAiKiwiICsgamkgKyAiKiIpLAogICAgICBYaSA9IG5ldyBSZWdFeHAoIl4iICsgamkgKyAiKihbPit+XXwiICsgamkgKyAiKSIgKyBqaSArICIqIiksCiAgICAgIFlpID0gbmV3IFJlZ0V4cCgiPSIgKyBqaSArICIqKFteXFxdJ1wiXSo/KSIgKyBqaSArICIqXFxdIiwgImciKSwKICAgICAgR2kgPSBuZXcgUmVnRXhwKCRpKSwKICAgICAgSmkgPSBuZXcgUmVnRXhwKCJeIiArIFZpICsgIiQiKSwKICAgICAgUWkgPSB7CiAgICBJRDogbmV3IFJlZ0V4cCgiXiMoIiArIFZpICsgIikiKSwKICAgIENMQVNTOiBuZXcgUmVnRXhwKCJeXFwuKCIgKyBWaSArICIpIiksCiAgICBUQUc6IG5ldyBSZWdFeHAoIl4oIiArIFZpICsgInxbKl0pIiksCiAgICBBVFRSOiBuZXcgUmVnRXhwKCJeIiArIHFpKSwKICAgIFBTRVVETzogbmV3IFJlZ0V4cCgiXiIgKyAkaSksCiAgICBDSElMRDogbmV3IFJlZ0V4cCgiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFwoIiArIGppICsgIiooZXZlbnxvZGR8KChbKy1dfCkoXFxkKilufCkiICsgamkgKyAiKig/OihbKy1dfCkiICsgamkgKyAiKihcXGQrKXwpKSIgKyBqaSArICIqXFwpfCkiLCAiaSIpLAogICAgYm9vbDogbmV3IFJlZ0V4cCgiXig/OmNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkKSQiLCAiaSIpLAogICAgbmVlZHNDb250ZXh0OiBuZXcgUmVnRXhwKCJeIiArIGppICsgIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcKCIgKyBqaSArICIqKCg/Oi1cXGQpP1xcZCopIiArIGppICsgIipcXCl8KSg/PVteLV18JCkiLCAiaSIpCiAgfSwKICAgICAgWmkgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLAogICAgICBlYSA9IC9eaFxkJC9pLAogICAgICB0YSA9IC9eW157XStce1xzKlxbbmF0aXZlIFx3LywKICAgICAgbmEgPSAvXig/OiMoW1x3LV0rKXwoXHcrKXxcLihbXHctXSspKSQvLAogICAgICByYSA9IC9bK35dLywKICAgICAgb2EgPSAvJ3xcXC9nLAogICAgICBpYSA9IG5ldyBSZWdFeHAoIlxcXFwoW1xcZGEtZl17MSw2fSIgKyBqaSArICI/fCgiICsgamkgKyAiKXwuKSIsICJpZyIpOwoKICB0cnkgewogICAgVWkuYXBwbHkoSWkgPSB6aS5jYWxsKF9pLmNoaWxkTm9kZXMpLCBfaS5jaGlsZE5vZGVzKSwgSWlbX2kuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlOwogIH0gY2F0Y2ggKGUpIHsKICAgIFVpID0gewogICAgICBhcHBseTogSWkubGVuZ3RoID8gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICBGaS5hcHBseShlLCB6aS5jYWxsKHQpKTsKICAgICAgfSA6IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgZm9yICh2YXIgbiA9IGUubGVuZ3RoLCByID0gMDsgZVtuKytdID0gdFtyKytdOykgewogICAgICAgICAgOwogICAgICAgIH0KCiAgICAgICAgZS5sZW5ndGggPSBuIC0gMTsKICAgICAgfQogICAgfTsKICB9CgogIHZhciBhYSA9IGZ1bmN0aW9uIGFhKGUsIHQsIG4sIHIpIHsKICAgIHZhciBvLCBpLCBhLCB1LCBzLCBjLCBsLCBmLCBkLCBtOwogICAgaWYgKCh0ID8gdC5vd25lckRvY3VtZW50IHx8IHQgOiBfaSkgIT09IENpICYmIHlpKHQpLCBuID0gbiB8fCBbXSwgIWUgfHwgInN0cmluZyIgIT0gdHlwZW9mIGUpIHJldHVybiBuOwogICAgaWYgKDEgIT09ICh1ID0gKHQgPSB0IHx8IENpKS5ub2RlVHlwZSkgJiYgOSAhPT0gdSkgcmV0dXJuIFtdOwoKICAgIGlmICh3aSAmJiAhcikgewogICAgICBpZiAobyA9IG5hLmV4ZWMoZSkpIGlmIChhID0gb1sxXSkgewogICAgICAgIGlmICg5ID09PSB1KSB7CiAgICAgICAgICBpZiAoIShpID0gdC5nZXRFbGVtZW50QnlJZChhKSkgfHwgIWkucGFyZW50Tm9kZSkgcmV0dXJuIG47CiAgICAgICAgICBpZiAoaS5pZCA9PT0gYSkgcmV0dXJuIG4ucHVzaChpKSwgbjsKICAgICAgICB9IGVsc2UgaWYgKHQub3duZXJEb2N1bWVudCAmJiAoaSA9IHQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZChhKSkgJiYgTmkodCwgaSkgJiYgaS5pZCA9PT0gYSkgcmV0dXJuIG4ucHVzaChpKSwgbjsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAob1syXSkgcmV0dXJuIFVpLmFwcGx5KG4sIHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSkpLCBuOwogICAgICAgIGlmICgoYSA9IG9bM10pICYmIGNpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpIHJldHVybiBVaS5hcHBseShuLCB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYSkpLCBuOwogICAgICB9CgogICAgICBpZiAoY2kucXNhICYmICghU2kgfHwgIVNpLnRlc3QoZSkpKSB7CiAgICAgICAgaWYgKGYgPSBsID0ga2ksIGQgPSB0LCBtID0gOSA9PT0gdSAmJiBlLCAxID09PSB1ICYmICJvYmplY3QiICE9PSB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHsKICAgICAgICAgIGZvciAoYyA9IG1pKGUpLCAobCA9IHQuZ2V0QXR0cmlidXRlKCJpZCIpKSA/IGYgPSBsLnJlcGxhY2Uob2EsICJcXCQmIikgOiB0LnNldEF0dHJpYnV0ZSgiaWQiLCBmKSwgZiA9ICJbaWQ9JyIgKyBmICsgIiddICIsIHMgPSBjLmxlbmd0aDsgcy0tOykgewogICAgICAgICAgICBjW3NdID0gZiArIG1hKGNbc10pOwogICAgICAgICAgfQoKICAgICAgICAgIGQgPSByYS50ZXN0KGUpICYmIGZhKHQucGFyZW50Tm9kZSkgfHwgdCwgbSA9IGMuam9pbigiLCIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKG0pIHRyeSB7CiAgICAgICAgICByZXR1cm4gVWkuYXBwbHkobiwgZC5xdWVyeVNlbGVjdG9yQWxsKG0pKSwgbjsKICAgICAgICB9IGNhdGNoIChlKSB7fSBmaW5hbGx5IHsKICAgICAgICAgIGwgfHwgdC5yZW1vdmVBdHRyaWJ1dGUoImlkIik7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHBpKGUucmVwbGFjZShXaSwgIiQxIiksIHQsIG4sIHIpOwogIH07CgogIGZ1bmN0aW9uIHVhKCkgewogICAgdmFyIG4gPSBbXTsKCiAgICBmdW5jdGlvbiByKGUsIHQpIHsKICAgICAgcmV0dXJuIG4ucHVzaChlICsgIiAiKSA+IGxpLmNhY2hlTGVuZ3RoICYmIGRlbGV0ZSByW24uc2hpZnQoKV0sIHJbZSArICIgIl0gPSB0OwogICAgfQoKICAgIHJldHVybiByOwogIH0KCiAgZnVuY3Rpb24gc2EoZSkgewogICAgcmV0dXJuIGVba2ldID0gITAsIGU7CiAgfQoKICBmdW5jdGlvbiBjYShlLCB0KSB7CiAgICB2YXIgbiA9IHQgJiYgZSwKICAgICAgICByID0gbiAmJiAxID09PSBlLm5vZGVUeXBlICYmIDEgPT09IHQubm9kZVR5cGUgJiYgKH50LnNvdXJjZUluZGV4IHx8IDEgPDwgMzEpIC0gKH5lLnNvdXJjZUluZGV4IHx8IDEgPDwgMzEpOwogICAgaWYgKHIpIHJldHVybiByOwogICAgaWYgKG4pIGZvciAoOyBuID0gbi5uZXh0U2libGluZzspIHsKICAgICAgaWYgKG4gPT09IHQpIHJldHVybiAtMTsKICAgIH0KICAgIHJldHVybiBlID8gMSA6IC0xOwogIH0KCiAgZnVuY3Rpb24gbGEoYSkgewogICAgcmV0dXJuIHNhKGZ1bmN0aW9uIChpKSB7CiAgICAgIHJldHVybiBpID0gK2ksIHNhKGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgZm9yICh2YXIgbiwgciA9IGEoW10sIGUubGVuZ3RoLCBpKSwgbyA9IHIubGVuZ3RoOyBvLS07KSB7CiAgICAgICAgICBlW24gPSByW29dXSAmJiAoZVtuXSA9ICEodFtuXSA9IGVbbl0pKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBmYShlKSB7CiAgICByZXR1cm4gZSAmJiBfdHlwZW9mKGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUpICE9IFBpICYmIGU7CiAgfQoKICBmdW5jdGlvbiBkYSgpIHt9CgogIGZ1bmN0aW9uIG1hKGUpIHsKICAgIGZvciAodmFyIHQgPSAwLCBuID0gZS5sZW5ndGgsIHIgPSAiIjsgdCA8IG47IHQrKykgewogICAgICByICs9IGVbdF0udmFsdWU7CiAgICB9CgogICAgcmV0dXJuIHI7CiAgfQoKICBmdW5jdGlvbiBnYShhLCBlLCB0KSB7CiAgICB2YXIgdSA9IGUuZGlyLAogICAgICAgIHMgPSB0ICYmICJwYXJlbnROb2RlIiA9PT0gdSwKICAgICAgICBjID0gUmkrKzsKICAgIHJldHVybiBlLmZpcnN0ID8gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgICAgZm9yICg7IGUgPSBlW3VdOykgewogICAgICAgIGlmICgxID09PSBlLm5vZGVUeXBlIHx8IHMpIHJldHVybiBhKGUsIHQsIG4pOwogICAgICB9CiAgICB9IDogZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgICAgdmFyIHIsCiAgICAgICAgICBvLAogICAgICAgICAgaSA9IFtBaSwgY107CgogICAgICBpZiAobikgewogICAgICAgIGZvciAoOyBlID0gZVt1XTspIHsKICAgICAgICAgIGlmICgoMSA9PT0gZS5ub2RlVHlwZSB8fCBzKSAmJiBhKGUsIHQsIG4pKSByZXR1cm4gITA7CiAgICAgICAgfQogICAgICB9IGVsc2UgZm9yICg7IGUgPSBlW3VdOykgewogICAgICAgIGlmICgxID09PSBlLm5vZGVUeXBlIHx8IHMpIHsKICAgICAgICAgIGlmICgociA9IChvID0gZVtraV0gfHwgKGVba2ldID0ge30pKVt1XSkgJiYgclswXSA9PT0gQWkgJiYgclsxXSA9PT0gYykgcmV0dXJuIGlbMl0gPSByWzJdOwogICAgICAgICAgaWYgKChvW3VdID0gaSlbMl0gPSBhKGUsIHQsIG4pKSByZXR1cm4gITA7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gcGEobykgewogICAgcmV0dXJuIDEgPCBvLmxlbmd0aCA/IGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICAgIGZvciAodmFyIHIgPSBvLmxlbmd0aDsgci0tOykgewogICAgICAgIGlmICghb1tyXShlLCB0LCBuKSkgcmV0dXJuICExOwogICAgICB9CgogICAgICByZXR1cm4gITA7CiAgICB9IDogb1swXTsKICB9CgogIGZ1bmN0aW9uIGhhKGUsIHQsIG4sIHIsIG8pIHsKICAgIGZvciAodmFyIGksIGEgPSBbXSwgdSA9IDAsIHMgPSBlLmxlbmd0aCwgYyA9IG51bGwgIT0gdDsgdSA8IHM7IHUrKykgewogICAgICAoaSA9IGVbdV0pICYmIChuICYmICFuKGksIHIsIG8pIHx8IChhLnB1c2goaSksIGMgJiYgdC5wdXNoKHUpKSk7CiAgICB9CgogICAgcmV0dXJuIGE7CiAgfQoKICBmdW5jdGlvbiB2YShlKSB7CiAgICByZXR1cm4gdm9pZCAwICE9PSBlOwogIH0KCiAgZnVuY3Rpb24gYmEoZSkgewogICAgcmV0dXJuICJzdHJpbmciID09IHR5cGVvZiBlOwogIH0KCiAgZnVuY3Rpb24geWEoZSwgdCkgewogICAgdmFyIG4sCiAgICAgICAgciA9ICh0ID0gdCB8fCBrYSkuY3JlYXRlRWxlbWVudCgiZGl2IiksCiAgICAgICAgbyA9IHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoKICAgIGZvciAoci5pbm5lckhUTUwgPSBlOyBuID0gci5maXJzdENoaWxkOykgewogICAgICBvLmFwcGVuZENoaWxkKG4pOwogICAgfQoKICAgIHJldHVybiBvOwogIH0KCiAgZnVuY3Rpb24gQ2EoZSwgdCkgewogICAgcmV0dXJuIGUgJiYgdCAmJiAtMSAhPT0gKCIgIiArIGUuY2xhc3NOYW1lICsgIiAiKS5pbmRleE9mKCIgIiArIHQgKyAiICIpOwogIH0KCiAgZnVuY3Rpb24geGEoZSwgdCwgbikgewogICAgdmFyIHIsIG87CiAgICByZXR1cm4gdCA9IFdhKHQpWzBdLCBlLmVhY2goZnVuY3Rpb24gKCkgewogICAgICBuICYmIHIgPT09IHRoaXMucGFyZW50Tm9kZSB8fCAociA9IHRoaXMucGFyZW50Tm9kZSwgbyA9IHQuY2xvbmVOb2RlKCExKSwgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShvLCB0aGlzKSksIG8uYXBwZW5kQ2hpbGQodGhpcyk7CiAgICB9KSwgZTsKICB9CgogIGZ1bmN0aW9uIHdhKGUsIHQpIHsKICAgIHJldHVybiBuZXcgV2EuZm4uaW5pdChlLCB0KTsKICB9CgogIGZ1bmN0aW9uIFNhKGUpIHsKICAgIHJldHVybiBudWxsID09IGUgPyAiIiA6ICgiIiArIGUpLnJlcGxhY2UoVWEsICIiKTsKICB9CgogIGZ1bmN0aW9uIEVhKGUsIHQpIHsKICAgIHZhciBuLCByLCBvLCBpOwogICAgaWYgKGUpIGlmICh2b2lkIDAgPT09IChuID0gZS5sZW5ndGgpKSB7CiAgICAgIGZvciAociBpbiBlKSB7CiAgICAgICAgaWYgKGUuaGFzT3duUHJvcGVydHkocikgJiYgKGkgPSBlW3JdLCAhMSA9PT0gdC5jYWxsKGksIHIsIGkpKSkgYnJlYWs7CiAgICAgIH0KICAgIH0gZWxzZSBmb3IgKG8gPSAwOyBvIDwgbiAmJiAoaSA9IGVbb10sICExICE9PSB0LmNhbGwoaSwgbywgaSkpOyBvKyspIHsKICAgICAgOwogICAgfQogICAgcmV0dXJuIGU7CiAgfQoKICBmdW5jdGlvbiBOYShlLCBuKSB7CiAgICB2YXIgciA9IFtdOwogICAgcmV0dXJuIEVhKGUsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIG4odCwgZSkgJiYgci5wdXNoKHQpOwogICAgfSksIHI7CiAgfQoKICBjaSA9IGFhLnN1cHBvcnQgPSB7fSwgZGkgPSBhYS5pc1hNTCA9IGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgdCA9IGUgJiYgKGUub3duZXJEb2N1bWVudCB8fCBlKS5kb2N1bWVudEVsZW1lbnQ7CiAgICByZXR1cm4gISF0ICYmICJIVE1MIiAhPT0gdC5ub2RlTmFtZTsKICB9LCB5aSA9IGFhLnNldERvY3VtZW50ID0gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0LAogICAgICAgIHMgPSBlID8gZS5vd25lckRvY3VtZW50IHx8IGUgOiBfaSwKICAgICAgICBuID0gcy5kZWZhdWx0VmlldzsKICAgIHJldHVybiBzICE9PSBDaSAmJiA5ID09PSBzLm5vZGVUeXBlICYmIHMuZG9jdW1lbnRFbGVtZW50ID8gKHhpID0gKENpID0gcykuZG9jdW1lbnRFbGVtZW50LCB3aSA9ICFkaShzKSwgbiAmJiBuICE9PSBmdW5jdGlvbiAoZSkgewogICAgICB0cnkgewogICAgICAgIHJldHVybiBlLnRvcDsKICAgICAgfSBjYXRjaCAoZSkge30KCiAgICAgIHJldHVybiBudWxsOwogICAgfShuKSAmJiAobi5hZGRFdmVudExpc3RlbmVyID8gbi5hZGRFdmVudExpc3RlbmVyKCJ1bmxvYWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHlpKCk7CiAgICB9LCAhMSkgOiBuLmF0dGFjaEV2ZW50ICYmIG4uYXR0YWNoRXZlbnQoIm9udW5sb2FkIiwgZnVuY3Rpb24gKCkgewogICAgICB5aSgpOwogICAgfSkpLCBjaS5hdHRyaWJ1dGVzID0gITAsIGNpLmdldEVsZW1lbnRzQnlUYWdOYW1lID0gITAsIGNpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSB0YS50ZXN0KHMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSksIGNpLmdldEJ5SWQgPSAhMCwgbGkuZmluZC5JRCA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIGlmIChfdHlwZW9mKHQuZ2V0RWxlbWVudEJ5SWQpICE9IFBpICYmIHdpKSB7CiAgICAgICAgdmFyIG4gPSB0LmdldEVsZW1lbnRCeUlkKGUpOwogICAgICAgIHJldHVybiBuICYmIG4ucGFyZW50Tm9kZSA/IFtuXSA6IFtdOwogICAgICB9CiAgICB9LCBsaS5maWx0ZXIuSUQgPSBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCA9IGUucmVwbGFjZShpYSwgc2kpOwogICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gZS5nZXRBdHRyaWJ1dGUoImlkIikgPT09IHQ7CiAgICAgIH07CiAgICB9LCBsaS5maW5kLlRBRyA9IGNpLmdldEVsZW1lbnRzQnlUYWdOYW1lID8gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgaWYgKF90eXBlb2YodC5nZXRFbGVtZW50c0J5VGFnTmFtZSkgIT0gUGkpIHJldHVybiB0LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpOwogICAgfSA6IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHZhciBuLAogICAgICAgICAgciA9IFtdLAogICAgICAgICAgbyA9IDAsCiAgICAgICAgICBpID0gdC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKTsKICAgICAgaWYgKCIqIiAhPT0gZSkgcmV0dXJuIGk7CgogICAgICBmb3IgKDsgbiA9IGlbbysrXTspIHsKICAgICAgICAxID09PSBuLm5vZGVUeXBlICYmIHIucHVzaChuKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHI7CiAgICB9LCBsaS5maW5kLkNMQVNTID0gY2kuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiAoZSwgdCkgewogICAgICBpZiAod2kpIHJldHVybiB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZSk7CiAgICB9LCBFaSA9IFtdLCBTaSA9IFtdLCBjaS5kaXNjb25uZWN0ZWRNYXRjaCA9ICEwLCBTaSA9IFNpLmxlbmd0aCAmJiBuZXcgUmVnRXhwKFNpLmpvaW4oInwiKSksIEVpID0gRWkubGVuZ3RoICYmIG5ldyBSZWdFeHAoRWkuam9pbigifCIpKSwgdCA9IHRhLnRlc3QoeGkuY29tcGFyZURvY3VtZW50UG9zaXRpb24pLCBOaSA9IHQgfHwgdGEudGVzdCh4aS5jb250YWlucykgPyBmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiA9IDkgPT09IGUubm9kZVR5cGUgPyBlLmRvY3VtZW50RWxlbWVudCA6IGUsCiAgICAgICAgICByID0gdCAmJiB0LnBhcmVudE5vZGU7CiAgICAgIHJldHVybiBlID09PSByIHx8ICEoIXIgfHwgMSAhPT0gci5ub2RlVHlwZSB8fCAhKG4uY29udGFpbnMgPyBuLmNvbnRhaW5zKHIpIDogZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiAxNiAmIGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24ocikpKTsKICAgIH0gOiBmdW5jdGlvbiAoZSwgdCkgewogICAgICBpZiAodCkgZm9yICg7IHQgPSB0LnBhcmVudE5vZGU7KSB7CiAgICAgICAgaWYgKHQgPT09IGUpIHJldHVybiAhMDsKICAgICAgfQogICAgICByZXR1cm4gITE7CiAgICB9LCBCaSA9IHQgPyBmdW5jdGlvbiAoZSwgdCkgewogICAgICByZXR1cm4gZSA9PT0gdCA/IChiaSA9ICEwLCAwKSA6IChuID0gIWUuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikgfHwgKDEgJiAobiA9IChlLm93bmVyRG9jdW1lbnQgfHwgZSkgPT09ICh0Lm93bmVyRG9jdW1lbnQgfHwgdCkgPyBlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHQpIDogMSkgfHwgIWNpLnNvcnREZXRhY2hlZCAmJiB0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGUpID09PSBuID8gZSA9PT0gcyB8fCBlLm93bmVyRG9jdW1lbnQgPT09IF9pICYmIE5pKF9pLCBlKSA/IC0xIDogdCA9PT0gcyB8fCB0Lm93bmVyRG9jdW1lbnQgPT09IF9pICYmIE5pKF9pLCB0KSA/IDEgOiB2aSA/IEhpLmNhbGwodmksIGUpIC0gSGkuY2FsbCh2aSwgdCkgOiAwIDogNCAmIG4gPyAtMSA6IDEpOwogICAgICB2YXIgbjsKICAgIH0gOiBmdW5jdGlvbiAoZSwgdCkgewogICAgICBpZiAoZSA9PT0gdCkgcmV0dXJuIGJpID0gITAsIDA7CiAgICAgIHZhciBuLAogICAgICAgICAgciA9IDAsCiAgICAgICAgICBvID0gZS5wYXJlbnROb2RlLAogICAgICAgICAgaSA9IHQucGFyZW50Tm9kZSwKICAgICAgICAgIGEgPSBbZV0sCiAgICAgICAgICB1ID0gW3RdOwogICAgICBpZiAoIW8gfHwgIWkpIHJldHVybiBlID09PSBzID8gLTEgOiB0ID09PSBzID8gMSA6IG8gPyAtMSA6IGkgPyAxIDogdmkgPyBIaS5jYWxsKHZpLCBlKSAtIEhpLmNhbGwodmksIHQpIDogMDsKICAgICAgaWYgKG8gPT09IGkpIHJldHVybiBjYShlLCB0KTsKCiAgICAgIGZvciAobiA9IGU7IG4gPSBuLnBhcmVudE5vZGU7KSB7CiAgICAgICAgYS51bnNoaWZ0KG4pOwogICAgICB9CgogICAgICBmb3IgKG4gPSB0OyBuID0gbi5wYXJlbnROb2RlOykgewogICAgICAgIHUudW5zaGlmdChuKTsKICAgICAgfQoKICAgICAgZm9yICg7IGFbcl0gPT09IHVbcl07KSB7CiAgICAgICAgcisrOwogICAgICB9CgogICAgICByZXR1cm4gciA/IGNhKGFbcl0sIHVbcl0pIDogYVtyXSA9PT0gX2kgPyAtMSA6IHVbcl0gPT09IF9pID8gMSA6IDA7CiAgICB9LCBzKSA6IENpOwogIH0sIGFhLm1hdGNoZXMgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgcmV0dXJuIGFhKGUsIG51bGwsIG51bGwsIHQpOwogIH0sIGFhLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICBpZiAoKGUub3duZXJEb2N1bWVudCB8fCBlKSAhPT0gQ2kgJiYgeWkoZSksIHQgPSB0LnJlcGxhY2UoWWksICI9JyQxJ10iKSwgY2kubWF0Y2hlc1NlbGVjdG9yICYmIHdpICYmICghRWkgfHwgIUVpLnRlc3QodCkpICYmICghU2kgfHwgIVNpLnRlc3QodCkpKSB0cnkgewogICAgICB2YXIgbiA9ICh2b2lkIDApLmNhbGwoZSwgdCk7CiAgICAgIGlmIChuIHx8IGNpLmRpc2Nvbm5lY3RlZE1hdGNoIHx8IGUuZG9jdW1lbnQgJiYgMTEgIT09IGUuZG9jdW1lbnQubm9kZVR5cGUpIHJldHVybiBuOwogICAgfSBjYXRjaCAoZSkge30KICAgIHJldHVybiAwIDwgYWEodCwgQ2ksIG51bGwsIFtlXSkubGVuZ3RoOwogIH0sIGFhLmNvbnRhaW5zID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgIHJldHVybiAoZS5vd25lckRvY3VtZW50IHx8IGUpICE9PSBDaSAmJiB5aShlKSwgTmkoZSwgdCk7CiAgfSwgYWEuYXR0ciA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAoZS5vd25lckRvY3VtZW50IHx8IGUpICE9PSBDaSAmJiB5aShlKTsKICAgIHZhciBuID0gbGkuYXR0ckhhbmRsZVt0LnRvTG93ZXJDYXNlKCldLAogICAgICAgIHIgPSBuICYmIExpLmNhbGwobGkuYXR0ckhhbmRsZSwgdC50b0xvd2VyQ2FzZSgpKSA/IG4oZSwgdCwgIXdpKSA6IHZvaWQgMDsKICAgIHJldHVybiB2b2lkIDAgIT09IHIgPyByIDogY2kuYXR0cmlidXRlcyB8fCAhd2kgPyBlLmdldEF0dHJpYnV0ZSh0KSA6IChyID0gZS5nZXRBdHRyaWJ1dGVOb2RlKHQpKSAmJiByLnNwZWNpZmllZCA/IHIudmFsdWUgOiBudWxsOwogIH0sIGFhLmVycm9yID0gZnVuY3Rpb24gKGUpIHsKICAgIHRocm93IG5ldyBFcnJvcigiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogIiArIGUpOwogIH0sIGFhLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiAoZSkgewogICAgdmFyIHQsCiAgICAgICAgbiA9IFtdLAogICAgICAgIHIgPSAwLAogICAgICAgIG8gPSAwOwoKICAgIGlmIChiaSA9ICFjaS5kZXRlY3REdXBsaWNhdGVzLCB2aSA9ICFjaS5zb3J0U3RhYmxlICYmIGUuc2xpY2UoMCksIGUuc29ydChCaSksIGJpKSB7CiAgICAgIGZvciAoOyB0ID0gZVtvKytdOykgewogICAgICAgIHQgPT09IGVbb10gJiYgKHIgPSBuLnB1c2gobykpOwogICAgICB9CgogICAgICBmb3IgKDsgci0tOykgewogICAgICAgIGUuc3BsaWNlKG5bcl0sIDEpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHZpID0gbnVsbCwgZTsKICB9LCBmaSA9IGFhLmdldFRleHQgPSBmdW5jdGlvbiAoZSkgewogICAgdmFyIHQsCiAgICAgICAgbiA9ICIiLAogICAgICAgIHIgPSAwLAogICAgICAgIG8gPSBlLm5vZGVUeXBlOwoKICAgIGlmIChvKSB7CiAgICAgIGlmICgxID09PSBvIHx8IDkgPT09IG8gfHwgMTEgPT09IG8pIHsKICAgICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIGUudGV4dENvbnRlbnQpIHJldHVybiBlLnRleHRDb250ZW50OwoKICAgICAgICBmb3IgKGUgPSBlLmZpcnN0Q2hpbGQ7IGU7IGUgPSBlLm5leHRTaWJsaW5nKSB7CiAgICAgICAgICBuICs9IGZpKGUpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICgzID09PSBvIHx8IDQgPT09IG8pIHJldHVybiBlLm5vZGVWYWx1ZTsKICAgIH0gZWxzZSBmb3IgKDsgdCA9IGVbcisrXTspIHsKICAgICAgbiArPSBmaSh0KTsKICAgIH0KCiAgICByZXR1cm4gbjsKICB9LCAobGkgPSBhYS5zZWxlY3RvcnMgPSB7CiAgICBjYWNoZUxlbmd0aDogNTAsCiAgICBjcmVhdGVQc2V1ZG86IHNhLAogICAgbWF0Y2g6IFFpLAogICAgYXR0ckhhbmRsZToge30sCiAgICBmaW5kOiB7fSwKICAgIHJlbGF0aXZlOiB7CiAgICAgICI+IjogewogICAgICAgIGRpcjogInBhcmVudE5vZGUiLAogICAgICAgIGZpcnN0OiAhMAogICAgICB9LAogICAgICAiICI6IHsKICAgICAgICBkaXI6ICJwYXJlbnROb2RlIgogICAgICB9LAogICAgICAiKyI6IHsKICAgICAgICBkaXI6ICJwcmV2aW91c1NpYmxpbmciLAogICAgICAgIGZpcnN0OiAhMAogICAgICB9LAogICAgICAifiI6IHsKICAgICAgICBkaXI6ICJwcmV2aW91c1NpYmxpbmciCiAgICAgIH0KICAgIH0sCiAgICBwcmVGaWx0ZXI6IHsKICAgICAgQVRUUjogZnVuY3Rpb24gQVRUUihlKSB7CiAgICAgICAgcmV0dXJuIGVbMV0gPSBlWzFdLnJlcGxhY2UoaWEsIHNpKSwgZVszXSA9IChlWzNdIHx8IGVbNF0gfHwgZVs1XSB8fCAiIikucmVwbGFjZShpYSwgc2kpLCAifj0iID09PSBlWzJdICYmIChlWzNdID0gIiAiICsgZVszXSArICIgIiksIGUuc2xpY2UoMCwgNCk7CiAgICAgIH0sCiAgICAgIENISUxEOiBmdW5jdGlvbiBDSElMRChlKSB7CiAgICAgICAgcmV0dXJuIGVbMV0gPSBlWzFdLnRvTG93ZXJDYXNlKCksICJudGgiID09PSBlWzFdLnNsaWNlKDAsIDMpID8gKGVbM10gfHwgYWEuZXJyb3IoZVswXSksIGVbNF0gPSArKGVbNF0gPyBlWzVdICsgKGVbNl0gfHwgMSkgOiAyICogKCJldmVuIiA9PT0gZVszXSB8fCAib2RkIiA9PT0gZVszXSkpLCBlWzVdID0gKyhlWzddICsgZVs4XSB8fCAib2RkIiA9PT0gZVszXSkpIDogZVszXSAmJiBhYS5lcnJvcihlWzBdKSwgZTsKICAgICAgfSwKICAgICAgUFNFVURPOiBmdW5jdGlvbiBQU0VVRE8oZSkgewogICAgICAgIHZhciB0LAogICAgICAgICAgICBuID0gIWVbNl0gJiYgZVsyXTsKICAgICAgICByZXR1cm4gUWkuQ0hJTEQudGVzdChlWzBdKSA/IG51bGwgOiAoZVszXSA/IGVbMl0gPSBlWzRdIHx8IGVbNV0gfHwgIiIgOiBuICYmIEdpLnRlc3QobikgJiYgKHQgPSBtaShuLCAhMCkpICYmICh0ID0gbi5pbmRleE9mKCIpIiwgbi5sZW5ndGggLSB0KSAtIG4ubGVuZ3RoKSAmJiAoZVswXSA9IGVbMF0uc2xpY2UoMCwgdCksIGVbMl0gPSBuLnNsaWNlKDAsIHQpKSwgZS5zbGljZSgwLCAzKSk7CiAgICAgIH0KICAgIH0sCiAgICBmaWx0ZXI6IHsKICAgICAgVEFHOiBmdW5jdGlvbiBUQUcoZSkgewogICAgICAgIHZhciB0ID0gZS5yZXBsYWNlKGlhLCBzaSkudG9Mb3dlckNhc2UoKTsKICAgICAgICByZXR1cm4gIioiID09PSBlID8gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuICEwOwogICAgICAgIH0gOiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIGUubm9kZU5hbWUgJiYgZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0OwogICAgICAgIH07CiAgICAgIH0sCiAgICAgIENMQVNTOiBmdW5jdGlvbiBDTEFTUyhlKSB7CiAgICAgICAgdmFyIHQgPSBEaVtlICsgIiAiXTsKICAgICAgICByZXR1cm4gdCB8fCAodCA9IG5ldyBSZWdFeHAoIihefCIgKyBqaSArICIpIiArIGUgKyAiKCIgKyBqaSArICJ8JCkiKSkgJiYgRGkoZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiB0LnRlc3QoInN0cmluZyIgPT0gdHlwZW9mIGUuY2xhc3NOYW1lICYmIGUuY2xhc3NOYW1lIHx8IF90eXBlb2YoZS5nZXRBdHRyaWJ1dGUpICE9IFBpICYmIGUuZ2V0QXR0cmlidXRlKCJjbGFzcyIpIHx8ICIiKTsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgQVRUUjogZnVuY3Rpb24gQVRUUihuLCByLCBvKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB2YXIgdCA9IGFhLmF0dHIoZSwgbik7CiAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gIiE9IiA9PT0gciA6ICFyIHx8ICh0ICs9ICIiLCAiPSIgPT09IHIgPyB0ID09PSBvIDogIiE9IiA9PT0gciA/IHQgIT09IG8gOiAiXj0iID09PSByID8gbyAmJiAwID09PSB0LmluZGV4T2YobykgOiAiKj0iID09PSByID8gbyAmJiAtMSA8IHQuaW5kZXhPZihvKSA6ICIkPSIgPT09IHIgPyBvICYmIHQuc2xpY2UoLW8ubGVuZ3RoKSA9PT0gbyA6ICJ+PSIgPT09IHIgPyAtMSA8ICgiICIgKyB0ICsgIiAiKS5pbmRleE9mKG8pIDogInw9IiA9PT0gciAmJiAodCA9PT0gbyB8fCB0LnNsaWNlKDAsIG8ubGVuZ3RoICsgMSkgPT09IG8gKyAiLSIpKTsKICAgICAgICB9OwogICAgICB9LAogICAgICBDSElMRDogZnVuY3Rpb24gQ0hJTEQobSwgZSwgdCwgZywgcCkgewogICAgICAgIHZhciBoID0gIm50aCIgIT09IG0uc2xpY2UoMCwgMyksCiAgICAgICAgICAgIHYgPSAibGFzdCIgIT09IG0uc2xpY2UoLTQpLAogICAgICAgICAgICBiID0gIm9mLXR5cGUiID09PSBlOwogICAgICAgIHJldHVybiAxID09PSBnICYmIDAgPT09IHAgPyBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuICEhZS5wYXJlbnROb2RlOwogICAgICAgIH0gOiBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICAgICAgdmFyIHIsCiAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICBpLAogICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgdSwKICAgICAgICAgICAgICBzLAogICAgICAgICAgICAgIGMgPSBoICE9IHYgPyAibmV4dFNpYmxpbmciIDogInByZXZpb3VzU2libGluZyIsCiAgICAgICAgICAgICAgbCA9IGUucGFyZW50Tm9kZSwKICAgICAgICAgICAgICBmID0gYiAmJiBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksCiAgICAgICAgICAgICAgZCA9ICFuICYmICFiOwoKICAgICAgICAgIGlmIChsKSB7CiAgICAgICAgICAgIGlmIChoKSB7CiAgICAgICAgICAgICAgZm9yICg7IGM7KSB7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSBlOyBpID0gaVtjXTspIHsKICAgICAgICAgICAgICAgICAgaWYgKGIgPyBpLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IGYgOiAxID09PSBpLm5vZGVUeXBlKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcyA9IGMgPSAib25seSIgPT09IG0gJiYgIXMgJiYgIm5leHRTaWJsaW5nIjsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiAhMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHMgPSBbdiA/IGwuZmlyc3RDaGlsZCA6IGwubGFzdENoaWxkXSwgdiAmJiBkKSB7CiAgICAgICAgICAgICAgZm9yICh1ID0gKHIgPSAobyA9IGxba2ldIHx8IChsW2tpXSA9IHt9KSlbbV0gfHwgW10pWzBdID09PSBBaSAmJiByWzFdLCBhID0gclswXSA9PT0gQWkgJiYgclsyXSwgaSA9IHUgJiYgbC5jaGlsZE5vZGVzW3VdOyBpID0gKyt1ICYmIGkgJiYgaVtjXSB8fCAoYSA9IHUgPSAwKSB8fCBzLnBvcCgpOykgewogICAgICAgICAgICAgICAgaWYgKDEgPT09IGkubm9kZVR5cGUgJiYgKythICYmIGkgPT09IGUpIHsKICAgICAgICAgICAgICAgICAgb1ttXSA9IFtBaSwgdSwgYV07CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChkICYmIChyID0gKGVba2ldIHx8IChlW2tpXSA9IHt9KSlbbV0pICYmIHJbMF0gPT09IEFpKSBhID0gclsxXTtlbHNlIGZvciAoOyAoaSA9ICsrdSAmJiBpICYmIGlbY10gfHwgKGEgPSB1ID0gMCkgfHwgcy5wb3AoKSkgJiYgKChiID8gaS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBmIDogMSAhPT0gaS5ub2RlVHlwZSkgfHwgISsrYSB8fCAoZCAmJiAoKGlba2ldIHx8IChpW2tpXSA9IHt9KSlbbV0gPSBbQWksIGFdKSwgaSAhPT0gZSkpOykgewogICAgICAgICAgICAgIDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIChhIC09IHApID09PSBnIHx8IGEgJSBnID09IDAgJiYgMCA8PSBhIC8gZzsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9LAogICAgICBQU0VVRE86IGZ1bmN0aW9uIFBTRVVETyhlLCBpKSB7CiAgICAgICAgdmFyIHQsCiAgICAgICAgICAgIGEgPSBsaS5wc2V1ZG9zW2VdIHx8IGxpLnNldEZpbHRlcnNbZS50b0xvd2VyQ2FzZSgpXSB8fCBhYS5lcnJvcigidW5zdXBwb3J0ZWQgcHNldWRvOiAiICsgZSk7CiAgICAgICAgcmV0dXJuIGFba2ldID8gYShpKSA6IDEgPCBhLmxlbmd0aCA/ICh0ID0gW2UsIGUsICIiLCBpXSwgbGkuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShlLnRvTG93ZXJDYXNlKCkpID8gc2EoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgIGZvciAodmFyIG4sIHIgPSBhKGUsIGkpLCBvID0gci5sZW5ndGg7IG8tLTspIHsKICAgICAgICAgICAgZVtuID0gSGkuY2FsbChlLCByW29dKV0gPSAhKHRbbl0gPSByW29dKTsKICAgICAgICAgIH0KICAgICAgICB9KSA6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gYShlLCAwLCB0KTsKICAgICAgICB9KSA6IGE7CiAgICAgIH0KICAgIH0sCiAgICBwc2V1ZG9zOiB7CiAgICAgIG5vdDogc2EoZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgciA9IFtdLAogICAgICAgICAgICBvID0gW10sCiAgICAgICAgICAgIHUgPSBnaShlLnJlcGxhY2UoV2ksICIkMSIpKTsKICAgICAgICByZXR1cm4gdVtraV0gPyBzYShmdW5jdGlvbiAoZSwgdCwgbiwgcikgewogICAgICAgICAgZm9yICh2YXIgbywgaSA9IHUoZSwgbnVsbCwgciwgW10pLCBhID0gZS5sZW5ndGg7IGEtLTspIHsKICAgICAgICAgICAgKG8gPSBpW2FdKSAmJiAoZVthXSA9ICEodFthXSA9IG8pKTsKICAgICAgICAgIH0KICAgICAgICB9KSA6IGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICAgICAgICByZXR1cm4gclswXSA9IGUsIHUociwgbnVsbCwgbiwgbyksIHJbMF0gPSBudWxsLCAhby5wb3AoKTsKICAgICAgICB9OwogICAgICB9KSwKICAgICAgaGFzOiBzYShmdW5jdGlvbiAodCkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIDAgPCBhYSh0LCBlKS5sZW5ndGg7CiAgICAgICAgfTsKICAgICAgfSksCiAgICAgIGNvbnRhaW5zOiBzYShmdW5jdGlvbiAodCkgewogICAgICAgIHJldHVybiB0ID0gdC5yZXBsYWNlKGlhLCBzaSksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gLTEgPCAoZS50ZXh0Q29udGVudCB8fCBlLmlubmVyVGV4dCB8fCBmaShlKSkuaW5kZXhPZih0KTsKICAgICAgICB9OwogICAgICB9KSwKICAgICAgbGFuZzogc2EoZnVuY3Rpb24gKG4pIHsKICAgICAgICByZXR1cm4gSmkudGVzdChuIHx8ICIiKSB8fCBhYS5lcnJvcigidW5zdXBwb3J0ZWQgbGFuZzogIiArIG4pLCBuID0gbi5yZXBsYWNlKGlhLCBzaSkudG9Mb3dlckNhc2UoKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0OwoKICAgICAgICAgIGRvIHsKICAgICAgICAgICAgaWYgKHQgPSB3aSA/IGUubGFuZyA6IGUuZ2V0QXR0cmlidXRlKCJ4bWw6bGFuZyIpIHx8IGUuZ2V0QXR0cmlidXRlKCJsYW5nIikpIHJldHVybiAodCA9IHQudG9Mb3dlckNhc2UoKSkgPT09IG4gfHwgMCA9PT0gdC5pbmRleE9mKG4gKyAiLSIpOwogICAgICAgICAgfSB3aGlsZSAoKGUgPSBlLnBhcmVudE5vZGUpICYmIDEgPT09IGUubm9kZVR5cGUpOwoKICAgICAgICAgIHJldHVybiAhMTsKICAgICAgICB9OwogICAgICB9KSwKICAgICAgdGFyZ2V0OiBmdW5jdGlvbiB0YXJnZXQoZSkgewogICAgICAgIHZhciB0ID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoOwogICAgICAgIHJldHVybiB0ICYmIHQuc2xpY2UoMSkgPT09IGUuaWQ7CiAgICAgIH0sCiAgICAgIHJvb3Q6IGZ1bmN0aW9uIHJvb3QoZSkgewogICAgICAgIHJldHVybiBlID09PSB4aTsKICAgICAgfSwKICAgICAgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKGUpIHsKICAgICAgICByZXR1cm4gZSA9PT0gQ2kuYWN0aXZlRWxlbWVudCAmJiAoIUNpLmhhc0ZvY3VzIHx8IENpLmhhc0ZvY3VzKCkpICYmICEhKGUudHlwZSB8fCBlLmhyZWYgfHwgfmUudGFiSW5kZXgpOwogICAgICB9LAogICAgICBlbmFibGVkOiBmdW5jdGlvbiBlbmFibGVkKGUpIHsKICAgICAgICByZXR1cm4gITEgPT09IGUuZGlzYWJsZWQ7CiAgICAgIH0sCiAgICAgIGRpc2FibGVkOiBmdW5jdGlvbiBkaXNhYmxlZChlKSB7CiAgICAgICAgcmV0dXJuICEwID09PSBlLmRpc2FibGVkOwogICAgICB9LAogICAgICBjaGVja2VkOiBmdW5jdGlvbiBjaGVja2VkKGUpIHsKICAgICAgICB2YXIgdCA9IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICByZXR1cm4gImlucHV0IiA9PT0gdCAmJiAhIWUuY2hlY2tlZCB8fCAib3B0aW9uIiA9PT0gdCAmJiAhIWUuc2VsZWN0ZWQ7CiAgICAgIH0sCiAgICAgIHNlbGVjdGVkOiBmdW5jdGlvbiBzZWxlY3RlZChlKSB7CiAgICAgICAgcmV0dXJuIGUucGFyZW50Tm9kZSAmJiBlLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwgITAgPT09IGUuc2VsZWN0ZWQ7CiAgICAgIH0sCiAgICAgIGVtcHR5OiBmdW5jdGlvbiBlbXB0eShlKSB7CiAgICAgICAgZm9yIChlID0gZS5maXJzdENoaWxkOyBlOyBlID0gZS5uZXh0U2libGluZykgewogICAgICAgICAgaWYgKGUubm9kZVR5cGUgPCA2KSByZXR1cm4gITE7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gITA7CiAgICAgIH0sCiAgICAgIHBhcmVudDogZnVuY3Rpb24gcGFyZW50KGUpIHsKICAgICAgICByZXR1cm4gIWxpLnBzZXVkb3MuZW1wdHkoZSk7CiAgICAgIH0sCiAgICAgIGhlYWRlcjogZnVuY3Rpb24gaGVhZGVyKGUpIHsKICAgICAgICByZXR1cm4gZWEudGVzdChlLm5vZGVOYW1lKTsKICAgICAgfSwKICAgICAgaW5wdXQ6IGZ1bmN0aW9uIGlucHV0KGUpIHsKICAgICAgICByZXR1cm4gWmkudGVzdChlLm5vZGVOYW1lKTsKICAgICAgfSwKICAgICAgYnV0dG9uOiBmdW5jdGlvbiBidXR0b24oZSkgewogICAgICAgIHZhciB0ID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgIHJldHVybiAiaW5wdXQiID09PSB0ICYmICJidXR0b24iID09PSBlLnR5cGUgfHwgImJ1dHRvbiIgPT09IHQ7CiAgICAgIH0sCiAgICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoZSkgewogICAgICAgIHZhciB0OwogICAgICAgIHJldHVybiAiaW5wdXQiID09PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgJiYgInRleHQiID09PSBlLnR5cGUgJiYgKG51bGwgPT0gKHQgPSBlLmdldEF0dHJpYnV0ZSgidHlwZSIpKSB8fCAidGV4dCIgPT09IHQudG9Mb3dlckNhc2UoKSk7CiAgICAgIH0sCiAgICAgIGZpcnN0OiBsYShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIFswXTsKICAgICAgfSksCiAgICAgIGxhc3Q6IGxhKGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgcmV0dXJuIFt0IC0gMV07CiAgICAgIH0pLAogICAgICBlcTogbGEoZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgICAgICByZXR1cm4gW24gPCAwID8gbiArIHQgOiBuXTsKICAgICAgfSksCiAgICAgIGV2ZW46IGxhKGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCB0OyBuICs9IDIpIHsKICAgICAgICAgIGUucHVzaChuKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBlOwogICAgICB9KSwKICAgICAgb2RkOiBsYShmdW5jdGlvbiAoZSwgdCkgewogICAgICAgIGZvciAodmFyIG4gPSAxOyBuIDwgdDsgbiArPSAyKSB7CiAgICAgICAgICBlLnB1c2gobik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZTsKICAgICAgfSksCiAgICAgIGx0OiBsYShmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICAgIGZvciAodmFyIHIgPSBuIDwgMCA/IG4gKyB0IDogbjsgMCA8PSAtLXI7KSB7CiAgICAgICAgICBlLnB1c2gocik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZTsKICAgICAgfSksCiAgICAgIGd0OiBsYShmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICAgIGZvciAodmFyIHIgPSBuIDwgMCA/IG4gKyB0IDogbjsgKytyIDwgdDspIHsKICAgICAgICAgIGUucHVzaChyKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBlOwogICAgICB9KQogICAgfQogIH0pLnBzZXVkb3MubnRoID0gbGkucHNldWRvcy5lcSwgWShbInJhZGlvIiwgImNoZWNrYm94IiwgImZpbGUiLCAicGFzc3dvcmQiLCAiaW1hZ2UiXSwgZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0OwogICAgbGkucHNldWRvc1tlXSA9ICh0ID0gZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuICJpbnB1dCIgPT09IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJiBlLnR5cGUgPT09IHQ7CiAgICB9KTsKICB9KSwgWShbInN1Ym1pdCIsICJyZXNldCJdLCBmdW5jdGlvbiAoZSkgewogICAgdmFyIG47CiAgICBsaS5wc2V1ZG9zW2VdID0gKG4gPSBlLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCA9IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgcmV0dXJuICgiaW5wdXQiID09PSB0IHx8ICJidXR0b24iID09PSB0KSAmJiBlLnR5cGUgPT09IG47CiAgICB9KTsKICB9KSwgZGEucHJvdG90eXBlID0gbGkuZmlsdGVycyA9IGxpLnBzZXVkb3MsIGxpLnNldEZpbHRlcnMgPSBuZXcgZGEoKSwgbWkgPSBhYS50b2tlbml6ZSA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICB2YXIgbiwKICAgICAgICByLAogICAgICAgIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgcywKICAgICAgICBjID0gVGlbZSArICIgIl07CiAgICBpZiAoYykgcmV0dXJuIHQgPyAwIDogYy5zbGljZSgwKTsKCiAgICBmb3IgKGEgPSBlLCB1ID0gW10sIHMgPSBsaS5wcmVGaWx0ZXI7IGE7KSB7CiAgICAgIGZvciAoaSBpbiBuICYmICEociA9IEtpLmV4ZWMoYSkpIHx8IChyICYmIChhID0gYS5zbGljZShyWzBdLmxlbmd0aCkgfHwgYSksIHUucHVzaChvID0gW10pKSwgbiA9ICExLCAociA9IFhpLmV4ZWMoYSkpICYmIChuID0gci5zaGlmdCgpLCBvLnB1c2goewogICAgICAgIHZhbHVlOiBuLAogICAgICAgIHR5cGU6IHJbMF0ucmVwbGFjZShXaSwgIiAiKQogICAgICB9KSwgYSA9IGEuc2xpY2Uobi5sZW5ndGgpKSwgbGkuZmlsdGVyKSB7CiAgICAgICAgbGkuZmlsdGVyLmhhc093blByb3BlcnR5KGkpICYmICghKHIgPSBRaVtpXS5leGVjKGEpKSB8fCBzW2ldICYmICEociA9IHNbaV0ocikpIHx8IChuID0gci5zaGlmdCgpLCBvLnB1c2goewogICAgICAgICAgdmFsdWU6IG4sCiAgICAgICAgICB0eXBlOiBpLAogICAgICAgICAgbWF0Y2hlczogcgogICAgICAgIH0pLCBhID0gYS5zbGljZShuLmxlbmd0aCkpKTsKICAgICAgfQoKICAgICAgaWYgKCFuKSBicmVhazsKICAgIH0KCiAgICByZXR1cm4gdCA/IGEubGVuZ3RoIDogYSA/IGFhLmVycm9yKGUpIDogVGkoZSwgdSkuc2xpY2UoMCk7CiAgfSwgZ2kgPSBhYS5jb21waWxlID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgIHZhciBuLAogICAgICAgIGgsCiAgICAgICAgdiwKICAgICAgICBiLAogICAgICAgIHksCiAgICAgICAgciA9IFtdLAogICAgICAgIG8gPSBbXSwKICAgICAgICBpID0gT2lbZSArICIgIl07CgogICAgaWYgKCFpKSB7CiAgICAgIGZvciAobiA9ICh0ID0gdCB8fCBtaShlKSkubGVuZ3RoOyBuLS07KSB7CiAgICAgICAgKChpID0gZnVuY3Rpb24gZSh0KSB7CiAgICAgICAgICBmb3IgKHZhciBvLCBuLCByLCBpID0gdC5sZW5ndGgsIGEgPSBsaS5yZWxhdGl2ZVt0WzBdLnR5cGVdLCB1ID0gYSB8fCBsaS5yZWxhdGl2ZVsiICJdLCBzID0gYSA/IDEgOiAwLCBjID0gZ2EoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGUgPT09IG87CiAgICAgICAgICB9LCB1LCAhMCksIGwgPSBnYShmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gLTEgPCBIaS5jYWxsKG8sIGUpOwogICAgICAgICAgfSwgdSwgITApLCBmID0gW2Z1bmN0aW9uIChlLCB0LCBuKSB7CiAgICAgICAgICAgIHZhciByID0gIWEgJiYgKG4gfHwgdCAhPT0gaGkpIHx8ICgobyA9IHQpLm5vZGVUeXBlID8gYyA6IGwpKGUsIHQsIG4pOwogICAgICAgICAgICByZXR1cm4gbyA9IG51bGwsIHI7CiAgICAgICAgICB9XTsgcyA8IGk7IHMrKykgewogICAgICAgICAgICBpZiAobiA9IGxpLnJlbGF0aXZlW3Rbc10udHlwZV0pIGYgPSBbZ2EocGEoZiksIG4pXTtlbHNlIHsKICAgICAgICAgICAgICBpZiAoKG4gPSBsaS5maWx0ZXJbdFtzXS50eXBlXS5hcHBseShudWxsLCB0W3NdLm1hdGNoZXMpKVtraV0pIHsKICAgICAgICAgICAgICAgIGZvciAociA9ICsrczsgciA8IGkgJiYgIWxpLnJlbGF0aXZlW3Rbcl0udHlwZV07IHIrKykgewogICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGUobSwgZywgcCwgaCwgdiwgdCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gaCAmJiAhaFtraV0gJiYgKGggPSBlKGgpKSwgdiAmJiAhdltraV0gJiYgKHYgPSBlKHYsIHQpKSwgc2EoZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbywKICAgICAgICAgICAgICAgICAgICAgICAgaSwKICAgICAgICAgICAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICAgICAgICAgICAgdSA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBzID0gW10sCiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSB0Lmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGUgfHwgZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBvID0gdC5sZW5ndGg7IHIgPCBvOyByKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWEoZSwgdFtyXSwgbik7CiAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG47CiAgICAgICAgICAgICAgICAgICAgfShnIHx8ICIqIiwgbi5ub2RlVHlwZSA/IFtuXSA6IG4sIFtdKSwKICAgICAgICAgICAgICAgICAgICAgICAgZiA9ICFtIHx8ICFlICYmIGcgPyBsIDogaGEobCwgdSwgbSwgbiwgciksCiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBwID8gdiB8fCAoZSA/IG0gOiBjIHx8IGgpID8gW10gOiB0IDogZjsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHAgJiYgcChmLCBkLCBuLCByKSwgaCkgZm9yIChvID0gaGEoZCwgcyksIGgobywgW10sIG4sIHIpLCBpID0gby5sZW5ndGg7IGktLTspIHsKICAgICAgICAgICAgICAgICAgICAgIChhID0gb1tpXSkgJiYgKGRbc1tpXV0gPSAhKGZbc1tpXV0gPSBhKSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgaWYgKHYgfHwgbSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodikgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobyA9IFtdLCBpID0gZC5sZW5ndGg7IGktLTspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhID0gZFtpXSkgJiYgby5wdXNoKGZbaV0gPSBhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIHYobnVsbCwgZCA9IFtdLCBvLCByKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gZC5sZW5ndGg7IGktLTspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAoYSA9IGRbaV0pICYmIC0xIDwgKG8gPSB2ID8gSGkuY2FsbChlLCBhKSA6IHVbaV0pICYmIChlW29dID0gISh0W29dID0gYSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGQgPSBoYShkID09PSB0ID8gZC5zcGxpY2UoYywgZC5sZW5ndGgpIDogZCksIHYgPyB2KG51bGwsIHQsIGQsIHIpIDogVWkuYXBwbHkodCwgZCk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSgxIDwgcyAmJiBwYShmKSwgMSA8IHMgJiYgbWEodC5zbGljZSgwLCBzIC0gMSkuY29uY2F0KHsKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIgIiA9PT0gdFtzIC0gMl0udHlwZSA/ICIqIiA6ICIiCiAgICAgICAgICAgICAgICB9KSkucmVwbGFjZShXaSwgIiQxIiksIG4sIHMgPCByICYmIGUodC5zbGljZShzLCByKSksIHIgPCBpICYmIGUodCA9IHQuc2xpY2UocikpLCByIDwgaSAmJiBtYSh0KSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBmLnB1c2gobik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gcGEoZik7CiAgICAgICAgfSh0W25dKSlba2ldID8gciA6IG8pLnB1c2goaSk7CiAgICAgIH0KCiAgICAgIChpID0gT2koZSwgKGggPSBvLCBiID0gMCA8ICh2ID0gcikubGVuZ3RoLCB5ID0gMCA8IGgubGVuZ3RoLCBiID8gc2EoYSkgOiBhKSkpLnNlbGVjdG9yID0gZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhKGUsIHQsIG4sIHIsIG8pIHsKICAgICAgdmFyIGksCiAgICAgICAgICBhLAogICAgICAgICAgdSwKICAgICAgICAgIHMgPSAwLAogICAgICAgICAgYyA9ICIwIiwKICAgICAgICAgIGwgPSBlICYmIFtdLAogICAgICAgICAgZiA9IFtdLAogICAgICAgICAgZCA9IGhpLAogICAgICAgICAgbSA9IGUgfHwgeSAmJiBsaS5maW5kLlRBRygiKiIsIG8pLAogICAgICAgICAgZyA9IEFpICs9IG51bGwgPT0gZCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IC4xLAogICAgICAgICAgcCA9IG0ubGVuZ3RoOwoKICAgICAgZm9yIChvICYmIChoaSA9IHQgIT09IENpICYmIHQpOyBjICE9PSBwICYmIG51bGwgIT0gKGkgPSBtW2NdKTsgYysrKSB7CiAgICAgICAgaWYgKHkgJiYgaSkgewogICAgICAgICAgZm9yIChhID0gMDsgdSA9IGhbYSsrXTspIHsKICAgICAgICAgICAgaWYgKHUoaSwgdCwgbikpIHsKICAgICAgICAgICAgICByLnB1c2goaSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBvICYmIChBaSA9IGcpOwogICAgICAgIH0KCiAgICAgICAgYiAmJiAoKGkgPSAhdSAmJiBpKSAmJiBzLS0sIGUgJiYgbC5wdXNoKGkpKTsKICAgICAgfQoKICAgICAgaWYgKHMgKz0gYywgYiAmJiBjICE9PSBzKSB7CiAgICAgICAgZm9yIChhID0gMDsgdSA9IHZbYSsrXTspIHsKICAgICAgICAgIHUobCwgZiwgdCwgbik7CiAgICAgICAgfQoKICAgICAgICBpZiAoZSkgewogICAgICAgICAgaWYgKDAgPCBzKSBmb3IgKDsgYy0tOykgewogICAgICAgICAgICBsW2NdIHx8IGZbY10gfHwgKGZbY10gPSBNaS5jYWxsKHIpKTsKICAgICAgICAgIH0KICAgICAgICAgIGYgPSBoYShmKTsKICAgICAgICB9CgogICAgICAgIFVpLmFwcGx5KHIsIGYpLCBvICYmICFlICYmIDAgPCBmLmxlbmd0aCAmJiAxIDwgcyArIHYubGVuZ3RoICYmIGFhLnVuaXF1ZVNvcnQocik7CiAgICAgIH0KCiAgICAgIHJldHVybiBvICYmIChBaSA9IGcsIGhpID0gZCksIGw7CiAgICB9CgogICAgcmV0dXJuIGk7CiAgfSwgcGkgPSBhYS5zZWxlY3QgPSBmdW5jdGlvbiAoZSwgdCwgbiwgcikgewogICAgdmFyIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgcywKICAgICAgICBjID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgZSAmJiBlLAogICAgICAgIGwgPSAhciAmJiBtaShlID0gYy5zZWxlY3RvciB8fCBlKTsKCiAgICBpZiAobiA9IG4gfHwgW10sIDEgPT09IGwubGVuZ3RoKSB7CiAgICAgIGlmICgyIDwgKGkgPSBsWzBdID0gbFswXS5zbGljZSgwKSkubGVuZ3RoICYmICJJRCIgPT09IChhID0gaVswXSkudHlwZSAmJiBjaS5nZXRCeUlkICYmIDkgPT09IHQubm9kZVR5cGUgJiYgd2kgJiYgbGkucmVsYXRpdmVbaVsxXS50eXBlXSkgewogICAgICAgIGlmICghKHQgPSAobGkuZmluZC5JRChhLm1hdGNoZXNbMF0ucmVwbGFjZShpYSwgc2kpLCB0KSB8fCBbXSlbMF0pKSByZXR1cm4gbjsKICAgICAgICBjICYmICh0ID0gdC5wYXJlbnROb2RlKSwgZSA9IGUuc2xpY2UoaS5zaGlmdCgpLnZhbHVlLmxlbmd0aCk7CiAgICAgIH0KCiAgICAgIGZvciAobyA9IFFpLm5lZWRzQ29udGV4dC50ZXN0KGUpID8gMCA6IGkubGVuZ3RoOyBvLS0gJiYgKGEgPSBpW29dLCAhbGkucmVsYXRpdmVbdSA9IGEudHlwZV0pOykgewogICAgICAgIGlmICgocyA9IGxpLmZpbmRbdV0pICYmIChyID0gcyhhLm1hdGNoZXNbMF0ucmVwbGFjZShpYSwgc2kpLCByYS50ZXN0KGlbMF0udHlwZSkgJiYgZmEodC5wYXJlbnROb2RlKSB8fCB0KSkpIHsKICAgICAgICAgIGlmIChpLnNwbGljZShvLCAxKSwgIShlID0gci5sZW5ndGggJiYgbWEoaSkpKSByZXR1cm4gVWkuYXBwbHkobiwgciksIG47CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gKGMgfHwgZ2koZSwgbCkpKHIsIHQsICF3aSwgbiwgcmEudGVzdChlKSAmJiBmYSh0LnBhcmVudE5vZGUpIHx8IHQpLCBuOwogIH0sIGNpLnNvcnRTdGFibGUgPSBraS5zcGxpdCgiIikuc29ydChCaSkuam9pbigiIikgPT09IGtpLCBjaS5kZXRlY3REdXBsaWNhdGVzID0gISFiaSwgeWkoKSwgY2kuc29ydERldGFjaGVkID0gITA7CgogIHZhciBrYSA9IGRvY3VtZW50LAogICAgICBfYSA9IEFycmF5LnByb3RvdHlwZS5wdXNoLAogICAgICBBYSA9IEFycmF5LnByb3RvdHlwZS5zbGljZSwKICAgICAgUmEgPSAvXig/OlteIzxdKig8W1x3XFddKz4pW14+XSokfCMoW1x3XC1dKikkKS8sCiAgICAgIERhID0gYWkuRXZlbnQsCiAgICAgIFRhID0gRXQubWFrZU1hcCgiY2hpbGRyZW4sY29udGVudHMsbmV4dCxwcmV2IiksCiAgICAgIE9hID0gZnVuY3Rpb24gT2EoZSwgdCwgbiwgcikgewogICAgdmFyIG87CiAgICBpZiAoYmEodCkpIHQgPSB5YSh0LCB6YShlWzBdKSk7ZWxzZSBpZiAodC5sZW5ndGggJiYgIXQubm9kZVR5cGUpIHsKICAgICAgaWYgKHQgPSBXYS5tYWtlQXJyYXkodCksIHIpIGZvciAobyA9IHQubGVuZ3RoIC0gMTsgMCA8PSBvOyBvLS0pIHsKICAgICAgICBPYShlLCB0W29dLCBuLCByKTsKICAgICAgfSBlbHNlIGZvciAobyA9IDA7IG8gPCB0Lmxlbmd0aDsgbysrKSB7CiAgICAgICAgT2EoZSwgdFtvXSwgbiwgcik7CiAgICAgIH0KICAgICAgcmV0dXJuIGU7CiAgICB9CiAgICBpZiAodC5ub2RlVHlwZSkgZm9yIChvID0gZS5sZW5ndGg7IG8tLTspIHsKICAgICAgbi5jYWxsKGVbb10sIHQpOwogICAgfQogICAgcmV0dXJuIGU7CiAgfSwKICAgICAgQmEgPSBFdC5tYWtlTWFwKCJmaWxsT3BhY2l0eSBmb250V2VpZ2h0IGxpbmVIZWlnaHQgb3BhY2l0eSBvcnBoYW5zIHdpZG93cyB6SW5kZXggem9vbSIsICIgIiksCiAgICAgIFBhID0gRXQubWFrZU1hcCgiY2hlY2tlZCBjb21wYWN0IGRlY2xhcmUgZGVmZXIgZGlzYWJsZWQgaXNtYXAgbXVsdGlwbGUgbm9ocmVmIG5vc2hhZGUgbm93cmFwIHJlYWRvbmx5IHNlbGVjdGVkIiwgIiAiKSwKICAgICAgTGEgPSB7CiAgICBmb3I6ICJodG1sRm9yIiwKICAgIGNsYXNzOiAiY2xhc3NOYW1lIiwKICAgIHJlYWRvbmx5OiAicmVhZE9ubHkiCiAgfSwKICAgICAgSWEgPSB7CiAgICBmbG9hdDogImNzc0Zsb2F0IgogIH0sCiAgICAgIE1hID0ge30sCiAgICAgIEZhID0ge30sCiAgICAgIFVhID0gL15ccyp8XHMqJC9nLAogICAgICB6YSA9IGZ1bmN0aW9uIHphKGUpIHsKICAgIHJldHVybiBlID8gOSA9PT0gZS5ub2RlVHlwZSA/IGUgOiBlLm93bmVyRG9jdW1lbnQgOiBrYTsKICB9OwoKICBmdW5jdGlvbiBIYShlLCB0LCBuKSB7CiAgICB2YXIgciA9IFtdLAogICAgICAgIG8gPSBlW3RdOwoKICAgIGZvciAoInN0cmluZyIgIT0gdHlwZW9mIG4gJiYgbiBpbnN0YW5jZW9mIFdhICYmIChuID0gblswXSk7IG8gJiYgOSAhPT0gby5ub2RlVHlwZTspIHsKICAgICAgaWYgKHZvaWQgMCAhPT0gbikgewogICAgICAgIGlmIChvID09PSBuKSBicmVhazsKICAgICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIG4gJiYgV2EobykuaXMobikpIGJyZWFrOwogICAgICB9CgogICAgICAxID09PSBvLm5vZGVUeXBlICYmIHIucHVzaChvKSwgbyA9IG9bdF07CiAgICB9CgogICAgcmV0dXJuIHI7CiAgfQoKICBmdW5jdGlvbiBqYShlLCB0LCBuLCByKSB7CiAgICB2YXIgbyA9IFtdOwoKICAgIGZvciAociBpbnN0YW5jZW9mIFdhICYmIChyID0gclswXSk7IGU7IGUgPSBlW3RdKSB7CiAgICAgIGlmICghbiB8fCBlLm5vZGVUeXBlID09PSBuKSB7CiAgICAgICAgaWYgKHZvaWQgMCAhPT0gcikgewogICAgICAgICAgaWYgKGUgPT09IHIpIGJyZWFrOwogICAgICAgICAgaWYgKCJzdHJpbmciID09IHR5cGVvZiByICYmIFdhKGUpLmlzKHIpKSBicmVhazsKICAgICAgICB9CgogICAgICAgIG8ucHVzaChlKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBvOwogIH0KCiAgZnVuY3Rpb24gVmEoZSwgdCwgbikgewogICAgZm9yIChlID0gZVt0XTsgZTsgZSA9IGVbdF0pIHsKICAgICAgaWYgKGUubm9kZVR5cGUgPT09IG4pIHJldHVybiBlOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH0KCiAgZnVuY3Rpb24gcWEoZSwgdCkgewogICAgdmFyIG4gPSB0LmF0dHIoInN0eWxlIiksCiAgICAgICAgciA9IGUuc2VyaWFsaXplKGUucGFyc2UobiksIHRbMF0ubm9kZU5hbWUpIHx8IG51bGw7CiAgICB0LmF0dHIoImRhdGEtbWNlLXN0eWxlIiwgcik7CiAgfQoKICBmdW5jdGlvbiAkYShlLCB0KSB7CiAgICB2YXIgbiwKICAgICAgICByLAogICAgICAgIG8gPSAwOwogICAgaWYgKGUpIGZvciAobiA9IGUubm9kZVR5cGUsIGUgPSBlLnByZXZpb3VzU2libGluZzsgZTsgZSA9IGUucHJldmlvdXNTaWJsaW5nKSB7CiAgICAgIHIgPSBlLm5vZGVUeXBlLCAoIXQgfHwgMyAhPT0gciB8fCByICE9PSBuICYmIGUubm9kZVZhbHVlLmxlbmd0aCkgJiYgKG8rKywgbiA9IHIpOwogICAgfQogICAgcmV0dXJuIG87CiAgfQoKICB3YS5mbiA9IHdhLnByb3RvdHlwZSA9IHsKICAgIGNvbnN0cnVjdG9yOiB3YSwKICAgIHNlbGVjdG9yOiAiIiwKICAgIGNvbnRleHQ6IG51bGwsCiAgICBsZW5ndGg6IDAsCiAgICBpbml0OiBmdW5jdGlvbiBpbml0KGUsIHQpIHsKICAgICAgdmFyIG4sCiAgICAgICAgICByLAogICAgICAgICAgbyA9IHRoaXM7CiAgICAgIGlmICghZSkgcmV0dXJuIG87CiAgICAgIGlmIChlLm5vZGVUeXBlKSByZXR1cm4gby5jb250ZXh0ID0gb1swXSA9IGUsIG8ubGVuZ3RoID0gMSwgbzsKICAgICAgaWYgKHQgJiYgdC5ub2RlVHlwZSkgby5jb250ZXh0ID0gdDtlbHNlIHsKICAgICAgICBpZiAodCkgcmV0dXJuIFdhKGUpLmF0dHIodCk7CiAgICAgICAgby5jb250ZXh0ID0gdCA9IGRvY3VtZW50OwogICAgICB9CgogICAgICBpZiAoYmEoZSkpIHsKICAgICAgICBpZiAoIShuID0gIjwiID09PSAoby5zZWxlY3RvciA9IGUpLmNoYXJBdCgwKSAmJiAiPiIgPT09IGUuY2hhckF0KGUubGVuZ3RoIC0gMSkgJiYgMyA8PSBlLmxlbmd0aCA/IFtudWxsLCBlLCBudWxsXSA6IFJhLmV4ZWMoZSkpKSByZXR1cm4gV2EodCkuZmluZChlKTsKICAgICAgICBpZiAoblsxXSkgZm9yIChyID0geWEoZSwgemEodCkpLmZpcnN0Q2hpbGQ7IHI7KSB7CiAgICAgICAgICBfYS5jYWxsKG8sIHIpLCByID0gci5uZXh0U2libGluZzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKCEociA9IHphKHQpLmdldEVsZW1lbnRCeUlkKG5bMl0pKSkgcmV0dXJuIG87CiAgICAgICAgICBpZiAoci5pZCAhPT0gblsyXSkgcmV0dXJuIG8uZmluZChlKTsKICAgICAgICAgIG8ubGVuZ3RoID0gMSwgb1swXSA9IHI7CiAgICAgICAgfQogICAgICB9IGVsc2UgdGhpcy5hZGQoZSwgITEpOwoKICAgICAgcmV0dXJuIG87CiAgICB9LAogICAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHsKICAgICAgcmV0dXJuIEV0LnRvQXJyYXkodGhpcyk7CiAgICB9LAogICAgYWRkOiBmdW5jdGlvbiBhZGQoZSwgdCkgewogICAgICB2YXIgbiwgcjsKICAgICAgaWYgKGJhKGUpKSByZXR1cm4gdGhpcy5hZGQoV2EoZSkpOwogICAgICBpZiAoITEgIT09IHQpIGZvciAobiA9IFdhLnVuaXF1ZSh0aGlzLnRvQXJyYXkoKS5jb25jYXQoV2EubWFrZUFycmF5KGUpKSksIHRoaXMubGVuZ3RoID0gbi5sZW5ndGgsIHIgPSAwOyByIDwgbi5sZW5ndGg7IHIrKykgewogICAgICAgIHRoaXNbcl0gPSBuW3JdOwogICAgICB9IGVsc2UgX2EuYXBwbHkodGhpcywgV2EubWFrZUFycmF5KGUpKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAogICAgYXR0cjogZnVuY3Rpb24gYXR0cih0LCBuKSB7CiAgICAgIHZhciBlLAogICAgICAgICAgciA9IHRoaXM7CiAgICAgIGlmICgib2JqZWN0IiA9PSBfdHlwZW9mKHQpKSBFYSh0LCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgIHIuYXR0cihlLCB0KTsKICAgICAgfSk7ZWxzZSB7CiAgICAgICAgaWYgKCF2YShuKSkgewogICAgICAgICAgaWYgKHJbMF0gJiYgMSA9PT0gclswXS5ub2RlVHlwZSkgewogICAgICAgICAgICBpZiAoKGUgPSBNYVt0XSkgJiYgZS5nZXQpIHJldHVybiBlLmdldChyWzBdLCB0KTsKICAgICAgICAgICAgaWYgKFBhW3RdKSByZXR1cm4gci5wcm9wKHQpID8gdCA6IHZvaWQgMDsKICAgICAgICAgICAgbnVsbCA9PT0gKG4gPSByWzBdLmdldEF0dHJpYnV0ZSh0LCAyKSkgJiYgKG4gPSB2b2lkIDApOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBuOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBlOwogICAgICAgICAgMSA9PT0gdGhpcy5ub2RlVHlwZSAmJiAoKGUgPSBNYVt0XSkgJiYgZS5zZXQgPyBlLnNldCh0aGlzLCBuKSA6IG51bGwgPT09IG4gPyB0aGlzLnJlbW92ZUF0dHJpYnV0ZSh0LCAyKSA6IHRoaXMuc2V0QXR0cmlidXRlKHQsIG4sIDIpKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gcjsKICAgIH0sCiAgICByZW1vdmVBdHRyOiBmdW5jdGlvbiByZW1vdmVBdHRyKGUpIHsKICAgICAgcmV0dXJuIHRoaXMuYXR0cihlLCBudWxsKTsKICAgIH0sCiAgICBwcm9wOiBmdW5jdGlvbiBwcm9wKGUsIHQpIHsKICAgICAgdmFyIG4gPSB0aGlzOwogICAgICBpZiAoIm9iamVjdCIgPT0gX3R5cGVvZihlID0gTGFbZV0gfHwgZSkpIEVhKGUsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgbi5wcm9wKGUsIHQpOwogICAgICB9KTtlbHNlIHsKICAgICAgICBpZiAoIXZhKHQpKSByZXR1cm4gblswXSAmJiBuWzBdLm5vZGVUeXBlICYmIGUgaW4gblswXSA/IG5bMF1bZV0gOiB0OwogICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAxID09PSB0aGlzLm5vZGVUeXBlICYmICh0aGlzW2VdID0gdCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIG47CiAgICB9LAogICAgY3NzOiBmdW5jdGlvbiBjc3ModCwgbikgewogICAgICBmdW5jdGlvbiBlKGUpIHsKICAgICAgICByZXR1cm4gZS5yZXBsYWNlKC8tKFxEKS9nLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgcmV0dXJuIHQudG9VcHBlckNhc2UoKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gcihlKSB7CiAgICAgICAgcmV0dXJuIGUucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiAiLSIgKyBlOwogICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgbywKICAgICAgICAgIGksCiAgICAgICAgICBhID0gdGhpczsKICAgICAgaWYgKCJvYmplY3QiID09IF90eXBlb2YodCkpIEVhKHQsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgYS5jc3MoZSwgdCk7CiAgICAgIH0pO2Vsc2UgaWYgKHZhKG4pKSB0ID0gZSh0KSwgIm51bWJlciIgIT0gdHlwZW9mIG4gfHwgQmFbdF0gfHwgKG4gPSBuLnRvU3RyaW5nKCkgKyAicHgiKSwgYS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZSA9IHRoaXMuc3R5bGU7CiAgICAgICAgaWYgKChpID0gRmFbdF0pICYmIGkuc2V0KSBpLnNldCh0aGlzLCBuKTtlbHNlIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHRoaXMuc3R5bGVbSWFbdF0gfHwgdF0gPSBuOwogICAgICAgICAgfSBjYXRjaCAoZSkge30KCiAgICAgICAgICBudWxsICE9PSBuICYmICIiICE9PSBuIHx8IChlLnJlbW92ZVByb3BlcnR5ID8gZS5yZW1vdmVQcm9wZXJ0eShyKHQpKSA6IGUucmVtb3ZlQXR0cmlidXRlKHQpKTsKICAgICAgICB9CiAgICAgIH0pO2Vsc2UgewogICAgICAgIGlmIChvID0gYVswXSwgKGkgPSBGYVt0XSkgJiYgaS5nZXQpIHJldHVybiBpLmdldChvKTsKICAgICAgICBpZiAoIW8ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgcmV0dXJuIG8uY3VycmVudFN0eWxlID8gby5jdXJyZW50U3R5bGVbZSh0KV0gOiAiIjsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJldHVybiBvLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShvLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHIodCkpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGE7CiAgICB9LAogICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7CiAgICAgIGZvciAodmFyIGUsIHQgPSB0aGlzLmxlbmd0aDsgdC0tOykgewogICAgICAgIGUgPSB0aGlzW3RdLCBEYS5jbGVhbihlKSwgZS5wYXJlbnROb2RlICYmIGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAogICAgZW1wdHk6IGZ1bmN0aW9uIGVtcHR5KCkgewogICAgICBmb3IgKHZhciBlLCB0ID0gdGhpcy5sZW5ndGg7IHQtLTspIHsKICAgICAgICBmb3IgKGUgPSB0aGlzW3RdOyBlLmZpcnN0Q2hpbGQ7KSB7CiAgICAgICAgICBlLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gdGhpczsKICAgIH0sCiAgICBodG1sOiBmdW5jdGlvbiBodG1sKHQpIHsKICAgICAgdmFyIG47CgogICAgICBpZiAodmEodCkpIHsKICAgICAgICBuID0gdGhpcy5sZW5ndGg7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKDsgbi0tOykgewogICAgICAgICAgICB0aGlzW25dLmlubmVySFRNTCA9IHQ7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgV2EodGhpc1tuXSkuZW1wdHkoKS5hcHBlbmQodCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLmlubmVySFRNTCA6ICIiOwogICAgfSwKICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoZSkgewogICAgICB2YXIgdDsKCiAgICAgIGlmICh2YShlKSkgewogICAgICAgIGZvciAodCA9IHRoaXMubGVuZ3RoOyB0LS07KSB7CiAgICAgICAgICAiaW5uZXJUZXh0IiBpbiB0aGlzW3RdID8gdGhpc1t0XS5pbm5lclRleHQgPSBlIDogdGhpc1swXS50ZXh0Q29udGVudCA9IGU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLmlubmVyVGV4dCB8fCB0aGlzWzBdLnRleHRDb250ZW50IDogIiI7CiAgICB9LAogICAgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQoKSB7CiAgICAgIHJldHVybiBPYSh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgKDEgPT09IHRoaXMubm9kZVR5cGUgfHwgdGhpcy5ob3N0ICYmIDEgPT09IHRoaXMuaG9zdC5ub2RlVHlwZSkgJiYgdGhpcy5hcHBlbmRDaGlsZChlKTsKICAgICAgfSk7CiAgICB9LAogICAgcHJlcGVuZDogZnVuY3Rpb24gcHJlcGVuZCgpIHsKICAgICAgcmV0dXJuIE9hKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAoMSA9PT0gdGhpcy5ub2RlVHlwZSB8fCB0aGlzLmhvc3QgJiYgMSA9PT0gdGhpcy5ob3N0Lm5vZGVUeXBlKSAmJiB0aGlzLmluc2VydEJlZm9yZShlLCB0aGlzLmZpcnN0Q2hpbGQpOwogICAgICB9LCAhMCk7CiAgICB9LAogICAgYmVmb3JlOiBmdW5jdGlvbiBiZWZvcmUoKSB7CiAgICAgIHJldHVybiB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSA/IE9hKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGUpIHsKICAgICAgICB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsIHRoaXMpOwogICAgICB9KSA6IHRoaXM7CiAgICB9LAogICAgYWZ0ZXI6IGZ1bmN0aW9uIGFmdGVyKCkgewogICAgICByZXR1cm4gdGhpc1swXSAmJiB0aGlzWzBdLnBhcmVudE5vZGUgPyBPYSh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLCB0aGlzLm5leHRTaWJsaW5nKTsKICAgICAgfSwgITApIDogdGhpczsKICAgIH0sCiAgICBhcHBlbmRUbzogZnVuY3Rpb24gYXBwZW5kVG8oZSkgewogICAgICByZXR1cm4gV2EoZSkuYXBwZW5kKHRoaXMpLCB0aGlzOwogICAgfSwKICAgIHByZXBlbmRUbzogZnVuY3Rpb24gcHJlcGVuZFRvKGUpIHsKICAgICAgcmV0dXJuIFdhKGUpLnByZXBlbmQodGhpcyksIHRoaXM7CiAgICB9LAogICAgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uIHJlcGxhY2VXaXRoKGUpIHsKICAgICAgcmV0dXJuIHRoaXMuYmVmb3JlKGUpLnJlbW92ZSgpOwogICAgfSwKICAgIHdyYXA6IGZ1bmN0aW9uIHdyYXAoZSkgewogICAgICByZXR1cm4geGEodGhpcywgZSk7CiAgICB9LAogICAgd3JhcEFsbDogZnVuY3Rpb24gd3JhcEFsbChlKSB7CiAgICAgIHJldHVybiB4YSh0aGlzLCBlLCAhMCk7CiAgICB9LAogICAgd3JhcElubmVyOiBmdW5jdGlvbiB3cmFwSW5uZXIoZSkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICBXYSh0aGlzKS5jb250ZW50cygpLndyYXBBbGwoZSk7CiAgICAgIH0pLCB0aGlzOwogICAgfSwKICAgIHVud3JhcDogZnVuY3Rpb24gdW53cmFwKCkgewogICAgICByZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICBXYSh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpOwogICAgICB9KTsKICAgIH0sCiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgIHZhciBlID0gW107CiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgIGUucHVzaCh0aGlzLmNsb25lTm9kZSghMCkpOwogICAgICB9KSwgV2EoZSk7CiAgICB9LAogICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIGFkZENsYXNzKGUpIHsKICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlQ2xhc3MoZSwgITApOwogICAgfSwKICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiByZW1vdmVDbGFzcyhlKSB7CiAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUNsYXNzKGUsICExKTsKICAgIH0sCiAgICB0b2dnbGVDbGFzczogZnVuY3Rpb24gdG9nZ2xlQ2xhc3MobywgaSkgewogICAgICB2YXIgZSA9IHRoaXM7CiAgICAgIHJldHVybiAic3RyaW5nIiAhPSB0eXBlb2YgbyB8fCAoLTEgIT09IG8uaW5kZXhPZigiICIpID8gRWEoby5zcGxpdCgiICIpLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgZS50b2dnbGVDbGFzcyh0aGlzLCBpKTsKICAgICAgfSkgOiBlLmVhY2goZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICB2YXIgbiwKICAgICAgICAgICAgciA9IENhKHQsIG8pOwogICAgICAgIHIgIT09IGkgJiYgKG4gPSB0LmNsYXNzTmFtZSwgciA/IHQuY2xhc3NOYW1lID0gU2EoKCIgIiArIG4gKyAiICIpLnJlcGxhY2UoIiAiICsgbyArICIgIiwgIiAiKSkgOiB0LmNsYXNzTmFtZSArPSBuID8gIiAiICsgbyA6IG8pOwogICAgICB9KSksIGU7CiAgICB9LAogICAgaGFzQ2xhc3M6IGZ1bmN0aW9uIGhhc0NsYXNzKGUpIHsKICAgICAgcmV0dXJuIENhKHRoaXNbMF0sIGUpOwogICAgfSwKICAgIGVhY2g6IGZ1bmN0aW9uIGVhY2goZSkgewogICAgICByZXR1cm4gRWEodGhpcywgZSk7CiAgICB9LAogICAgb246IGZ1bmN0aW9uIG9uKGUsIHQpIHsKICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgRGEuYmluZCh0aGlzLCBlLCB0KTsKICAgICAgfSk7CiAgICB9LAogICAgb2ZmOiBmdW5jdGlvbiBvZmYoZSwgdCkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICBEYS51bmJpbmQodGhpcywgZSwgdCk7CiAgICAgIH0pOwogICAgfSwKICAgIHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIoZSkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAib2JqZWN0IiA9PSBfdHlwZW9mKGUpID8gRGEuZmlyZSh0aGlzLCBlLnR5cGUsIGUpIDogRGEuZmlyZSh0aGlzLCBlKTsKICAgICAgfSk7CiAgICB9LAogICAgc2hvdzogZnVuY3Rpb24gc2hvdygpIHsKICAgICAgcmV0dXJuIHRoaXMuY3NzKCJkaXNwbGF5IiwgIiIpOwogICAgfSwKICAgIGhpZGU6IGZ1bmN0aW9uIGhpZGUoKSB7CiAgICAgIHJldHVybiB0aGlzLmNzcygiZGlzcGxheSIsICJub25lIik7CiAgICB9LAogICAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKCkgewogICAgICByZXR1cm4gV2EoQWEuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgICB9LAogICAgZXE6IGZ1bmN0aW9uIGVxKGUpIHsKICAgICAgcmV0dXJuIC0xID09PSBlID8gdGhpcy5zbGljZShlKSA6IHRoaXMuc2xpY2UoZSwgK2UgKyAxKTsKICAgIH0sCiAgICBmaXJzdDogZnVuY3Rpb24gZmlyc3QoKSB7CiAgICAgIHJldHVybiB0aGlzLmVxKDApOwogICAgfSwKICAgIGxhc3Q6IGZ1bmN0aW9uIGxhc3QoKSB7CiAgICAgIHJldHVybiB0aGlzLmVxKC0xKTsKICAgIH0sCiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKGUpIHsKICAgICAgZm9yICh2YXIgdCA9IFtdLCBuID0gMCwgciA9IHRoaXMubGVuZ3RoOyBuIDwgcjsgbisrKSB7CiAgICAgICAgV2EuZmluZChlLCB0aGlzW25dLCB0KTsKICAgICAgfQoKICAgICAgcmV0dXJuIFdhKHQpOwogICAgfSwKICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKG4pIHsKICAgICAgcmV0dXJuIFdhKCJmdW5jdGlvbiIgPT0gdHlwZW9mIG4gPyBOYSh0aGlzLnRvQXJyYXkoKSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICByZXR1cm4gbih0LCBlKTsKICAgICAgfSkgOiBXYS5maWx0ZXIobiwgdGhpcy50b0FycmF5KCkpKTsKICAgIH0sCiAgICBjbG9zZXN0OiBmdW5jdGlvbiBjbG9zZXN0KG4pIHsKICAgICAgdmFyIHIgPSBbXTsKICAgICAgcmV0dXJuIG4gaW5zdGFuY2VvZiBXYSAmJiAobiA9IG5bMF0pLCB0aGlzLmVhY2goZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICBmb3IgKDsgdDspIHsKICAgICAgICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgbiAmJiBXYSh0KS5pcyhuKSkgewogICAgICAgICAgICByLnB1c2godCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh0ID09PSBuKSB7CiAgICAgICAgICAgIHIucHVzaCh0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgICAgdCA9IHQucGFyZW50Tm9kZTsKICAgICAgICB9CiAgICAgIH0pLCBXYShyKTsKICAgIH0sCiAgICBvZmZzZXQ6IGZ1bmN0aW9uIG9mZnNldChlKSB7CiAgICAgIHZhciB0LAogICAgICAgICAgbiwKICAgICAgICAgIHIsCiAgICAgICAgICBvLAogICAgICAgICAgaSA9IDAsCiAgICAgICAgICBhID0gMDsKICAgICAgcmV0dXJuIGUgPyB0aGlzLmNzcyhlKSA6ICgodCA9IHRoaXNbMF0pICYmIChyID0gKG4gPSB0Lm93bmVyRG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudCwgdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgKGkgPSAobyA9IHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLmxlZnQgKyAoci5zY3JvbGxMZWZ0IHx8IG4uYm9keS5zY3JvbGxMZWZ0KSAtIHIuY2xpZW50TGVmdCwgYSA9IG8udG9wICsgKHIuc2Nyb2xsVG9wIHx8IG4uYm9keS5zY3JvbGxUb3ApIC0gci5jbGllbnRUb3ApKSwgewogICAgICAgIGxlZnQ6IGksCiAgICAgICAgdG9wOiBhCiAgICAgIH0pOwogICAgfSwKICAgIHB1c2g6IF9hLAogICAgc29ydDogQXJyYXkucHJvdG90eXBlLnNvcnQsCiAgICBzcGxpY2U6IEFycmF5LnByb3RvdHlwZS5zcGxpY2UKICB9LCBFdC5leHRlbmQod2EsIHsKICAgIGV4dGVuZDogRXQuZXh0ZW5kLAogICAgbWFrZUFycmF5OiBmdW5jdGlvbiBtYWtlQXJyYXkoZSkgewogICAgICByZXR1cm4gZSAmJiBlID09PSBlLndpbmRvdyB8fCBlLm5vZGVUeXBlID8gW2VdIDogRXQudG9BcnJheShlKTsKICAgIH0sCiAgICBpbkFycmF5OiBmdW5jdGlvbiBpbkFycmF5KGUsIHQpIHsKICAgICAgdmFyIG47CiAgICAgIGlmICh0LmluZGV4T2YpIHJldHVybiB0LmluZGV4T2YoZSk7CgogICAgICBmb3IgKG4gPSB0Lmxlbmd0aDsgbi0tOykgewogICAgICAgIGlmICh0W25dID09PSBlKSByZXR1cm4gbjsKICAgICAgfQoKICAgICAgcmV0dXJuIC0xOwogICAgfSwKICAgIGlzQXJyYXk6IEV0LmlzQXJyYXksCiAgICBlYWNoOiBFYSwKICAgIHRyaW06IFNhLAogICAgZ3JlcDogTmEsCiAgICBmaW5kOiBhYSwKICAgIGV4cHI6IGFhLnNlbGVjdG9ycywKICAgIHVuaXF1ZTogYWEudW5pcXVlU29ydCwKICAgIHRleHQ6IGFhLmdldFRleHQsCiAgICBjb250YWluczogYWEuY29udGFpbnMsCiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihlLCB0LCBuKSB7CiAgICAgIHZhciByID0gdC5sZW5ndGg7CgogICAgICBmb3IgKG4gJiYgKGUgPSAiOm5vdCgiICsgZSArICIpIik7IHItLTspIHsKICAgICAgICAxICE9PSB0W3JdLm5vZGVUeXBlICYmIHQuc3BsaWNlKHIsIDEpOwogICAgICB9CgogICAgICByZXR1cm4gMSA9PT0gdC5sZW5ndGggPyBXYS5maW5kLm1hdGNoZXNTZWxlY3Rvcih0WzBdLCBlKSA/IFt0WzBdXSA6IFtdIDogV2EuZmluZC5tYXRjaGVzKGUsIHQpOwogICAgfQogIH0pLCBFYSh7CiAgICBwYXJlbnQ6IGZ1bmN0aW9uIHBhcmVudChlKSB7CiAgICAgIHZhciB0ID0gZS5wYXJlbnROb2RlOwogICAgICByZXR1cm4gdCAmJiAxMSAhPT0gdC5ub2RlVHlwZSA/IHQgOiBudWxsOwogICAgfSwKICAgIHBhcmVudHM6IGZ1bmN0aW9uIHBhcmVudHMoZSkgewogICAgICByZXR1cm4gSGEoZSwgInBhcmVudE5vZGUiKTsKICAgIH0sCiAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KGUpIHsKICAgICAgcmV0dXJuIFZhKGUsICJuZXh0U2libGluZyIsIDEpOwogICAgfSwKICAgIHByZXY6IGZ1bmN0aW9uIHByZXYoZSkgewogICAgICByZXR1cm4gVmEoZSwgInByZXZpb3VzU2libGluZyIsIDEpOwogICAgfSwKICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihlKSB7CiAgICAgIHJldHVybiBqYShlLmZpcnN0Q2hpbGQsICJuZXh0U2libGluZyIsIDEpOwogICAgfSwKICAgIGNvbnRlbnRzOiBmdW5jdGlvbiBjb250ZW50cyhlKSB7CiAgICAgIHJldHVybiBFdC50b0FycmF5KCgiaWZyYW1lIiA9PT0gZS5ub2RlTmFtZSA/IGUuY29udGVudERvY3VtZW50IHx8IGUuY29udGVudFdpbmRvdy5kb2N1bWVudCA6IGUpLmNoaWxkTm9kZXMpOwogICAgfQogIH0sIGZ1bmN0aW9uIChyLCBvKSB7CiAgICB3YS5mbltyXSA9IGZ1bmN0aW9uICh0KSB7CiAgICAgIHZhciBuID0gW107CiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGUgPSBvLmNhbGwobiwgdGhpcywgdCwgbik7CiAgICAgICAgZSAmJiAoV2EuaXNBcnJheShlKSA/IG4ucHVzaC5hcHBseShuLCBlKSA6IG4ucHVzaChlKSk7CiAgICAgIH0pLCAxIDwgdGhpcy5sZW5ndGggJiYgKFRhW3JdIHx8IChuID0gV2EudW5pcXVlKG4pKSwgMCA9PT0gci5pbmRleE9mKCJwYXJlbnRzIikgJiYgKG4gPSBuLnJldmVyc2UoKSkpOwogICAgICB2YXIgZSA9IFdhKG4pOwogICAgICByZXR1cm4gdCA/IGUuZmlsdGVyKHQpIDogZTsKICAgIH07CiAgfSksIEVhKHsKICAgIHBhcmVudHNVbnRpbDogZnVuY3Rpb24gcGFyZW50c1VudGlsKGUsIHQpIHsKICAgICAgcmV0dXJuIEhhKGUsICJwYXJlbnROb2RlIiwgdCk7CiAgICB9LAogICAgbmV4dFVudGlsOiBmdW5jdGlvbiBuZXh0VW50aWwoZSwgdCkgewogICAgICByZXR1cm4gamEoZSwgIm5leHRTaWJsaW5nIiwgMSwgdCkuc2xpY2UoMSk7CiAgICB9LAogICAgcHJldlVudGlsOiBmdW5jdGlvbiBwcmV2VW50aWwoZSwgdCkgewogICAgICByZXR1cm4gamEoZSwgInByZXZpb3VzU2libGluZyIsIDEsIHQpLnNsaWNlKDEpOwogICAgfQogIH0sIGZ1bmN0aW9uIChvLCBpKSB7CiAgICB3YS5mbltvXSA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgIHZhciBuID0gW107CiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGUgPSBpLmNhbGwobiwgdGhpcywgdCwgbik7CiAgICAgICAgZSAmJiAoV2EuaXNBcnJheShlKSA/IG4ucHVzaC5hcHBseShuLCBlKSA6IG4ucHVzaChlKSk7CiAgICAgIH0pLCAxIDwgdGhpcy5sZW5ndGggJiYgKG4gPSBXYS51bmlxdWUobiksIDAgIT09IG8uaW5kZXhPZigicGFyZW50cyIpICYmICJwcmV2VW50aWwiICE9PSBvIHx8IChuID0gbi5yZXZlcnNlKCkpKTsKICAgICAgdmFyIHIgPSBXYShuKTsKICAgICAgcmV0dXJuIGUgPyByLmZpbHRlcihlKSA6IHI7CiAgICB9OwogIH0pLCB3YS5mbi5pcyA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gISFlICYmIDAgPCB0aGlzLmZpbHRlcihlKS5sZW5ndGg7CiAgfSwgd2EuZm4uaW5pdC5wcm90b3R5cGUgPSB3YS5mbiwgd2Eub3ZlcnJpZGVEZWZhdWx0cyA9IGZ1bmN0aW9uIChuKSB7CiAgICB2YXIgciwKICAgICAgICBvID0gZnVuY3Rpb24gbyhlLCB0KSB7CiAgICAgIHJldHVybiByID0gciB8fCBuKCksIDAgPT09IGFyZ3VtZW50cy5sZW5ndGggJiYgKGUgPSByLmVsZW1lbnQpLCB0ID0gdCB8fCByLmNvbnRleHQsIG5ldyBvLmZuLmluaXQoZSwgdCk7CiAgICB9OwoKICAgIHJldHVybiBXYS5leHRlbmQobywgdGhpcyksIG87CiAgfSwgd2EuYXR0ckhvb2tzID0gTWEsIHdhLmNzc0hvb2tzID0gRmE7CgogIHZhciBXYSA9IHdhLAogICAgICBLYSA9IEV0LmVhY2gsCiAgICAgIFhhID0gRXQuZ3JlcCwKICAgICAgWWEgPSB4dC5pZSwKICAgICAgR2EgPSAvXihbYS16MC05XSw/KSskL2ksCiAgICAgIEphID0gZnVuY3Rpb24gSmEoYSwgdSkgewogICAgZnVuY3Rpb24gcyhlKSB7CiAgICAgIHJldHVybiBlICYmIGEgJiYgWChlKSA/IGEuZ2V0RWxlbWVudEJ5SWQoZSkgOiBlOwogICAgfQoKICAgIGZ1bmN0aW9uIGMoZSkgewogICAgICByZXR1cm4gSCgic3RyaW5nIiA9PSB0eXBlb2YgZSA/IHMoZSkgOiBlKTsKICAgIH0KCiAgICBmdW5jdGlvbiByKGUsIHQsIG4pIHsKICAgICAgdmFyIHIsCiAgICAgICAgICBvLAogICAgICAgICAgaSA9IGMoZSk7CiAgICAgIHJldHVybiB2b2lkIDAgPT09IChvID0gaS5sZW5ndGggPyAociA9IFdbdF0pICYmIHIuZ2V0ID8gci5nZXQoaSwgdCkgOiBpLmF0dHIodCkgOiBvKSA/IG4gfHwgIiIgOiBvOwogICAgfQoKICAgIGZ1bmN0aW9uIG8oZSkgewogICAgICB2YXIgdCA9IHMoZSk7CiAgICAgIHJldHVybiB0ID8gdC5hdHRyaWJ1dGVzIDogW107CiAgICB9CgogICAgZnVuY3Rpb24gaShlLCB0LCBuKSB7CiAgICAgICIiID09PSBuICYmIChuID0gbnVsbCk7CiAgICAgIHZhciByLAogICAgICAgICAgbyA9IGMoZSksCiAgICAgICAgICBpID0gby5hdHRyKHQpOwogICAgICBvLmxlbmd0aCAmJiAoKHIgPSBXW3RdKSAmJiByLnNldCA/IHIuc2V0KG8sIG4sIHQpIDogby5hdHRyKHQsIG4pLCBpICE9PSBuICYmIHUub25TZXRBdHRyaWIgJiYgdS5vblNldEF0dHJpYih7CiAgICAgICAgYXR0ckVsbTogbywKICAgICAgICBhdHRyTmFtZTogdCwKICAgICAgICBhdHRyVmFsdWU6IG4KICAgICAgfSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGwoKSB7CiAgICAgIHJldHVybiB1LnJvb3RfZWxlbWVudCB8fCBhLmJvZHk7CiAgICB9CgogICAgZnVuY3Rpb24gZihlLCB0KSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICAgIHZhciByLAogICAgICAgICAgICBvID0gMCwKICAgICAgICAgICAgaSA9IDAsCiAgICAgICAgICAgIGEgPSBlLm93bmVyRG9jdW1lbnQ7CgogICAgICAgIGlmIChuID0gbiB8fCBlLCB0KSB7CiAgICAgICAgICBpZiAobiA9PT0gZSAmJiB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCAmJiAic3RhdGljIiA9PT0geG4oTnQuZnJvbURvbShlKSwgInBvc2l0aW9uIikpIHsKICAgICAgICAgICAgdmFyIHUgPSB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHg6IG8gPSB1LmxlZnQgKyAoYS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBlLnNjcm9sbExlZnQpIC0gYS5kb2N1bWVudEVsZW1lbnQuY2xpZW50TGVmdCwKICAgICAgICAgICAgICB5OiBpID0gdS50b3AgKyAoYS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGUuc2Nyb2xsVG9wKSAtIGEuZG9jdW1lbnRFbGVtZW50LmNsaWVudFRvcAogICAgICAgICAgICB9OwogICAgICAgICAgfQoKICAgICAgICAgIGZvciAodmFyIHMgPSB0OyBzICYmIHMgIT09IG4gJiYgcy5ub2RlVHlwZSAmJiAhTm4ocywgbik7KSB7CiAgICAgICAgICAgIHZhciBjID0gczsKICAgICAgICAgICAgbyArPSBjLm9mZnNldExlZnQgfHwgMCwgaSArPSBjLm9mZnNldFRvcCB8fCAwLCBzID0gYy5vZmZzZXRQYXJlbnQ7CiAgICAgICAgICB9CgogICAgICAgICAgZm9yIChzID0gdC5wYXJlbnROb2RlOyBzICYmIHMgIT09IG4gJiYgcy5ub2RlVHlwZSAmJiAhTm4ocywgbik7KSB7CiAgICAgICAgICAgIG8gLT0gcy5zY3JvbGxMZWZ0IHx8IDAsIGkgLT0gcy5zY3JvbGxUb3AgfHwgMCwgcyA9IHMucGFyZW50Tm9kZTsKICAgICAgICAgIH0KCiAgICAgICAgICBpICs9IChyID0gTnQuZnJvbURvbSh0KSwgWm4uaXNGaXJlZm94KCkgJiYgInRhYmxlIiA9PT0ga3QocikgPyBFbihEbihyKSkuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiAiY2FwdGlvbiIgPT09IGt0KGUpOwogICAgICAgICAgfSkuYmluZChmdW5jdGlvbiAobykgewogICAgICAgICAgICByZXR1cm4gRW4oSXQobykpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIHZhciB0ID0gZS5kb20ub2Zmc2V0VG9wLAogICAgICAgICAgICAgICAgICBuID0gby5kb20ub2Zmc2V0VG9wLAogICAgICAgICAgICAgICAgICByID0gby5kb20ub2Zmc2V0SGVpZ2h0OwogICAgICAgICAgICAgIHJldHVybiB0IDw9IG4gPyAtciA6IDA7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSkuZ2V0T3IoMCkgOiAwKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICB4OiBvLAogICAgICAgICAgeTogaQogICAgICAgIH07CiAgICAgIH0oYS5ib2R5LCBzKGUpLCB0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBkKGUsIHQsIG4pIHsKICAgICAgdmFyIHIgPSBjKGUpOwogICAgICByZXR1cm4gbiA/IHIuY3NzKHQpIDogKCJmbG9hdCIgPT09ICh0ID0gdC5yZXBsYWNlKC8tKFxEKS9nLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgIHJldHVybiB0LnRvVXBwZXJDYXNlKCk7CiAgICAgIH0pKSAmJiAodCA9IHh0LmJyb3dzZXIuaXNJRSgpID8gInN0eWxlRmxvYXQiIDogImNzc0Zsb2F0IiksIHJbMF0gJiYgclswXS5zdHlsZSA/IHJbMF0uc3R5bGVbdF0gOiB2b2lkIDApOwogICAgfQoKICAgIGZ1bmN0aW9uIG0oZSkgewogICAgICB2YXIgdCA9IGQoZSA9IHMoZSksICJ3aWR0aCIpLAogICAgICAgICAgbiA9IGQoZSwgImhlaWdodCIpOwogICAgICByZXR1cm4gLTEgPT09IHQuaW5kZXhPZigicHgiKSAmJiAodCA9IDApLCAtMSA9PT0gbi5pbmRleE9mKCJweCIpICYmIChuID0gMCksIHsKICAgICAgICB3OiBwYXJzZUludCh0LCAxMCkgfHwgZS5vZmZzZXRXaWR0aCB8fCBlLmNsaWVudFdpZHRoLAogICAgICAgIGg6IHBhcnNlSW50KG4sIDEwKSB8fCBlLm9mZnNldEhlaWdodCB8fCBlLmNsaWVudEhlaWdodAogICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIGcoZSwgdCkgewogICAgICBpZiAoIWUpIHJldHVybiAhMTsKCiAgICAgIGlmICghQXJyYXkuaXNBcnJheShlKSkgewogICAgICAgIGlmICgiKiIgPT09IHQpIHJldHVybiAxID09PSBlLm5vZGVUeXBlOwoKICAgICAgICBpZiAoR2EudGVzdCh0KSkgewogICAgICAgICAgZm9yICh2YXIgbiA9IHQudG9Mb3dlckNhc2UoKS5zcGxpdCgvLC8pLCByID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLCBvID0gbi5sZW5ndGggLSAxOyAwIDw9IG87IG8tLSkgewogICAgICAgICAgICBpZiAobltvXSA9PT0gcikgcmV0dXJuICEwOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiAhMTsKICAgICAgICB9CgogICAgICAgIGlmIChlLm5vZGVUeXBlICYmIDEgIT09IGUubm9kZVR5cGUpIHJldHVybiAhMTsKICAgICAgfQoKICAgICAgdmFyIGkgPSBBcnJheS5pc0FycmF5KGUpID8gZSA6IFtlXTsKICAgICAgcmV0dXJuIDAgPCBhYSh0LCBpWzBdLm93bmVyRG9jdW1lbnQgfHwgaVswXSwgbnVsbCwgaSkubGVuZ3RoOwogICAgfQoKICAgIGZ1bmN0aW9uIHAoZSwgdCwgbiwgcikgewogICAgICB2YXIgbywKICAgICAgICAgIGkgPSBbXSwKICAgICAgICAgIGEgPSBzKGUpOwoKICAgICAgZm9yIChyID0gdm9pZCAwID09PSByLCBuID0gbiB8fCAoIkJPRFkiICE9PSBsKCkubm9kZU5hbWUgPyBsKCkucGFyZW50Tm9kZSA6IG51bGwpLCBFdC5pcyh0LCAic3RyaW5nIikgJiYgKHQgPSAiKiIgPT09IChvID0gdCkgPyBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiAxID09PSBlLm5vZGVUeXBlOwogICAgICB9IDogZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gZyhlLCBvKTsKICAgICAgfSk7IGEgJiYgIShhID09PSBuIHx8IEsoYS5ub2RlVHlwZSkgfHwgcW4oYSkgfHwgJG4oYSkpOykgewogICAgICAgIGlmICghdCB8fCAiZnVuY3Rpb24iID09IHR5cGVvZiB0ICYmIHQoYSkpIHsKICAgICAgICAgIGlmICghcikgcmV0dXJuIFthXTsKICAgICAgICAgIGkucHVzaChhKTsKICAgICAgICB9CgogICAgICAgIGEgPSBhLnBhcmVudE5vZGU7CiAgICAgIH0KCiAgICAgIHJldHVybiByID8gaSA6IG51bGw7CiAgICB9CgogICAgZnVuY3Rpb24gbihlLCB0LCBuKSB7CiAgICAgIHZhciByID0gdDsKICAgICAgaWYgKGUpIGZvciAoInN0cmluZyIgPT0gdHlwZW9mIHQgJiYgKHIgPSBmdW5jdGlvbiByKGUpIHsKICAgICAgICByZXR1cm4gZyhlLCB0KTsKICAgICAgfSksIGUgPSBlW25dOyBlOyBlID0gZVtuXSkgewogICAgICAgIGlmICgiZnVuY3Rpb24iID09IHR5cGVvZiByICYmIHIoZSkpIHJldHVybiBlOwogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIGZ1bmN0aW9uIGgoZSwgbiwgcikgewogICAgICB2YXIgbywKICAgICAgICAgIHQgPSAic3RyaW5nIiA9PSB0eXBlb2YgZSA/IHMoZSkgOiBlOwogICAgICByZXR1cm4gISF0ICYmIChFdC5pc0FycmF5KHQpICYmICh0Lmxlbmd0aCB8fCAwID09PSB0Lmxlbmd0aCkgPyAobyA9IFtdLCBLYSh0LCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgIGUgJiYgby5wdXNoKG4uY2FsbChyLCAic3RyaW5nIiA9PSB0eXBlb2YgZSA/IHMoZSkgOiBlLCB0KSk7CiAgICAgIH0pLCBvKSA6IG4uY2FsbChyIHx8IHRoaXMsIHQpKTsKICAgIH0KCiAgICBmdW5jdGlvbiB2KGUsIHQpIHsKICAgICAgYyhlKS5lYWNoKGZ1bmN0aW9uIChlLCBuKSB7CiAgICAgICAgS2EodCwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgIGkobiwgdCwgZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGIoZSwgbikgewogICAgICB2YXIgdCA9IGMoZSk7CiAgICAgIFlhID8gdC5lYWNoKGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgaWYgKCExICE9PSB0LmNhbkhhdmVIVE1MKSB7CiAgICAgICAgICBmb3IgKDsgdC5maXJzdENoaWxkOykgewogICAgICAgICAgICB0LnJlbW92ZUNoaWxkKHQuZmlyc3RDaGlsZCk7CiAgICAgICAgICB9CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdC5pbm5lckhUTUwgPSAiPGJyPiIgKyBuLCB0LnJlbW92ZUNoaWxkKHQuZmlyc3RDaGlsZCk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIFdhKCI8ZGl2PjwvZGl2PiIpLmh0bWwoIjxicj4iICsgbikuY29udGVudHMoKS5zbGljZSgxKS5hcHBlbmRUbyh0KTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gbjsKICAgICAgICB9CiAgICAgIH0pIDogdC5odG1sKG4pOwogICAgfQoKICAgIGZ1bmN0aW9uIHkoZSwgbiwgciwgbywgaSkgewogICAgICByZXR1cm4gaChlLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gInN0cmluZyIgPT0gdHlwZW9mIG4gPyBhLmNyZWF0ZUVsZW1lbnQobikgOiBuOwogICAgICAgIHJldHVybiB2KHQsIHIpLCBvICYmICgic3RyaW5nIiAhPSB0eXBlb2YgbyAmJiBvLm5vZGVUeXBlID8gdC5hcHBlbmRDaGlsZChvKSA6ICJzdHJpbmciID09IHR5cGVvZiBvICYmIGIodCwgbykpLCBpID8gdCA6IGUuYXBwZW5kQ2hpbGQodCk7CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIEMoZSwgdCwgbikgewogICAgICByZXR1cm4geShhLmNyZWF0ZUVsZW1lbnQoZSksIGUsIHQsIG4sICEwKTsKICAgIH0KCiAgICBmdW5jdGlvbiB4KGUsIHQpIHsKICAgICAgdmFyIG4gPSBjKGUpOwogICAgICByZXR1cm4gKHQgPyBuLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgIGZvciAodmFyIGU7IGUgPSB0aGlzLmZpcnN0Q2hpbGQ7KSB7CiAgICAgICAgICAzID09PSBlLm5vZGVUeXBlICYmIDAgPT09IGUuZGF0YS5sZW5ndGggPyB0aGlzLnJlbW92ZUNoaWxkKGUpIDogdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLCB0aGlzKTsKICAgICAgICB9CiAgICAgIH0pIDogbikucmVtb3ZlKCksIDEgPCBuLmxlbmd0aCA/IG4udG9BcnJheSgpIDogblswXTsKICAgIH0KCiAgICBmdW5jdGlvbiB3KGUsIHQsIG4pIHsKICAgICAgYyhlKS50b2dnbGVDbGFzcyh0LCBuKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAiIiA9PT0gdGhpcy5jbGFzc05hbWUgJiYgV2EodGhpcykuYXR0cigiY2xhc3MiLCBudWxsKTsKICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gUyh0LCBlLCBuKSB7CiAgICAgIHJldHVybiBoKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIEV0LmlzKGUsICJhcnJheSIpICYmICh0ID0gdC5jbG9uZU5vZGUoITApKSwgbiAmJiBLYShYYShlLmNoaWxkTm9kZXMpLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdC5hcHBlbmRDaGlsZChlKTsKICAgICAgICB9KSwgZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0LCBlKTsKICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gRShlKSB7CiAgICAgIGlmICh6bihlKSkgewogICAgICAgIHZhciB0ID0gImEiID09PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgJiYgIXIoZSwgImhyZWYiKSAmJiByKGUsICJpZCIpOwogICAgICAgIHJldHVybiByKGUsICJuYW1lIikgfHwgcihlLCAiZGF0YS1tY2UtYm9va21hcmsiKSB8fCB0ID8gMSA6IHZvaWQgMDsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIE4oKSB7CiAgICAgIHJldHVybiBhLmNyZWF0ZVJhbmdlKCk7CiAgICB9CgogICAgZnVuY3Rpb24gayhlKSB7CiAgICAgIGlmIChlICYmIHpuKGUpKSB7CiAgICAgICAgdmFyIHQgPSBlLmdldEF0dHJpYnV0ZSgiZGF0YS1tY2UtY29udGVudGVkaXRhYmxlIik7CiAgICAgICAgcmV0dXJuIHQgJiYgImluaGVyaXQiICE9PSB0ID8gdCA6ICJpbmhlcml0IiAhPT0gZS5jb250ZW50RWRpdGFibGUgPyBlLmNvbnRlbnRFZGl0YWJsZSA6IG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIHZvaWQgMCA9PT0gdSAmJiAodSA9IHt9KTsKCiAgICB2YXIgXywKICAgICAgICBBLAogICAgICAgIFIsCiAgICAgICAgRCwKICAgICAgICBlLAogICAgICAgIHQsCiAgICAgICAgVCA9IHt9LAogICAgICAgIE8gPSB3aW5kb3csCiAgICAgICAgQiA9IHt9LAogICAgICAgIFAgPSAwLAogICAgICAgIEwgPSBBci5mb3JFbGVtZW50KE50LmZyb21Eb20oYSksIHsKICAgICAgY29udGVudENzc0NvcnM6IHUuY29udGVudENzc0NvcnMsCiAgICAgIHJlZmVycmVyUG9saWN5OiB1LnJlZmVycmVyUG9saWN5CiAgICB9KSwKICAgICAgICBJID0gW10sCiAgICAgICAgTSA9IHUuc2NoZW1hIHx8IHRvKHt9KSwKICAgICAgICBGID0gcm8oewogICAgICB1cmxfY29udmVydGVyOiB1LnVybF9jb252ZXJ0ZXIsCiAgICAgIHVybF9jb252ZXJ0ZXJfc2NvcGU6IHUudXJsX2NvbnZlcnRlcl9zY29wZQogICAgfSwgdS5zY2hlbWEpLAogICAgICAgIFUgPSB1Lm93bkV2ZW50cyA/IG5ldyBhaSgpIDogYWkuRXZlbnQsCiAgICAgICAgeiA9IE0uZ2V0QmxvY2tFbGVtZW50cygpLAogICAgICAgIEggPSBXYS5vdmVycmlkZURlZmF1bHRzKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBjb250ZXh0OiBhLAogICAgICAgIGVsZW1lbnQ6ICQuZ2V0Um9vdCgpCiAgICAgIH07CiAgICB9KSwKICAgICAgICBqID0gR28uZW5jb2RlQWxsUmF3LAogICAgICAgIFYgPSBmdW5jdGlvbiBWKGUsIHQsIG4sIHIpIHsKICAgICAgaWYgKEV0LmlzQXJyYXkoZSkpIHsKICAgICAgICBmb3IgKHZhciBvID0gZS5sZW5ndGgsIGkgPSBbXTsgby0tOykgewogICAgICAgICAgaVtvXSA9IFYoZVtvXSwgdCwgbiwgcik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gaTsKICAgICAgfQoKICAgICAgcmV0dXJuICF1LmNvbGxlY3QgfHwgZSAhPT0gYSAmJiBlICE9PSBPIHx8IEkucHVzaChbZSwgdCwgbiwgcl0pLCBVLmJpbmQoZSwgdCwgbiwgciB8fCAkKTsKICAgIH0sCiAgICAgICAgcSA9IGZ1bmN0aW9uIHEoZSwgdCwgbikgewogICAgICBpZiAoRXQuaXNBcnJheShlKSkgewogICAgICAgIGZvciAodmFyIHIgPSBlLmxlbmd0aCwgbyA9IFtdOyByLS07KSB7CiAgICAgICAgICBvW3JdID0gcShlW3JdLCB0LCBuKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBvOwogICAgICB9CgogICAgICBpZiAoMCA8IEkubGVuZ3RoICYmIChlID09PSBhIHx8IGUgPT09IE8pKSBmb3IgKHIgPSBJLmxlbmd0aDsgci0tOykgewogICAgICAgIHZhciBpID0gSVtyXTsKICAgICAgICBlICE9PSBpWzBdIHx8IHQgJiYgdCAhPT0gaVsxXSB8fCBuICYmIG4gIT09IGlbMl0gfHwgVS51bmJpbmQoaVswXSwgaVsxXSwgaVsyXSk7CiAgICAgIH0KICAgICAgcmV0dXJuIFUudW5iaW5kKGUsIHQsIG4pOwogICAgfSwKICAgICAgICAkID0gewogICAgICBkb2M6IGEsCiAgICAgIHNldHRpbmdzOiB1LAogICAgICB3aW46IE8sCiAgICAgIGZpbGVzOiBCLAogICAgICBzdGRNb2RlOiAhMCwKICAgICAgYm94TW9kZWw6ICEwLAogICAgICBzdHlsZVNoZWV0TG9hZGVyOiBMLAogICAgICBib3VuZEV2ZW50czogSSwKICAgICAgc3R5bGVzOiBGLAogICAgICBzY2hlbWE6IE0sCiAgICAgIGV2ZW50czogVSwKICAgICAgaXNCbG9jazogZnVuY3Rpb24gaXNCbG9jayhlKSB7CiAgICAgICAgaWYgKCJzdHJpbmciID09IHR5cGVvZiBlKSByZXR1cm4gISF6W2VdOwoKICAgICAgICBpZiAoZSkgewogICAgICAgICAgdmFyIHQgPSBlLm5vZGVUeXBlOwogICAgICAgICAgaWYgKHQpIHJldHVybiAhKDEgIT09IHQgfHwgIXpbZS5ub2RlTmFtZV0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICExOwogICAgICB9LAogICAgICAkOiBILAogICAgICAkJDogYywKICAgICAgcm9vdDogbnVsbCwKICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKHQsIGUpIHsKICAgICAgICBpZiAoIVlhIHx8IDEgIT09IHQubm9kZVR5cGUgfHwgZSkgcmV0dXJuIHQuY2xvbmVOb2RlKGUpOwogICAgICAgIHZhciBuID0gYS5jcmVhdGVFbGVtZW50KHQubm9kZU5hbWUpOwogICAgICAgIHJldHVybiBLYShvKHQpLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgaShuLCBlLm5vZGVOYW1lLCByKHQsIGUubm9kZU5hbWUpKTsKICAgICAgICB9KSwgbjsKICAgICAgfSwKICAgICAgZ2V0Um9vdDogbCwKICAgICAgZ2V0Vmlld1BvcnQ6IGZ1bmN0aW9uIGdldFZpZXdQb3J0KGUpIHsKICAgICAgICB2YXIgdCA9IHRuKGUpOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICB4OiB0LngsCiAgICAgICAgICB5OiB0LnksCiAgICAgICAgICB3OiB0LndpZHRoLAogICAgICAgICAgaDogdC5oZWlnaHQKICAgICAgICB9OwogICAgICB9LAogICAgICBnZXRSZWN0OiBmdW5jdGlvbiBnZXRSZWN0KGUpIHsKICAgICAgICB2YXIgdCA9IGYoZSA9IHMoZSkpLAogICAgICAgICAgICBuID0gbShlKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgeDogdC54LAogICAgICAgICAgeTogdC55LAogICAgICAgICAgdzogbi53LAogICAgICAgICAgaDogbi5oCiAgICAgICAgfTsKICAgICAgfSwKICAgICAgZ2V0U2l6ZTogbSwKICAgICAgZ2V0UGFyZW50OiBmdW5jdGlvbiBnZXRQYXJlbnQoZSwgdCwgbikgewogICAgICAgIHZhciByID0gcChlLCB0LCBuLCAhMSk7CiAgICAgICAgcmV0dXJuIHIgJiYgMCA8IHIubGVuZ3RoID8gclswXSA6IG51bGw7CiAgICAgIH0sCiAgICAgIGdldFBhcmVudHM6IHAsCiAgICAgIGdldDogcywKICAgICAgZ2V0TmV4dDogZnVuY3Rpb24gZ2V0TmV4dChlLCB0KSB7CiAgICAgICAgcmV0dXJuIG4oZSwgdCwgIm5leHRTaWJsaW5nIik7CiAgICAgIH0sCiAgICAgIGdldFByZXY6IGZ1bmN0aW9uIGdldFByZXYoZSwgdCkgewogICAgICAgIHJldHVybiBuKGUsIHQsICJwcmV2aW91c1NpYmxpbmciKTsKICAgICAgfSwKICAgICAgc2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QoZSwgdCkgewogICAgICAgIHJldHVybiBhYShlLCBzKHQpIHx8IHUucm9vdF9lbGVtZW50IHx8IGEsIFtdKTsKICAgICAgfSwKICAgICAgaXM6IGcsCiAgICAgIGFkZDogeSwKICAgICAgY3JlYXRlOiBDLAogICAgICBjcmVhdGVIVE1MOiBmdW5jdGlvbiBjcmVhdGVIVE1MKGUsIHQsIG4pIHsKICAgICAgICB2YXIgciwKICAgICAgICAgICAgbyA9ICIiOwoKICAgICAgICBmb3IgKHIgaW4gbyArPSAiPCIgKyBlLCB0KSB7CiAgICAgICAgICBzZSh0LCByKSAmJiAobyArPSAiICIgKyByICsgJz0iJyArIGoodFtyXSkgKyAnIicpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gbiA/IG8gKyAiPiIgKyBuICsgIjwvIiArIGUgKyAiPiIgOiBvICsgIiAvPiI7CiAgICAgIH0sCiAgICAgIGNyZWF0ZUZyYWdtZW50OiBmdW5jdGlvbiBjcmVhdGVGcmFnbWVudChlKSB7CiAgICAgICAgdmFyIHQsCiAgICAgICAgICAgIG4gPSBhLmNyZWF0ZUVsZW1lbnQoImRpdiIpLAogICAgICAgICAgICByID0gYS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CgogICAgICAgIGZvciAoci5hcHBlbmRDaGlsZChuKSwgZSAmJiAobi5pbm5lckhUTUwgPSBlKTsgdCA9IG4uZmlyc3RDaGlsZDspIHsKICAgICAgICAgIHIuYXBwZW5kQ2hpbGQodCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gci5yZW1vdmVDaGlsZChuKSwgcjsKICAgICAgfSwKICAgICAgcmVtb3ZlOiB4LAogICAgICBzZXRTdHlsZTogZnVuY3Rpb24gc2V0U3R5bGUoZSwgdCwgbikgewogICAgICAgIHZhciByID0gWCh0KSA/IGMoZSkuY3NzKHQsIG4pIDogYyhlKS5jc3ModCk7CiAgICAgICAgdS51cGRhdGVfc3R5bGVzICYmIHFhKEYsIHIpOwogICAgICB9LAogICAgICBnZXRTdHlsZTogZCwKICAgICAgc2V0U3R5bGVzOiBmdW5jdGlvbiBzZXRTdHlsZXMoZSwgdCkgewogICAgICAgIHZhciBuID0gYyhlKS5jc3ModCk7CiAgICAgICAgdS51cGRhdGVfc3R5bGVzICYmIHFhKEYsIG4pOwogICAgICB9LAogICAgICByZW1vdmVBbGxBdHRyaWJzOiBmdW5jdGlvbiByZW1vdmVBbGxBdHRyaWJzKGUpIHsKICAgICAgICByZXR1cm4gaChlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgZm9yICh2YXIgdCA9IGUuYXR0cmlidXRlcywgbiA9IHQubGVuZ3RoIC0gMTsgMCA8PSBuOyBuLS0pIHsKICAgICAgICAgICAgZS5yZW1vdmVBdHRyaWJ1dGVOb2RlKHQuaXRlbShuKSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIHNldEF0dHJpYjogaSwKICAgICAgc2V0QXR0cmliczogdiwKICAgICAgZ2V0QXR0cmliOiByLAogICAgICBnZXRQb3M6IGYsCiAgICAgIHBhcnNlU3R5bGU6IGZ1bmN0aW9uIHBhcnNlU3R5bGUoZSkgewogICAgICAgIHJldHVybiBGLnBhcnNlKGUpOwogICAgICB9LAogICAgICBzZXJpYWxpemVTdHlsZTogZnVuY3Rpb24gc2VyaWFsaXplU3R5bGUoZSwgdCkgewogICAgICAgIHJldHVybiBGLnNlcmlhbGl6ZShlLCB0KTsKICAgICAgfSwKICAgICAgYWRkU3R5bGU6IGZ1bmN0aW9uIGFkZFN0eWxlKGUpIHsKICAgICAgICB2YXIgdCwgbjsKCiAgICAgICAgaWYgKCQgIT09IEphLkRPTSAmJiBhID09PSBkb2N1bWVudCkgewogICAgICAgICAgaWYgKFRbZV0pIHJldHVybjsKICAgICAgICAgIFRbZV0gPSAhMDsKICAgICAgICB9CgogICAgICAgIChuID0gYS5nZXRFbGVtZW50QnlJZCgibWNlRGVmYXVsdFN0eWxlcyIpKSB8fCAoKG4gPSBhLmNyZWF0ZUVsZW1lbnQoInN0eWxlIikpLmlkID0gIm1jZURlZmF1bHRTdHlsZXMiLCBuLnR5cGUgPSAidGV4dC9jc3MiLCAodCA9IGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXSkuZmlyc3RDaGlsZCA/IHQuaW5zZXJ0QmVmb3JlKG4sIHQuZmlyc3RDaGlsZCkgOiB0LmFwcGVuZENoaWxkKG4pKSwgbi5zdHlsZVNoZWV0ID8gbi5zdHlsZVNoZWV0LmNzc1RleHQgKz0gZSA6IG4uYXBwZW5kQ2hpbGQoYS5jcmVhdGVUZXh0Tm9kZShlKSk7CiAgICAgIH0sCiAgICAgIGxvYWRDU1M6IGZ1bmN0aW9uIGxvYWRDU1MoZSkgewogICAgICAgIFkoKGUgPSBlIHx8ICIiKS5zcGxpdCgiLCIpLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgQltlXSA9ICEwLCBMLmxvYWQoZSwgdGUpOwogICAgICAgIH0pOwogICAgICB9LAogICAgICBhZGRDbGFzczogZnVuY3Rpb24gYWRkQ2xhc3MoZSwgdCkgewogICAgICAgIGMoZSkuYWRkQ2xhc3ModCk7CiAgICAgIH0sCiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiByZW1vdmVDbGFzcyhlLCB0KSB7CiAgICAgICAgdyhlLCB0LCAhMSk7CiAgICAgIH0sCiAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiBoYXNDbGFzcyhlLCB0KSB7CiAgICAgICAgcmV0dXJuIGMoZSkuaGFzQ2xhc3ModCk7CiAgICAgIH0sCiAgICAgIHRvZ2dsZUNsYXNzOiB3LAogICAgICBzaG93OiBmdW5jdGlvbiBzaG93KGUpIHsKICAgICAgICBjKGUpLnNob3coKTsKICAgICAgfSwKICAgICAgaGlkZTogZnVuY3Rpb24gaGlkZShlKSB7CiAgICAgICAgYyhlKS5oaWRlKCk7CiAgICAgIH0sCiAgICAgIGlzSGlkZGVuOiBmdW5jdGlvbiBpc0hpZGRlbihlKSB7CiAgICAgICAgcmV0dXJuICJub25lIiA9PT0gYyhlKS5jc3MoImRpc3BsYXkiKTsKICAgICAgfSwKICAgICAgdW5pcXVlSWQ6IGZ1bmN0aW9uIHVuaXF1ZUlkKGUpIHsKICAgICAgICByZXR1cm4gKGUgfHwgIm1jZV8iKSArIFArKzsKICAgICAgfSwKICAgICAgc2V0SFRNTDogYiwKICAgICAgZ2V0T3V0ZXJIVE1MOiBmdW5jdGlvbiBnZXRPdXRlckhUTUwoZSkgewogICAgICAgIHZhciB0ID0gInN0cmluZyIgPT0gdHlwZW9mIGUgPyBzKGUpIDogZTsKICAgICAgICByZXR1cm4gem4odCkgPyB0Lm91dGVySFRNTCA6IFdhKCI8ZGl2PjwvZGl2PiIpLmFwcGVuZChXYSh0KS5jbG9uZSgpKS5odG1sKCk7CiAgICAgIH0sCiAgICAgIHNldE91dGVySFRNTDogZnVuY3Rpb24gc2V0T3V0ZXJIVE1MKGUsIHQpIHsKICAgICAgICBjKGUpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKCJvdXRlckhUTUwiIGluIHRoaXMpIHJldHVybiB2b2lkICh0aGlzLm91dGVySFRNTCA9IHQpOwogICAgICAgICAgfSBjYXRjaCAoZSkge30KCiAgICAgICAgICB4KFdhKHRoaXMpLmh0bWwodCksICEwKTsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgZGVjb2RlOiBHby5kZWNvZGUsCiAgICAgIGVuY29kZTogaiwKICAgICAgaW5zZXJ0QWZ0ZXI6IGZ1bmN0aW9uIGluc2VydEFmdGVyKGUsIHQpIHsKICAgICAgICB2YXIgciA9IHModCk7CiAgICAgICAgcmV0dXJuIGgoZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0ID0gci5wYXJlbnROb2RlLAogICAgICAgICAgICAgIG4gPSByLm5leHRTaWJsaW5nOwogICAgICAgICAgcmV0dXJuIG4gPyB0Lmluc2VydEJlZm9yZShlLCBuKSA6IHQuYXBwZW5kQ2hpbGQoZSksIGU7CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIHJlcGxhY2U6IFMsCiAgICAgIHJlbmFtZTogZnVuY3Rpb24gcmVuYW1lKHQsIGUpIHsKICAgICAgICB2YXIgbjsKICAgICAgICByZXR1cm4gdC5ub2RlTmFtZSAhPT0gZS50b1VwcGVyQ2FzZSgpICYmIChuID0gQyhlKSwgS2Eobyh0KSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGkobiwgZS5ub2RlTmFtZSwgcih0LCBlLm5vZGVOYW1lKSk7CiAgICAgICAgfSksIFMobiwgdCwgITApKSwgbiB8fCB0OwogICAgICB9LAogICAgICBmaW5kQ29tbW9uQW5jZXN0b3I6IGZ1bmN0aW9uIGZpbmRDb21tb25BbmNlc3RvcihlLCB0KSB7CiAgICAgICAgZm9yICh2YXIgbiwgciA9IGU7IHI7KSB7CiAgICAgICAgICBmb3IgKG4gPSB0OyBuICYmIHIgIT09IG47KSB7CiAgICAgICAgICAgIG4gPSBuLnBhcmVudE5vZGU7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHIgPT09IG4pIGJyZWFrOwogICAgICAgICAgciA9IHIucGFyZW50Tm9kZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAhciAmJiBlLm93bmVyRG9jdW1lbnQgPyBlLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogcjsKICAgICAgfSwKICAgICAgdG9IZXg6IGZ1bmN0aW9uIHRvSGV4KGUpIHsKICAgICAgICByZXR1cm4gRi50b0hleChFdC50cmltKGUpKTsKICAgICAgfSwKICAgICAgcnVuOiBoLAogICAgICBnZXRBdHRyaWJzOiBvLAogICAgICBpc0VtcHR5OiBmdW5jdGlvbiBpc0VtcHR5KGUsIHQpIHsKICAgICAgICB2YXIgbiwKICAgICAgICAgICAgciwKICAgICAgICAgICAgbyA9IDA7CiAgICAgICAgaWYgKEUoZSkpIHJldHVybiAhMTsKCiAgICAgICAgaWYgKGUgPSBlLmZpcnN0Q2hpbGQpIHsKICAgICAgICAgIHZhciBpID0gbmV3IFJyKGUsIGUucGFyZW50Tm9kZSksCiAgICAgICAgICAgICAgYSA9IE0gPyBNLmdldFdoaXRlU3BhY2VFbGVtZW50cygpIDoge307CiAgICAgICAgICB0ID0gdCB8fCAoTSA/IE0uZ2V0Tm9uRW1wdHlFbGVtZW50cygpIDogbnVsbCk7CgogICAgICAgICAgZG8gewogICAgICAgICAgICBpZiAobiA9IGUubm9kZVR5cGUsIHpuKGUpKSB7CiAgICAgICAgICAgICAgdmFyIHUgPSBlLmdldEF0dHJpYnV0ZSgiZGF0YS1tY2UtYm9ndXMiKTsKCiAgICAgICAgICAgICAgaWYgKHUpIHsKICAgICAgICAgICAgICAgIGUgPSBpLm5leHQoImFsbCIgPT09IHUpOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAociA9IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwgdCAmJiB0W3JdKSB7CiAgICAgICAgICAgICAgICBpZiAoImJyIiAhPT0gcikgcmV0dXJuICExOwogICAgICAgICAgICAgICAgbysrLCBlID0gaS5uZXh0KCk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmIChFKGUpKSByZXR1cm4gITE7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICg4ID09PSBuKSByZXR1cm4gITE7CiAgICAgICAgICAgIGlmICgzID09PSBuICYmICFxcihlLm5vZGVWYWx1ZSkpIHJldHVybiAhMTsKICAgICAgICAgICAgaWYgKDMgPT09IG4gJiYgZS5wYXJlbnROb2RlICYmIGFbZS5wYXJlbnROb2RlLm5vZGVOYW1lXSAmJiBxcihlLm5vZGVWYWx1ZSkpIHJldHVybiAhMTsKICAgICAgICAgICAgZSA9IGkubmV4dCgpOwogICAgICAgICAgfSB3aGlsZSAoZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbyA8PSAxOwogICAgICB9LAogICAgICBjcmVhdGVSbmc6IE4sCiAgICAgIG5vZGVJbmRleDogJGEsCiAgICAgIHNwbGl0OiBmdW5jdGlvbiBzcGxpdChlLCB0LCBuKSB7CiAgICAgICAgdmFyIHIsCiAgICAgICAgICAgIG8sCiAgICAgICAgICAgIGksCiAgICAgICAgICAgIGEgPSBOKCk7CiAgICAgICAgaWYgKGUgJiYgdCkgcmV0dXJuIGEuc2V0U3RhcnQoZS5wYXJlbnROb2RlLCAkYShlKSksIGEuc2V0RW5kKHQucGFyZW50Tm9kZSwgJGEodCkpLCByID0gYS5leHRyYWN0Q29udGVudHMoKSwgKGEgPSBOKCkpLnNldFN0YXJ0KHQucGFyZW50Tm9kZSwgJGEodCkgKyAxKSwgYS5zZXRFbmQoZS5wYXJlbnROb2RlLCAkYShlKSArIDEpLCBvID0gYS5leHRyYWN0Q29udGVudHMoKSwgKGkgPSBlLnBhcmVudE5vZGUpLmluc2VydEJlZm9yZSh6bygkLCByKSwgZSksIG4gPyBpLmluc2VydEJlZm9yZShuLCBlKSA6IGkuaW5zZXJ0QmVmb3JlKHQsIGUpLCBpLmluc2VydEJlZm9yZSh6bygkLCBvKSwgZSksIHgoZSksIG4gfHwgdDsKICAgICAgfSwKICAgICAgYmluZDogViwKICAgICAgdW5iaW5kOiBxLAogICAgICBmaXJlOiBmdW5jdGlvbiBmaXJlKGUsIHQsIG4pIHsKICAgICAgICByZXR1cm4gVS5maXJlKGUsIHQsIG4pOwogICAgICB9LAogICAgICBnZXRDb250ZW50RWRpdGFibGU6IGssCiAgICAgIGdldENvbnRlbnRFZGl0YWJsZVBhcmVudDogZnVuY3Rpb24gZ2V0Q29udGVudEVkaXRhYmxlUGFyZW50KGUpIHsKICAgICAgICBmb3IgKHZhciB0ID0gbCgpLCBuID0gbnVsbDsgZSAmJiBlICE9PSB0ICYmIG51bGwgPT09IChuID0gayhlKSk7IGUgPSBlLnBhcmVudE5vZGUpIHsKICAgICAgICAgIDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBuOwogICAgICB9LAogICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICAgIGlmICgwIDwgSS5sZW5ndGgpIGZvciAodmFyIGUgPSBJLmxlbmd0aDsgZS0tOykgewogICAgICAgICAgdmFyIHQgPSBJW2VdOwogICAgICAgICAgVS51bmJpbmQodFswXSwgdFsxXSwgdFsyXSk7CiAgICAgICAgfQogICAgICAgIG5lKEIsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICBMLnVubG9hZCh0KSwgZGVsZXRlIEJbdF07CiAgICAgICAgfSksIGFhLnNldERvY3VtZW50ICYmIGFhLnNldERvY3VtZW50KCk7CiAgICAgIH0sCiAgICAgIGlzQ2hpbGRPZjogZnVuY3Rpb24gaXNDaGlsZE9mKGUsIHQpIHsKICAgICAgICBpZiAoWWEpIHsKICAgICAgICAgIGZvciAoOyBlOykgewogICAgICAgICAgICBpZiAodCA9PT0gZSkgcmV0dXJuICEwOwogICAgICAgICAgICBlID0gZS5wYXJlbnROb2RlOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiAhMTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBlID09PSB0IHx8IHQuY29udGFpbnMoZSk7CiAgICAgIH0sCiAgICAgIGR1bXBSbmc6IGZ1bmN0aW9uIGR1bXBSbmcoZSkgewogICAgICAgIHJldHVybiAic3RhcnRDb250YWluZXI6ICIgKyBlLnN0YXJ0Q29udGFpbmVyLm5vZGVOYW1lICsgIiwgc3RhcnRPZmZzZXQ6ICIgKyBlLnN0YXJ0T2Zmc2V0ICsgIiwgZW5kQ29udGFpbmVyOiAiICsgZS5lbmRDb250YWluZXIubm9kZU5hbWUgKyAiLCBlbmRPZmZzZXQ6ICIgKyBlLmVuZE9mZnNldDsKICAgICAgfQogICAgfSwKICAgICAgICBXID0gKF8gPSBGLCBSID0gSigkKSwgZSA9IHsKICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoZSwgdCwgbikgewogICAgICAgIEEudXJsX2NvbnZlcnRlciAmJiBudWxsICE9PSB0ICYmICh0ID0gQS51cmxfY29udmVydGVyLmNhbGwoQS51cmxfY29udmVydGVyX3Njb3BlIHx8IFIoKSwgdCwgbiwgZVswXSkpLCBlLmF0dHIoImRhdGEtbWNlLSIgKyBuLCB0KS5hdHRyKG4sIHQpOwogICAgICB9LAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldChlLCB0KSB7CiAgICAgICAgcmV0dXJuIGUuYXR0cigiZGF0YS1tY2UtIiArIHQpIHx8IGUuYXR0cih0KTsKICAgICAgfQogICAgfSwgdCA9IHsKICAgICAgc3R5bGU6IHsKICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChlLCB0KSB7CiAgICAgICAgICBudWxsID09PSB0IHx8ICJvYmplY3QiICE9IF90eXBlb2YodCkgPyAoRCAmJiBlLmF0dHIoImRhdGEtbWNlLXN0eWxlIiwgdCksIG51bGwgIT09IHQgJiYgInN0cmluZyIgPT0gdHlwZW9mIHQgPyAoZS5yZW1vdmVBdHRyKCJzdHlsZSIpLCBlLmNzcyhfLnBhcnNlKHQpKSkgOiBlLmF0dHIoInN0eWxlIiwgdCkpIDogZS5jc3ModCk7CiAgICAgICAgfSwKICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldChlKSB7CiAgICAgICAgICB2YXIgdCA9IGUuYXR0cigiZGF0YS1tY2Utc3R5bGUiKSB8fCBlLmF0dHIoInN0eWxlIik7CiAgICAgICAgICByZXR1cm4gXy5zZXJpYWxpemUoXy5wYXJzZSh0KSwgZVswXS5ub2RlTmFtZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCAoRCA9IChBID0gdSkua2VlcF92YWx1ZXMpICYmICh0LmhyZWYgPSB0LnNyYyA9IGUpLCB0KTsKCiAgICByZXR1cm4gJDsKICB9OwoKICBKYS5ET00gPSBKYShkb2N1bWVudCksIEphLm5vZGVJbmRleCA9ICRhOwogIHZhciBRYSA9IEphLkRPTSwKICAgICAgWmEgPSBFdC5lYWNoLAogICAgICBldSA9IEV0LmdyZXAsCiAgICAgIHR1ID0gKG51LnByb3RvdHlwZS5fc2V0UmVmZXJyZXJQb2xpY3kgPSBmdW5jdGlvbiAoZSkgewogICAgdGhpcy5zZXR0aW5ncy5yZWZlcnJlclBvbGljeSA9IGU7CiAgfSwgbnUucHJvdG90eXBlLmxvYWRTY3JpcHQgPSBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgZnVuY3Rpb24gcigpIHsKICAgICAgby5yZW1vdmUoaSksIGEgJiYgKGEub25lcnJvciA9IGEub25sb2FkID0gYSA9IG51bGwpOwogICAgfQoKICAgIHZhciBvID0gUWEsCiAgICAgICAgaSA9IG8udW5pcXVlSWQoKSwKICAgICAgICBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBhLmlkID0gaSwgYS50eXBlID0gInRleHQvamF2YXNjcmlwdCIsIGEuc3JjID0gRXQuX2FkZENhY2hlU3VmZml4KGUpLCB0aGlzLnNldHRpbmdzLnJlZmVycmVyUG9saWN5ICYmIG8uc2V0QXR0cmliKGEsICJyZWZlcnJlcnBvbGljeSIsIHRoaXMuc2V0dGluZ3MucmVmZXJyZXJQb2xpY3kpLCBhLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgcigpLCB0KCk7CiAgICB9LCBhLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHIoKSwgeShuKSA/IG4oKSA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBjb25zb2xlICYmIGNvbnNvbGUubG9nICYmIGNvbnNvbGUubG9nKCJGYWlsZWQgdG8gbG9hZCBzY3JpcHQ6ICIgKyBlKTsKICAgIH0sIChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaGVhZCIpWzBdIHx8IGRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKGEpOwogIH0sIG51LnByb3RvdHlwZS5pc0RvbmUgPSBmdW5jdGlvbiAoZSkgewogICAgcmV0dXJuIDIgPT09IHRoaXMuc3RhdGVzW2VdOwogIH0sIG51LnByb3RvdHlwZS5tYXJrRG9uZSA9IGZ1bmN0aW9uIChlKSB7CiAgICB0aGlzLnN0YXRlc1tlXSA9IDI7CiAgfSwgbnUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7CiAgICB2YXIgbyA9IHRoaXMuc3RhdGVzW2VdOwogICAgdGhpcy5xdWV1ZS5wdXNoKGUpLCB2b2lkIDAgPT09IG8gJiYgKHRoaXMuc3RhdGVzW2VdID0gMCksIHQgJiYgKHRoaXMuc2NyaXB0TG9hZGVkQ2FsbGJhY2tzW2VdIHx8ICh0aGlzLnNjcmlwdExvYWRlZENhbGxiYWNrc1tlXSA9IFtdKSwgdGhpcy5zY3JpcHRMb2FkZWRDYWxsYmFja3NbZV0ucHVzaCh7CiAgICAgIHN1Y2Nlc3M6IHQsCiAgICAgIGZhaWx1cmU6IHIsCiAgICAgIHNjb3BlOiBuIHx8IHRoaXMKICAgIH0pKTsKICB9LCBudS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7CiAgICByZXR1cm4gdGhpcy5hZGQoZSwgdCwgbiwgcik7CiAgfSwgbnUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChlKSB7CiAgICBkZWxldGUgdGhpcy5zdGF0ZXNbZV0sIGRlbGV0ZSB0aGlzLnNjcmlwdExvYWRlZENhbGxiYWNrc1tlXTsKICB9LCBudS5wcm90b3R5cGUubG9hZFF1ZXVlID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgIHRoaXMubG9hZFNjcmlwdHModGhpcy5xdWV1ZSwgZSwgdCwgbik7CiAgfSwgbnUucHJvdG90eXBlLmxvYWRTY3JpcHRzID0gZnVuY3Rpb24gKG4sIGUsIHQsIHIpIHsKICAgIGZ1bmN0aW9uIG8odCwgZSkgewogICAgICBaYShpLnNjcmlwdExvYWRlZENhbGxiYWNrc1tlXSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB5KGVbdF0pICYmIGVbdF0uY2FsbChlLnNjb3BlKTsKICAgICAgfSksIGkuc2NyaXB0TG9hZGVkQ2FsbGJhY2tzW2VdID0gdm9pZCAwOwogICAgfQoKICAgIHZhciBpID0gdGhpcywKICAgICAgICBhID0gW107CiAgICBpLnF1ZXVlTG9hZGVkQ2FsbGJhY2tzLnB1c2goewogICAgICBzdWNjZXNzOiBlLAogICAgICBmYWlsdXJlOiByLAogICAgICBzY29wZTogdCB8fCB0aGlzCiAgICB9KTsKCiAgICB2YXIgdSA9IGZ1bmN0aW9uIHUoKSB7CiAgICAgIHZhciBlLAogICAgICAgICAgdCA9IGV1KG4pOwogICAgICBuLmxlbmd0aCA9IDAsIFphKHQsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgMiAhPT0gaS5zdGF0ZXNbZV0gPyAzICE9PSBpLnN0YXRlc1tlXSA/IDEgIT09IGkuc3RhdGVzW2VdICYmIChpLnN0YXRlc1tlXSA9IDEsIGkubG9hZGluZysrLCBpLmxvYWRTY3JpcHQoZSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgaS5zdGF0ZXNbZV0gPSAyLCBpLmxvYWRpbmctLSwgbygic3VjY2VzcyIsIGUpLCB1KCk7CiAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgaS5zdGF0ZXNbZV0gPSAzLCBpLmxvYWRpbmctLSwgYS5wdXNoKGUpLCBvKCJmYWlsdXJlIiwgZSksIHUoKTsKICAgICAgICB9KSkgOiBvKCJmYWlsdXJlIiwgZSkgOiBvKCJzdWNjZXNzIiwgZSk7CiAgICAgIH0pLCBpLmxvYWRpbmcgfHwgKGUgPSBpLnF1ZXVlTG9hZGVkQ2FsbGJhY2tzLnNsaWNlKDApLCBpLnF1ZXVlTG9hZGVkQ2FsbGJhY2tzLmxlbmd0aCA9IDAsIFphKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgMCA9PT0gYS5sZW5ndGggPyB5KGUuc3VjY2VzcykgJiYgZS5zdWNjZXNzLmNhbGwoZS5zY29wZSkgOiB5KGUuZmFpbHVyZSkgJiYgZS5mYWlsdXJlLmNhbGwoZS5zY29wZSwgYSk7CiAgICAgIH0pKTsKICAgIH07CgogICAgdSgpOwogIH0sIG51LlNjcmlwdExvYWRlciA9IG5ldyBudSgpLCBudSk7CgogIGZ1bmN0aW9uIG51KGUpIHsKICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHt9KSwgdGhpcy5zdGF0ZXMgPSB7fSwgdGhpcy5xdWV1ZSA9IFtdLCB0aGlzLnNjcmlwdExvYWRlZENhbGxiYWNrcyA9IHt9LCB0aGlzLnF1ZXVlTG9hZGVkQ2FsbGJhY2tzID0gW10sIHRoaXMubG9hZGluZyA9IDAsIHRoaXMuc2V0dGluZ3MgPSBlOwogIH0KCiAgZnVuY3Rpb24gcnUoZSkgewogICAgdmFyIHQgPSBlOwogICAgcmV0dXJuIHsKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHQ7CiAgICAgIH0sCiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGUpIHsKICAgICAgICB0ID0gZTsKICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIG91KCkgewogICAgcmV0dXJuIHVlKGl1LCBhdS5nZXQoKSk7CiAgfQoKICB2YXIgaXUgPSB7fSwKICAgICAgYXUgPSBydSgiZW4iKSwKICAgICAgdXUgPSB7CiAgICBnZXREYXRhOiBmdW5jdGlvbiBnZXREYXRhKCkgewogICAgICByZXR1cm4gcmUoaXUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIF9lMih7fSwgZSk7CiAgICAgIH0pOwogICAgfSwKICAgIHNldENvZGU6IGZ1bmN0aW9uIHNldENvZGUoZSkgewogICAgICBlICYmIGF1LnNldChlKTsKICAgIH0sCiAgICBnZXRDb2RlOiBmdW5jdGlvbiBnZXRDb2RlKCkgewogICAgICByZXR1cm4gYXUuZ2V0KCk7CiAgICB9LAogICAgYWRkOiBmdW5jdGlvbiBhZGQoZSwgdCkgewogICAgICB2YXIgbiA9IGl1W2VdOwogICAgICBuIHx8IChpdVtlXSA9IG4gPSB7fSksIG5lKHQsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgblt0LnRvTG93ZXJDYXNlKCldID0gZTsKICAgICAgfSk7CiAgICB9LAogICAgdHJhbnNsYXRlOiBmdW5jdGlvbiB0cmFuc2xhdGUoZSkgewogICAgICBmdW5jdGlvbiBuKGUpIHsKICAgICAgICByZXR1cm4geShlKSA/IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSA6IHUoZSkgPyAiIiA6ICIiICsgZTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gdChlKSB7CiAgICAgICAgdmFyIHQgPSBuKGUpOwogICAgICAgIHJldHVybiB1ZShhLCB0LnRvTG93ZXJDYXNlKCkpLm1hcChuKS5nZXRPcih0KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gcihlKSB7CiAgICAgICAgcmV0dXJuIGUucmVwbGFjZSgve2NvbnRleHQ6XHcrfSQvLCAiIik7CiAgICAgIH0KCiAgICAgIHZhciBvLAogICAgICAgICAgaSwKICAgICAgICAgIGEgPSBvdSgpLmdldE9yKHt9KSwKICAgICAgICAgIHUgPSBmdW5jdGlvbiB1KGUpIHsKICAgICAgICByZXR1cm4gIiIgPT09IGUgfHwgbnVsbCA9PSBlOwogICAgICB9OwoKICAgICAgaWYgKHUoZSkpIHJldHVybiAiIjsKICAgICAgaWYgKGgobyA9IGUpICYmIE5lKG8sICJyYXciKSkgcmV0dXJuIG4oZS5yYXcpOwoKICAgICAgaWYgKFMoaSA9IGUpICYmIDEgPCBpLmxlbmd0aCkgewogICAgICAgIHZhciBzID0gZS5zbGljZSgxKTsKICAgICAgICByZXR1cm4gcih0KGVbMF0pLnJlcGxhY2UoL1x7KFswLTldKylcfS9nLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgcmV0dXJuIE5lKHMsIHQpID8gbihzW3RdKSA6IGU7CiAgICAgICAgfSkpOwogICAgICB9CgogICAgICByZXR1cm4gcih0KGUpKTsKICAgIH0sCiAgICBpc1J0bDogZnVuY3Rpb24gaXNSdGwoKSB7CiAgICAgIHJldHVybiBvdSgpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gdWUoZSwgIl9kaXIiKTsKICAgICAgfSkuZXhpc3RzKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuICJydGwiID09PSBlOwogICAgICB9KTsKICAgIH0sCiAgICBoYXNDb2RlOiBmdW5jdGlvbiBoYXNDb2RlKGUpIHsKICAgICAgcmV0dXJuIE5lKGl1LCBlKTsKICAgIH0KICB9LAogICAgICBzdSA9IGZ1bmN0aW9uIHN1KCkgewogICAgZnVuY3Rpb24gdSh0LCBuKSB7CiAgICAgIFkoVShyLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlLm5hbWUgPT09IHQgJiYgZS5zdGF0ZSA9PT0gbjsKICAgICAgfSksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGUuY2FsbGJhY2soKTsKICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gcyhlKSB7CiAgICAgIHZhciB0OwogICAgICByZXR1cm4gKGZbZV0gPyBmW2VdLmRlcGVuZGVuY2llcyA6IHQpIHx8IFtdOwogICAgfQoKICAgIGZ1bmN0aW9uIGMoZSwgdCkgewogICAgICByZXR1cm4gIm9iamVjdCIgPT0gX3R5cGVvZih0KSA/IHQgOiAic3RyaW5nIiA9PSB0eXBlb2YgZSA/IHsKICAgICAgICBwcmVmaXg6ICIiLAogICAgICAgIHJlc291cmNlOiB0LAogICAgICAgIHN1ZmZpeDogIiIKICAgICAgfSA6IHsKICAgICAgICBwcmVmaXg6IGUucHJlZml4LAogICAgICAgIHJlc291cmNlOiB0LAogICAgICAgIHN1ZmZpeDogZS5zdWZmaXgKICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBlKGUsIHQsIG4pIHsKICAgICAgdm9pZCAwID09PSBuICYmIChuID0gImFkZGVkIiksIE5lKGYsIGUpICYmICJhZGRlZCIgPT09IG4gfHwgTmUobCwgZSkgJiYgImxvYWRlZCIgPT09IG4gPyB0KCkgOiByLnB1c2goewogICAgICAgIG5hbWU6IGUsCiAgICAgICAgc3RhdGU6IG4sCiAgICAgICAgY2FsbGJhY2s6IHQKICAgICAgfSk7CiAgICB9CgogICAgdmFyIG8gPSBbXSwKICAgICAgICBsID0ge30sCiAgICAgICAgZiA9IHt9LAogICAgICAgIHIgPSBbXSwKICAgICAgICBkID0gZnVuY3Rpb24gZChyLCBvLCBpLCBhLCBlKSB7CiAgICAgIHZhciB0LCBuOwogICAgICBsW3JdIHx8ICgwICE9PSAodCA9ICJzdHJpbmciID09IHR5cGVvZiBvID8gbyA6IG8ucHJlZml4ICsgby5yZXNvdXJjZSArIG8uc3VmZml4KS5pbmRleE9mKCIvIikgJiYgLTEgPT09IHQuaW5kZXhPZigiOi8vIikgJiYgKHQgPSBzdS5iYXNlVVJMICsgIi8iICsgdCksIGxbcl0gPSB0LnN1YnN0cmluZygwLCB0Lmxhc3RJbmRleE9mKCIvIikpLCBuID0gZnVuY3Rpb24gbigpIHsKICAgICAgICB2YXIgbiwgZSwgdDsKICAgICAgICB1KHIsICJsb2FkZWQiKSwgbiA9IG8sIGUgPSBpLCB0ID0gYSwgWShzKHIpLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQgPSBjKG4sIGUpOwogICAgICAgICAgZCh0LnJlc291cmNlLCB0LCB2b2lkIDAsIHZvaWQgMCk7CiAgICAgICAgfSksIGUgJiYgKHQgPyBlLmNhbGwodCkgOiBlLmNhbGwodHUpKTsKICAgICAgfSwgZltyXSA/IG4oKSA6IHR1LlNjcmlwdExvYWRlci5hZGQodCwgbiwgYSwgZSkpOwogICAgfTsKCiAgICByZXR1cm4gewogICAgICBpdGVtczogbywKICAgICAgdXJsczogbCwKICAgICAgbG9va3VwOiBmLAogICAgICBfbGlzdGVuZXJzOiByLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldChlKSB7CiAgICAgICAgaWYgKGZbZV0pIHJldHVybiBmW2VdLmluc3RhbmNlOwogICAgICB9LAogICAgICBkZXBlbmRlbmNpZXM6IHMsCiAgICAgIHJlcXVpcmVMYW5nUGFjazogZnVuY3Rpb24gcmVxdWlyZUxhbmdQYWNrKHQsIG4pIHsKICAgICAgICAhMSAhPT0gc3UubGFuZ3VhZ2VMb2FkICYmIGUodCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGUgPSB1dS5nZXRDb2RlKCk7CiAgICAgICAgICAhZSB8fCBuICYmIC0xID09PSAoIiwiICsgKG4gfHwgIiIpICsgIiwiKS5pbmRleE9mKCIsIiArIGUgKyAiLCIpIHx8IHR1LlNjcmlwdExvYWRlci5hZGQobFt0XSArICIvbGFuZ3MvIiArIGUgKyAiLmpzIik7CiAgICAgICAgfSwgImxvYWRlZCIpOwogICAgICB9LAogICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChlLCB0LCBuKSB7CiAgICAgICAgdmFyIHIgPSB0OwogICAgICAgIHJldHVybiBvLnB1c2gociksIGZbZV0gPSB7CiAgICAgICAgICBpbnN0YW5jZTogciwKICAgICAgICAgIGRlcGVuZGVuY2llczogbgogICAgICAgIH0sIHUoZSwgImFkZGVkIiksIHI7CiAgICAgIH0sCiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGUpIHsKICAgICAgICBkZWxldGUgbFtlXSwgZGVsZXRlIGZbZV07CiAgICAgIH0sCiAgICAgIGNyZWF0ZVVybDogYywKICAgICAgYWRkQ29tcG9uZW50czogZnVuY3Rpb24gYWRkQ29tcG9uZW50cyhlLCB0KSB7CiAgICAgICAgdmFyIG4gPSBsW2VdOwogICAgICAgIFkodCwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHR1LlNjcmlwdExvYWRlci5hZGQobiArICIvIiArIGUpOwogICAgICAgIH0pOwogICAgICB9LAogICAgICBsb2FkOiBkLAogICAgICB3YWl0Rm9yOiBlCiAgICB9OwogIH07CgogIGZ1bmN0aW9uIGN1KCkgewogICAgdmFyIGUsCiAgICAgICAgdCwKICAgICAgICBuID0gKGUgPSB0ZSwgdCA9IHJ1KHZlLm5vbmUoKSksIHsKICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkgewogICAgICAgIHIoKSwgdC5zZXQodmUubm9uZSgpKTsKICAgICAgfSwKICAgICAgaXNTZXQ6IGZ1bmN0aW9uIGlzU2V0KCkgewogICAgICAgIHJldHVybiB0LmdldCgpLmlzU29tZSgpOwogICAgICB9LAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdC5nZXQoKTsKICAgICAgfSwKICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoZSkgewogICAgICAgIHIoKSwgdC5zZXQodmUuc29tZShlKSk7CiAgICAgIH0KICAgIH0pOwoKICAgIGZ1bmN0aW9uIHIoKSB7CiAgICAgIHJldHVybiB0LmdldCgpLmVhY2goZSk7CiAgICB9CgogICAgcmV0dXJuIF9lMihfZTIoe30sIG4pLCB7CiAgICAgIG9uOiBmdW5jdGlvbiBvbihlKSB7CiAgICAgICAgcmV0dXJuIG4uZ2V0KCkuZWFjaChlKTsKICAgICAgfQogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBsdShuLCByKSB7CiAgICB2YXIgbyA9IG51bGw7CiAgICByZXR1cm4gewogICAgICBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbCgpIHsKICAgICAgICBsKG8pIHx8IChjbGVhclRpbWVvdXQobyksIG8gPSBudWxsKTsKICAgICAgfSwKICAgICAgdGhyb3R0bGU6IGZ1bmN0aW9uIHRocm90dGxlKCkgewogICAgICAgIGZvciAodmFyIGUgPSBbXSwgdCA9IDA7IHQgPCBhcmd1bWVudHMubGVuZ3RoOyB0KyspIHsKICAgICAgICAgIGVbdF0gPSBhcmd1bWVudHNbdF07CiAgICAgICAgfQoKICAgICAgICBsKG8pICYmIChvID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBvID0gbnVsbCwgbi5hcHBseShudWxsLCBlKTsKICAgICAgICB9LCByKSk7CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBmdShuLCByKSB7CiAgICBmdW5jdGlvbiBvKCkgewogICAgICBsKGkpIHx8IChjbGVhclRpbWVvdXQoaSksIGkgPSBudWxsKTsKICAgIH0KCiAgICB2YXIgaSA9IG51bGw7CiAgICByZXR1cm4gewogICAgICBjYW5jZWw6IG8sCiAgICAgIHRocm90dGxlOiBmdW5jdGlvbiB0aHJvdHRsZSgpIHsKICAgICAgICBmb3IgKHZhciBlID0gW10sIHQgPSAwOyB0IDwgYXJndW1lbnRzLmxlbmd0aDsgdCsrKSB7CiAgICAgICAgICBlW3RdID0gYXJndW1lbnRzW3RdOwogICAgICAgIH0KCiAgICAgICAgbygpLCBpID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpID0gbnVsbCwgbi5hcHBseShudWxsLCBlKTsKICAgICAgICB9LCByKTsKICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIGR1KGUsIHQpIHsKICAgIHZhciBuID0gdm4oZSwgdCk7CiAgICByZXR1cm4gdm9pZCAwID09PSBuIHx8ICIiID09PSBuID8gW10gOiBuLnNwbGl0KCIgIik7CiAgfQoKICBmdW5jdGlvbiBtdShlKSB7CiAgICByZXR1cm4gdm9pZCAwICE9PSBlLmRvbS5jbGFzc0xpc3Q7CiAgfQoKICBmdW5jdGlvbiBndShlLCB0KSB7CiAgICB2YXIgbiwgciwgbzsKICAgIG11KGUpID8gZS5kb20uY2xhc3NMaXN0LmFkZCh0KSA6IChyID0gdCwgbyA9IGR1KG4gPSBlLCAiY2xhc3MiKS5jb25jYXQoW3JdKSwgcG4obiwgImNsYXNzIiwgby5qb2luKCIgIikpKTsKICB9CgogIGZ1bmN0aW9uIHB1KGUsIHQpIHsKICAgIHJldHVybiBtdShlKSAmJiBlLmRvbS5jbGFzc0xpc3QuY29udGFpbnModCk7CiAgfQoKICBmdW5jdGlvbiBodShlLCB0KSB7CiAgICByZXR1cm4gSGUobiA9IHZvaWQgMCA9PT0gZSA/IGRvY3VtZW50IDogZS5kb20pID8gW10gOiBUKG4ucXVlcnlTZWxlY3RvckFsbCh0KSwgTnQuZnJvbURvbSk7CiAgICB2YXIgbjsKICB9CgogIGZ1bmN0aW9uIHZ1KHIsIGUpIHsKICAgIGZ1bmN0aW9uIHQoZSwgdCkgewogICAgICByZXR1cm4gKG4gPSBlLmRvbSkgJiYgbi5oYXNBdHRyaWJ1dGUgJiYgbi5oYXNBdHRyaWJ1dGUodCkgPyB2ZS5zb21lKHZuKGUsIHQpKSA6IHZlLm5vbmUoKTsKICAgICAgdmFyIG47CiAgICB9CgogICAgdmFyIG4gPSByLnNlbGVjdGlvbi5nZXRSbmcoKSwKICAgICAgICBvID0gTnQuZnJvbURvbShuLnN0YXJ0Q29udGFpbmVyKSwKICAgICAgICBpID0gTnQuZnJvbURvbShyLmdldEJvZHkoKSksCiAgICAgICAgYSA9IGUuZm9sZChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAiLiIgKyBqdSgpOwogICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuICJbIiArIFZ1KCkgKyAnPSInICsgZSArICciXSc7CiAgICB9KTsKICAgIHJldHVybiBicihNdChvLCBuLnN0YXJ0T2Zmc2V0KS5nZXRPcihvKSwgYSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGplKGUsIGkpOwogICAgfSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gdChlLCAiIiArIHF1KCkpLmJpbmQoZnVuY3Rpb24gKG4pIHsKICAgICAgICByZXR1cm4gdChlLCAiIiArIFZ1KCkpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQgPSAkdShyLCBuKTsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHVpZDogbiwKICAgICAgICAgICAgbmFtZTogZSwKICAgICAgICAgICAgZWxlbWVudHM6IHQKICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBidSh0KSB7CiAgICBmdW5jdGlvbiBvKCkgewogICAgICByZXR1cm4gewogICAgICAgIGxpc3RlbmVyczogW10sCiAgICAgICAgcHJldmlvdXM6IGN1KCkKICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBjKGUsIHQpIHsKICAgICAgbihlLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiB0KGUpLCBlOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBuKGUsIHQpIHsKICAgICAgdmFyIG4gPSBpLmdldCgpLAogICAgICAgICAgciA9IHQodWUobiwgZSkuZ2V0T3JUaHVuayhvKSk7CiAgICAgIG5bZV0gPSByLCBpLnNldChuKTsKICAgIH0KCiAgICB2YXIgaSA9IHJ1KHt9KSwKICAgICAgICBlID0gZnUoZnVuY3Rpb24gKCkgewogICAgICB2YXIgZSA9IGkuZ2V0KCk7CiAgICAgIFkoVyh3ZShlKSksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgbihlLCBmdW5jdGlvbiAodSkgewogICAgICAgICAgdmFyIHMgPSB1LnByZXZpb3VzLmdldCgpOwogICAgICAgICAgcmV0dXJuIHZ1KHQsIHZlLnNvbWUoZSkpLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdDsKICAgICAgICAgICAgcy5pc1NvbWUoKSAmJiAoYyh0ID0gZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBZKGUubGlzdGVuZXJzLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGUoITEsIHQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KSwgdS5wcmV2aW91cy5jbGVhcigpKTsKICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgIHIsCiAgICAgICAgICAgICAgICBvID0gZS51aWQsCiAgICAgICAgICAgICAgICBpID0gZS5uYW1lLAogICAgICAgICAgICAgICAgYSA9IGUuZWxlbWVudHM7CiAgICAgICAgICAgIGZuKHMsIG8pIHx8IChuID0gbywgciA9IGEsIGModCA9IGksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgWShlLmxpc3RlbmVycywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlKCEwLCB0LCB7CiAgICAgICAgICAgICAgICAgIHVpZDogbiwKICAgICAgICAgICAgICAgICAgbm9kZXM6IFQociwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5kb207CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSksIHUucHJldmlvdXMuc2V0KG8pKTsKICAgICAgICAgIH0pLCB7CiAgICAgICAgICAgIHByZXZpb3VzOiB1LnByZXZpb3VzLAogICAgICAgICAgICBsaXN0ZW5lcnM6IHUubGlzdGVuZXJzCiAgICAgICAgICB9OwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sIDMwKTsKICAgIHJldHVybiB0Lm9uKCJyZW1vdmUiLCBmdW5jdGlvbiAoKSB7CiAgICAgIGUuY2FuY2VsKCk7CiAgICB9KSwgdC5vbigiTm9kZUNoYW5nZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgZS50aHJvdHRsZSgpOwogICAgfSksIHsKICAgICAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uIGFkZExpc3RlbmVyKGUsIHQpIHsKICAgICAgICBuKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBwcmV2aW91czogZS5wcmV2aW91cywKICAgICAgICAgICAgbGlzdGVuZXJzOiBlLmxpc3RlbmVycy5jb25jYXQoW3RdKQogICAgICAgICAgfTsKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIHl1KGUpIHsKICAgIHZhciB0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICByZXR1cm4gZSArICJfIiArIE1hdGguZmxvb3IoMWU5ICogTWF0aC5yYW5kb20oKSkgKyArK1d1ICsgU3RyaW5nKHQpOwogIH0KCiAgZnVuY3Rpb24gQ3UoZSwgdCkgewogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvID0gUnQoZSkuZG9tLAogICAgICAgIGkgPSBOdC5mcm9tRG9tKG8uY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpKTsKICAgIEt0KGksIChuID0gdCwgKHIgPSAobyB8fCBkb2N1bWVudCkuY3JlYXRlRWxlbWVudCgiZGl2IikpLmlubmVySFRNTCA9IG4sIERuKE50LmZyb21Eb20ocikpKSksIFh0KGUpLCBQbihlLCBpKTsKICB9CgogIGZ1bmN0aW9uIHh1KGUsIHQpIHsKICAgIHJldHVybiBOdC5mcm9tRG9tKGUuZG9tLmNsb25lTm9kZSh0KSk7CiAgfQoKICBmdW5jdGlvbiB3dShlKSB7CiAgICByZXR1cm4geHUoZSwgITEpOwogIH0KCiAgZnVuY3Rpb24gU3UoZSkgewogICAgcmV0dXJuIHh1KGUsICEwKTsKICB9CgogIGZ1bmN0aW9uIEV1KGUsIHQsIG4pIHsKICAgIGZ1bmN0aW9uIHIoZSkgewogICAgICBmb3IgKHZhciB0OyAodCA9IG9bZV0oKSkgJiYgIWpuKHQpICYmICFuKHQpOykgewogICAgICAgIDsKICAgICAgfQoKICAgICAgcmV0dXJuIHZlLmZyb20odCkuZmlsdGVyKGpuKTsKICAgIH0KCiAgICB2b2lkIDAgPT09IG4gJiYgKG4gPSBSKTsKICAgIHZhciBvID0gbmV3IFJyKGUsIHQpOwogICAgcmV0dXJuIHsKICAgICAgY3VycmVudDogZnVuY3Rpb24gY3VycmVudCgpIHsKICAgICAgICByZXR1cm4gdmUuZnJvbShvLmN1cnJlbnQoKSkuZmlsdGVyKGpuKTsKICAgICAgfSwKICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgICByZXR1cm4gcigibmV4dCIpOwogICAgICB9LAogICAgICBwcmV2OiBmdW5jdGlvbiBwcmV2KCkgewogICAgICAgIHJldHVybiByKCJwcmV2Iik7CiAgICAgIH0sCiAgICAgIHByZXYyOiBmdW5jdGlvbiBwcmV2MigpIHsKICAgICAgICByZXR1cm4gcigicHJldjIiKTsKICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIE51KHQsIGUpIHsKICAgIHZhciBpID0gZSB8fCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gdC5pc0Jsb2NrKGUpIHx8IFduKGUpIHx8IFluKGUpOwogICAgfSwKICAgICAgICBhID0gZnVuY3Rpb24gYShlLCB0LCBuLCByKSB7CiAgICAgIGlmIChqbihlKSkgewogICAgICAgIHZhciBvID0gcihlLCB0LCBlLmRhdGEpOwogICAgICAgIGlmICgtMSAhPT0gbykgcmV0dXJuIHZlLnNvbWUoewogICAgICAgICAgY29udGFpbmVyOiBlLAogICAgICAgICAgb2Zmc2V0OiBvCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBuKCkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBhKGUuY29udGFpbmVyLCBlLm9mZnNldCwgbiwgcik7CiAgICAgIH0pOwogICAgfTsKCiAgICByZXR1cm4gewogICAgICBiYWNrd2FyZHM6IGZ1bmN0aW9uIGJhY2t3YXJkcyhlLCB0LCBuLCByKSB7CiAgICAgICAgdmFyIG8gPSBFdShlLCByLCBpKTsKICAgICAgICByZXR1cm4gYShlLCB0LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gby5wcmV2KCkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgY29udGFpbmVyOiBlLAogICAgICAgICAgICAgIG9mZnNldDogZS5sZW5ndGgKICAgICAgICAgICAgfTsKICAgICAgICAgIH0pOwogICAgICAgIH0sIG4pLmdldE9yTnVsbCgpOwogICAgICB9LAogICAgICBmb3J3YXJkczogZnVuY3Rpb24gZm9yd2FyZHMoZSwgdCwgbiwgcikgewogICAgICAgIHZhciBvID0gRXUoZSwgciwgaSk7CiAgICAgICAgcmV0dXJuIGEoZSwgdCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIG8ubmV4dCgpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIGNvbnRhaW5lcjogZSwKICAgICAgICAgICAgICBvZmZzZXQ6IDAKICAgICAgICAgICAgfTsKICAgICAgICAgIH0pOwogICAgICAgIH0sIG4pLmdldE9yTnVsbCgpOwogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24ga3UoZSkgewogICAgcmV0dXJuIGUgPyB7CiAgICAgIGxlZnQ6IEt1KGUubGVmdCksCiAgICAgIHRvcDogS3UoZS50b3ApLAogICAgICBib3R0b206IEt1KGUuYm90dG9tKSwKICAgICAgcmlnaHQ6IEt1KGUucmlnaHQpLAogICAgICB3aWR0aDogS3UoZS53aWR0aCksCiAgICAgIGhlaWdodDogS3UoZS5oZWlnaHQpCiAgICB9IDogewogICAgICBsZWZ0OiAwLAogICAgICB0b3A6IDAsCiAgICAgIGJvdHRvbTogMCwKICAgICAgcmlnaHQ6IDAsCiAgICAgIHdpZHRoOiAwLAogICAgICBoZWlnaHQ6IDAKICAgIH07CiAgfQoKICBmdW5jdGlvbiBfdShlLCB0KSB7CiAgICByZXR1cm4gZSA9IGt1KGUpLCB0IHx8IChlLmxlZnQgPSBlLmxlZnQgKyBlLndpZHRoKSwgZS5yaWdodCA9IGUubGVmdCwgZS53aWR0aCA9IDAsIGU7CiAgfQoKICBmdW5jdGlvbiBBdShlLCB0LCBuKSB7CiAgICByZXR1cm4gMCA8PSBlICYmIGUgPD0gTWF0aC5taW4odC5oZWlnaHQsIG4uaGVpZ2h0KSAvIDI7CiAgfQoKICBmdW5jdGlvbiBSdShlLCB0KSB7CiAgICB2YXIgbiA9IE1hdGgubWluKHQuaGVpZ2h0IC8gMiwgZS5oZWlnaHQgLyAyKTsKICAgIHJldHVybiBlLmJvdHRvbSAtIG4gPCB0LnRvcCB8fCAhKGUudG9wID4gdC5ib3R0b20pICYmIEF1KHQudG9wIC0gZS5ib3R0b20sIGUsIHQpOwogIH0KCiAgZnVuY3Rpb24gRHUoZSwgdCkgewogICAgcmV0dXJuIGUudG9wID4gdC5ib3R0b20gfHwgIShlLmJvdHRvbSA8IHQudG9wKSAmJiBBdSh0LmJvdHRvbSAtIGUudG9wLCBlLCB0KTsKICB9CgogIGZ1bmN0aW9uIFR1KGUsIHQsIG4pIHsKICAgIHJldHVybiB0ID49IGUubGVmdCAmJiB0IDw9IGUucmlnaHQgJiYgbiA+PSBlLnRvcCAmJiBuIDw9IGUuYm90dG9tOwogIH0KCiAgZnVuY3Rpb24gT3UoZSkgewogICAgdmFyIHQgPSBlLnN0YXJ0Q29udGFpbmVyLAogICAgICAgIG4gPSBlLnN0YXJ0T2Zmc2V0OwogICAgcmV0dXJuIHQuaGFzQ2hpbGROb2RlcygpICYmIGUuZW5kT2Zmc2V0ID09PSBuICsgMSA/IHQuY2hpbGROb2Rlc1tuXSA6IG51bGw7CiAgfQoKICBmdW5jdGlvbiBCdShlLCB0KSB7CiAgICBpZiAoem4oZSkgJiYgZS5oYXNDaGlsZE5vZGVzKCkpIHsKICAgICAgdmFyIG4gPSBlLmNoaWxkTm9kZXM7CiAgICAgIHJldHVybiBuWyhyID0gbi5sZW5ndGggLSAxLCBNYXRoLm1pbihNYXRoLm1heCh0LCAwKSwgcikpXTsKICAgIH0KCiAgICByZXR1cm4gZTsKICAgIHZhciByOwogIH0KCiAgZnVuY3Rpb24gUHUoZSkgewogICAgcmV0dXJuICJzdHJpbmciID09IHR5cGVvZiBlICYmIDc2OCA8PSBlLmNoYXJDb2RlQXQoMCkgJiYgWHUudGVzdChlKTsKICB9CgogIGZ1bmN0aW9uIEx1KGUpIHsKICAgIHJldHVybiAiY3JlYXRlUmFuZ2UiIGluIGUgPyBlLmNyZWF0ZVJhbmdlKCkgOiBKYS5ET00uY3JlYXRlUm5nKCk7CiAgfQoKICBmdW5jdGlvbiBJdShlKSB7CiAgICByZXR1cm4gZSAmJiAvW1xyXG5cdCBdLy50ZXN0KGUpOwogIH0KCiAgZnVuY3Rpb24gTXUoZSkgewogICAgcmV0dXJuIGUuc2V0U3RhcnQgJiYgZS5zZXRFbmQ7CiAgfQoKICBmdW5jdGlvbiBGdShlKSB7CiAgICB2YXIgdCA9IGUuc3RhcnRDb250YWluZXIsCiAgICAgICAgbiA9IGUuc3RhcnRPZmZzZXQ7CgogICAgaWYgKEl1KGUudG9TdHJpbmcoKSkgJiYgZXModC5wYXJlbnROb2RlKSAmJiBqbih0KSkgewogICAgICB2YXIgciA9IHQuZGF0YTsKICAgICAgcmV0dXJuIEl1KHJbbiAtIDFdKSB8fCBJdShyW24gKyAxXSkgPyAxIDogdm9pZCAwOwogICAgfQogIH0KCiAgZnVuY3Rpb24gVXUoZSkgewogICAgcmV0dXJuIDAgPT09IGUubGVmdCAmJiAwID09PSBlLnJpZ2h0ICYmIDAgPT09IGUudG9wICYmIDAgPT09IGUuYm90dG9tOwogIH0KCiAgZnVuY3Rpb24genUoZSwgdCkgewogICAgdmFyIG4gPSBfdShlLCB0KTsKCiAgICByZXR1cm4gbi53aWR0aCA9IDEsIG4ucmlnaHQgPSBuLmxlZnQgKyAxLCBuOwogIH0KCiAgc3UubGFuZ3VhZ2VMb2FkID0gITAsIHN1LmJhc2VVUkwgPSAiIiwgc3UuUGx1Z2luTWFuYWdlciA9IHN1KCksIHN1LlRoZW1lTWFuYWdlciA9IHN1KCk7CgogIHZhciBIdSA9IGZ1bmN0aW9uIEh1KGUsIHQpIHsKICAgIHZhciBuID0gW107CiAgICByZXR1cm4gWShEbihlKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgbiA9IChuID0gdChlKSA/IG4uY29uY2F0KFtlXSkgOiBuKS5jb25jYXQoSHUoZSwgdCkpOwogICAgfSksIG47CiAgfSwKICAgICAganUgPSBKKCJtY2UtYW5ub3RhdGlvbiIpLAogICAgICBWdSA9IEooImRhdGEtbWNlLWFubm90YXRpb24iKSwKICAgICAgcXUgPSBKKCJkYXRhLW1jZS1hbm5vdGF0aW9uLXVpZCIpLAogICAgICAkdSA9IGZ1bmN0aW9uICR1KGUsIHQpIHsKICAgIHJldHVybiBodShOdC5mcm9tRG9tKGUuZ2V0Qm9keSgpKSwgIlsiICsgcXUoKSArICc9IicgKyB0ICsgJyJdJyk7CiAgfSwKICAgICAgV3UgPSAwLAogICAgICBLdSA9IE1hdGgucm91bmQsCiAgICAgIFh1ID0gbmV3IFJlZ0V4cCgiW1x1MDMwMC1cdTAzNkZcdTA0ODMtXHUwNDg3XHUwNDg4LVx1MDQ4OVx1MDU5MS1cdTA1QkRcdTA1QkZcdTA1QzEtXHUwNUMyXHUwNUM0LVx1MDVDNVx1MDVDN1x1MDYxMC1cdTA2MUFcdTA2NEItXHUwNjVGXHUwNjcwXHUwNkQ2LVx1MDZEQ1x1MDZERi1cdTA2RTRcdTA2RTctXHUwNkU4XHUwNkVBLVx1MDZFRFx1MDcxMVx1MDczMC1cdTA3NEFcdTA3QTYtXHUwN0IwXHUwN0VCLVx1MDdGM1x1MDgxNi1cdTA4MTlcdTA4MUItXHUwODIzXHUwODI1LVx1MDgyN1x1MDgyOS1cdTA4MkRcdTA4NTktXHUwODVCXHUwOEUzLVx1MDkwMlx1MDkzQVx1MDkzQ1x1MDk0MS1cdTA5NDhcdTA5NERcdTA5NTEtXHUwOTU3XHUwOTYyLVx1MDk2M1x1MDk4MVx1MDlCQ1x1MDlCRVx1MDlDMS1cdTA5QzRcdTA5Q0RcdTA5RDdcdTA5RTItXHUwOUUzXHUwQTAxLVx1MEEwMlx1MEEzQ1x1MEE0MS1cdTBBNDJcdTBBNDctXHUwQTQ4XHUwQTRCLVx1MEE0RFx1MEE1MVx1MEE3MC1cdTBBNzFcdTBBNzVcdTBBODEtXHUwQTgyXHUwQUJDXHUwQUMxLVx1MEFDNVx1MEFDNy1cdTBBQzhcdTBBQ0RcdTBBRTItXHUwQUUzXHUwQjAxXHUwQjNDXHUwQjNFXHUwQjNGXHUwQjQxLVx1MEI0NFx1MEI0RFx1MEI1Nlx1MEI1N1x1MEI2Mi1cdTBCNjNcdTBCODJcdTBCQkVcdTBCQzBcdTBCQ0RcdTBCRDdcdTBDMDBcdTBDM0UtXHUwQzQwXHUwQzQ2LVx1MEM0OFx1MEM0QS1cdTBDNERcdTBDNTUtXHUwQzU2XHUwQzYyLVx1MEM2M1x1MEM4MVx1MENCQ1x1MENCRlx1MENDMlx1MENDNlx1MENDQy1cdTBDQ0RcdTBDRDUtXHUwQ0Q2XHUwQ0UyLVx1MENFM1x1MEQwMVx1MEQzRVx1MEQ0MS1cdTBENDRcdTBENERcdTBENTdcdTBENjItXHUwRDYzXHUwRENBXHUwRENGXHUwREQyLVx1MERENFx1MERENlx1MERERlx1MEUzMVx1MEUzNC1cdTBFM0FcdTBFNDctXHUwRTRFXHUwRUIxXHUwRUI0LVx1MEVCOVx1MEVCQi1cdTBFQkNcdTBFQzgtXHUwRUNEXHUwRjE4LVx1MEYxOVx1MEYzNVx1MEYzN1x1MEYzOVx1MEY3MS1cdTBGN0VcdTBGODAtXHUwRjg0XHUwRjg2LVx1MEY4N1x1MEY4RC1cdTBGOTdcdTBGOTktXHUwRkJDXHUwRkM2XHUxMDJELVx1MTAzMFx1MTAzMi1cdTEwMzdcdTEwMzktXHUxMDNBXHUxMDNELVx1MTAzRVx1MTA1OC1cdTEwNTlcdTEwNUUtXHUxMDYwXHUxMDcxLVx1MTA3NFx1MTA4Mlx1MTA4NS1cdTEwODZcdTEwOERcdTEwOURcdTEzNUQtXHUxMzVGXHUxNzEyLVx1MTcxNFx1MTczMi1cdTE3MzRcdTE3NTItXHUxNzUzXHUxNzcyLVx1MTc3M1x1MTdCNC1cdTE3QjVcdTE3QjctXHUxN0JEXHUxN0M2XHUxN0M5LVx1MTdEM1x1MTdERFx1MTgwQi1cdTE4MERcdTE4QTlcdTE5MjAtXHUxOTIyXHUxOTI3LVx1MTkyOFx1MTkzMlx1MTkzOS1cdTE5M0JcdTFBMTctXHUxQTE4XHUxQTFCXHUxQTU2XHUxQTU4LVx1MUE1RVx1MUE2MFx1MUE2Mlx1MUE2NS1cdTFBNkNcdTFBNzMtXHUxQTdDXHUxQTdGXHUxQUIwLVx1MUFCRFx1MUFCRVx1MUIwMC1cdTFCMDNcdTFCMzRcdTFCMzYtXHUxQjNBXHUxQjNDXHUxQjQyXHUxQjZCLVx1MUI3M1x1MUI4MC1cdTFCODFcdTFCQTItXHUxQkE1XHUxQkE4LVx1MUJBOVx1MUJBQi1cdTFCQURcdTFCRTZcdTFCRTgtXHUxQkU5XHUxQkVEXHUxQkVGLVx1MUJGMVx1MUMyQy1cdTFDMzNcdTFDMzYtXHUxQzM3XHUxQ0QwLVx1MUNEMlx1MUNENC1cdTFDRTBcdTFDRTItXHUxQ0U4XHUxQ0VEXHUxQ0Y0XHUxQ0Y4LVx1MUNGOVx1MURDMC1cdTFERjVcdTFERkMtXHUxREZGXHUyMDBDLVx1MjAwRFx1MjBEMC1cdTIwRENcdTIwREQtXHUyMEUwXHUyMEUxXHUyMEUyLVx1MjBFNFx1MjBFNS1cdTIwRjBcdTJDRUYtXHUyQ0YxXHUyRDdGXHUyREUwLVx1MkRGRlx1MzAyQS1cdTMwMkRcdTMwMkUtXHUzMDJGXHUzMDk5LVx1MzA5QVx1QTY2Rlx1QTY3MC1cdUE2NzJcdUE2NzQtXHVBNjdEXHVBNjlFLVx1QTY5Rlx1QTZGMC1cdUE2RjFcdUE4MDJcdUE4MDZcdUE4MEJcdUE4MjUtXHVBODI2XHVBOEM0XHVBOEUwLVx1QThGMVx1QTkyNi1cdUE5MkRcdUE5NDctXHVBOTUxXHVBOTgwLVx1QTk4Mlx1QTlCM1x1QTlCNi1cdUE5QjlcdUE5QkNcdUE5RTVcdUFBMjktXHVBQTJFXHVBQTMxLVx1QUEzMlx1QUEzNS1cdUFBMzZcdUFBNDNcdUFBNENcdUFBN0NcdUFBQjBcdUFBQjItXHVBQUI0XHVBQUI3LVx1QUFCOFx1QUFCRS1cdUFBQkZcdUFBQzFcdUFBRUMtXHVBQUVEXHVBQUY2XHVBQkU1XHVBQkU4XHVBQkVEXHVGQjFFXHVGRTAwLVx1RkUwRlx1RkUyMC1cdUZFMkZcdUZGOUUtXHVGRjlGXSIpLAogICAgICBZdSA9IHpuLAogICAgICBHdSA9IGpyLAogICAgICBKdSA9IGFuKCJkaXNwbGF5IiwgImJsb2NrIHRhYmxlIiksCiAgICAgIFF1ID0gYW4oImZsb2F0IiwgImxlZnQgcmlnaHQiKSwKICAgICAgWnUgPSBmdW5jdGlvbiAoKSB7CiAgICBmb3IgKHZhciBuID0gW10sIGUgPSAwOyBlIDwgYXJndW1lbnRzLmxlbmd0aDsgZSsrKSB7CiAgICAgIG5bZV0gPSBhcmd1bWVudHNbZV07CiAgICB9CgogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgbi5sZW5ndGg7IHQrKykgewogICAgICAgIGlmICghblt0XShlKSkgcmV0dXJuICExOwogICAgICB9CgogICAgICByZXR1cm4gITA7CiAgICB9OwogIH0oWXUsIEd1LCBzKFF1KSksCiAgICAgIGVzID0gcyhhbigid2hpdGUtc3BhY2UiLCAicHJlIHByZS1saW5lIHByZS13cmFwIikpLAogICAgICB0cyA9IGpuLAogICAgICBucyA9IFduLAogICAgICBycyA9IEphLm5vZGVJbmRleCwKICAgICAgb3MgPSBmdW5jdGlvbiBvcyhlLCB0KSB7CiAgICBpZiAoISh0IDwgMCAmJiB6bihlKSAmJiBlLmhhc0NoaWxkTm9kZXMoKSkpIHJldHVybiBCdShlLCB0KTsKICB9LAogICAgICBpcyA9IGZ1bmN0aW9uIGlzKGUpIHsKICAgIHZhciB0ID0gZS5nZXRDbGllbnRSZWN0cygpLAogICAgICAgIG4gPSAwIDwgdC5sZW5ndGggPyBrdSh0WzBdKSA6IGt1KGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpOwogICAgcmV0dXJuICFNdShlKSAmJiBucyhlKSAmJiBVdShuKSA/IGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gZS5vd25lckRvY3VtZW50LAogICAgICAgICAgbiA9IEx1KHQpLAogICAgICAgICAgciA9IHQuY3JlYXRlVGV4dE5vZGUoeW8pLAogICAgICAgICAgbyA9IGUucGFyZW50Tm9kZTsKICAgICAgby5pbnNlcnRCZWZvcmUociwgZSksIG4uc2V0U3RhcnQociwgMCksIG4uc2V0RW5kKHIsIDEpOwogICAgICB2YXIgaSA9IGt1KG4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpOwogICAgICByZXR1cm4gby5yZW1vdmVDaGlsZChyKSwgaTsKICAgIH0oZSkgOiBVdShuKSAmJiBNdShlKSA/IGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gZS5zdGFydENvbnRhaW5lciwKICAgICAgICAgIG4gPSBlLmVuZENvbnRhaW5lciwKICAgICAgICAgIHIgPSBlLnN0YXJ0T2Zmc2V0LAogICAgICAgICAgbyA9IGUuZW5kT2Zmc2V0OwoKICAgICAgaWYgKHQgPT09IG4gJiYgam4obikgJiYgMCA9PT0gciAmJiAxID09PSBvKSB7CiAgICAgICAgdmFyIGkgPSBlLmNsb25lUmFuZ2UoKTsKICAgICAgICByZXR1cm4gaS5zZXRFbmRBZnRlcihuKSwgaXMoaSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfShlKSA6IG47CiAgfSwKICAgICAgYXMgPSBmdW5jdGlvbiBhcyh0LCBuLCBlKSB7CiAgICBmdW5jdGlvbiByKCkgewogICAgICByZXR1cm4gZSA9IGUgfHwgZnVuY3Rpb24gKGUpIHsKICAgICAgICBmdW5jdGlvbiByKGUpIHsKICAgICAgICAgIHZhciB0OwogICAgICAgICAgMCAhPT0gZS5oZWlnaHQgJiYgKDAgPCBvLmxlbmd0aCAmJiAodCA9IG9bby5sZW5ndGggLSAxXSwgZS5sZWZ0ID09PSB0LmxlZnQgJiYgZS50b3AgPT09IHQudG9wICYmIGUuYm90dG9tID09PSB0LmJvdHRvbSAmJiBlLnJpZ2h0ID09PSB0LnJpZ2h0KSB8fCBvLnB1c2goZSkpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdChlLCB0KSB7CiAgICAgICAgICB2YXIgbiA9IEx1KGUub3duZXJEb2N1bWVudCk7CgogICAgICAgICAgaWYgKHQgPCBlLmRhdGEubGVuZ3RoKSB7CiAgICAgICAgICAgIGlmIChQdShlLmRhdGFbdF0pKSByZXR1cm4gbzsKICAgICAgICAgICAgaWYgKFB1KGUuZGF0YVt0IC0gMV0pICYmIChuLnNldFN0YXJ0KGUsIHQpLCBuLnNldEVuZChlLCB0ICsgMSksICFGdShuKSkpIHJldHVybiByKHp1KGlzKG4pLCAhMSkpLCBvOwogICAgICAgICAgfQoKICAgICAgICAgIDAgPCB0ICYmIChuLnNldFN0YXJ0KGUsIHQgLSAxKSwgbi5zZXRFbmQoZSwgdCksIEZ1KG4pIHx8IHIoenUoaXMobiksICExKSkpLCB0IDwgZS5kYXRhLmxlbmd0aCAmJiAobi5zZXRTdGFydChlLCB0KSwgbi5zZXRFbmQoZSwgdCArIDEpLCBGdShuKSB8fCByKHp1KGlzKG4pLCAhMCkpKTsKICAgICAgICB9CgogICAgICAgIHZhciBvID0gW10sCiAgICAgICAgICAgIG4gPSBlLmNvbnRhaW5lcigpLAogICAgICAgICAgICBpID0gZS5vZmZzZXQoKTsKICAgICAgICBpZiAodHMobikpIHJldHVybiB0KG4sIGkpLCBvOwogICAgICAgIGlmIChZdShuKSkgaWYgKGUuaXNBdEVuZCgpKSB7CiAgICAgICAgICB2YXIgYSA9IG9zKG4sIGkpOwogICAgICAgICAgdHMoYSkgJiYgdChhLCBhLmRhdGEubGVuZ3RoKSwgWnUoYSkgJiYgIW5zKGEpICYmIHIoenUoaXMoYSksICExKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChhID0gb3MobiwgaSksIHRzKGEpICYmIHQoYSwgMCksIFp1KGEpICYmIGUuaXNBdEVuZCgpKSByZXR1cm4gcih6dShpcyhhKSwgITEpKSwgbzsKICAgICAgICAgIHZhciB1ID0gb3MoZS5jb250YWluZXIoKSwgZS5vZmZzZXQoKSAtIDEpOwogICAgICAgICAgWnUodSkgJiYgIW5zKHUpICYmICghSnUodSkgJiYgIUp1KGEpICYmIFp1KGEpIHx8IHIoenUoaXModSksICExKSkpLCBadShhKSAmJiByKHp1KGlzKGEpLCAhMCkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbzsKICAgICAgfShhcyh0LCBuKSk7CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgY29udGFpbmVyOiBKKHQpLAogICAgICBvZmZzZXQ6IEoobiksCiAgICAgIHRvUmFuZ2U6IGZ1bmN0aW9uIHRvUmFuZ2UoKSB7CiAgICAgICAgdmFyIGUgPSBMdSh0Lm93bmVyRG9jdW1lbnQpOwogICAgICAgIHJldHVybiBlLnNldFN0YXJ0KHQsIG4pLCBlLnNldEVuZCh0LCBuKSwgZTsKICAgICAgfSwKICAgICAgZ2V0Q2xpZW50UmVjdHM6IHIsCiAgICAgIGlzVmlzaWJsZTogZnVuY3Rpb24gaXNWaXNpYmxlKCkgewogICAgICAgIHJldHVybiAwIDwgcigpLmxlbmd0aDsKICAgICAgfSwKICAgICAgaXNBdFN0YXJ0OiBmdW5jdGlvbiBpc0F0U3RhcnQoKSB7CiAgICAgICAgcmV0dXJuIHRzKHQpLCAwID09PSBuOwogICAgICB9LAogICAgICBpc0F0RW5kOiBmdW5jdGlvbiBpc0F0RW5kKCkgewogICAgICAgIHJldHVybiB0cyh0KSA/IG4gPj0gdC5kYXRhLmxlbmd0aCA6IG4gPj0gdC5jaGlsZE5vZGVzLmxlbmd0aDsKICAgICAgfSwKICAgICAgaXNFcXVhbDogZnVuY3Rpb24gaXNFcXVhbChlKSB7CiAgICAgICAgcmV0dXJuIGUgJiYgdCA9PT0gZS5jb250YWluZXIoKSAmJiBuID09PSBlLm9mZnNldCgpOwogICAgICB9LAogICAgICBnZXROb2RlOiBmdW5jdGlvbiBnZXROb2RlKGUpIHsKICAgICAgICByZXR1cm4gb3ModCwgZSA/IG4gLSAxIDogbik7CiAgICAgIH0KICAgIH07CiAgfTsKCiAgZnVuY3Rpb24gdXMoZSwgdCkgewogICAgam4odCkgJiYgMCA9PT0gdC5kYXRhLmxlbmd0aCAmJiBlLnJlbW92ZSh0KTsKICB9CgogIGZ1bmN0aW9uIHNzKGUsIHQsIG4pIHsKICAgIHZhciByLCBvLCBpLCBhLCB1LCBzLCBjOwogICAgJG4obikgPyAoaSA9IGUsIGEgPSB0LCBzID0gdmUuZnJvbSgodSA9IG4pLmZpcnN0Q2hpbGQpLCBjID0gdmUuZnJvbSh1Lmxhc3RDaGlsZCksIGEuaW5zZXJ0Tm9kZSh1KSwgcy5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB1cyhpLCBlLnByZXZpb3VzU2libGluZyk7CiAgICB9KSwgYy5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB1cyhpLCBlLm5leHRTaWJsaW5nKTsKICAgIH0pKSA6IChyID0gZSwgdC5pbnNlcnROb2RlKG8gPSBuKSwgdXMociwgby5wcmV2aW91c1NpYmxpbmcpLCB1cyhyLCBvLm5leHRTaWJsaW5nKSk7CiAgfQoKICBmdW5jdGlvbiBjcyh0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHQgPT09IGU7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gbHMoZSkgewogICAgdmFyIHQsIHIsIG4sIG87CiAgICByZXR1cm4gKHVjKGUpID8gInRleHQoKSIgOiBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpICsgIlsiICsgKHIgPSBmYyhsYyh0ID0gZSkpLCBuID0gZ2UociwgY3ModCksIHQpLCBvID0gbWUociA9IHIuc2xpY2UoMCwgbiArIDEpLCBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICByZXR1cm4gdWModCkgJiYgdWMocltuIC0gMV0pICYmIGUrKywgZTsKICAgIH0sIDApLCBnZShyID0gZmUociwgb24oW3Qubm9kZU5hbWVdKSksIGNzKHQpLCB0KSAtIG8pICsgIl0iOwogIH0KCiAgZnVuY3Rpb24gZnMoZSwgdCkgewogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGkgPSBbXSwKICAgICAgICBhID0gdC5jb250YWluZXIoKSwKICAgICAgICB1ID0gdC5vZmZzZXQoKTsKICAgIHJldHVybiB1YyhhKSA/IG4gPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICBmb3IgKDsgKGUgPSBlLnByZXZpb3VzU2libGluZykgJiYgdWMoZSk7KSB7CiAgICAgICAgdCArPSBlLmRhdGEubGVuZ3RoOwogICAgICB9CgogICAgICByZXR1cm4gdDsKICAgIH0oYSwgdSkgOiAodSA+PSAociA9IGEuY2hpbGROb2RlcykubGVuZ3RoID8gKG4gPSAiYWZ0ZXIiLCB1ID0gci5sZW5ndGggLSAxKSA6IG4gPSAiYmVmb3JlIiwgYSA9IHJbdV0pLCBpLnB1c2gobHMoYSkpLCBvID0gZmUoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgdmFyIG4gPSBbXTsKCiAgICAgIGZvciAodCA9IHQucGFyZW50Tm9kZTsgdCAhPT0gZTsgdCA9IHQucGFyZW50Tm9kZSkgewogICAgICAgIG4ucHVzaCh0KTsKICAgICAgfQoKICAgICAgcmV0dXJuIG47CiAgICB9KGUsIGEpLCBzKHNuKSksIChpID0gaS5jb25jYXQobGUobywgbHMpKSkucmV2ZXJzZSgpLmpvaW4oIi8iKSArICIsIiArIG47CiAgfQoKICBmdW5jdGlvbiBkcyhlLCB0KSB7CiAgICBpZiAoIXQpIHJldHVybiBudWxsOwogICAgdmFyIG4gPSB0LnNwbGl0KCIsIiksCiAgICAgICAgciA9IG5bMF0uc3BsaXQoIi8iKSwKICAgICAgICBvID0gMSA8IG4ubGVuZ3RoID8gblsxXSA6ICJiZWZvcmUiLAogICAgICAgIGkgPSBtZShyLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiwKICAgICAgICAgIHIsCiAgICAgICAgICBvLAogICAgICAgICAgaSwKICAgICAgICAgIGEgPSAvKFtcd1wtXChcKV0rKVxbKFswLTldKylcXS8uZXhlYyh0KTsKICAgICAgcmV0dXJuIGEgPyAoInRleHQoKSIgPT09IGFbMV0gJiYgKGFbMV0gPSAiI3RleHQiKSwgbiA9IGUsIHIgPSBhWzFdLCBvID0gcGFyc2VJbnQoYVsyXSwgMTApLCBpID0gZmUoaSA9IGZjKG4pLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgIHJldHVybiAhdWMoZSkgfHwgIXVjKGlbdCAtIDFdKTsKICAgICAgfSksIChpID0gZmUoaSwgb24oW3JdKSkpW29dKSA6IG51bGw7CiAgICB9LCBlKTsKICAgIHJldHVybiBpID8gdWMoaSkgPyBmdW5jdGlvbiAoZSwgdCkgewogICAgICBmb3IgKHZhciBuLCByID0gZSwgbyA9IDA7IHVjKHIpOykgewogICAgICAgIGlmIChuID0gci5kYXRhLmxlbmd0aCwgbyA8PSB0ICYmIHQgPD0gbyArIG4pIHsKICAgICAgICAgIGUgPSByLCB0IC09IG87CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGlmICghdWMoci5uZXh0U2libGluZykpIHsKICAgICAgICAgIGUgPSByLCB0ID0gbjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgbyArPSBuLCByID0gci5uZXh0U2libGluZzsKICAgICAgfQoKICAgICAgcmV0dXJuIHVjKGUpICYmIHQgPiBlLmRhdGEubGVuZ3RoICYmICh0ID0gZS5kYXRhLmxlbmd0aCksIGFzKGUsIHQpOwogICAgfShpLCBwYXJzZUludChvLCAxMCkpIDogKG8gPSAiYWZ0ZXIiID09PSBvID8gY2MoaSkgKyAxIDogY2MoaSksIGFzKGkucGFyZW50Tm9kZSwgbykpIDogbnVsbDsKICB9CgogIGZ1bmN0aW9uIG1zKGUsIHQsIG4sIHIsIG8pIHsKICAgIHZhciBpLAogICAgICAgIGEgPSByW28gPyAic3RhcnRDb250YWluZXIiIDogImVuZENvbnRhaW5lciJdLAogICAgICAgIHUgPSByW28gPyAic3RhcnRPZmZzZXQiIDogImVuZE9mZnNldCJdLAogICAgICAgIHMgPSBbXSwKICAgICAgICBjID0gMCwKICAgICAgICBsID0gZS5nZXRSb290KCk7CgogICAgZm9yIChqbihhKSA/IHMucHVzaChuID8gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgICAgZm9yICh2YXIgciA9IGUodC5kYXRhLnNsaWNlKDAsIG4pKS5sZW5ndGgsIG8gPSB0LnByZXZpb3VzU2libGluZzsgbyAmJiBqbihvKTsgbyA9IG8ucHJldmlvdXNTaWJsaW5nKSB7CiAgICAgICAgciArPSBlKG8uZGF0YSkubGVuZ3RoOwogICAgICB9CgogICAgICByZXR1cm4gcjsKICAgIH0odCwgYSwgdSkgOiB1KSA6ICh1ID49IChpID0gYS5jaGlsZE5vZGVzKS5sZW5ndGggJiYgaS5sZW5ndGggJiYgKGMgPSAxLCB1ID0gTWF0aC5tYXgoMCwgaS5sZW5ndGggLSAxKSksIHMucHVzaChlLm5vZGVJbmRleChpW3VdLCBuKSArIGMpKTsgYSAmJiBhICE9PSBsOyBhID0gYS5wYXJlbnROb2RlKSB7CiAgICAgIHMucHVzaChlLm5vZGVJbmRleChhLCBuKSk7CiAgICB9CgogICAgcmV0dXJuIHM7CiAgfQoKICBmdW5jdGlvbiBncyhlLCB0LCBuKSB7CiAgICB2YXIgciA9IDA7CiAgICByZXR1cm4gRXQuZWFjaChlLnNlbGVjdCh0KSwgZnVuY3Rpb24gKGUpIHsKICAgICAgaWYgKCJhbGwiICE9PSBlLmdldEF0dHJpYnV0ZSgiZGF0YS1tY2UtYm9ndXMiKSkgcmV0dXJuIGUgIT09IG4gJiYgdm9pZCByKys7CiAgICB9KSwgcjsKICB9CgogIGZ1bmN0aW9uIHBzKGUsIHQpIHsKICAgIHZhciBuLAogICAgICAgIHIgPSB0ID8gInN0YXJ0IiA6ICJlbmQiLAogICAgICAgIG8gPSBlW3IgKyAiQ29udGFpbmVyIl0sCiAgICAgICAgaSA9IGVbciArICJPZmZzZXQiXTsKICAgIHpuKG8pICYmICJUUiIgPT09IG8ubm9kZU5hbWUgJiYgKG8gPSAobiA9IG8uY2hpbGROb2RlcylbTWF0aC5taW4odCA/IGkgOiBpIC0gMSwgbi5sZW5ndGggLSAxKV0pICYmIChpID0gdCA/IDAgOiBvLmNoaWxkTm9kZXMubGVuZ3RoLCBlWyJzZXQiICsgKHQgPyAiU3RhcnQiIDogIkVuZCIpXShvLCBpKSk7CiAgfQoKICBmdW5jdGlvbiBocyhlKSB7CiAgICByZXR1cm4gcHMoZSwgITApLCBwcyhlLCAhMSksIGU7CiAgfQoKICBmdW5jdGlvbiB2cyhlLCB0KSB7CiAgICB2YXIgbjsKICAgIHJldHVybiB6bihlKSAmJiAoZSA9IEJ1KGUsIHQpLCBkYyhlKSkgPyBlIDogSXIoZSkgPyAobiA9IChlID0gam4oZSkgJiYgUHIoZSkgPyBlLnBhcmVudE5vZGUgOiBlKS5wcmV2aW91c1NpYmxpbmcsIGRjKG4pID8gbiA6IChuID0gZS5uZXh0U2libGluZywgZGMobikgPyBuIDogdm9pZCAwKSkgOiB2b2lkIDA7CiAgfQoKICBmdW5jdGlvbiBicyhlLCB0LCBuKSB7CiAgICB2YXIgciA9IG4uZ2V0Tm9kZSgpLAogICAgICAgIG8gPSByID8gci5ub2RlTmFtZSA6IG51bGwsCiAgICAgICAgaSA9IG4uZ2V0Um5nKCk7CiAgICBpZiAoZGMocikgfHwgIklNRyIgPT09IG8pIHJldHVybiB7CiAgICAgIG5hbWU6IG8sCiAgICAgIGluZGV4OiBncyhuLmRvbSwgbywgcikKICAgIH07CiAgICB2YXIgYSwKICAgICAgICB1LAogICAgICAgIHMsCiAgICAgICAgYywKICAgICAgICBsLAogICAgICAgIGYsCiAgICAgICAgZCwKICAgICAgICBtID0gdnMoKGEgPSBpKS5zdGFydENvbnRhaW5lciwgYS5zdGFydE9mZnNldCkgfHwgdnMoYS5lbmRDb250YWluZXIsIGEuZW5kT2Zmc2V0KTsKICAgIHJldHVybiBtID8gewogICAgICBuYW1lOiBvID0gbS50YWdOYW1lLAogICAgICBpbmRleDogZ3Mobi5kb20sIG8sIG0pCiAgICB9IDogKGYgPSAocyA9IG4pLmRvbSwgKGQgPSB7fSkuc3RhcnQgPSBtcyhmLCB1ID0gZSwgYyA9IHQsIGwgPSBpLCAhMCksIHMuaXNDb2xsYXBzZWQoKSB8fCAoZC5lbmQgPSBtcyhmLCB1LCBjLCBsLCAhMSkpLCBIcihsKSAmJiAoZC5pc0Zha2VDYXJldCA9ICEwKSwgZCk7CiAgfQoKICBmdW5jdGlvbiB5cyhlLCB0LCBuKSB7CiAgICB2YXIgciA9IHsKICAgICAgImRhdGEtbWNlLXR5cGUiOiAiYm9va21hcmsiLAogICAgICBpZDogdCwKICAgICAgc3R5bGU6ICJvdmVyZmxvdzpoaWRkZW47bGluZS1oZWlnaHQ6MHB4IgogICAgfTsKICAgIHJldHVybiBuID8gZS5jcmVhdGUoInNwYW4iLCByLCAiJiN4RkVGRjsiKSA6IGUuY3JlYXRlKCJzcGFuIiwgcik7CiAgfQoKICBmdW5jdGlvbiBDcyhlLCB0KSB7CiAgICB2YXIgbiA9IGUuZG9tLAogICAgICAgIHIgPSBlLmdldFJuZygpLAogICAgICAgIG8gPSBuLnVuaXF1ZUlkKCksCiAgICAgICAgaSA9IGUuaXNDb2xsYXBzZWQoKSwKICAgICAgICBhID0gZS5nZXROb2RlKCksCiAgICAgICAgdSA9IGEubm9kZU5hbWU7CiAgICBpZiAoIklNRyIgPT09IHUpIHJldHVybiB7CiAgICAgIG5hbWU6IHUsCiAgICAgIGluZGV4OiBncyhuLCB1LCBhKQogICAgfTsKICAgIHZhciBzID0gaHMoci5jbG9uZVJhbmdlKCkpOwogICAgcmV0dXJuIGkgfHwgKHMuY29sbGFwc2UoITEpLCBzcyhuLCBzLCB5cyhuLCBvICsgIl9lbmQiLCB0KSkpLCAociA9IGhzKHIpKS5jb2xsYXBzZSghMCksIHNzKG4sIHIsIHlzKG4sIG8gKyAiX3N0YXJ0IiwgdCkpLCBlLm1vdmVUb0Jvb2ttYXJrKHsKICAgICAgaWQ6IG8sCiAgICAgIGtlZXA6ICEwCiAgICB9KSwgewogICAgICBpZDogbwogICAgfTsKICB9CgogIGZ1bmN0aW9uIHhzKGUsIHQsIG4pIHsKICAgIHZhciByID0gZS5nZXRQYXJhbSh0LCBuKTsKICAgIHJldHVybiAtMSA9PT0gci5pbmRleE9mKCI9IikgPyByIDogdWUoZS5nZXRQYXJhbSh0LCAiIiwgImhhc2giKSwgZS5pZCkuZ2V0T3Iobik7CiAgfQoKICBmdW5jdGlvbiB3cyhlKSB7CiAgICByZXR1cm4gZS5nZXRQYXJhbSgiY29udGVudF9zZWN1cml0eV9wb2xpY3kiLCAiIik7CiAgfQoKICBmdW5jdGlvbiBTcyhlKSB7CiAgICBpZiAoZS5nZXRQYXJhbSgiZm9yY2VfcF9uZXdsaW5lcyIsICExKSkgcmV0dXJuICJwIjsKICAgIHZhciB0ID0gZS5nZXRQYXJhbSgiZm9yY2VkX3Jvb3RfYmxvY2siLCAicCIpOwogICAgcmV0dXJuICExID09PSB0ID8gIiIgOiAhMCA9PT0gdCA/ICJwIiA6IHQ7CiAgfQoKICBmdW5jdGlvbiBFcyhlKSB7CiAgICByZXR1cm4gZS5nZXRQYXJhbSgiZm9yY2VkX3Jvb3RfYmxvY2tfYXR0cnMiLCB7fSk7CiAgfQoKICBmdW5jdGlvbiBOcyhlKSB7CiAgICByZXR1cm4gZS5nZXRQYXJhbSgiYXV0b21hdGljX3VwbG9hZHMiLCAhMCwgImJvb2xlYW4iKTsKICB9CgogIGZ1bmN0aW9uIGtzKGUpIHsKICAgIHJldHVybiBlLmdldFBhcmFtKCJpY29ucyIsICIiLCAic3RyaW5nIik7CiAgfQoKICBmdW5jdGlvbiBfcyhlKSB7CiAgICByZXR1cm4gZS5nZXRQYXJhbSgicmVmZXJyZXJfcG9saWN5IiwgIiIsICJzdHJpbmciKTsKICB9CgogIGZ1bmN0aW9uIEFzKGUpIHsKICAgIHJldHVybiBlLmdldFBhcmFtKCJsYW5ndWFnZSIsICJlbiIsICJzdHJpbmciKTsKICB9CgogIGZ1bmN0aW9uIFJzKGUpIHsKICAgIHJldHVybiBlLmdldFBhcmFtKCJpbmRlbnRfdXNlX21hcmdpbiIsICExKTsKICB9CgogIGZ1bmN0aW9uIERzKGUpIHsKICAgIHZhciB0ID0gZS5nZXRQYXJhbSgiZm9udF9jc3MiLCBbXSk7CiAgICByZXR1cm4gUyh0KSA/IHQgOiBUKHQuc3BsaXQoIiwiKSwgSmUpOwogIH0KCiAgZnVuY3Rpb24gVHMoZSkgewogICAgdmFyIHQgPSBlLmdldFBhcmFtKCJvYmplY3RfcmVzaXppbmciKTsKICAgIHJldHVybiAhMSAhPT0gdCAmJiAheHQuaU9TICYmIChYKHQpID8gdCA6ICJ0YWJsZSxpbWcsZmlndXJlLmltYWdlLGRpdix2aWRlbyxpZnJhbWUiKTsKICB9CgogIGZ1bmN0aW9uIE9zKGUpIHsKICAgIHJldHVybiBlLmdldFBhcmFtKCJldmVudF9yb290Iik7CiAgfQoKICBmdW5jdGlvbiBCcyhlKSB7CiAgICByZXR1cm4gZS5nZXRQYXJhbSgidGhlbWUiKTsKICB9CgogIGZ1bmN0aW9uIFBzKGUpIHsKICAgIHJldHVybiAhMSAhPT0gZS5nZXRQYXJhbSgiaW5saW5lX2JvdW5kYXJpZXMiKTsKICB9CgogIGZ1bmN0aW9uIExzKGUpIHsKICAgIHJldHVybiBlLmdldFBhcmFtKCJwbHVnaW5zIiwgIiIsICJzdHJpbmciKTsKICB9CgogIGZ1bmN0aW9uIElzKGUpIHsKICAgIHZhciB0ID0gZS5wYXJlbnROb2RlOwogICAgdCAmJiB0LnJlbW92ZUNoaWxkKGUpOwogIH0KCiAgZnVuY3Rpb24gTXMoZSkgewogICAgdmFyIHQgPSB3byhlKTsKICAgIHJldHVybiB7CiAgICAgIGNvdW50OiBlLmxlbmd0aCAtIHQubGVuZ3RoLAogICAgICB0ZXh0OiB0CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gRnMoZSkgewogICAgZm9yICh2YXIgdDsgLTEgIT09ICh0ID0gZS5kYXRhLmxhc3RJbmRleE9mKENvKSk7KSB7CiAgICAgIGUuZGVsZXRlRGF0YSh0LCAxKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIFVzKGUsIHQpIHsKICAgIHJldHVybiB2YyhlKSwgdDsKICB9CgogIGZ1bmN0aW9uIHpzKGUsIHQpIHsKICAgIHZhciBuLAogICAgICAgIHIgPSB0LmNvbnRhaW5lcigpLAogICAgICAgIG8gPSAoLTEgPT09IChuID0gXyh4ZShyLmNoaWxkTm9kZXMpLCBlKSkgPyB2ZS5ub25lKCkgOiB2ZS5zb21lKG4pKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGUgPCB0Lm9mZnNldCgpID8gYXMociwgdC5vZmZzZXQoKSAtIDEpIDogdDsKICAgIH0pLmdldE9yKHQpOwogICAgcmV0dXJuIHZjKGUpLCBvOwogIH0KCiAgZnVuY3Rpb24gSHMoZSwgdCkgewogICAgcmV0dXJuIGFzLmlzVGV4dFBvc2l0aW9uKHQpID8gKHIgPSB0LCBoYyhuID0gZSkgJiYgci5jb250YWluZXIoKSA9PT0gbiA/IChhID0gTXMoKG8gPSBuKS5kYXRhLnN1YnN0cigwLCAoaSA9IHIpLm9mZnNldCgpKSksIHUgPSBNcyhvLmRhdGEuc3Vic3RyKGkub2Zmc2V0KCkpKSwgMCA8IChhLnRleHQgKyB1LnRleHQpLmxlbmd0aCA/IChGcyhvKSwgYXMobywgaS5vZmZzZXQoKSAtIGEuY291bnQpKSA6IGkpIDogVXMobiwgcikpIDogKHMgPSBlLCAoKGMgPSB0KS5jb250YWluZXIoKSA9PT0gcy5wYXJlbnROb2RlID8genMgOiBVcykocywgYykpOwogICAgdmFyIG4sIHIsIG8sIGksIGEsIHUsIHMsIGM7CiAgfQoKICBmdW5jdGlvbiBqcyhlLCB0LCBuKSB7CiAgICB2YXIgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYSA9IF91KHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIG4pLAogICAgICAgIHUgPSAiQk9EWSIgPT09IGUudGFnTmFtZSA/IChyID0gZS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgbyA9IGUuc2Nyb2xsTGVmdCB8fCByLnNjcm9sbExlZnQsIGUuc2Nyb2xsVG9wIHx8IHIuc2Nyb2xsVG9wKSA6IChpID0gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgbyA9IGUuc2Nyb2xsTGVmdCAtIGkubGVmdCwgZS5zY3JvbGxUb3AgLSBpLnRvcCk7CgogICAgYS5sZWZ0ICs9IG8sIGEucmlnaHQgKz0gbywgYS50b3AgKz0gdSwgYS5ib3R0b20gKz0gdSwgYS53aWR0aCA9IDE7CiAgICB2YXIgcyA9IHQub2Zmc2V0V2lkdGggLSB0LmNsaWVudFdpZHRoOwogICAgcmV0dXJuIDAgPCBzICYmIChuICYmIChzICo9IC0xKSwgYS5sZWZ0ICs9IHMsIGEucmlnaHQgKz0gcyksIGE7CiAgfQoKICBmdW5jdGlvbiBWcyhlLCBpLCBhLCB1KSB7CiAgICBmdW5jdGlvbiBzKCkgewogICAgICAhZnVuY3Rpb24gKCkgewogICAgICAgIGZvciAodmFyIGUgPSBodShOdC5mcm9tRG9tKGkpLCAiKltjb250ZW50RWRpdGFibGU9ZmFsc2VdLHZpZGVvLGF1ZGlvLGVtYmVkLG9iamVjdCIpLCB0ID0gMDsgdCA8IGUubGVuZ3RoOyB0KyspIHsKICAgICAgICAgIHZhciBuLAogICAgICAgICAgICAgIHIgPSBlW3RdLmRvbSwKICAgICAgICAgICAgICBvID0gci5wcmV2aW91c1NpYmxpbmc7CiAgICAgICAgICBrbyhvKSAmJiAoMSA9PT0gKG4gPSBvLmRhdGEpLmxlbmd0aCA/IG8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSA6IG8uZGVsZXRlRGF0YShuLmxlbmd0aCAtIDEsIDEpKSwgbyA9IHIubmV4dFNpYmxpbmcsIE5vKG8pICYmICgxID09PSAobiA9IG8uZGF0YSkubGVuZ3RoID8gby5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8pIDogby5kZWxldGVEYXRhKDAsIDEpKTsKICAgICAgICB9CiAgICAgIH0oKSwgbCAmJiAodmMobCksIGwgPSBudWxsKSwgZi5vbihmdW5jdGlvbiAoZSkgewogICAgICAgIFdhKGUuY2FyZXQpLnJlbW92ZSgpLCBmLmNsZWFyKCk7CiAgICAgIH0pLCBjICYmIChfci5jbGVhckludGVydmFsKGMpLCBjID0gdm9pZCAwKTsKICAgIH0KCiAgICB2YXIgYywKICAgICAgICBsLAogICAgICAgIGYgPSBjdSgpLAogICAgICAgIHQgPSBTcyhlKSwKICAgICAgICBkID0gMCA8IHQubGVuZ3RoID8gdCA6ICJwIjsKICAgIHJldHVybiB7CiAgICAgIHNob3c6IGZ1bmN0aW9uIHNob3coZSwgdCkgewogICAgICAgIHZhciBuOwogICAgICAgIGlmIChzKCksIHhjKHQpKSByZXR1cm4gbnVsbDsKICAgICAgICBpZiAoIWEodCkpIHJldHVybiBsID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgIHZhciBuID0gZS5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKENvKSwKICAgICAgICAgICAgICByID0gZS5wYXJlbnROb2RlOwoKICAgICAgICAgIGlmICh0KSB7CiAgICAgICAgICAgIGlmIChvID0gZS5wcmV2aW91c1NpYmxpbmcsIEVvKG8pKSB7CiAgICAgICAgICAgICAgaWYgKElyKG8pKSByZXR1cm4gbzsKICAgICAgICAgICAgICBpZiAoa28obykpIHJldHVybiBvLnNwbGl0VGV4dChvLmRhdGEubGVuZ3RoIC0gMSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHIuaW5zZXJ0QmVmb3JlKG4sIGUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIG8gPSBlLm5leHRTaWJsaW5nOwoKICAgICAgICAgICAgaWYgKEVvKG8pKSB7CiAgICAgICAgICAgICAgaWYgKElyKG8pKSByZXR1cm4gbzsKICAgICAgICAgICAgICBpZiAoTm8obykpIHJldHVybiBvLnNwbGl0VGV4dCgxKSwgbzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZS5uZXh0U2libGluZyA/IHIuaW5zZXJ0QmVmb3JlKG4sIGUubmV4dFNpYmxpbmcpIDogci5hcHBlbmRDaGlsZChuKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gbjsKICAgICAgICB9KHQsIGUpLCBuID0gdC5vd25lckRvY3VtZW50LmNyZWF0ZVJhbmdlKCksIHdjKGwubmV4dFNpYmxpbmcpID8gKG4uc2V0U3RhcnQobCwgMCksIG4uc2V0RW5kKGwsIDApKSA6IChuLnNldFN0YXJ0KGwsIDEpLCBuLnNldEVuZChsLCAxKSksIG47CgogICAgICAgIGwgPSBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICAgICAgdmFyIHIsCiAgICAgICAgICAgICAgbyA9IHQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpOwogICAgICAgICAgby5zZXRBdHRyaWJ1dGUoImRhdGEtbWNlLWNhcmV0IiwgbiA/ICJiZWZvcmUiIDogImFmdGVyIiksIG8uc2V0QXR0cmlidXRlKCJkYXRhLW1jZS1ib2d1cyIsICJhbGwiKSwgby5hcHBlbmRDaGlsZCgoKHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJiciIpKS5zZXRBdHRyaWJ1dGUoImRhdGEtbWNlLWJvZ3VzIiwgIjEiKSwgcikpOwogICAgICAgICAgdmFyIGkgPSB0LnBhcmVudE5vZGU7CiAgICAgICAgICByZXR1cm4gbiA/IGkuaW5zZXJ0QmVmb3JlKG8sIHQpIDogdC5uZXh0U2libGluZyA/IGkuaW5zZXJ0QmVmb3JlKG8sIHQubmV4dFNpYmxpbmcpIDogaS5hcHBlbmRDaGlsZChvKSwgbzsKICAgICAgICB9KGQsIHQsIGUpOwoKICAgICAgICB2YXIgciA9IGpzKGksIHQsIGUpOwogICAgICAgIFdhKGwpLmNzcygidG9wIiwgci50b3ApOwogICAgICAgIHZhciBvID0gV2EoJzxkaXYgY2xhc3M9Im1jZS12aXN1YWwtY2FyZXQiIGRhdGEtbWNlLWJvZ3VzPSJhbGwiPjwvZGl2PicpLmNzcyhfZTIoe30sIHIpKS5hcHBlbmRUbyhpKVswXTsKICAgICAgICByZXR1cm4gZi5zZXQoewogICAgICAgICAgY2FyZXQ6IG8sCiAgICAgICAgICBlbGVtZW50OiB0LAogICAgICAgICAgYmVmb3JlOiBlCiAgICAgICAgfSksIGUgJiYgV2EobykuYWRkQ2xhc3MoIm1jZS12aXN1YWwtY2FyZXQtYmVmb3JlIiksIGMgPSBfci5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB1KCkgPyBXYSgiZGl2Lm1jZS12aXN1YWwtY2FyZXQiLCBpKS50b2dnbGVDbGFzcygibWNlLXZpc3VhbC1jYXJldC1oaWRkZW4iKSA6IFdhKCJkaXYubWNlLXZpc3VhbC1jYXJldCIsIGkpLmFkZENsYXNzKCJtY2UtdmlzdWFsLWNhcmV0LWhpZGRlbiIpOwogICAgICAgIH0sIDUwMCksIChuID0gdC5vd25lckRvY3VtZW50LmNyZWF0ZVJhbmdlKCkpLnNldFN0YXJ0KGwsIDApLCBuLnNldEVuZChsLCAwKSwgbjsKICAgICAgfSwKICAgICAgaGlkZTogcywKICAgICAgZ2V0Q3NzOiBmdW5jdGlvbiBnZXRDc3MoKSB7CiAgICAgICAgcmV0dXJuICIubWNlLXZpc3VhbC1jYXJldCB7cG9zaXRpb246IGFic29sdXRlO2JhY2tncm91bmQtY29sb3I6IGJsYWNrO2JhY2tncm91bmQtY29sb3I6IGN1cnJlbnRjb2xvcjt9Lm1jZS12aXN1YWwtY2FyZXQtaGlkZGVuIHtkaXNwbGF5OiBub25lO30qW2RhdGEtbWNlLWNhcmV0XSB7cG9zaXRpb246IGFic29sdXRlO2xlZnQ6IC0xMDAwcHg7cmlnaHQ6IGF1dG87dG9wOiAwO21hcmdpbjogMDtwYWRkaW5nOiAwO30iOwogICAgICB9LAogICAgICByZXBvc2l0aW9uOiBmdW5jdGlvbiByZXBvc2l0aW9uKCkgewogICAgICAgIGYub24oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0ID0ganMoaSwgZS5lbGVtZW50LCBlLmJlZm9yZSk7CiAgICAgICAgICBXYShlLmNhcmV0KS5jc3MoX2UyKHt9LCB0KSk7CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgICAgcmV0dXJuIF9yLmNsZWFySW50ZXJ2YWwoYyk7CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBxcygpIHsKICAgIHJldHVybiBiYy5pc0lFKCkgfHwgYmMuaXNFZGdlKCkgfHwgYmMuaXNGaXJlZm94KCk7CiAgfQoKICBmdW5jdGlvbiAkcyhlKSB7CiAgICByZXR1cm4gd2MoZSkgfHwgY24oZSkgJiYgcXMoKTsKICB9CgogIGZ1bmN0aW9uIFdzKGUsIHQpIHsKICAgIGZvciAodmFyIG47IG4gPSBlKHQpOykgewogICAgICBpZiAoIV9jKG4pKSByZXR1cm4gbjsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9CgogIGZ1bmN0aW9uIEtzKGUsIHQsIG4sIHIsIG8pIHsKICAgIHZhciBpID0gbmV3IFJyKGUsIHIpLAogICAgICAgIGEgPSBTYyhlKSB8fCBfYyhlKTsKCiAgICBpZiAodCA8IDApIHsKICAgICAgaWYgKGEgJiYgbihlID0gV3MoaS5wcmV2LmJpbmQoaSksICEwKSkpIHJldHVybiBlOwoKICAgICAgZm9yICg7IGUgPSBXcyhpLnByZXYuYmluZChpKSwgbyk7KSB7CiAgICAgICAgaWYgKG4oZSkpIHJldHVybiBlOwogICAgICB9CiAgICB9CgogICAgaWYgKDAgPCB0KSB7CiAgICAgIGlmIChhICYmIG4oZSA9IFdzKGkubmV4dC5iaW5kKGkpLCAhMCkpKSByZXR1cm4gZTsKCiAgICAgIGZvciAoOyBlID0gV3MoaS5uZXh0LmJpbmQoaSksIG8pOykgewogICAgICAgIGlmIChuKGUpKSByZXR1cm4gZTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBudWxsOwogIH0KCiAgZnVuY3Rpb24gWHMoZSwgdCkgewogICAgZm9yICg7IGUgJiYgZSAhPT0gdDspIHsKICAgICAgaWYgKE5jKGUpKSByZXR1cm4gZTsKICAgICAgZSA9IGUucGFyZW50Tm9kZTsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9CgogIGZ1bmN0aW9uIFlzKGUsIHQsIG4pIHsKICAgIHJldHVybiBYcyhlLmNvbnRhaW5lcigpLCBuKSA9PT0gWHModC5jb250YWluZXIoKSwgbik7CiAgfQoKICBmdW5jdGlvbiBHcyhlLCB0KSB7CiAgICBpZiAoIXQpIHJldHVybiBudWxsOwogICAgdmFyIG4gPSB0LmNvbnRhaW5lcigpLAogICAgICAgIHIgPSB0Lm9mZnNldCgpOwogICAgcmV0dXJuIEFjKG4pID8gbi5jaGlsZE5vZGVzW3IgKyBlXSA6IG51bGw7CiAgfQoKICBmdW5jdGlvbiBKcyhlLCB0KSB7CiAgICB2YXIgbiA9IHQub3duZXJEb2N1bWVudC5jcmVhdGVSYW5nZSgpOwogICAgcmV0dXJuIGUgPyAobi5zZXRTdGFydEJlZm9yZSh0KSwgbi5zZXRFbmRCZWZvcmUodCkpIDogKG4uc2V0U3RhcnRBZnRlcih0KSwgbi5zZXRFbmRBZnRlcih0KSksIG47CiAgfQoKICBmdW5jdGlvbiBRcyhlLCB0LCBuKSB7CiAgICBmb3IgKHZhciByLCBvLCBpID0gZSA/ICJwcmV2aW91c1NpYmxpbmciIDogIm5leHRTaWJsaW5nIjsgbiAmJiBuICE9PSB0OykgewogICAgICB2YXIgYSA9IG5baV07CgogICAgICBpZiAoa2MoYSkgJiYgKGEgPSBhW2ldKSwgU2MoYSkgfHwgRWMoYSkpIHsKICAgICAgICBpZiAobyA9IG4sIFhzKGEsIHIgPSB0KSA9PT0gWHMobywgcikpIHJldHVybiBhOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBpZiAoUmMoYSkpIGJyZWFrOwogICAgICBuID0gbi5wYXJlbnROb2RlOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH0KCiAgZnVuY3Rpb24gWnMoZSwgdCwgbikgewogICAgdmFyIHIsCiAgICAgICAgbyA9IEEoUXMsICEwLCB0KSwKICAgICAgICBpID0gQShRcywgITEsIHQpLAogICAgICAgIGEgPSBuLnN0YXJ0Q29udGFpbmVyLAogICAgICAgIHUgPSBuLnN0YXJ0T2Zmc2V0OwoKICAgIGlmIChQcihhKSkgewogICAgICB2YXIgcyA9IChhID0gQWMoYSkgPyBhIDogYS5wYXJlbnROb2RlKS5nZXRBdHRyaWJ1dGUoImRhdGEtbWNlLWNhcmV0Iik7CiAgICAgIGlmICgiYmVmb3JlIiA9PT0gcyAmJiAkcyhyID0gYS5uZXh0U2libGluZykpIHJldHVybiBEYyhyKTsKICAgICAgaWYgKCJhZnRlciIgPT09IHMgJiYgJHMociA9IGEucHJldmlvdXNTaWJsaW5nKSkgcmV0dXJuIFRjKHIpOwogICAgfQoKICAgIGlmICghbi5jb2xsYXBzZWQpIHJldHVybiBuOwoKICAgIGlmIChqbihhKSkgewogICAgICBpZiAoa2MoYSkpIHsKICAgICAgICBpZiAoMSA9PT0gZSkgewogICAgICAgICAgaWYgKHIgPSBpKGEpKSByZXR1cm4gRGMocik7CiAgICAgICAgICBpZiAociA9IG8oYSkpIHJldHVybiBUYyhyKTsKICAgICAgICB9CgogICAgICAgIGlmICgtMSA9PT0gZSkgewogICAgICAgICAgaWYgKHIgPSBvKGEpKSByZXR1cm4gVGMocik7CiAgICAgICAgICBpZiAociA9IGkoYSkpIHJldHVybiBEYyhyKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBuOwogICAgICB9CgogICAgICBpZiAoa28oYSkgJiYgdSA+PSBhLmRhdGEubGVuZ3RoIC0gMSkgcmV0dXJuIDEgPT09IGUgJiYgKHIgPSBpKGEpKSA/IERjKHIpIDogbjsKICAgICAgaWYgKE5vKGEpICYmIHUgPD0gMSkgcmV0dXJuIC0xID09PSBlICYmIChyID0gbyhhKSkgPyBUYyhyKSA6IG47CiAgICAgIGlmICh1ID09PSBhLmRhdGEubGVuZ3RoKSByZXR1cm4gKHIgPSBpKGEpKSA/IERjKHIpIDogbjsKICAgICAgaWYgKDAgPT09IHUpIHJldHVybiAociA9IG8oYSkpID8gVGMocikgOiBuOwogICAgfQoKICAgIHJldHVybiBuOwogIH0KCiAgZnVuY3Rpb24gZWMoZSwgdCkgewogICAgcmV0dXJuIHZlLmZyb20oR3MoZSA/IDAgOiAtMSwgdCkpLmZpbHRlcihTYyk7CiAgfQoKICBmdW5jdGlvbiB0YyhlLCB0LCBuKSB7CiAgICB2YXIgciA9IFpzKGUsIHQsIG4pOwogICAgcmV0dXJuIC0xID09PSBlID8gYXMuZnJvbVJhbmdlU3RhcnQocikgOiBhcy5mcm9tUmFuZ2VFbmQocik7CiAgfQoKICBmdW5jdGlvbiBuYyhlKSB7CiAgICByZXR1cm4gdmUuZnJvbShlLmdldE5vZGUoKSkubWFwKE50LmZyb21Eb20pOwogIH0KCiAgZnVuY3Rpb24gcmMoZSwgdCkgewogICAgZm9yICg7IHQgPSBlKHQpOykgewogICAgICBpZiAodC5pc1Zpc2libGUoKSkgcmV0dXJuIHQ7CiAgICB9CgogICAgcmV0dXJuIHQ7CiAgfQoKICBmdW5jdGlvbiBvYyhlLCB0KSB7CiAgICB2YXIgbiA9IFlzKGUsIHQpOwogICAgcmV0dXJuICEobiB8fCAhV24oZS5nZXROb2RlKCkpKSB8fCBuOwogIH0KCiAgYXMuZnJvbVJhbmdlU3RhcnQgPSBmdW5jdGlvbiAoZSkgewogICAgcmV0dXJuIGFzKGUuc3RhcnRDb250YWluZXIsIGUuc3RhcnRPZmZzZXQpOwogIH0sIGFzLmZyb21SYW5nZUVuZCA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gYXMoZS5lbmRDb250YWluZXIsIGUuZW5kT2Zmc2V0KTsKICB9LCBhcy5hZnRlciA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gYXMoZS5wYXJlbnROb2RlLCBycyhlKSArIDEpOwogIH0sIGFzLmJlZm9yZSA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gYXMoZS5wYXJlbnROb2RlLCBycyhlKSk7CiAgfSwgYXMuaXNBYm92ZSA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICByZXR1cm4gZG4oUSh0LmdldENsaWVudFJlY3RzKCkpLCBaKGUuZ2V0Q2xpZW50UmVjdHMoKSksIFJ1KS5nZXRPcighMSk7CiAgfSwgYXMuaXNCZWxvdyA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICByZXR1cm4gZG4oWih0LmdldENsaWVudFJlY3RzKCkpLCBRKGUuZ2V0Q2xpZW50UmVjdHMoKSksIER1KS5nZXRPcighMSk7CiAgfSwgYXMuaXNBdFN0YXJ0ID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiAhIWUgJiYgZS5pc0F0U3RhcnQoKTsKICB9LCBhcy5pc0F0RW5kID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiAhIWUgJiYgZS5pc0F0RW5kKCk7CiAgfSwgYXMuaXNUZXh0UG9zaXRpb24gPSBmdW5jdGlvbiAoZSkgewogICAgcmV0dXJuICEhZSAmJiBqbihlLmNvbnRhaW5lcigpKTsKICB9LCBhcy5pc0VsZW1lbnRQb3NpdGlvbiA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gITEgPT09IGFzLmlzVGV4dFBvc2l0aW9uKGUpOwogIH07CgogIHZhciBpYywKICAgICAgYWMsCiAgICAgIHVjID0gam4sCiAgICAgIHNjID0gc24sCiAgICAgIGNjID0gSmEubm9kZUluZGV4LAogICAgICBsYyA9IGZ1bmN0aW9uIGxjKGUpIHsKICAgIHZhciB0ID0gZS5wYXJlbnROb2RlOwogICAgcmV0dXJuIHNjKHQpID8gbGModCkgOiB0OwogIH0sCiAgICAgIGZjID0gZnVuY3Rpb24gZmMoZSkgewogICAgcmV0dXJuIGUgPyBtZShlLmNoaWxkTm9kZXMsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHJldHVybiBzYyh0KSAmJiAiQlIiICE9PSB0Lm5vZGVOYW1lID8gZSA9IGUuY29uY2F0KGZjKHQpKSA6IGUucHVzaCh0KSwgZTsKICAgIH0sIFtdKSA6IFtdOwogIH0sCiAgICAgIGRjID0gWW4sCiAgICAgIG1jID0gQShicywgdSwgITApLAogICAgICBnYyA9IEphLkRPTSwKICAgICAgcGMgPSB6biwKICAgICAgaGMgPSBqbiwKICAgICAgdmMgPSBmdW5jdGlvbiB2YyhlKSB7CiAgICBwYyhlKSAmJiBJcihlKSAmJiAoTXIoZSkgPyBlLnJlbW92ZUF0dHJpYnV0ZSgiZGF0YS1tY2UtY2FyZXQiKSA6IElzKGUpKSwgaGMoZSkgJiYgKEZzKGUpLCAwID09PSBlLmRhdGEubGVuZ3RoICYmIElzKGUpKTsKICB9LAogICAgICBiYyA9IGR0KCkuYnJvd3NlciwKICAgICAgeWMgPSBZbiwKICAgICAgQ2MgPSBKbiwKICAgICAgeGMgPSBHbiwKICAgICAgd2MgPSBmdW5jdGlvbiB3YyhlKSB7CiAgICByZXR1cm4geWMoZSkgfHwgQ2MoZSk7CiAgfSwKICAgICAgU2MgPSBZbiwKICAgICAgRWMgPSBKbiwKICAgICAgTmMgPSBhbigiZGlzcGxheSIsICJibG9jayB0YWJsZSB0YWJsZS1jZWxsIHRhYmxlLWNhcHRpb24gbGlzdC1pdGVtIiksCiAgICAgIGtjID0gSXIsCiAgICAgIF9jID0gUHIsCiAgICAgIEFjID0gem4sCiAgICAgIFJjID0ganIsCiAgICAgIERjID0gQShKcywgITApLAogICAgICBUYyA9IEEoSnMsICExKTsKCiAgZnVuY3Rpb24gT2MoZSwgdCkgewogICAgcmV0dXJuIGUuaGFzQ2hpbGROb2RlcygpICYmIHQgPCBlLmNoaWxkTm9kZXMubGVuZ3RoID8gZS5jaGlsZE5vZGVzW3RdIDogbnVsbDsKICB9CgogIGZ1bmN0aW9uIEJjKGUsIHQpIHsKICAgIGlmICgwIDwgZSkgewogICAgICBpZiAoS2wodC5wcmV2aW91c1NpYmxpbmcpICYmICFxbCh0LnByZXZpb3VzU2libGluZykpIHJldHVybiBhcy5iZWZvcmUodCk7CiAgICAgIGlmIChxbCh0KSkgcmV0dXJuIGFzKHQsIDApOwogICAgfQoKICAgIGlmIChlIDwgMCkgewogICAgICBpZiAoS2wodC5uZXh0U2libGluZykgJiYgIXFsKHQubmV4dFNpYmxpbmcpKSByZXR1cm4gYXMuYWZ0ZXIodCk7CiAgICAgIGlmIChxbCh0KSkgcmV0dXJuIGFzKHQsIHQuZGF0YS5sZW5ndGgpOwogICAgfQoKICAgIHJldHVybiBlIDwgMCAmJiAhV2wodCkgPyBhcy5hZnRlcih0KSA6IGFzLmJlZm9yZSh0KTsKICB9CgogIGZ1bmN0aW9uIFBjKHQpIHsKICAgIHJldHVybiB7CiAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoZSkgewogICAgICAgIHJldHVybiBZbChpYy5Gb3J3YXJkcywgZSwgdCk7CiAgICAgIH0sCiAgICAgIHByZXY6IGZ1bmN0aW9uIHByZXYoZSkgewogICAgICAgIHJldHVybiBZbChpYy5CYWNrd2FyZHMsIGUsIHQpOwogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gTGMoZSkgewogICAgcmV0dXJuIGFzLmlzVGV4dFBvc2l0aW9uKGUpID8gMCA9PT0gZS5vZmZzZXQoKSA6IGpyKGUuZ2V0Tm9kZSgpKTsKICB9CgogIGZ1bmN0aW9uIEljKGUpIHsKICAgIGlmIChhcy5pc1RleHRQb3NpdGlvbihlKSkgewogICAgICB2YXIgdCA9IGUuY29udGFpbmVyKCk7CiAgICAgIHJldHVybiBlLm9mZnNldCgpID09PSB0LmRhdGEubGVuZ3RoOwogICAgfQoKICAgIHJldHVybiBqcihlLmdldE5vZGUoITApKTsKICB9CgogIGZ1bmN0aW9uIE1jKGUsIHQpIHsKICAgIHJldHVybiAhYXMuaXNUZXh0UG9zaXRpb24oZSkgJiYgIWFzLmlzVGV4dFBvc2l0aW9uKHQpICYmIGUuZ2V0Tm9kZSgpID09PSB0LmdldE5vZGUoITApOwogIH0KCiAgZnVuY3Rpb24gRmMobywgaSwgYSkgewogICAgcmV0dXJuIEdsKG8sIGksIGEpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIFlzKGEsIGUsIGkpICYmICh0ID0gYSwgbiA9IGUsIG8gPyAhTWModCwgbikgJiYgKGFzLmlzVGV4dFBvc2l0aW9uKHIgPSB0KSB8fCAhV24oci5nZXROb2RlKCkpKSAmJiBJYyh0KSAmJiBMYyhuKSA6ICFNYyhuLCB0KSAmJiBMYyh0KSAmJiBJYyhuKSkgPyBHbChvLCBpLCBlKSA6IHZlLnNvbWUoZSk7CiAgICAgIHZhciB0LCBuLCByOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBVYyhlLCB0KSB7CiAgICB2YXIgbiwKICAgICAgICByLAogICAgICAgIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUgPSBlID8gdC5maXJzdENoaWxkIDogdC5sYXN0Q2hpbGQ7CiAgICByZXR1cm4gam4odSkgPyB2ZS5zb21lKGFzKHUsIGUgPyAwIDogdS5kYXRhLmxlbmd0aCkpIDogdSA/IGpyKHUpID8gdmUuc29tZShlID8gYXMuYmVmb3JlKHUpIDogV24oYSA9IHUpID8gYXMuYmVmb3JlKGEpIDogYXMuYWZ0ZXIoYSkpIDogKHIgPSB0LCBvID0gdSwgaSA9IChuID0gZSkgPyBhcy5iZWZvcmUobykgOiBhcy5hZnRlcihvKSwgR2wobiwgciwgaSkpIDogdmUubm9uZSgpOwogIH0KCiAgZnVuY3Rpb24gemMoZSkgewogICAgcmV0dXJuIHpuKGUpICYmIGUuaWQgPT09IG5mOwogIH0KCiAgZnVuY3Rpb24gSGMoZSwgdCkgewogICAgZm9yICg7IHQgJiYgdCAhPT0gZTspIHsKICAgICAgaWYgKHQuaWQgPT09IG5mKSByZXR1cm4gdDsKICAgICAgdCA9IHQucGFyZW50Tm9kZTsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9CgogIGZ1bmN0aW9uIGpjKGUpIHsKICAgIHJldHVybiBFdC5pc0FycmF5KGUuc3RhcnQpOwogIH0KCiAgZnVuY3Rpb24gVmMoZSwgdCkgewogICAgcmV0dXJuIHpuKHQpICYmIGUuaXNCbG9jayh0KSAmJiAhdC5pbm5lckhUTUwgJiYgIXh0LmllICYmICh0LmlubmVySFRNTCA9ICc8YnIgZGF0YS1tY2UtYm9ndXM9IjEiIC8+JyksIHQ7CiAgfQoKICBmdW5jdGlvbiBxYyhlLCB0LCBuKSB7CiAgICByZXR1cm4gITEgPT09IHQuaGFzQ2hpbGROb2RlcygpICYmIEhjKGUsIHQpICYmIChvID0gbiwgaSA9IChyID0gdCkub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShDbyksIHIuYXBwZW5kQ2hpbGQoaSksIG8uc2V0U3RhcnQoaSwgMCksIG8uc2V0RW5kKGksIDApLCAxKTsKICAgIHZhciByLCBvLCBpOwogIH0KCiAgZnVuY3Rpb24gJGMoZSwgdCwgbiwgcikgewogICAgdmFyIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgcyA9IG5bdCA/ICJzdGFydCIgOiAiZW5kIl0sCiAgICAgICAgYyA9IGUuZ2V0Um9vdCgpOwoKICAgIGlmIChzKSB7CiAgICAgIGZvciAoYSA9IHNbMF0sIGkgPSBjLCBvID0gcy5sZW5ndGggLSAxOyAxIDw9IG87IG8tLSkgewogICAgICAgIGlmICh1ID0gaS5jaGlsZE5vZGVzLCBxYyhjLCBpLCByKSkgcmV0dXJuIDE7CiAgICAgICAgaWYgKHNbb10gPiB1Lmxlbmd0aCAtIDEpIHJldHVybiBxYyhjLCBpLCByKSB8fCBmdW5jdGlvbiAodCkgewogICAgICAgICAgcmV0dXJuIHRmKGkpLmZvbGQoUiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgcmV0dXJuIHQuc2V0U3RhcnQoZS5jb250YWluZXIoKSwgZS5vZmZzZXQoKSksIHQuc2V0RW5kKGUuY29udGFpbmVyKCksIGUub2Zmc2V0KCkpLCAhMDsKICAgICAgICAgIH0pOwogICAgICAgIH0ocik7CiAgICAgICAgaSA9IHVbc1tvXV07CiAgICAgIH0KCiAgICAgIDMgPT09IGkubm9kZVR5cGUgJiYgKGEgPSBNYXRoLm1pbihzWzBdLCBpLm5vZGVWYWx1ZS5sZW5ndGgpKSwgMSA9PT0gaS5ub2RlVHlwZSAmJiAoYSA9IE1hdGgubWluKHNbMF0sIGkuY2hpbGROb2Rlcy5sZW5ndGgpKSwgdCA/IHIuc2V0U3RhcnQoaSwgYSkgOiByLnNldEVuZChpLCBhKTsKICAgIH0KCiAgICByZXR1cm4gMTsKICB9CgogIGZ1bmN0aW9uIFdjKGUpIHsKICAgIHJldHVybiBqbihlKSAmJiAwIDwgZS5kYXRhLmxlbmd0aDsKICB9CgogIGZ1bmN0aW9uIEtjKGUsIHQsIG4pIHsKICAgIHZhciByLAogICAgICAgIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgcywKICAgICAgICBjID0gZS5nZXQobi5pZCArICJfIiArIHQpLAogICAgICAgIGwgPSBuLmtlZXA7CgogICAgaWYgKGMpIHsKICAgICAgaWYgKHIgPSBjLnBhcmVudE5vZGUsIG8gPSAic3RhcnQiID09PSB0ID8gbCA/IGMuaGFzQ2hpbGROb2RlcygpID8gKHIgPSBjLmZpcnN0Q2hpbGQsIDEpIDogV2MoYy5uZXh0U2libGluZykgPyAociA9IGMubmV4dFNpYmxpbmcsIDApIDogV2MoYy5wcmV2aW91c1NpYmxpbmcpID8gKHIgPSBjLnByZXZpb3VzU2libGluZywgYy5wcmV2aW91c1NpYmxpbmcuZGF0YS5sZW5ndGgpIDogKHIgPSBjLnBhcmVudE5vZGUsIGUubm9kZUluZGV4KGMpICsgMSkgOiBlLm5vZGVJbmRleChjKSA6IGwgPyBjLmhhc0NoaWxkTm9kZXMoKSA/IChyID0gYy5maXJzdENoaWxkLCAxKSA6IFdjKGMucHJldmlvdXNTaWJsaW5nKSA/IChyID0gYy5wcmV2aW91c1NpYmxpbmcsIGMucHJldmlvdXNTaWJsaW5nLmRhdGEubGVuZ3RoKSA6IChyID0gYy5wYXJlbnROb2RlLCBlLm5vZGVJbmRleChjKSkgOiBlLm5vZGVJbmRleChjKSwgdSA9IHIsIHMgPSBvLCAhbCkgewogICAgICAgIGZvciAoYSA9IGMucHJldmlvdXNTaWJsaW5nLCBpID0gYy5uZXh0U2libGluZywgRXQuZWFjaChFdC5ncmVwKGMuY2hpbGROb2RlcyksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBqbihlKSAmJiAoZS5ub2RlVmFsdWUgPSBlLm5vZGVWYWx1ZS5yZXBsYWNlKC9cdUZFRkYvZywgIiIpKTsKICAgICAgICB9KTsgYyA9IGUuZ2V0KG4uaWQgKyAiXyIgKyB0KTspIHsKICAgICAgICAgIGUucmVtb3ZlKGMsICEwKTsKICAgICAgICB9CgogICAgICAgIGEgJiYgaSAmJiBhLm5vZGVUeXBlID09PSBpLm5vZGVUeXBlICYmIGpuKGEpICYmICF4dC5vcGVyYSAmJiAobyA9IGEubm9kZVZhbHVlLmxlbmd0aCwgYS5hcHBlbmREYXRhKGkubm9kZVZhbHVlKSwgZS5yZW1vdmUoaSksIHUgPSBhLCBzID0gbyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB2ZS5zb21lKGFzKHUsIHMpKTsKICAgIH0KCiAgICByZXR1cm4gdmUubm9uZSgpOwogIH0KCiAgZnVuY3Rpb24gWGModCwgZSkgewogICAgIWZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHZhciBuLAogICAgICAgICAgciwKICAgICAgICAgIG8sCiAgICAgICAgICBpLAogICAgICAgICAgYSwKICAgICAgICAgIHUsCiAgICAgICAgICBzLAogICAgICAgICAgYywKICAgICAgICAgIGwsCiAgICAgICAgICBmLAogICAgICAgICAgZCwKICAgICAgICAgIG0sCiAgICAgICAgICBnID0gZS5kb207CgogICAgICBpZiAodCkgewogICAgICAgIGlmIChqYyh0KSkgcmV0dXJuIGQgPSB0LCBtID0gKGYgPSBnKS5jcmVhdGVSbmcoKSwgJGMoZiwgITAsIGQsIG0pICYmICRjKGYsICExLCBkLCBtKSA/IHZlLnNvbWUobSkgOiB2ZS5ub25lKCk7CiAgICAgICAgaWYgKFgodC5zdGFydCkpIHJldHVybiB2ZS5zb21lKChzID0gdCwgYyA9ICh1ID0gZykuY3JlYXRlUm5nKCksIGwgPSBkcyh1LmdldFJvb3QoKSwgcy5zdGFydCksIGMuc2V0U3RhcnQobC5jb250YWluZXIoKSwgbC5vZmZzZXQoKSksIGwgPSBkcyh1LmdldFJvb3QoKSwgcy5lbmQpLCBjLnNldEVuZChsLmNvbnRhaW5lcigpLCBsLm9mZnNldCgpKSwgYykpOwogICAgICAgIGlmIChOZSh0LCAiaWQiKSkgcmV0dXJuIGRuKGEgPSBLYyhvID0gZywgInN0YXJ0IiwgaSA9IHQpLCBLYyhvLCAiZW5kIiwgaSkub3IoYSksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICB2YXIgbiA9IG8uY3JlYXRlUm5nKCk7CiAgICAgICAgICByZXR1cm4gbi5zZXRTdGFydChWYyhvLCBlLmNvbnRhaW5lcigpKSwgZS5vZmZzZXQoKSksIG4uc2V0RW5kKFZjKG8sIHQuY29udGFpbmVyKCkpLCB0Lm9mZnNldCgpKSwgbjsKICAgICAgICB9KTsKICAgICAgICBpZiAoTmUodCwgIm5hbWUiKSkgcmV0dXJuIG4gPSBnLCB2ZS5mcm9tKG4uc2VsZWN0KChyID0gdCkubmFtZSlbci5pbmRleF0pLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQgPSBuLmNyZWF0ZVJuZygpOwogICAgICAgICAgcmV0dXJuIHQuc2VsZWN0Tm9kZShlKSwgdDsKICAgICAgICB9KTsKICAgICAgICBpZiAoTmUodCwgInJuZyIpKSByZXR1cm4gdmUuc29tZSh0LnJuZyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB2ZS5ub25lKCk7CiAgICB9KHQsIGUpLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgdC5zZXRSbmcoZSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIFljKGUpIHsKICAgIHJldHVybiB6bihlKSAmJiAiU1BBTiIgPT09IGUudGFnTmFtZSAmJiAiYm9va21hcmsiID09PSBlLmdldEF0dHJpYnV0ZSgiZGF0YS1tY2UtdHlwZSIpOwogIH0KCiAgZnVuY3Rpb24gR2MoZSkgewogICAgcmV0dXJuICIiICE9PSBlICYmIC0xICE9PSAiIFxmXG5cclx0XHYiLmluZGV4T2YoZSk7CiAgfQoKICBmdW5jdGlvbiBKYyhlKSB7CiAgICByZXR1cm4gIUdjKGUpICYmICFvZihlKTsKICB9CgogIGZ1bmN0aW9uIFFjKGUpIHsKICAgIHJldHVybiBlLm5vZGVUeXBlOwogIH0KCiAgZnVuY3Rpb24gWmMoZSwgdCwgbikgewogICAgdmFyIHIsCiAgICAgICAgbyA9IG4uc3RhcnRPZmZzZXQsCiAgICAgICAgaSA9IG4uc3RhcnRDb250YWluZXI7CgogICAgaWYgKChpICE9PSBuLmVuZENvbnRhaW5lciB8fCAhKHIgPSBpLmNoaWxkTm9kZXNbb10pIHx8ICEvXihJTUcpJC8udGVzdChyLm5vZGVOYW1lKSkgJiYgem4oaSkpIHsKICAgICAgdmFyIGEgPSBpLmNoaWxkTm9kZXMsCiAgICAgICAgICB1ID0gdm9pZCAwOwogICAgICBvIDwgYS5sZW5ndGggPyAoaSA9IGFbb10sIHUgPSBuZXcgUnIoaSwgZS5nZXRQYXJlbnQoaSwgZS5pc0Jsb2NrKSkpIDogKGkgPSBhW2EubGVuZ3RoIC0gMV0sICh1ID0gbmV3IFJyKGksIGUuZ2V0UGFyZW50KGksIGUuaXNCbG9jaykpKS5uZXh0KCEwKSk7CgogICAgICBmb3IgKHZhciBzID0gdS5jdXJyZW50KCk7IHM7IHMgPSB1Lm5leHQoKSkgewogICAgICAgIGlmIChqbihzKSAmJiAhYWYocykpIHJldHVybiBuLnNldFN0YXJ0KHMsIDApLCB0LnNldFJuZyhuKSwgMDsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gZWwoZSwgdCwgbikgewogICAgaWYgKGUpIHsKICAgICAgdmFyIHIgPSB0ID8gIm5leHRTaWJsaW5nIiA6ICJwcmV2aW91c1NpYmxpbmciOwoKICAgICAgZm9yIChlID0gbiA/IGUgOiBlW3JdOyBlOyBlID0gZVtyXSkgewogICAgICAgIGlmICh6bihlKSB8fCAhYWYoZSkpIHJldHVybiBlOwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiB0bChlLCB0KSB7CiAgICByZXR1cm4gUWModCkgJiYgKHQgPSB0Lm5vZGVOYW1lKSwgISFlLnNjaGVtYS5nZXRUZXh0QmxvY2tFbGVtZW50cygpW3QudG9Mb3dlckNhc2UoKV07CiAgfQoKICBmdW5jdGlvbiBubChlLCB0LCBuKSB7CiAgICByZXR1cm4gZS5zY2hlbWEuaXNWYWxpZENoaWxkKHQsIG4pOwogIH0KCiAgZnVuY3Rpb24gcmwoZSwgbikgewogICAgcmV0dXJuIHkoZSkgPyBlID0gZShuKSA6IFYobikgJiYgKGUgPSBlLnJlcGxhY2UoLyUoXHcrKS9nLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICByZXR1cm4gblt0XSB8fCBlOwogICAgfSkpLCBlOwogIH0KCiAgZnVuY3Rpb24gb2woZSwgdCkgewogICAgcmV0dXJuIGUgPSAiIiArICgoZSA9IGUgfHwgIiIpLm5vZGVOYW1lIHx8IGUpLCB0ID0gIiIgKyAoKHQgPSB0IHx8ICIiKS5ub2RlTmFtZSB8fCB0KSwgZS50b0xvd2VyQ2FzZSgpID09PSB0LnRvTG93ZXJDYXNlKCk7CiAgfQoKICBmdW5jdGlvbiBpbChlLCB0LCBuKSB7CiAgICByZXR1cm4gImNvbG9yIiAhPT0gbiAmJiAiYmFja2dyb3VuZENvbG9yIiAhPT0gbiB8fCAodCA9IGUudG9IZXgodCkpLCAiZm9udFdlaWdodCIgPT09IG4gJiYgNzAwID09PSB0ICYmICh0ID0gImJvbGQiKSwgIiIgKyAoImZvbnRGYW1pbHkiID09PSBuID8gdC5yZXBsYWNlKC9bXCdcIl0vZywgIiIpLnJlcGxhY2UoLyxccysvZywgIiwiKSA6IHQpOwogIH0KCiAgZnVuY3Rpb24gYWwoZSwgdCwgbikgewogICAgcmV0dXJuIGlsKGUsIGUuZ2V0U3R5bGUodCwgbiksIG4pOwogIH0KCiAgZnVuY3Rpb24gdWwodCwgZSkgewogICAgdmFyIG47CiAgICByZXR1cm4gdC5nZXRQYXJlbnQoZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIChuID0gdC5nZXRTdHlsZShlLCAidGV4dC1kZWNvcmF0aW9uIikpICYmICJub25lIiAhPT0gbjsKICAgIH0pLCBuOwogIH0KCiAgZnVuY3Rpb24gc2woZSwgdCwgbikgewogICAgcmV0dXJuIGUuZ2V0UGFyZW50cyh0LCBuLCBlLmdldFJvb3QoKSk7CiAgfQoKICBmdW5jdGlvbiBjbChlLCB0KSB7CiAgICByZXR1cm4gRihlLmZvcm1hdHRlci5nZXQodCksIGZ1bmN0aW9uICh0KSB7CiAgICAgIGZ1bmN0aW9uIG8oZSkgewogICAgICAgIHJldHVybiAxIDwgZS5sZW5ndGggJiYgIiUiID09PSBlLmNoYXJBdCgwKTsKICAgICAgfQoKICAgICAgcmV0dXJuIEYoWyJzdHlsZXMiLCAiYXR0cmlidXRlcyJdLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiB1ZSh0LCBlKS5leGlzdHMoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciBuLCByOwogICAgICAgICAgcmV0dXJuIEYoUyhlKSA/IGUgOiAobiA9IHUsIHIgPSBbXSwgbmUoZSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgci5wdXNoKG4oZSwgdCkpOwogICAgICAgICAgfSksIHIpLCBvKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGxsKGUpIHsKICAgIHJldHVybiBzZShlLCAiYmxvY2siKTsKICB9CgogIGZ1bmN0aW9uIGZsKGUpIHsKICAgIHJldHVybiBzZShlLCAic2VsZWN0b3IiKTsKICB9CgogIGZ1bmN0aW9uIGRsKGUpIHsKICAgIHJldHVybiBzZShlLCAiaW5saW5lIik7CiAgfQoKICBmdW5jdGlvbiBtbChlKSB7CiAgICByZXR1cm4gZmwoZSkgJiYgITEgIT09IGUuZXhwYW5kICYmICFkbChlKTsKICB9CgogIGZ1bmN0aW9uIGdsKGUsIHQpIHsKICAgIGZvciAodmFyIG4gPSB0OyBuOykgewogICAgICBpZiAoem4obikgJiYgZS5nZXRDb250ZW50RWRpdGFibGUobikpIHJldHVybiAiZmFsc2UiID09PSBlLmdldENvbnRlbnRFZGl0YWJsZShuKSA/IG4gOiB0OwogICAgICBuID0gbi5wYXJlbnROb2RlOwogICAgfQoKICAgIHJldHVybiB0OwogIH0KCiAgZnVuY3Rpb24gcGwoZSwgdCwgbiwgcikgewogICAgZm9yICh2YXIgbyA9IHQuZGF0YSwgaSA9IG47IGUgPyAwIDw9IGkgOiBpIDwgby5sZW5ndGg7IGUgPyBpLS0gOiBpKyspIHsKICAgICAgaWYgKHIoby5jaGFyQXQoaSkpKSByZXR1cm4gZSA/IGkgKyAxIDogaTsKICAgIH0KCiAgICByZXR1cm4gLTE7CiAgfQoKICBmdW5jdGlvbiBobChlLCB0LCBuKSB7CiAgICByZXR1cm4gcGwoZSwgdCwgbiwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIG9mKGUpIHx8IEdjKGUpOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiB2bChlLCB0LCBuKSB7CiAgICByZXR1cm4gcGwoZSwgdCwgbiwgSmMpOwogIH0KCiAgZnVuY3Rpb24gYmwoaSwgZSwgdCwgbiwgYSwgcikgewogICAgZnVuY3Rpb24gbyhlLCB0LCBuKSB7CiAgICAgIHZhciByID0gTnUoaSksCiAgICAgICAgICBvID0gYSA/IHIuYmFja3dhcmRzIDogci5mb3J3YXJkczsKICAgICAgcmV0dXJuIHZlLmZyb20obyhlLCB0LCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgIHJldHVybiB1ZihlLnBhcmVudE5vZGUpID8gLTEgOiBuKGEsIHUgPSBlLCB0KTsKICAgICAgfSwgcykpOwogICAgfQoKICAgIHZhciB1LAogICAgICAgIHMgPSBpLmdldFBhcmVudCh0LCBpLmlzQmxvY2spIHx8IGU7CiAgICByZXR1cm4gbyh0LCBuLCBobCkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gciA/IG8oZS5jb250YWluZXIsIGUub2Zmc2V0ICsgKGEgPyAtMSA6IDApLCB2bCkgOiB2ZS5zb21lKGUpOwogICAgfSkub3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB1ID8gdmUuc29tZSh7CiAgICAgICAgY29udGFpbmVyOiB1LAogICAgICAgIG9mZnNldDogYSA/IDAgOiB1Lmxlbmd0aAogICAgICB9KSA6IHZlLm5vbmUoKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24geWwoZSwgdCwgbiwgciwgbykgewogICAgam4ocikgJiYgUGUoci5kYXRhKSAmJiByW29dICYmIChyID0gcltvXSk7CgogICAgZm9yICh2YXIgaSA9IHNmKGUsIHIpLCBhID0gMDsgYSA8IGkubGVuZ3RoOyBhKyspIHsKICAgICAgZm9yICh2YXIgdSA9IDA7IHUgPCB0Lmxlbmd0aDsgdSsrKSB7CiAgICAgICAgdmFyIHMgPSB0W3VdOwogICAgICAgIGlmICgoIVYocy5jb2xsYXBzZWQpIHx8IHMuY29sbGFwc2VkID09PSBuLmNvbGxhcHNlZCkgJiYgZmwocykgJiYgZS5pcyhpW2FdLCBzLnNlbGVjdG9yKSkgcmV0dXJuIGlbYV07CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gcjsKICB9CgogIGZ1bmN0aW9uIENsKHQsIGUsIG4sIHIpIHsKICAgIHZhciBvLAogICAgICAgIGkgPSBuLAogICAgICAgIGEgPSB0LmRvbSwKICAgICAgICB1ID0gYS5nZXRSb290KCksCiAgICAgICAgcyA9IGVbMF07CiAgICBpZiAoKGkgPSBsbChzKSA/IHMud3JhcHBlciA/IG51bGwgOiBhLmdldFBhcmVudChuLCBzLmJsb2NrLCB1KSA6IGkpIHx8IChvID0gYS5nZXRQYXJlbnQobiwgIkxJLFRELFRIIiksIGkgPSBhLmdldFBhcmVudChqbihuKSA/IG4ucGFyZW50Tm9kZSA6IG4sIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBlICE9PSB1ICYmIGxmKHQsIGUpOwogICAgfSwgbykpLCAhKGkgPSBpICYmIGxsKHMpICYmIHMud3JhcHBlciAmJiBzZihhLCBpLCAidWwsb2wiKS5yZXZlcnNlKClbMF0gfHwgaSkpIGZvciAoaSA9IG47IGlbcl0gJiYgIWEuaXNCbG9jayhpW3JdKSAmJiAhb2woaSA9IGlbcl0sICJiciIpOykgewogICAgICA7CiAgICB9CiAgICByZXR1cm4gaSB8fCBuOwogIH0KCiAgZnVuY3Rpb24geGwoZSwgdCwgbiwgciwgbykgewogICAgdmFyIGksCiAgICAgICAgYSA9IG4sCiAgICAgICAgdSA9IG8gPyAicHJldmlvdXNTaWJsaW5nIiA6ICJuZXh0U2libGluZyIsCiAgICAgICAgcyA9IGUuZ2V0Um9vdCgpOwogICAgaWYgKGpuKG4pICYmICFjZihuKSAmJiAobyA/IDAgPCByIDogciA8IG4uZGF0YS5sZW5ndGgpKSByZXR1cm4gbjsKCiAgICBmb3IgKDs7KSB7CiAgICAgIGlmICghdFswXS5ibG9ja19leHBhbmQgJiYgZS5pc0Jsb2NrKGEpKSByZXR1cm4gYTsKCiAgICAgIGZvciAodmFyIGMgPSBhW3VdOyBjOyBjID0gY1t1XSkgewogICAgICAgIHZhciBsID0gam4oYykgJiYgIWZmKGUsIHMsIGMsIHUpOwogICAgICAgIGlmICghdWYoYykgJiYgKCFXbihpID0gYykgfHwgIWkuZ2V0QXR0cmlidXRlKCJkYXRhLW1jZS1ib2d1cyIpIHx8IGkubmV4dFNpYmxpbmcpICYmICFjZihjLCBsKSkgcmV0dXJuIGE7CiAgICAgIH0KCiAgICAgIGlmIChhID09PSBzIHx8IGEucGFyZW50Tm9kZSA9PT0gcykgewogICAgICAgIG4gPSBhOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBhID0gYS5wYXJlbnROb2RlOwogICAgfQoKICAgIHJldHVybiBuOwogIH0KCiAgZnVuY3Rpb24gd2woZSkgewogICAgcmV0dXJuIHVmKGUucGFyZW50Tm9kZSkgfHwgdWYoZSk7CiAgfQoKICBmdW5jdGlvbiBTbChlLCB0LCBuLCByKSB7CiAgICB2b2lkIDAgPT09IHIgJiYgKHIgPSAhMSk7CiAgICB2YXIgbyA9IHQuc3RhcnRDb250YWluZXIsCiAgICAgICAgaSA9IHQuc3RhcnRPZmZzZXQsCiAgICAgICAgYSA9IHQuZW5kQ29udGFpbmVyLAogICAgICAgIHUgPSB0LmVuZE9mZnNldCwKICAgICAgICBzID0gZS5kb20sCiAgICAgICAgYyA9IG5bMF07CiAgICByZXR1cm4gem4obykgJiYgby5oYXNDaGlsZE5vZGVzKCkgJiYgKG8gPSBCdShvLCBpKSwgam4obykgJiYgKGkgPSAwKSksIHpuKGEpICYmIGEuaGFzQ2hpbGROb2RlcygpICYmIChhID0gQnUoYSwgdC5jb2xsYXBzZWQgPyB1IDogdSAtIDEpLCBqbihhKSAmJiAodSA9IGEubm9kZVZhbHVlLmxlbmd0aCkpLCBvID0gZ2wocywgbyksIGEgPSBnbChzLCBhKSwgd2wobykgJiYgKG8gPSB1ZihvKSA/IG8gOiBvLnBhcmVudE5vZGUsIG8gPSB0LmNvbGxhcHNlZCA/IG8ucHJldmlvdXNTaWJsaW5nIHx8IG8gOiBvLm5leHRTaWJsaW5nIHx8IG8sIGpuKG8pICYmIChpID0gdC5jb2xsYXBzZWQgPyBvLmxlbmd0aCA6IDApKSwgd2woYSkgJiYgKGEgPSB1ZihhKSA/IGEgOiBhLnBhcmVudE5vZGUsIGEgPSB0LmNvbGxhcHNlZCA/IGEubmV4dFNpYmxpbmcgfHwgYSA6IGEucHJldmlvdXNTaWJsaW5nIHx8IGEsIGpuKGEpICYmICh1ID0gdC5jb2xsYXBzZWQgPyAwIDogYS5sZW5ndGgpKSwgdC5jb2xsYXBzZWQgJiYgKGJsKHMsIGUuZ2V0Qm9keSgpLCBvLCBpLCAhMCwgcikuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCA9IGUuY29udGFpbmVyLAogICAgICAgICAgbiA9IGUub2Zmc2V0OwogICAgICBvID0gdCwgaSA9IG47CiAgICB9KSwgYmwocywgZS5nZXRCb2R5KCksIGEsIHUsICExLCByKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gZS5jb250YWluZXIsCiAgICAgICAgICBuID0gZS5vZmZzZXQ7CiAgICAgIGEgPSB0LCB1ID0gbjsKICAgIH0pKSwgKGRsKGMpIHx8IGMuYmxvY2tfZXhwYW5kKSAmJiAoZGwoYykgJiYgam4obykgJiYgMCAhPT0gaSB8fCAobyA9IHhsKHMsIG4sIG8sIGksICEwKSksIGRsKGMpICYmIGpuKGEpICYmIHUgIT09IGEubm9kZVZhbHVlLmxlbmd0aCB8fCAoYSA9IHhsKHMsIG4sIGEsIHUsICExKSkpLCBtbChjKSAmJiAobyA9IHlsKHMsIG4sIHQsIG8sICJwcmV2aW91c1NpYmxpbmciKSwgYSA9IHlsKHMsIG4sIHQsIGEsICJuZXh0U2libGluZyIpKSwgKGxsKGMpIHx8IGZsKGMpKSAmJiAobyA9IENsKGUsIG4sIG8sICJwcmV2aW91c1NpYmxpbmciKSwgYSA9IENsKGUsIG4sIGEsICJuZXh0U2libGluZyIpLCBsbChjKSAmJiAocy5pc0Jsb2NrKG8pIHx8IChvID0geGwocywgbiwgbywgaSwgITApKSwgcy5pc0Jsb2NrKGEpIHx8IChhID0geGwocywgbiwgYSwgdSwgITEpKSkpLCB6bihvKSAmJiAoaSA9IHMubm9kZUluZGV4KG8pLCBvID0gby5wYXJlbnROb2RlKSwgem4oYSkgJiYgKHUgPSBzLm5vZGVJbmRleChhKSArIDEsIGEgPSBhLnBhcmVudE5vZGUpLCB7CiAgICAgIHN0YXJ0Q29udGFpbmVyOiBvLAogICAgICBzdGFydE9mZnNldDogaSwKICAgICAgZW5kQ29udGFpbmVyOiBhLAogICAgICBlbmRPZmZzZXQ6IHUKICAgIH07CiAgfQoKICBmdW5jdGlvbiBFbChuLCBlLCB1KSB7CiAgICBmdW5jdGlvbiBzKGUpIHsKICAgICAgdmFyIHQgPSBlWzBdOwogICAgICBqbih0KSAmJiB0ID09PSBpICYmIG8gPj0gdC5kYXRhLmxlbmd0aCAmJiBlLnNwbGljZSgwLCAxKTsKICAgICAgdmFyIG4gPSBlW2UubGVuZ3RoIC0gMV07CiAgICAgIHJldHVybiAwID09PSBhICYmIDAgPCBlLmxlbmd0aCAmJiBuID09PSBsICYmIGpuKG4pICYmIGUuc3BsaWNlKGUubGVuZ3RoIC0gMSwgMSksIGU7CiAgICB9CgogICAgZnVuY3Rpb24gYyhlLCB0LCBuKSB7CiAgICAgIGZvciAodmFyIHIgPSBbXTsgZSAmJiBlICE9PSBuOyBlID0gZVt0XSkgewogICAgICAgIHIucHVzaChlKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHI7CiAgICB9CgogICAgZnVuY3Rpb24gdChlLCB0KSB7CiAgICAgIHJldHVybiBuLmdldFBhcmVudChlLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlLnBhcmVudE5vZGUgPT09IHQ7CiAgICAgIH0sIHQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHIoZSwgdCwgbikgewogICAgICB2YXIgciA9IG4gPyAibmV4dFNpYmxpbmciIDogInByZXZpb3VzU2libGluZyIsCiAgICAgICAgICBvID0gZTsKCiAgICAgIGZvciAoby5wYXJlbnROb2RlOyBvICYmIG8gIT09IHQ7IG8gPSBpKSB7CiAgICAgICAgdmFyIGkgPSBvLnBhcmVudE5vZGUsCiAgICAgICAgICAgIGEgPSBjKG8gPT09IGUgPyBvIDogb1tyXSwgcik7CiAgICAgICAgYS5sZW5ndGggJiYgKG4gfHwgYS5yZXZlcnNlKCksIHUocyhhKSkpOwogICAgICB9CiAgICB9CgogICAgdmFyIG8gPSBlLnN0YXJ0T2Zmc2V0LAogICAgICAgIGkgPSBCdShlLnN0YXJ0Q29udGFpbmVyLCBvKSwKICAgICAgICBhID0gZS5lbmRPZmZzZXQsCiAgICAgICAgbCA9IEJ1KGUuZW5kQ29udGFpbmVyLCBhIC0gMSk7CiAgICBpZiAoaSA9PT0gbCkgcmV0dXJuIHUocyhbaV0pKTsKICAgIHZhciBmID0gbi5maW5kQ29tbW9uQW5jZXN0b3IoaSwgbCk7CiAgICBpZiAobi5pc0NoaWxkT2YoaSwgbCkpIHJldHVybiByKGksIGYsICEwKTsKICAgIGlmIChuLmlzQ2hpbGRPZihsLCBpKSkgcmV0dXJuIHIobCwgZik7CiAgICB2YXIgZCA9IHQoaSwgZikgfHwgaSwKICAgICAgICBtID0gdChsLCBmKSB8fCBsOwogICAgcihpLCBkLCAhMCk7CiAgICB2YXIgZyA9IGMoZCA9PT0gaSA/IGQgOiBkLm5leHRTaWJsaW5nLCAibmV4dFNpYmxpbmciLCBtID09PSBsID8gbS5uZXh0U2libGluZyA6IG0pOwogICAgZy5sZW5ndGggJiYgdShzKGcpKSwgcihsLCBtKTsKICB9CgogIGZ1bmN0aW9uIE5sKGUpIHsKICAgIHZhciB0ID0gW107CiAgICBpZiAoZSkgZm9yICh2YXIgbiA9IDA7IG4gPCBlLnJhbmdlQ291bnQ7IG4rKykgewogICAgICB0LnB1c2goZS5nZXRSYW5nZUF0KG4pKTsKICAgIH0KICAgIHJldHVybiB0OwogIH0KCiAgZnVuY3Rpb24ga2woZSwgdCkgewogICAgdmFyIG4gPSBodSh0LCAidGRbZGF0YS1tY2Utc2VsZWN0ZWRdLHRoW2RhdGEtbWNlLXNlbGVjdGVkXSIpOwogICAgcmV0dXJuIDAgPCBuLmxlbmd0aCA/IG4gOiBVKEgoZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBPdShlKTsKICAgICAgcmV0dXJuIHQgPyBbTnQuZnJvbURvbSh0KV0gOiBbXTsKICAgIH0pLCBobyk7CiAgfQoKICBmdW5jdGlvbiBfbChlKSB7CiAgICByZXR1cm4ga2woTmwoZS5zZWxlY3Rpb24uZ2V0U2VsKCkpLCBOdC5mcm9tRG9tKGUuZ2V0Qm9keSgpKSk7CiAgfQoKICBmdW5jdGlvbiBBbChlLCB0KSB7CiAgICByZXR1cm4gaHIoZSwgInRhYmxlIiwgdCk7CiAgfQoKICBmdW5jdGlvbiBSbChvLCBlKSB7CiAgICByZXR1cm4gZG4oKHIgPSBlLnN0YXJ0Q29udGFpbmVyLCBpID0gZS5zdGFydE9mZnNldCwgam4ocikgPyAwID09PSBpID8gdmUuc29tZShOdC5mcm9tRG9tKHIpKSA6IHZlLm5vbmUoKSA6IHZlLmZyb20oci5jaGlsZE5vZGVzW2ldKS5tYXAoTnQuZnJvbURvbSkpLCAodCA9IGUuZW5kQ29udGFpbmVyLCBuID0gZS5lbmRPZmZzZXQsIGpuKHQpID8gbiA9PT0gdC5kYXRhLmxlbmd0aCA/IHZlLnNvbWUoTnQuZnJvbURvbSh0KSkgOiB2ZS5ub25lKCkgOiB2ZS5mcm9tKHQuY2hpbGROb2Rlc1tuIC0gMV0pLm1hcChOdC5mcm9tRG9tKSksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHZhciBuID0gTShkZihvKSwgQShqZSwgZSkpLAogICAgICAgICAgciA9IE0obWYobyksIEEoamUsIHQpKTsKICAgICAgcmV0dXJuIG4uaXNTb21lKCkgJiYgci5pc1NvbWUoKTsKICAgIH0pLmdldE9yKCExKTsKICAgIHZhciB0LCBuLCByLCBpOwogIH0KCiAgZnVuY3Rpb24gRGwoZSwgdCwgbiwgcikgewogICAgdmFyIG8gPSBuLAogICAgICAgIGkgPSBuZXcgUnIobiwgbyksCiAgICAgICAgYSA9IGFlKGUuc2NoZW1hLmdldE1vdmVDYXJldEJlZm9yZU9uRW50ZXJFbGVtZW50cygpLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICByZXR1cm4gIUQoWyJ0ZCIsICJ0aCIsICJ0YWJsZSJdLCB0LnRvTG93ZXJDYXNlKCkpOwogICAgfSk7CgogICAgZG8gewogICAgICBpZiAoam4obikgJiYgMCAhPT0gRXQudHJpbShuLm5vZGVWYWx1ZSkubGVuZ3RoKSByZXR1cm4gciA/IHQuc2V0U3RhcnQobiwgMCkgOiB0LnNldEVuZChuLCBuLm5vZGVWYWx1ZS5sZW5ndGgpLCAwOwogICAgICBpZiAoYVtuLm5vZGVOYW1lXSkgcmV0dXJuIHIgPyB0LnNldFN0YXJ0QmVmb3JlKG4pIDogIkJSIiA9PT0gbi5ub2RlTmFtZSA/IHQuc2V0RW5kQmVmb3JlKG4pIDogdC5zZXRFbmRBZnRlcihuKSwgMDsKICAgIH0gd2hpbGUgKG4gPSByID8gaS5uZXh0KCkgOiBpLnByZXYoKSk7CgogICAgIkJPRFkiID09PSBvLm5vZGVOYW1lICYmIChyID8gdC5zZXRTdGFydChvLCAwKSA6IHQuc2V0RW5kKG8sIG8uY2hpbGROb2Rlcy5sZW5ndGgpKTsKICB9CgogIGZ1bmN0aW9uIFRsKGUpIHsKICAgIHZhciB0ID0gZS5zZWxlY3Rpb24uZ2V0U2VsKCk7CiAgICByZXR1cm4gdCAmJiAwIDwgdC5yYW5nZUNvdW50OwogIH0KCiAgZnVuY3Rpb24gT2wociwgbykgewogICAgdmFyIGUgPSBfbChyKTsKCiAgICAwIDwgZS5sZW5ndGggPyBZKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gZS5kb20sCiAgICAgICAgICBuID0gci5kb20uY3JlYXRlUm5nKCk7CiAgICAgIG4uc2V0U3RhcnRCZWZvcmUodCksIG4uc2V0RW5kQWZ0ZXIodCksIG8obiwgITApOwogICAgfSkgOiBvKHIuc2VsZWN0aW9uLmdldFJuZygpLCAhMSk7CiAgfQoKICBmdW5jdGlvbiBCbChlLCB0LCBuKSB7CiAgICB2YXIgciA9IENzKGUsIHQpOwogICAgbihyKSwgZS5tb3ZlVG9Cb29rbWFyayhyKTsKICB9CgogIGZ1bmN0aW9uIFBsKGUpIHsKICAgIHJldHVybiBnZi5nZXQoZSk7CiAgfQoKICBmdW5jdGlvbiBMbChlLCB0LCBuLCByKSB7CiAgICB2YXIgbyA9IHQudWlkLAogICAgICAgIGkgPSB2b2lkIDAgPT09IG8gPyB5dSgibWNlLWFubm90YXRpb24iKSA6IG8sCiAgICAgICAgYSA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHZhciBuID0ge307CgogICAgICBmb3IgKG8gaW4gZSkgewogICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSAmJiB0LmluZGV4T2YobykgPCAwICYmIChuW29dID0gZVtvXSk7CiAgICAgIH0KCiAgICAgIGlmIChudWxsICE9IGUgJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgZm9yICh2YXIgciA9IDAsIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByIDwgby5sZW5ndGg7IHIrKykgewogICAgICAgIHQuaW5kZXhPZihvW3JdKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGUsIG9bcl0pICYmIChuW29bcl1dID0gZVtvW3JdXSk7CiAgICAgIH0KICAgICAgcmV0dXJuIG47CiAgICB9KHQsIFsidWlkIl0pLAogICAgICAgIHUgPSBOdC5mcm9tVGFnKCJzcGFuIiwgZSk7CgogICAgZ3UodSwganUoKSksIHBuKHUsICIiICsgcXUoKSwgaSksIHBuKHUsICIiICsgVnUoKSwgbik7CiAgICB2YXIgcywKICAgICAgICBjID0gcihpLCBhKSwKICAgICAgICBsID0gYy5hdHRyaWJ1dGVzLAogICAgICAgIGYgPSBjLmNsYXNzZXMsCiAgICAgICAgZCA9IHZvaWQgMCA9PT0gZiA/IFtdIDogZjsKICAgIHJldHVybiBobih1LCB2b2lkIDAgPT09IGwgPyB7fSA6IGwpLCBzID0gdSwgWShkLCBmdW5jdGlvbiAoZSkgewogICAgICBndShzLCBlKTsKICAgIH0pLCB1OwogIH0KCiAgZnVuY3Rpb24gSWwodSwgZSwgdCwgbiwgcikgewogICAgZnVuY3Rpb24gcygpIHsKICAgICAgZC5jbGVhcigpOwogICAgfQoKICAgIGZ1bmN0aW9uIGMoZSkgewogICAgICBZKGUsIG8pOwogICAgfQoKICAgIHZhciBsID0gW10sCiAgICAgICAgZiA9IExsKHUuZ2V0RG9jKCksIHIsIHQsIG4pLAogICAgICAgIGQgPSBjdSgpLAogICAgICAgIG8gPSBmdW5jdGlvbiBvKGUpIHsKICAgICAgdmFyIHQsIG4sIHIsIG8sIGksIGE7CgogICAgICBzd2l0Y2ggKHIgPSB1LCBpID0gInNwYW4iLCBhID0ga3QobyA9IGUpLCBPdChvKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gInNraXBwaW5nIjsKICAgICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gImJyIiA9PT0gYSB8fCBfbihuID0gbykgJiYgUGwobikgPT09IENvID8gInZhbGlkIiA6IGtuKHQgPSBvKSAmJiBwdSh0LCBqdSgpKSA/ICJleGlzdGluZyIgOiB6YyhvLmRvbSkgPyAiY2FyZXQiIDogbmwociwgaSwgYSkgJiYgbmwociwga3QoZSksIGkpID8gInZhbGlkIiA6ICJpbnZhbGlkLWNoaWxkIjsKICAgICAgICB2YXIgdCwgbjsKICAgICAgfSkpIHsKICAgICAgICBjYXNlICJpbnZhbGlkLWNoaWxkIjoKICAgICAgICAgIHMoKSwgYyhEbihlKSksIHMoKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICJ2YWxpZCI6CiAgICAgICAgICBxdCh0ID0gZSwgbiA9IGQuZ2V0KCkuZ2V0T3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBlID0gd3UoZik7CiAgICAgICAgICAgIHJldHVybiBsLnB1c2goZSksIGQuc2V0KGUpLCBlOwogICAgICAgICAgfSkpLCBQbihuLCB0KTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gRWwodS5kb20sIGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHMoKSwgYyhUKGUsIE50LmZyb21Eb20pKTsKICAgIH0pLCBsOwogIH0KCiAgZnVuY3Rpb24gTWwobykgewogICAgdmFyIG4sCiAgICAgICAgZSwKICAgICAgICByLAogICAgICAgIGkgPSAobiA9IHt9LCB7CiAgICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3RlcihlLCB0KSB7CiAgICAgICAgbltlXSA9IHsKICAgICAgICAgIG5hbWU6IGUsCiAgICAgICAgICBzZXR0aW5nczogdAogICAgICAgIH07CiAgICAgIH0sCiAgICAgIGxvb2t1cDogZnVuY3Rpb24gbG9va3VwKGUpIHsKICAgICAgICByZXR1cm4gdWUobiwgZSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gZS5zZXR0aW5nczsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgICByID0gaSwgKGUgPSBvKS5vbigiaW5pdCIsIGZ1bmN0aW9uICgpIHsKICAgICAgZS5zZXJpYWxpemVyLmFkZE5vZGVGaWx0ZXIoInNwYW4iLCBmdW5jdGlvbiAoZSkgewogICAgICAgIFkoZSwgZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIHZlLmZyb20odC5hdHRyKFZ1KCkpKS5iaW5kKHIubG9va3VwKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICExID09PSBlLnBlcnNpc3RlbnQgJiYgdC51bndyYXAoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pOwogICAgdmFyIGEgPSBidShvKTsKICAgIHJldHVybiB7CiAgICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3RlcihlLCB0KSB7CiAgICAgICAgaS5yZWdpc3RlcihlLCB0KTsKICAgICAgfSwKICAgICAgYW5ub3RhdGU6IGZ1bmN0aW9uIGFubm90YXRlKHQsIG4pIHsKICAgICAgICBpLmxvb2t1cCh0KS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB2YXIgdSwgcywgYywgbDsKICAgICAgICAgIHMgPSB0LCBjID0gZSwgbCA9IG4sICh1ID0gbykudW5kb01hbmFnZXIudHJhbnNhY3QoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZSwKICAgICAgICAgICAgICAgIHQsCiAgICAgICAgICAgICAgICBuLAogICAgICAgICAgICAgICAgciwKICAgICAgICAgICAgICAgIG8gPSB1LnNlbGVjdGlvbiwKICAgICAgICAgICAgICAgIGkgPSBvLmdldFJuZygpLAogICAgICAgICAgICAgICAgYSA9IDAgPCBfbCh1KS5sZW5ndGg7CgogICAgICAgICAgICBpLmNvbGxhcHNlZCAmJiAhYSAmJiAobiA9IFNsKGUgPSB1LCB0ID0gaSwgW3sKICAgICAgICAgICAgICBpbmxpbmU6ICJzcGFuIgogICAgICAgICAgICB9XSksIHQuc2V0U3RhcnQobi5zdGFydENvbnRhaW5lciwgbi5zdGFydE9mZnNldCksIHQuc2V0RW5kKG4uZW5kQ29udGFpbmVyLCBuLmVuZE9mZnNldCksIGUuc2VsZWN0aW9uLnNldFJuZyh0KSksIG8uZ2V0Um5nKCkuY29sbGFwc2VkICYmICFhID8gKEN1KHIgPSBMbCh1LmdldERvYygpLCBsLCBzLCBjLmRlY29yYXRlKSwgeW8pLCBvLmdldFJuZygpLmluc2VydE5vZGUoci5kb20pLCBvLnNlbGVjdChyLmRvbSkpIDogQmwobywgITEsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBPbCh1LCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgSWwodSwgZSwgcywgYy5kZWNvcmF0ZSwgbCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGFubm90YXRpb25DaGFuZ2VkOiBmdW5jdGlvbiBhbm5vdGF0aW9uQ2hhbmdlZChlLCB0KSB7CiAgICAgICAgYS5hZGRMaXN0ZW5lcihlLCB0KTsKICAgICAgfSwKICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoZSkgewogICAgICAgIHZ1KG8sIHZlLnNvbWUoZSkpLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIFkoZS5lbGVtZW50cywgWXQpOwogICAgICAgIH0pOwogICAgICB9LAogICAgICBnZXRBbGw6IGZ1bmN0aW9uIGdldEFsbChlKSB7CiAgICAgICAgdmFyIHQsIG4sIHI7CiAgICAgICAgcmV0dXJuIHJlKCh0ID0gZSwgbiA9IGh1KE50LmZyb21Eb20oby5nZXRCb2R5KCkpLCAiWyIgKyBWdSgpICsgJz0iJyArIHQgKyAnIl0nKSwgciA9IHt9LCBZKG4sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB2YXIgdCA9IHZuKGUsIHF1KCkpLAogICAgICAgICAgICAgIG4gPSB1ZShyLCB0KS5nZXRPcihbXSk7CiAgICAgICAgICByW3RdID0gbi5jb25jYXQoW2VdKTsKICAgICAgICB9KSwgciksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gVChlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gZS5kb207CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIEZsKGUpIHsKICAgIHJldHVybiB7CiAgICAgIGdldEJvb2ttYXJrOiBBKHJmLCBlKSwKICAgICAgbW92ZVRvQm9va21hcms6IEEoWGMsIGUpCiAgICB9OwogIH0KCiAgKGFjID0gaWMgPSBpYyB8fCB7fSlbYWMuQmFja3dhcmRzID0gLTFdID0gIkJhY2t3YXJkcyIsIGFjW2FjLkZvcndhcmRzID0gMV0gPSAiRm9yd2FyZHMiOwoKICBmdW5jdGlvbiBVbChlKSB7CiAgICByZXR1cm4gT28oZSkgfHwgISFMbyh0ID0gZSkgJiYgITAgIT09IEwoeGUodC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpKSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgcmV0dXJuIGUgfHwgX28odCk7CiAgICB9LCAhMSk7CiAgICB2YXIgdDsKICB9CgogIHZhciB6bCwKICAgICAgSGwsCiAgICAgIGpsLAogICAgICBWbCA9IFluLAogICAgICBxbCA9IGpuLAogICAgICAkbCA9IHpuLAogICAgICBXbCA9IFduLAogICAgICBLbCA9IGpyLAogICAgICBYbCA9IFZyLAogICAgICBZbCA9IGZ1bmN0aW9uIFlsKGUsIHQsIG4pIHsKICAgIHZhciByLCBvLCBpOwogICAgaWYgKCEkbChuKSB8fCAhdCkgcmV0dXJuIG51bGw7CgogICAgaWYgKHQuaXNFcXVhbChhcy5hZnRlcihuKSkgJiYgbi5sYXN0Q2hpbGQpIHsKICAgICAgaWYgKGkgPSBhcy5hZnRlcihuLmxhc3RDaGlsZCksIGUgPCAwICYmIEtsKG4ubGFzdENoaWxkKSAmJiAkbChuLmxhc3RDaGlsZCkpIHJldHVybiBXbChuLmxhc3RDaGlsZCkgPyBhcy5iZWZvcmUobi5sYXN0Q2hpbGQpIDogaTsKICAgIH0gZWxzZSBpID0gdDsKCiAgICB2YXIgYSwKICAgICAgICB1LAogICAgICAgIHMsCiAgICAgICAgYyA9IGkuY29udGFpbmVyKCksCiAgICAgICAgbCA9IGkub2Zmc2V0KCk7CgogICAgaWYgKHFsKGMpKSB7CiAgICAgIGlmIChlIDwgMCAmJiAwIDwgbCkgcmV0dXJuIGFzKGMsIC0tbCk7CiAgICAgIGlmICgwIDwgZSAmJiBsIDwgYy5sZW5ndGgpIHJldHVybiBhcyhjLCArK2wpOwogICAgICByID0gYzsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChlIDwgMCAmJiAwIDwgbCAmJiAoZiA9IE9jKGMsIGwgLSAxKSwgS2woZikpKSByZXR1cm4gIVVsKGYpICYmIChvID0gS3MoZiwgZSwgWGwsIGYpKSA/IHFsKG8pID8gYXMobywgby5kYXRhLmxlbmd0aCkgOiBhcy5hZnRlcihvKSA6IHFsKGYpID8gYXMoZiwgZi5kYXRhLmxlbmd0aCkgOiBhcy5iZWZvcmUoZik7CiAgICAgIGlmICgwIDwgZSAmJiBsIDwgYy5jaGlsZE5vZGVzLmxlbmd0aCAmJiAoZiA9IE9jKGMsIGwpLCBLbChmKSkpIHJldHVybiBXbChmKSA/IChhID0gbiwgKHMgPSAodSA9IGYpLm5leHRTaWJsaW5nKSAmJiBLbChzKSA/IHFsKHMpID8gYXMocywgMCkgOiBhcy5iZWZvcmUocykgOiBZbChpYy5Gb3J3YXJkcywgYXMuYWZ0ZXIodSksIGEpKSA6ICFVbChmKSAmJiAobyA9IEtzKGYsIGUsIFhsLCBmKSkgPyBxbChvKSA/IGFzKG8sIDApIDogYXMuYmVmb3JlKG8pIDogcWwoZikgPyBhcyhmLCAwKSA6IGFzLmFmdGVyKGYpOwogICAgICByID0gZiB8fCBpLmdldE5vZGUoKTsKICAgIH0KCiAgICBpZiAoKDAgPCBlICYmIGkuaXNBdEVuZCgpIHx8IGUgPCAwICYmIGkuaXNBdFN0YXJ0KCkpICYmIChyID0gS3MociwgZSwgdywgbiwgITApLCBYbChyLCBuKSkpIHJldHVybiBCYyhlLCByKTsKICAgIHZhciBmID0gS3MociwgZSwgWGwsIG4pLAogICAgICAgIGQgPSBwZShVKGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIGZvciAodmFyIG4gPSBbXTsgZSAmJiBlICE9PSB0OykgewogICAgICAgIG4ucHVzaChlKSwgZSA9IGUucGFyZW50Tm9kZTsKICAgICAgfQoKICAgICAgcmV0dXJuIG47CiAgICB9KGMsIG4pLCBWbCkpOwogICAgcmV0dXJuICFkIHx8IGYgJiYgZC5jb250YWlucyhmKSA/IGYgPyBCYyhlLCBmKSA6IG51bGwgOiAwIDwgZSA/IGFzLmFmdGVyKGQpIDogYXMuYmVmb3JlKGQpOwogIH0sCiAgICAgIEdsID0gZnVuY3Rpb24gR2woZSwgdCwgbikgewogICAgdmFyIHIgPSBQYyh0KTsKICAgIHJldHVybiB2ZS5mcm9tKGUgPyByLm5leHQobikgOiByLnByZXYobikpOwogIH0sCiAgICAgIEpsID0gZnVuY3Rpb24gSmwodCwgbiwgZSwgcikgewogICAgcmV0dXJuIEZjKHQsIG4sIGUpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHIoZSkgPyBKbCh0LCBuLCBlLCByKSA6IHZlLnNvbWUoZSk7CiAgICB9KTsKICB9LAogICAgICBRbCA9IEEoR2wsICEwKSwKICAgICAgWmwgPSBBKEdsLCAhMSksCiAgICAgIGVmID0gQShVYywgITApLAogICAgICB0ZiA9IEEoVWMsICExKSwKICAgICAgbmYgPSAiX21jZV9jYXJldCIsCiAgICAgIHJmID0gZnVuY3Rpb24gcmYoZSwgdCwgbikgewogICAgcmV0dXJuIDIgPT09IHQgPyBicyh3bywgbiwgZSkgOiAzID09PSB0ID8gKG8gPSAociA9IGUpLmdldFJuZygpLCB7CiAgICAgIHN0YXJ0OiBmcyhyLmRvbS5nZXRSb290KCksIGFzLmZyb21SYW5nZVN0YXJ0KG8pKSwKICAgICAgZW5kOiBmcyhyLmRvbS5nZXRSb290KCksIGFzLmZyb21SYW5nZUVuZChvKSkKICAgIH0pIDogdCA/IHsKICAgICAgcm5nOiBlLmdldFJuZygpCiAgICB9IDogQ3MoZSwgITEpOwogICAgdmFyIHIsIG87CiAgfSwKICAgICAgb2YgPSAoemwgPSB5bywgZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB6bCA9PT0gZTsKICB9KSwKICAgICAgYWYgPSBmdW5jdGlvbiBhZihlLCB0KSB7CiAgICByZXR1cm4gdm9pZCAwID09PSB0ICYmICh0ID0gITEpLCAhKCFWKGUpIHx8ICFqbihlKSkgJiYgcXIodCA/IGUuZGF0YS5yZXBsYWNlKC8gL2csICJceGEwIikgOiBlLmRhdGEpOwogIH0sCiAgICAgIHVmID0gWWMsCiAgICAgIHNmID0gc2wsCiAgICAgIGNmID0gYWYsCiAgICAgIGxmID0gdGwsCiAgICAgIGZmID0gZnVuY3Rpb24gZmYoZSwgdCwgbiwgcikgewogICAgdmFyIG8gPSBuLnBhcmVudE5vZGU7CiAgICByZXR1cm4gIVYobltyXSkgJiYgKCEobyAhPT0gdCAmJiAhSyhvKSAmJiAhZS5pc0Jsb2NrKG8pKSB8fCBmZihlLCB0LCBvLCByKSk7CiAgfSwKICAgICAgZGYgPSBmdW5jdGlvbiBkZih0KSB7CiAgICByZXR1cm4gRnQodCkuZm9sZChKKFt0XSksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBbdF0uY29uY2F0KGRmKGUpKTsKICAgIH0pOwogIH0sCiAgICAgIG1mID0gZnVuY3Rpb24gbWYodCkgewogICAgcmV0dXJuIFV0KHQpLmZvbGQoSihbdF0pLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gImJyIiA9PT0ga3QoZSkgPyBCdChlKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gW3RdLmNvbmNhdChtZihlKSk7CiAgICAgIH0pLmdldE9yKFtdKSA6IFt0XS5jb25jYXQobWYoZSkpOwogICAgfSk7CiAgfSwKICAgICAgZ2YgPSAoSGwgPSBfbiwgewogICAgZ2V0OiBmdW5jdGlvbiBnZXQoZSkgewogICAgICBpZiAoIUhsKGUpKSB0aHJvdyBuZXcgRXJyb3IoIkNhbiBvbmx5IGdldCB0ZXh0IHZhbHVlIG9mIGEgdGV4dCBub2RlIik7CiAgICAgIHJldHVybiBqbChlKS5nZXRPcigiIik7CiAgICB9LAogICAgZ2V0T3B0aW9uOiBqbCA9IGZ1bmN0aW9uIGpsKGUpIHsKICAgICAgcmV0dXJuIEhsKGUpID8gdmUuZnJvbShlLmRvbS5ub2RlVmFsdWUpIDogdmUubm9uZSgpOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGUsIHQpIHsKICAgICAgaWYgKCFIbChlKSkgdGhyb3cgbmV3IEVycm9yKCJDYW4gb25seSBzZXQgcmF3IHRleHQgdmFsdWUgb2YgYSB0ZXh0IG5vZGUiKTsKICAgICAgZS5kb20ubm9kZVZhbHVlID0gdDsKICAgIH0KICB9KTsKCiAgZnVuY3Rpb24gcGYoZSwgdCkgewogICAgZm9yICg7IHQgJiYgdCAhPT0gZTspIHsKICAgICAgaWYgKFhuKHQpIHx8IFluKHQpKSByZXR1cm4gdDsKICAgICAgdCA9IHQucGFyZW50Tm9kZTsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9CgogIGZ1bmN0aW9uIGhmKHQsIG4sIGUpIHsKICAgIGlmICghZS5jb2xsYXBzZWQpIHsKICAgICAgaWYgKHh0LmJyb3dzZXIuaXNJRSgpICYmIGUuc3RhcnRPZmZzZXQgPT09IGUuZW5kT2Zmc2V0IC0gMSAmJiBlLnN0YXJ0Q29udGFpbmVyID09PSBlLmVuZENvbnRhaW5lcikgewogICAgICAgIHZhciByID0gZS5zdGFydENvbnRhaW5lci5jaGlsZE5vZGVzW2Uuc3RhcnRPZmZzZXRdOwogICAgICAgIGlmICh6bihyKSkgcmV0dXJuIEYoci5nZXRDbGllbnRSZWN0cygpLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIFR1KGUsIHQsIG4pOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gRihlLmdldENsaWVudFJlY3RzKCksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIFR1KGUsIHQsIG4pOwogICAgICB9KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHZmKGUsIHQsIG4pIHsKICAgIHJldHVybiBlLmZpcmUodCwgbik7CiAgfQoKICBmdW5jdGlvbiBiZihlLCB0LCBuLCByKSB7CiAgICByZXR1cm4gZS5maXJlKCJGb3JtYXRBcHBseSIsIHsKICAgICAgZm9ybWF0OiB0LAogICAgICBub2RlOiBuLAogICAgICB2YXJzOiByCiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIHlmKGUsIHQsIG4sIHIpIHsKICAgIHJldHVybiBlLmZpcmUoIkZvcm1hdFJlbW92ZSIsIHsKICAgICAgZm9ybWF0OiB0LAogICAgICBub2RlOiBuLAogICAgICB2YXJzOiByCiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIENmKHIsIGwpIHsKICAgIGZ1bmN0aW9uIGMoZSkgewogICAgICByZXR1cm4gZSAmJiAoIklNRyIgPT09IGUubm9kZU5hbWUgfHwgbC5kb20uaXMoZSwgImZpZ3VyZS5pbWFnZSIpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBmKGUpIHsKICAgICAgcmV0dXJuIEpuKGUpIHx8IFQuaGFzQ2xhc3MoZSwgIm1jZS1wcmV2aWV3LW9iamVjdCIpOwogICAgfQoKICAgIGZ1bmN0aW9uIG4oZSkgewogICAgICB2YXIgdCA9IGUudGFyZ2V0OwogICAgICAhZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICBpZiAoImxvbmdwcmVzcyIgIT09IGUudHlwZSAmJiAwICE9PSBlLnR5cGUuaW5kZXhPZigidG91Y2giKSkgcmV0dXJuIGMoZS50YXJnZXQpICYmICFoZihlLmNsaWVudFgsIGUuY2xpZW50WSwgdCk7CiAgICAgICAgdmFyIG4gPSBlLnRvdWNoZXNbMF07CiAgICAgICAgcmV0dXJuIGMoZS50YXJnZXQpICYmICFoZihuLmNsaWVudFgsIG4uY2xpZW50WSwgdCk7CiAgICAgIH0oZSwgbC5zZWxlY3Rpb24uZ2V0Um5nKCkpIHx8IGUuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgbC5zZWxlY3Rpb24uc2VsZWN0KHQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGQoZSkgewogICAgICByZXR1cm4gVC5pcyhlLCAiZmlndXJlLmltYWdlIikgPyBbZS5xdWVyeVNlbGVjdG9yKCJpbWciKV0gOiBULmhhc0NsYXNzKGUsICJtY2UtcHJldmlldy1vYmplY3QiKSAmJiBWKGUuZmlyc3RFbGVtZW50Q2hpbGQpID8gW2UsIGUuZmlyc3RFbGVtZW50Q2hpbGRdIDogW2VdOwogICAgfQoKICAgIGZ1bmN0aW9uIGkoZSkgewogICAgICB2YXIgdCA9IFRzKGwpOwogICAgICByZXR1cm4gISF0ICYmICJmYWxzZSIgIT09IGUuZ2V0QXR0cmlidXRlKCJkYXRhLW1jZS1yZXNpemUiKSAmJiBlICE9PSBsLmdldEJvZHkoKSAmJiAoVC5oYXNDbGFzcyhlLCAibWNlLXByZXZpZXctb2JqZWN0IikgPyB6ZShOdC5mcm9tRG9tKGUuZmlyc3RFbGVtZW50Q2hpbGQpLCB0KSA6IHplKE50LmZyb21Eb20oZSksIHQpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhKGUsIHQsIG4pIHsKICAgICAgVihuKSAmJiBZKGQoZSksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgZS5zdHlsZVt0XSB8fCAhbC5zY2hlbWEuaXNWYWxpZChlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIHQpID8gVC5zZXRTdHlsZShlLCB0LCBuKSA6IFQuc2V0QXR0cmliKGUsIHQsICIiICsgbik7CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIG0oZSwgdCwgbikgewogICAgICBhKGUsICJ3aWR0aCIsIHQpLCBhKGUsICJoZWlnaHQiLCBuKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnKGUpIHsKICAgICAgdmFyIHQsCiAgICAgICAgICBuLAogICAgICAgICAgciwKICAgICAgICAgIG8sCiAgICAgICAgICBpLAogICAgICAgICAgYSwKICAgICAgICAgIHUgPSBlLnNjcmVlblggLSBDLAogICAgICAgICAgcyA9IGUuc2NyZWVuWSAtIHg7CiAgICAgIGsgPSB1ICogYlsyXSArIHcsIF8gPSBzICogYlszXSArIFMsIGsgPSBrIDwgNSA/IDUgOiBrLCBfID0gXyA8IDUgPyA1IDogXywgKChjKHApIHx8IGYocCkpICYmICExICE9PSBsLmdldFBhcmFtKCJyZXNpemVfaW1nX3Byb3BvcnRpb25hbCIsICEwLCAiYm9vbGVhbiIpID8gIUJmLm1vZGlmaWVyUHJlc3NlZChlKSA6IEJmLm1vZGlmaWVyUHJlc3NlZChlKSkgJiYgKEwodSkgPiBMKHMpID8gKF8gPSBJKGsgKiBFKSwgayA9IEkoXyAvIEUpKSA6IChrID0gSShfIC8gRSksIF8gPSBJKGsgKiBFKSkpLCBtKGgsIGssIF8pLCB0ID0gYi5zdGFydFBvcy54ICsgdSwgbiA9IGIuc3RhcnRQb3MueSArIHMsIFQuc2V0U3R5bGVzKHYsIHsKICAgICAgICBsZWZ0OiB0ID0gMCA8IHQgPyB0IDogMCwKICAgICAgICB0b3A6IG4gPSAwIDwgbiA/IG4gOiAwLAogICAgICAgIGRpc3BsYXk6ICJibG9jayIKICAgICAgfSksIHYuaW5uZXJIVE1MID0gayArICIgJnRpbWVzOyAiICsgXywgYlsyXSA8IDAgJiYgaC5jbGllbnRXaWR0aCA8PSBrICYmIFQuc2V0U3R5bGUoaCwgImxlZnQiLCB2b2lkIDAgKyAodyAtIGspKSwgYlszXSA8IDAgJiYgaC5jbGllbnRIZWlnaHQgPD0gXyAmJiBULnNldFN0eWxlKGgsICJ0b3AiLCB2b2lkIDAgKyAoUyAtIF8pKSwgKHUgPSBNLnNjcm9sbFdpZHRoIC0gQSkgKyAocyA9IE0uc2Nyb2xsSGVpZ2h0IC0gUikgIT0gMCAmJiBULnNldFN0eWxlcyh2LCB7CiAgICAgICAgbGVmdDogdCAtIHUsCiAgICAgICAgdG9wOiBuIC0gcwogICAgICB9KSwgTiB8fCAociA9IHAsIG8gPSB3LCBpID0gUywgYSA9ICJjb3JuZXItIiArIGIubmFtZSwgbC5maXJlKCJPYmplY3RSZXNpemVTdGFydCIsIHsKICAgICAgICB0YXJnZXQ6IHIsCiAgICAgICAgd2lkdGg6IG8sCiAgICAgICAgaGVpZ2h0OiBpLAogICAgICAgIG9yaWdpbjogYQogICAgICB9KSwgTiA9ICEwKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvKGUpIHsKICAgICAgZnVuY3Rpb24gdChlLCB0KSB7CiAgICAgICAgaWYgKGUpIGRvIHsKICAgICAgICAgIGlmIChlID09PSB0KSByZXR1cm4gMTsKICAgICAgICB9IHdoaWxlIChlID0gZS5wYXJlbnROb2RlKTsKICAgICAgfQoKICAgICAgdmFyIG47CiAgICAgIE4gfHwgbC5yZW1vdmVkIHx8IChPKFQuc2VsZWN0KCJpbWdbZGF0YS1tY2Utc2VsZWN0ZWRdLGhyW2RhdGEtbWNlLXNlbGVjdGVkXSIpLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGUucmVtb3ZlQXR0cmlidXRlKEQpOwogICAgICB9KSwgbiA9ICJtb3VzZWRvd24iID09PSBlLnR5cGUgPyBlLnRhcmdldCA6IHIuZ2V0Tm9kZSgpLCB0KG4gPSBULiQobikuY2xvc2VzdCgidGFibGUsaW1nLGZpZ3VyZS5pbWFnZSxocix2aWRlbyxzcGFuLm1jZS1wcmV2aWV3LW9iamVjdCIpWzBdLCBNKSAmJiAocygpLCB0KHIuZ2V0U3RhcnQoITApLCBuKSAmJiB0KHIuZ2V0RW5kKCEwKSwgbikpID8geihuKSA6IEgoKSk7CiAgICB9CgogICAgZnVuY3Rpb24gdShlKSB7CiAgICAgIHJldHVybiBQZihwZihsLmdldEJvZHkoKSwgZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIHMoKSB7CiAgICAgIHRyeSB7CiAgICAgICAgbC5nZXREb2MoKS5leGVjQ29tbWFuZCgiZW5hYmxlT2JqZWN0UmVzaXppbmciLCAhMSwgImZhbHNlIik7CiAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICB9CgogICAgdmFyIHAsCiAgICAgICAgaCwKICAgICAgICB2LAogICAgICAgIGIsCiAgICAgICAgeSwKICAgICAgICBDLAogICAgICAgIHgsCiAgICAgICAgdywKICAgICAgICBTLAogICAgICAgIEUsCiAgICAgICAgTiwKICAgICAgICBrLAogICAgICAgIF8sCiAgICAgICAgQSwKICAgICAgICBSLAogICAgICAgIEQgPSAiZGF0YS1tY2Utc2VsZWN0ZWQiLAogICAgICAgIFQgPSBsLmRvbSwKICAgICAgICBPID0gRXQuZWFjaCwKICAgICAgICBCID0gbC5nZXREb2MoKSwKICAgICAgICBQID0gZG9jdW1lbnQsCiAgICAgICAgTCA9IE1hdGguYWJzLAogICAgICAgIEkgPSBNYXRoLnJvdW5kLAogICAgICAgIE0gPSBsLmdldEJvZHkoKSwKICAgICAgICBGID0gewogICAgICBudzogWzAsIDAsIC0xLCAtMV0sCiAgICAgIG5lOiBbMSwgMCwgMSwgLTFdLAogICAgICBzZTogWzEsIDEsIDEsIDFdLAogICAgICBzdzogWzAsIDEsIC0xLCAxXQogICAgfSwKICAgICAgICBVID0gZnVuY3Rpb24gVSgpIHsKICAgICAgdmFyIGUsCiAgICAgICAgICB0LAogICAgICAgICAgbiwKICAgICAgICAgIHIsCiAgICAgICAgICBvID0gTjsKICAgICAgTiA9ICExLCBvICYmIChhKHAsICJ3aWR0aCIsIGspLCBhKHAsICJoZWlnaHQiLCBfKSksIFQudW5iaW5kKEIsICJtb3VzZW1vdmUiLCBnKSwgVC51bmJpbmQoQiwgIm1vdXNldXAiLCBVKSwgUCAhPT0gQiAmJiAoVC51bmJpbmQoUCwgIm1vdXNlbW92ZSIsIGcpLCBULnVuYmluZChQLCAibW91c2V1cCIsIFUpKSwgVC5yZW1vdmUoaCksIFQucmVtb3ZlKHYpLCBULnJlbW92ZSh5KSwgeihwKSwgbyAmJiAoZSA9IHAsIHQgPSBrLCBuID0gXywgciA9ICJjb3JuZXItIiArIGIubmFtZSwgbC5maXJlKCJPYmplY3RSZXNpemVkIiwgewogICAgICAgIHRhcmdldDogZSwKICAgICAgICB3aWR0aDogdCwKICAgICAgICBoZWlnaHQ6IG4sCiAgICAgICAgb3JpZ2luOiByCiAgICAgIH0pLCBULnNldEF0dHJpYihwLCAic3R5bGUiLCBULmdldEF0dHJpYihwLCAic3R5bGUiKSkpLCBsLm5vZGVDaGFuZ2VkKCk7CiAgICB9LAogICAgICAgIHogPSBmdW5jdGlvbiB6KGUpIHsKICAgICAgaigpOwogICAgICB2YXIgdCA9IFQuZ2V0UG9zKGUsIE0pLAogICAgICAgICAgYSA9IHQueCwKICAgICAgICAgIHUgPSB0LnksCiAgICAgICAgICBuID0gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwKICAgICAgICAgIHMgPSBuLndpZHRoIHx8IG4ucmlnaHQgLSBuLmxlZnQsCiAgICAgICAgICBjID0gbi5oZWlnaHQgfHwgbi5ib3R0b20gLSBuLnRvcDsKICAgICAgcCAhPT0gZSAmJiAoSCgpLCBwID0gZSwgayA9IF8gPSAwKTsKICAgICAgdmFyIHIgPSBsLmZpcmUoIk9iamVjdFNlbGVjdGVkIiwgewogICAgICAgIHRhcmdldDogZQogICAgICB9KSwKICAgICAgICAgIG8gPSBULmdldEF0dHJpYihwLCBELCAiMSIpOwogICAgICBpKGUpICYmICFyLmlzRGVmYXVsdFByZXZlbnRlZCgpID8gTyhGLCBmdW5jdGlvbiAobywgaSkgewogICAgICAgIHZhciBlID0gVC5nZXQoIm1jZVJlc2l6ZUhhbmRsZSIgKyBpKTsKICAgICAgICBlICYmIFQucmVtb3ZlKGUpLCBlID0gVC5hZGQoTSwgImRpdiIsIHsKICAgICAgICAgIGlkOiAibWNlUmVzaXplSGFuZGxlIiArIGksCiAgICAgICAgICAiZGF0YS1tY2UtYm9ndXMiOiAiYWxsIiwKICAgICAgICAgIGNsYXNzOiAibWNlLXJlc2l6ZWhhbmRsZSIsCiAgICAgICAgICB1bnNlbGVjdGFibGU6ICEwLAogICAgICAgICAgc3R5bGU6ICJjdXJzb3I6IiArIGkgKyAiLXJlc2l6ZTsgbWFyZ2luOjA7IHBhZGRpbmc6MCIKICAgICAgICB9KSwgMTEgPT09IHh0LmllICYmIChlLmNvbnRlbnRFZGl0YWJsZSA9ICExKSwgVC5iaW5kKGUsICJtb3VzZWRvd24iLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQsIG4sIHI7CiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCBlLnByZXZlbnREZWZhdWx0KCksIHQgPSBlLCByID0gZChwKVswXSwgQyA9IHQuc2NyZWVuWCwgeCA9IHQuc2NyZWVuWSwgdyA9IHIuY2xpZW50V2lkdGgsIFMgPSByLmNsaWVudEhlaWdodCwgRSA9IFMgLyB3LCAoYiA9IG8pLm5hbWUgPSBpLCBiLnN0YXJ0UG9zID0gewogICAgICAgICAgICB4OiBzICogb1swXSArIGEsCiAgICAgICAgICAgIHk6IGMgKiBvWzFdICsgdQogICAgICAgICAgfSwgQSA9IE0uc2Nyb2xsV2lkdGgsIFIgPSBNLnNjcm9sbEhlaWdodCwgeSA9IFQuYWRkKE0sICJkaXYiLCB7CiAgICAgICAgICAgIGNsYXNzOiAibWNlLXJlc2l6ZS1iYWNrZHJvcCIsCiAgICAgICAgICAgICJkYXRhLW1jZS1ib2d1cyI6ICJhbGwiCiAgICAgICAgICB9KSwgVC5zZXRTdHlsZXMoeSwgewogICAgICAgICAgICBwb3NpdGlvbjogImZpeGVkIiwKICAgICAgICAgICAgbGVmdDogIjAiLAogICAgICAgICAgICB0b3A6ICIwIiwKICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgaGVpZ2h0OiAiMTAwJSIKICAgICAgICAgIH0pLCBoID0gZihuID0gcCkgPyBULmNyZWF0ZSgiaW1nIiwgewogICAgICAgICAgICBzcmM6IHh0LnRyYW5zcGFyZW50U3JjCiAgICAgICAgICB9KSA6IG4uY2xvbmVOb2RlKCEwKSwgVC5hZGRDbGFzcyhoLCAibWNlLWNsb25lZHJlc2l6YWJsZSIpLCBULnNldEF0dHJpYihoLCAiZGF0YS1tY2UtYm9ndXMiLCAiYWxsIiksIGguY29udGVudEVkaXRhYmxlID0gImZhbHNlIiwgVC5zZXRTdHlsZXMoaCwgewogICAgICAgICAgICBsZWZ0OiBhLAogICAgICAgICAgICB0b3A6IHUsCiAgICAgICAgICAgIG1hcmdpbjogMAogICAgICAgICAgfSksIG0oaCwgcywgYyksIGgucmVtb3ZlQXR0cmlidXRlKEQpLCBNLmFwcGVuZENoaWxkKGgpLCBULmJpbmQoQiwgIm1vdXNlbW92ZSIsIGcpLCBULmJpbmQoQiwgIm1vdXNldXAiLCBVKSwgUCAhPT0gQiAmJiAoVC5iaW5kKFAsICJtb3VzZW1vdmUiLCBnKSwgVC5iaW5kKFAsICJtb3VzZXVwIiwgVSkpLCB2ID0gVC5hZGQoTSwgImRpdiIsIHsKICAgICAgICAgICAgY2xhc3M6ICJtY2UtcmVzaXplLWhlbHBlciIsCiAgICAgICAgICAgICJkYXRhLW1jZS1ib2d1cyI6ICJhbGwiCiAgICAgICAgICB9LCB3ICsgIiAmdGltZXM7ICIgKyBTKTsKICAgICAgICB9KSwgby5lbG0gPSBlLCBULnNldFN0eWxlcyhlLCB7CiAgICAgICAgICBsZWZ0OiBzICogb1swXSArIGEgLSBlLm9mZnNldFdpZHRoIC8gMiwKICAgICAgICAgIHRvcDogYyAqIG9bMV0gKyB1IC0gZS5vZmZzZXRIZWlnaHQgLyAyCiAgICAgICAgfSk7CiAgICAgIH0pIDogSCgpLCBULmdldEF0dHJpYihwLCBEKSB8fCBwLnNldEF0dHJpYnV0ZShELCBvKTsKICAgIH0sCiAgICAgICAgSCA9IGZ1bmN0aW9uIEgoKSB7CiAgICAgIGooKSwgcCAmJiBwLnJlbW92ZUF0dHJpYnV0ZShEKSwgbmUoRiwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICB2YXIgbiA9IFQuZ2V0KCJtY2VSZXNpemVIYW5kbGUiICsgdCk7CiAgICAgICAgbiAmJiAoVC51bmJpbmQobiksIFQucmVtb3ZlKG4pKTsKICAgICAgfSk7CiAgICB9LAogICAgICAgIGogPSBmdW5jdGlvbiBqKCkgewogICAgICBuZShGLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGUuZWxtICYmIChULnVuYmluZChlLmVsbSksIGRlbGV0ZSBlLmVsbSk7CiAgICAgIH0pOwogICAgfTsKCiAgICByZXR1cm4gbC5vbigiaW5pdCIsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGU7CiAgICAgIHMoKSwgKHh0LmJyb3dzZXIuaXNJRSgpIHx8IHh0LmJyb3dzZXIuaXNFZGdlKCkpICYmIChsLm9uKCJtb3VzZWRvd24gY2xpY2siLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gZS50YXJnZXQsCiAgICAgICAgICAgIG4gPSB0Lm5vZGVOYW1lOwogICAgICAgIE4gfHwgIS9eKFRBQkxFfElNR3xIUikkLy50ZXN0KG4pIHx8IHUodCkgfHwgKDIgIT09IGUuYnV0dG9uICYmIGwuc2VsZWN0aW9uLnNlbGVjdCh0LCAiVEFCTEUiID09PSBuKSwgIm1vdXNlZG93biIgPT09IGUudHlwZSAmJiBsLm5vZGVDaGFuZ2VkKCkpOwogICAgICB9KSwgVC5iaW5kKE0sICJtc2NvbnRyb2xzZWxlY3QiLCBlID0gZnVuY3Rpb24gZShfZTMpIHsKICAgICAgICBmdW5jdGlvbiB0KGUpIHsKICAgICAgICAgIF9yLnNldEVkaXRvclRpbWVvdXQobCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gbC5zZWxlY3Rpb24uc2VsZWN0KGUpOwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodShfZTMudGFyZ2V0KSB8fCBKbihfZTMudGFyZ2V0KSkgcmV0dXJuIF9lMy5wcmV2ZW50RGVmYXVsdCgpLCB2b2lkIHQoX2UzLnRhcmdldCk7CiAgICAgICAgL14oVEFCTEV8SU1HfEhSKSQvLnRlc3QoX2UzLnRhcmdldC5ub2RlTmFtZSkgJiYgKF9lMy5wcmV2ZW50RGVmYXVsdCgpLCAiSU1HIiA9PT0gX2UzLnRhcmdldC50YWdOYW1lICYmIHQoX2UzLnRhcmdldCkpOwogICAgICB9KSwgbC5vbigicmVtb3ZlIiwgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBULnVuYmluZChNLCAibXNjb250cm9sc2VsZWN0IiwgZSk7CiAgICAgIH0pKTsKCiAgICAgIHZhciB0ID0gX3IudGhyb3R0bGUoZnVuY3Rpb24gKGUpIHsKICAgICAgICBsLmNvbXBvc2luZyB8fCBvKGUpOwogICAgICB9KTsKCiAgICAgIGwub24oIm5vZGVjaGFuZ2UgUmVzaXplRWRpdG9yIFJlc2l6ZVdpbmRvdyBSZXNpemVDb250ZW50IGRyb3AgRnVsbHNjcmVlblN0YXRlQ2hhbmdlZCIsIHQpLCBsLm9uKCJrZXl1cCBjb21wb3NpdGlvbmVuZCIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcCAmJiAiVEFCTEUiID09PSBwLm5vZGVOYW1lICYmIHQoZSk7CiAgICAgIH0pLCBsLm9uKCJoaWRlIGJsdXIiLCBIKSwgbC5vbigiY29udGV4dG1lbnUgbG9uZ3ByZXNzIiwgbiwgITApOwogICAgfSksIGwub24oInJlbW92ZSIsIGopLCB7CiAgICAgIGlzUmVzaXphYmxlOiBpLAogICAgICBzaG93UmVzaXplUmVjdDogeiwKICAgICAgaGlkZVJlc2l6ZVJlY3Q6IEgsCiAgICAgIHVwZGF0ZVJlc2l6ZVJlY3Q6IG8sCiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgICAgcCA9IGggPSB5ID0gbnVsbDsKICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIHhmKGUpIHsKICAgIHJldHVybiBYbihlKSB8fCBZbihlKTsKICB9CgogIGZ1bmN0aW9uIHdmKHQsIG4sIHIpIHsKICAgIHZhciBvLAogICAgICAgIGUsCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgcyA9IHI7CiAgICBpZiAocy5jYXJldFBvc2l0aW9uRnJvbVBvaW50KSAoZSA9IHMuY2FyZXRQb3NpdGlvbkZyb21Qb2ludCh0LCBuKSkgJiYgKChvID0gci5jcmVhdGVSYW5nZSgpKS5zZXRTdGFydChlLm9mZnNldE5vZGUsIGUub2Zmc2V0KSwgby5jb2xsYXBzZSghMCkpO2Vsc2UgaWYgKHMuY2FyZXRSYW5nZUZyb21Qb2ludCkgbyA9IHMuY2FyZXRSYW5nZUZyb21Qb2ludCh0LCBuKTtlbHNlIGlmIChzLmJvZHkuY3JlYXRlVGV4dFJhbmdlKSB7CiAgICAgIG8gPSBzLmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7CgogICAgICB0cnkgewogICAgICAgIG8ubW92ZVRvUG9pbnQodCwgbiksIG8uY29sbGFwc2UoITApOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgbyA9IGZ1bmN0aW9uIChlLCBuLCB0KSB7CiAgICAgICAgICB2YXIgciwKICAgICAgICAgICAgICBvID0gdC5lbGVtZW50RnJvbVBvaW50KGUsIG4pLAogICAgICAgICAgICAgIGkgPSB0LmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7CgogICAgICAgICAgaWYgKG8gJiYgIkhUTUwiICE9PSBvLnRhZ05hbWUgfHwgKG8gPSB0LmJvZHkpLCBpLm1vdmVUb0VsZW1lbnRUZXh0KG8pLCAwIDwgKHIgPSAociA9IEV0LnRvQXJyYXkoaS5nZXRDbGllbnRSZWN0cygpKSkuc29ydChmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICByZXR1cm4gKGUgPSBNYXRoLmFicyhNYXRoLm1heChlLnRvcCAtIG4sIGUuYm90dG9tIC0gbikpKSAtIE1hdGguYWJzKE1hdGgubWF4KHQudG9wIC0gbiwgdC5ib3R0b20gLSBuKSk7CiAgICAgICAgICB9KSkubGVuZ3RoKSB7CiAgICAgICAgICAgIG4gPSAoclswXS5ib3R0b20gKyByWzBdLnRvcCkgLyAyOwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXR1cm4gaS5tb3ZlVG9Qb2ludChlLCBuKSwgaS5jb2xsYXBzZSghMCksIGk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfSh0LCBuLCByKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGkgPSBvLCBhID0gci5ib2R5LCB1ID0gaSAmJiBpLnBhcmVudEVsZW1lbnQgPyBpLnBhcmVudEVsZW1lbnQoKSA6IG51bGwsIFluKGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICAgICAgZm9yICg7IGUgJiYgZSAhPT0gdDspIHsKICAgICAgICAgIGlmIChuKGUpKSByZXR1cm4gZTsKICAgICAgICAgIGUgPSBlLnBhcmVudE5vZGU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfSh1LCBhLCB4ZikpID8gbnVsbCA6IGk7CiAgICB9CiAgICByZXR1cm4gbzsKICB9CgogIGZ1bmN0aW9uIFNmKGUsIHQpIHsKICAgIHJldHVybiBlICYmIHQgJiYgZS5zdGFydENvbnRhaW5lciA9PT0gdC5zdGFydENvbnRhaW5lciAmJiBlLnN0YXJ0T2Zmc2V0ID09PSB0LnN0YXJ0T2Zmc2V0ICYmIGUuZW5kQ29udGFpbmVyID09PSB0LmVuZENvbnRhaW5lciAmJiBlLmVuZE9mZnNldCA9PT0gdC5lbmRPZmZzZXQ7CiAgfQoKICBmdW5jdGlvbiBFZihlLCB0LCBuKSB7CiAgICByZXR1cm4gbnVsbCAhPT0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgICAgZm9yICg7IGUgJiYgZSAhPT0gdDspIHsKICAgICAgICBpZiAobihlKSkgcmV0dXJuIGU7CiAgICAgICAgZSA9IGUucGFyZW50Tm9kZTsKICAgICAgfQoKICAgICAgcmV0dXJuIG51bGw7CiAgICB9KGUsIHQsIG4pOwogIH0KCiAgZnVuY3Rpb24gTmYoZSkgewogICAgcmV0dXJuIGUgJiYgIlRBQkxFIiA9PT0gZS5ub2RlTmFtZTsKICB9CgogIGZ1bmN0aW9uIGtmKGUsIHQsIG4pIHsKICAgIGZvciAodmFyIHIgPSBuZXcgUnIodCwgZS5nZXRQYXJlbnQodC5wYXJlbnROb2RlLCBlLmlzQmxvY2spIHx8IGUuZ2V0Um9vdCgpKTsgdCA9IHJbbiA/ICJwcmV2IiA6ICJuZXh0Il0oKTspIHsKICAgICAgaWYgKFduKHQpKSByZXR1cm4gMTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIF9mKGUsIHQsIG4sIHIsIG8pIHsKICAgIHZhciBpLAogICAgICAgIGEsCiAgICAgICAgdSA9IGUuZ2V0Um9vdCgpLAogICAgICAgIHMgPSBlLnNjaGVtYS5nZXROb25FbXB0eUVsZW1lbnRzKCksCiAgICAgICAgYyA9IGUuZ2V0UGFyZW50KG8ucGFyZW50Tm9kZSwgZS5pc0Jsb2NrKSB8fCB1OwogICAgaWYgKHIgJiYgV24obykgJiYgdCAmJiBlLmlzRW1wdHkoYykpIHJldHVybiB2ZS5zb21lKGFzKG8ucGFyZW50Tm9kZSwgZS5ub2RlSW5kZXgobykpKTsKCiAgICBmb3IgKHZhciBsLCBmLCBkID0gbmV3IFJyKG8sIGMpOyBhID0gZFtyID8gInByZXYiIDogIm5leHQiXSgpOykgewogICAgICBpZiAoImZhbHNlIiA9PT0gZS5nZXRDb250ZW50RWRpdGFibGVQYXJlbnQoYSkgfHwgKGYgPSB1LCBJcihsID0gYSkgJiYgITEgPT09IEVmKGwsIGYsIHpjKSkpIHJldHVybiB2ZS5ub25lKCk7CiAgICAgIGlmIChqbihhKSAmJiAwIDwgYS5ub2RlVmFsdWUubGVuZ3RoKSByZXR1cm4gITEgPT09IEVmKGEsIHUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuICJBIiA9PT0gZS5ub2RlTmFtZTsKICAgICAgfSkgPyB2ZS5zb21lKGFzKGEsIHIgPyBhLm5vZGVWYWx1ZS5sZW5ndGggOiAwKSkgOiB2ZS5ub25lKCk7CiAgICAgIGlmIChlLmlzQmxvY2soYSkgfHwgc1thLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSByZXR1cm4gdmUubm9uZSgpOwogICAgICBpID0gYTsKICAgIH0KCiAgICByZXR1cm4gbiAmJiBpID8gdmUuc29tZShhcyhpLCAwKSkgOiB2ZS5ub25lKCk7CiAgfQoKICBmdW5jdGlvbiBBZihlLCB0LCBuLCByKSB7CiAgICB2YXIgbywKICAgICAgICBpID0gZS5nZXRSb290KCksCiAgICAgICAgYSA9ICExLAogICAgICAgIHUgPSByWyhuID8gInN0YXJ0IiA6ICJlbmQiKSArICJDb250YWluZXIiXSwKICAgICAgICBzID0gclsobiA/ICJzdGFydCIgOiAiZW5kIikgKyAiT2Zmc2V0Il0sCiAgICAgICAgYyA9IHpuKHUpICYmIHMgPT09IHUuY2hpbGROb2Rlcy5sZW5ndGgsCiAgICAgICAgbCA9IGUuc2NoZW1hLmdldE5vbkVtcHR5RWxlbWVudHMoKSwKICAgICAgICBmID0gbjsKICAgIGlmIChJcih1KSkgcmV0dXJuIHZlLm5vbmUoKTsKCiAgICBpZiAoem4odSkgJiYgcyA+IHUuY2hpbGROb2Rlcy5sZW5ndGggLSAxICYmIChmID0gITEpLCBxbih1KSAmJiAodSA9IGksIHMgPSAwKSwgdSA9PT0gaSkgewogICAgICBpZiAoZiAmJiAoZCA9IHUuY2hpbGROb2Rlc1swIDwgcyA/IHMgLSAxIDogMF0pKSB7CiAgICAgICAgaWYgKElyKGQpKSByZXR1cm4gdmUubm9uZSgpOwogICAgICAgIGlmIChsW2Qubm9kZU5hbWVdIHx8IE5mKGQpKSByZXR1cm4gdmUubm9uZSgpOwogICAgICB9CgogICAgICBpZiAodS5oYXNDaGlsZE5vZGVzKCkpIHsKICAgICAgICBpZiAocyA9IE1hdGgubWluKCFmICYmIDAgPCBzID8gcyAtIDEgOiBzLCB1LmNoaWxkTm9kZXMubGVuZ3RoIC0gMSksIHUgPSB1LmNoaWxkTm9kZXNbc10sIHMgPSBqbih1KSAmJiBjID8gdS5kYXRhLmxlbmd0aCA6IDAsICF0ICYmIHUgPT09IGkubGFzdENoaWxkICYmIE5mKHUpKSByZXR1cm4gdmUubm9uZSgpOwogICAgICAgIGlmIChmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgZm9yICg7IHQgJiYgdCAhPT0gZTspIHsKICAgICAgICAgICAgaWYgKFluKHQpKSByZXR1cm4gMTsKICAgICAgICAgICAgdCA9IHQucGFyZW50Tm9kZTsKICAgICAgICAgIH0KICAgICAgICB9KGksIHUpIHx8IElyKHUpKSByZXR1cm4gdmUubm9uZSgpOwoKICAgICAgICBpZiAodS5oYXNDaGlsZE5vZGVzKCkgJiYgITEgPT09IE5mKHUpKSB7CiAgICAgICAgICB2YXIgZCA9IHUsCiAgICAgICAgICAgICAgbSA9IG5ldyBScih1LCBpKTsKCiAgICAgICAgICBkbyB7CiAgICAgICAgICAgIGlmIChZbihkKSB8fCBJcihkKSkgewogICAgICAgICAgICAgIGEgPSAhMTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGpuKGQpICYmIDAgPCBkLm5vZGVWYWx1ZS5sZW5ndGgpIHsKICAgICAgICAgICAgICBzID0gZiA/IDAgOiBkLm5vZGVWYWx1ZS5sZW5ndGgsIHUgPSBkLCBhID0gITA7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChsW2Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0gJiYgKCEobyA9IGQpIHx8ICEvXihURHxUSHxDQVBUSU9OKSQvLnRlc3Qoby5ub2RlTmFtZSkpKSB7CiAgICAgICAgICAgICAgcyA9IGUubm9kZUluZGV4KGQpLCB1ID0gZC5wYXJlbnROb2RlLCBmIHx8IHMrKywgYSA9ICEwOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9IHdoaWxlIChkID0gZiA/IG0ubmV4dCgpIDogbS5wcmV2KCkpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiB0ICYmIChqbih1KSAmJiAwID09PSBzICYmIF9mKGUsIGMsIHQsICEwLCB1KS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIHUgPSBlLmNvbnRhaW5lcigpLCBzID0gZS5vZmZzZXQoKSwgYSA9ICEwOwogICAgfSksIHpuKHUpICYmICghKGQgPSAoZCA9IHUuY2hpbGROb2Rlc1tzXSkgfHwgdS5jaGlsZE5vZGVzW3MgLSAxXSkgfHwgIVduKGQpIHx8IGQucHJldmlvdXNTaWJsaW5nICYmICJBIiA9PT0gZC5wcmV2aW91c1NpYmxpbmcubm9kZU5hbWUgfHwga2YoZSwgZCwgITEpIHx8IGtmKGUsIGQsICEwKSB8fCBfZihlLCBjLCB0LCAhMCwgZCkuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICB1ID0gZS5jb250YWluZXIoKSwgcyA9IGUub2Zmc2V0KCksIGEgPSAhMDsKICAgIH0pKSksIGYgJiYgIXQgJiYgam4odSkgJiYgcyA9PT0gdS5ub2RlVmFsdWUubGVuZ3RoICYmIF9mKGUsIGMsIHQsICExLCB1KS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIHUgPSBlLmNvbnRhaW5lcigpLCBzID0gZS5vZmZzZXQoKSwgYSA9ICEwOwogICAgfSksIGEgPyB2ZS5zb21lKGFzKHUsIHMpKSA6IHZlLm5vbmUoKTsKICB9CgogIGZ1bmN0aW9uIFJmKGUsIHQpIHsKICAgIHZhciBuID0gdC5jb2xsYXBzZWQsCiAgICAgICAgciA9IHQuY2xvbmVSYW5nZSgpLAogICAgICAgIG8gPSBhcy5mcm9tUmFuZ2VTdGFydCh0KTsKICAgIHJldHVybiBBZihlLCBuLCAhMCwgcikuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICBuICYmIGFzLmlzQWJvdmUobywgZSkgfHwgci5zZXRTdGFydChlLmNvbnRhaW5lcigpLCBlLm9mZnNldCgpKTsKICAgIH0pLCBuIHx8IEFmKGUsIG4sICExLCByKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIHIuc2V0RW5kKGUuY29udGFpbmVyKCksIGUub2Zmc2V0KCkpOwogICAgfSksIG4gJiYgci5jb2xsYXBzZSghMCksIFNmKHQsIHIpID8gdmUubm9uZSgpIDogdmUuc29tZShyKTsKICB9CgogIGZ1bmN0aW9uIERmKGUsIHQpIHsKICAgIHJldHVybiBlLnNwbGl0VGV4dCh0KTsKICB9CgogIGZ1bmN0aW9uIFRmKGUpIHsKICAgIHZhciB0ID0gZS5zdGFydENvbnRhaW5lciwKICAgICAgICBuID0gZS5zdGFydE9mZnNldCwKICAgICAgICByID0gZS5lbmRDb250YWluZXIsCiAgICAgICAgbyA9IGUuZW5kT2Zmc2V0OwogICAgcmV0dXJuIHQgPT09IHIgJiYgam4odCkgPyAwIDwgbiAmJiBuIDwgdC5ub2RlVmFsdWUubGVuZ3RoICYmICh0ID0gKHIgPSBEZih0LCBuKSkucHJldmlvdXNTaWJsaW5nLCBuIDwgbyA/ICh0ID0gciA9IERmKHIsIG8gLT0gbikucHJldmlvdXNTaWJsaW5nLCBvID0gci5ub2RlVmFsdWUubGVuZ3RoLCBuID0gMCkgOiBvID0gMCkgOiAoam4odCkgJiYgMCA8IG4gJiYgbiA8IHQubm9kZVZhbHVlLmxlbmd0aCAmJiAodCA9IERmKHQsIG4pLCBuID0gMCksIGpuKHIpICYmIDAgPCBvICYmIG8gPCByLm5vZGVWYWx1ZS5sZW5ndGggJiYgKG8gPSAociA9IERmKHIsIG8pLnByZXZpb3VzU2libGluZykubm9kZVZhbHVlLmxlbmd0aCkpLCB7CiAgICAgIHN0YXJ0Q29udGFpbmVyOiB0LAogICAgICBzdGFydE9mZnNldDogbiwKICAgICAgZW5kQ29udGFpbmVyOiByLAogICAgICBlbmRPZmZzZXQ6IG8KICAgIH07CiAgfQoKICBmdW5jdGlvbiBPZihuKSB7CiAgICByZXR1cm4gewogICAgICB3YWxrOiBmdW5jdGlvbiB3YWxrKGUsIHQpIHsKICAgICAgICByZXR1cm4gRWwobiwgZSwgdCk7CiAgICAgIH0sCiAgICAgIHNwbGl0OiBUZiwKICAgICAgbm9ybWFsaXplOiBmdW5jdGlvbiBub3JtYWxpemUodCkgewogICAgICAgIHJldHVybiBSZihuLCB0KS5mb2xkKFIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gdC5zZXRTdGFydChlLnN0YXJ0Q29udGFpbmVyLCBlLnN0YXJ0T2Zmc2V0KSwgdC5zZXRFbmQoZS5lbmRDb250YWluZXIsIGUuZW5kT2Zmc2V0KSwgITA7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CiAgfQoKICBGbC5pc0Jvb2ttYXJrTm9kZSA9IFljOwogIHZhciBCZiA9IHsKICAgIEJBQ0tTUEFDRTogOCwKICAgIERFTEVURTogNDYsCiAgICBET1dOOiA0MCwKICAgIEVOVEVSOiAxMywKICAgIEVTQzogMjcsCiAgICBMRUZUOiAzNywKICAgIFJJR0hUOiAzOSwKICAgIFNQQUNFQkFSOiAzMiwKICAgIFRBQjogOSwKICAgIFVQOiAzOCwKICAgIFBBR0VfVVA6IDMzLAogICAgUEFHRV9ET1dOOiAzNCwKICAgIEVORDogMzUsCiAgICBIT01FOiAzNiwKICAgIG1vZGlmaWVyUHJlc3NlZDogZnVuY3Rpb24gbW9kaWZpZXJQcmVzc2VkKGUpIHsKICAgICAgcmV0dXJuIGUuc2hpZnRLZXkgfHwgZS5jdHJsS2V5IHx8IGUuYWx0S2V5IHx8IEJmLm1ldGFLZXlQcmVzc2VkKGUpOwogICAgfSwKICAgIG1ldGFLZXlQcmVzc2VkOiBmdW5jdGlvbiBtZXRhS2V5UHJlc3NlZChlKSB7CiAgICAgIHJldHVybiB4dC5tYWMgPyBlLm1ldGFLZXkgOiBlLmN0cmxLZXkgJiYgIWUuYWx0S2V5OwogICAgfQogIH0sCiAgICAgIFBmID0gWW47CiAgT2YuY29tcGFyZVJhbmdlcyA9IFNmLCBPZi5nZXRDYXJldFJhbmdlRnJvbVBvaW50ID0gd2YsIE9mLmdldFNlbGVjdGVkTm9kZSA9IE91LCBPZi5nZXROb2RlID0gQnU7CiAgdmFyIExmLAogICAgICBJZiwKICAgICAgTWYgPSAoTGYgPSAiaGVpZ2h0IiwgSWYgPSBmdW5jdGlvbiBJZihlKSB7CiAgICB2YXIgdCA9IGUuZG9tOwogICAgcmV0dXJuIEluKGUpID8gdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgOiB0Lm9mZnNldEhlaWdodDsKICB9LCB7CiAgICBzZXQ6IGZ1bmN0aW9uIHNldChlLCB0KSB7CiAgICAgIGlmICghRSh0KSAmJiAhdC5tYXRjaCgvXlswLTldKyQvKSkgdGhyb3cgbmV3IEVycm9yKExmICsgIi5zZXQgYWNjZXB0cyBvbmx5IHBvc2l0aXZlIGludGVnZXIgdmFsdWVzLiBWYWx1ZSB3YXMgIiArIHQpOwogICAgICB2YXIgbiA9IGUuZG9tOwogICAgICBtbihuKSAmJiAobi5zdHlsZVtMZl0gPSB0ICsgInB4Iik7CiAgICB9LAogICAgZ2V0OiBGZiwKICAgIGdldE91dGVyOiBGZiwKICAgIGFnZ3JlZ2F0ZTogVWYsCiAgICBtYXg6IGZ1bmN0aW9uIG1heChlLCB0LCBuKSB7CiAgICAgIHZhciByID0gVWYoZSwgbik7CiAgICAgIHJldHVybiByIDwgdCA/IHQgLSByIDogMDsKICAgIH0KICB9KTsKCiAgZnVuY3Rpb24gRmYoZSkgewogICAgdmFyIHQgPSBJZihlKTsKCiAgICBpZiAodCA8PSAwIHx8IG51bGwgPT09IHQpIHsKICAgICAgdmFyIG4gPSB4bihlLCBMZik7CiAgICAgIHJldHVybiBwYXJzZUZsb2F0KG4pIHx8IDA7CiAgICB9CgogICAgcmV0dXJuIHQ7CiAgfQoKICBmdW5jdGlvbiBVZihvLCBlKSB7CiAgICByZXR1cm4gTChlLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiA9IHhuKG8sIHQpLAogICAgICAgICAgciA9IHZvaWQgMCA9PT0gbiA/IDAgOiBwYXJzZUludChuLCAxMCk7CiAgICAgIHJldHVybiBpc05hTihyKSA/IGUgOiBlICsgcjsKICAgIH0sIDApOwogIH0KCiAgZnVuY3Rpb24gemYoZSkgewogICAgcmV0dXJuICJ0ZXh0YXJlYSIgPT09IGt0KGUpOwogIH0KCiAgZnVuY3Rpb24gSGYoZSwgdCkgewogICAgdmFyIG4gPSBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCA9IGUuZG9tLm93bmVyRG9jdW1lbnQsCiAgICAgICAgICBuID0gdC5ib2R5LAogICAgICAgICAgciA9IHQuZGVmYXVsdFZpZXcsCiAgICAgICAgICBvID0gdC5kb2N1bWVudEVsZW1lbnQ7CiAgICAgIGlmIChuID09PSBlLmRvbSkgcmV0dXJuIEZuKG4ub2Zmc2V0TGVmdCwgbi5vZmZzZXRUb3ApOwogICAgICB2YXIgaSA9IEd0KG51bGwgPT0gciA/IHZvaWQgMCA6IHIucGFnZVlPZmZzZXQsIG8uc2Nyb2xsVG9wKSwKICAgICAgICAgIGEgPSBHdChudWxsID09IHIgPyB2b2lkIDAgOiByLnBhZ2VYT2Zmc2V0LCBvLnNjcm9sbExlZnQpLAogICAgICAgICAgdSA9IEd0KG8uY2xpZW50VG9wLCBuLmNsaWVudFRvcCksCiAgICAgICAgICBzID0gR3Qoby5jbGllbnRMZWZ0LCBuLmNsaWVudExlZnQpOwogICAgICByZXR1cm4gVW4oZSkudHJhbnNsYXRlKGEgLSBzLCBpIC0gdSk7CiAgICB9KGUpLAogICAgICAgIHIgPSBNZi5nZXQoZSk7CgogICAgcmV0dXJuIHsKICAgICAgZWxlbWVudDogZSwKICAgICAgYm90dG9tOiBuLnRvcCArIHIsCiAgICAgIGhlaWdodDogciwKICAgICAgcG9zOiBuLAogICAgICBjbGVhbnVwOiB0CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gamYobiwgciwgbywgaSkgewogICAgUmQobiwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgcmV0dXJuIEFkKG4sIHIsIG8sIGkpOwogICAgfSwgbyk7CiAgfQoKICBmdW5jdGlvbiBWZihlLCB0LCBuLCByLCBvKSB7CiAgICB2YXIgaSA9IHsKICAgICAgZWxtOiByLmVsZW1lbnQuZG9tLAogICAgICBhbGlnblRvVG9wOiBvCiAgICB9OwogICAgZS5maXJlKCJTY3JvbGxJbnRvVmlldyIsIGkpLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IChuKHQsIEp0KHQpLnRvcCwgciwgbyksIGUuZmlyZSgiQWZ0ZXJTY3JvbGxJbnRvVmlldyIsIGkpKTsKICB9CgogIGZ1bmN0aW9uIHFmKGUsIHQsIG4sIHIpIHsKICAgIHZhciBvID0gTnQuZnJvbURvbShlLmdldERvYygpKTsKICAgIFZmKGUsIG8sIG4sIEhmKE50LmZyb21Eb20odCksIHRlKSwgcik7CiAgfQoKICBmdW5jdGlvbiAkZihlLCB0LCBuLCByKSB7CiAgICB2YXIgbywKICAgICAgICBpID0gZS5wb3M7CiAgICBuID8gUXQoaS5sZWZ0LCBpLnRvcCwgcikgOiAobyA9IGkudG9wIC0gdCArIGUuaGVpZ2h0LCBRdChpLmxlZnQsIG8sIHIpKTsKICB9CgogIGZ1bmN0aW9uIFdmKGUsIHQsIG4sIHIsIG8pIHsKICAgIHZhciBpID0gbiArIHQsCiAgICAgICAgYSA9IHIucG9zLnRvcCwKICAgICAgICB1ID0gci5ib3R0b20sCiAgICAgICAgcyA9IG4gPD0gdSAtIGE7CiAgICBhIDwgdCA/ICRmKHIsIG4sICExICE9PSBvLCBlKSA6IGkgPCBhID8gJGYociwgbiwgcyA/ICExICE9PSBvIDogITAgPT09IG8sIGUpIDogaSA8IHUgJiYgIXMgJiYgJGYociwgbiwgITAgPT09IG8sIGUpOwogIH0KCiAgZnVuY3Rpb24gS2YoZSwgdCwgbiwgcikgewogICAgV2YoZSwgdCwgZS5kb20uZGVmYXVsdFZpZXcuaW5uZXJIZWlnaHQsIG4sIHIpOwogIH0KCiAgZnVuY3Rpb24gWGYoZSwgdCwgbiwgcikgewogICAgV2YoZSwgdCwgZS5kb20uZGVmYXVsdFZpZXcuaW5uZXJIZWlnaHQsIG4sIHIpOwogICAgdmFyIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgcywKICAgICAgICBjLAogICAgICAgIGwsCiAgICAgICAgZiA9IChvID0gbi5lbGVtZW50LCB1ID0gSnQoTnQuZnJvbURvbShkb2N1bWVudCkpLCBhID0gKGkgPSBfZCkub3duZXIobyksIHMgPSBrZChpLCBhKSwgYyA9IFVuKG8pLCBsID0gUChzLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiA9IFVuKHQpOwogICAgICByZXR1cm4gewogICAgICAgIGxlZnQ6IGUubGVmdCArIG4ubGVmdCwKICAgICAgICB0b3A6IGUudG9wICsgbi50b3AKICAgICAgfTsKICAgIH0sIHsKICAgICAgbGVmdDogMCwKICAgICAgdG9wOiAwCiAgICB9KSwgRm4obC5sZWZ0ICsgYy5sZWZ0ICsgdS5sZWZ0LCBsLnRvcCArIGMudG9wICsgdS50b3ApKSwKICAgICAgICBkID0gdG4od2luZG93KTsKICAgIGYudG9wIDwgZC55ID8gWnQobi5lbGVtZW50LCAhMSAhPT0gcikgOiBmLnRvcCA+IGQuYm90dG9tICYmIFp0KG4uZWxlbWVudCwgITAgPT09IHIpOwogIH0KCiAgZnVuY3Rpb24gWWYoZSwgdCwgbikgewogICAgcmV0dXJuIGpmKGUsIEtmLCB0LCBuKTsKICB9CgogIGZ1bmN0aW9uIEdmKGUsIHQsIG4pIHsKICAgIHJldHVybiBxZihlLCB0LCBLZiwgbik7CiAgfQoKICBmdW5jdGlvbiBKZihlLCB0LCBuKSB7CiAgICByZXR1cm4gamYoZSwgWGYsIHQsIG4pOwogIH0KCiAgZnVuY3Rpb24gUWYoZSwgdCwgbikgewogICAgcmV0dXJuIHFmKGUsIHQsIFhmLCBuKTsKICB9CgogIGZ1bmN0aW9uIFpmKGUsIHQsIG4pIHsKICAgIChlLmlubGluZSA/IFlmIDogSmYpKGUsIHQsIG4pOwogIH0KCiAgZnVuY3Rpb24gZWQoZSkgewogICAgdmFyIHQgPSBCbihlKS5kb207CiAgICByZXR1cm4gZS5kb20gPT09IHQuYWN0aXZlRWxlbWVudDsKICB9CgogIGZ1bmN0aW9uIHRkKGUpIHsKICAgIHJldHVybiB2b2lkIDAgPT09IGUgJiYgKGUgPSBOdC5mcm9tRG9tKGRvY3VtZW50KSksIHZlLmZyb20oZS5kb20uYWN0aXZlRWxlbWVudCkubWFwKE50LmZyb21Eb20pOwogIH0KCiAgZnVuY3Rpb24gbmQoZSwgdCkgewogICAgdmFyIG4gPSBfbih0KSA/IFBsKHQpLmxlbmd0aCA6IERuKHQpLmxlbmd0aCArIDE7CiAgICByZXR1cm4gbiA8IGUgPyBuIDogZSA8IDAgPyAwIDogZTsKICB9CgogIGZ1bmN0aW9uIHJkKGUpIHsKICAgIHJldHVybiBCZC5yYW5nZShlLnN0YXJ0LCBuZChlLnNvZmZzZXQsIGUuc3RhcnQpLCBlLmZpbmlzaCwgbmQoZS5mb2Zmc2V0LCBlLmZpbmlzaCkpOwogIH0KCiAgZnVuY3Rpb24gb2QoZSwgdCkgewogICAgcmV0dXJuICFybih0LmRvbSkgJiYgKFZlKGUsIHQpIHx8IGplKGUsIHQpKTsKICB9CgogIGZ1bmN0aW9uIGlkKHQpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gb2QodCwgZS5zdGFydCkgJiYgb2QodCwgZS5maW5pc2gpOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIGFkKGUpIHsKICAgIHJldHVybiAhMCA9PT0gZS5pbmxpbmUgfHwgUGQuaXNJRSgpOwogIH0KCiAgZnVuY3Rpb24gdWQoZSkgewogICAgcmV0dXJuIEJkLnJhbmdlKE50LmZyb21Eb20oZS5zdGFydENvbnRhaW5lciksIGUuc3RhcnRPZmZzZXQsIE50LmZyb21Eb20oZS5lbmRDb250YWluZXIpLCBlLmVuZE9mZnNldCk7CiAgfQoKICBmdW5jdGlvbiBzZChlKSB7CiAgICB2YXIgdCA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIHQuc2V0U3RhcnQoZS5zdGFydC5kb20sIGUuc29mZnNldCksIHQuc2V0RW5kKGUuZmluaXNoLmRvbSwgZS5mb2Zmc2V0KSwgdmUuc29tZSh0KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgcmV0dXJuIHZlLm5vbmUoKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNkKGUpIHsKICAgIHZhciB0LAogICAgICAgIG4sCiAgICAgICAgciA9IGFkKGUpID8gKHQgPSBOdC5mcm9tRG9tKGUuZ2V0Qm9keSgpKSwgKChuID0gVHQodCkuZG9tLmdldFNlbGVjdGlvbigpKSAmJiAwICE9PSBuLnJhbmdlQ291bnQgPyB2ZS5mcm9tKG4uZ2V0UmFuZ2VBdCgwKSkgOiB2ZS5ub25lKCkpLm1hcCh1ZCkuZmlsdGVyKGlkKHQpKSkgOiB2ZS5ub25lKCk7CiAgICBlLmJvb2ttYXJrID0gci5pc1NvbWUoKSA/IHIgOiBlLmJvb2ttYXJrOwogIH0KCiAgZnVuY3Rpb24gbGQobikgewogICAgcmV0dXJuIChuLmJvb2ttYXJrIHx8IHZlLm5vbmUoKSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gdCA9IE50LmZyb21Eb20obi5nZXRCb2R5KCkpLCB2ZS5mcm9tKGUpLmZpbHRlcihpZCh0KSkubWFwKHJkKTsKICAgICAgdmFyIHQ7CiAgICB9KS5iaW5kKHNkKTsKICB9CgogIGZ1bmN0aW9uIGZkKHUpIHsKICAgIHZhciBzID0gbHUoZnVuY3Rpb24gKCkgewogICAgICBjZCh1KTsKICAgIH0sIDApOwogICAgdS5vbigiaW5pdCIsIGZ1bmN0aW9uICgpIHsKICAgICAgZnVuY3Rpb24gZSgpIHsKICAgICAgICBuLnRocm90dGxlKCk7CiAgICAgIH0KCiAgICAgIHZhciB0LCBuLCByLCBvLCBpLCBhOwogICAgICB1LmlubGluZSAmJiAodCA9IHUsIG4gPSBzLCBKYS5ET00uYmluZChkb2N1bWVudCwgIm1vdXNldXAiLCBlKSwgdC5vbigicmVtb3ZlIiwgZnVuY3Rpb24gKCkgewogICAgICAgIEphLkRPTS51bmJpbmQoZG9jdW1lbnQsICJtb3VzZXVwIiwgZSk7CiAgICAgIH0pKSwgciA9IHUsIG8gPSBzLCBkdCgpLmJyb3dzZXIuaXNJRSgpID8gKGEgPSByKS5vbigiZm9jdXNvdXQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgY2QoYSk7CiAgICAgIH0pIDogKGkgPSBvLCByLm9uKCJtb3VzZXVwIHRvdWNoZW5kIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICBpLnRocm90dGxlKCk7CiAgICAgIH0pKSwgci5vbigia2V5dXAgTm9kZUNoYW5nZSIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgIm5vZGVjaGFuZ2UiID09PSBlLnR5cGUgJiYgZS5zZWxlY3Rpb25DaGFuZ2UgfHwgY2Qocik7CiAgICAgIH0pOwogICAgfSksIHUub24oInJlbW92ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgcy5jYW5jZWwoKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gZGQodCwgZSkgewogICAgdmFyIG4gPSB0LmdldFBhcmFtKCJjdXN0b21fdWlfc2VsZWN0b3IiLCAiIiwgInN0cmluZyIpOwogICAgcmV0dXJuIG51bGwgIT09IElkLmdldFBhcmVudChlLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gTGQuaXNFZGl0b3JVSUVsZW1lbnQoZSkgfHwgISFuICYmIHQuZG9tLmlzKGUsIG4pOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBtZChuLCBlKSB7CiAgICB2YXIgdCA9IGUuZWRpdG9yOwogICAgZmQodCksIHQub24oImZvY3VzaW4iLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBlID0gbi5mb2N1c2VkRWRpdG9yOwogICAgICBlICE9PSB0ICYmIChlICYmIGUuZmlyZSgiYmx1ciIsIHsKICAgICAgICBmb2N1c2VkRWRpdG9yOiB0CiAgICAgIH0pLCBuLnNldEFjdGl2ZSh0KSwgKG4uZm9jdXNlZEVkaXRvciA9IHQpLmZpcmUoImZvY3VzIiwgewogICAgICAgIGJsdXJyZWRFZGl0b3I6IGUKICAgICAgfSksIHQuZm9jdXMoITApKTsKICAgIH0pLCB0Lm9uKCJmb2N1c291dCIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3Iuc2V0RWRpdG9yVGltZW91dCh0LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGUgPSBuLmZvY3VzZWRFZGl0b3I7CiAgICAgICAgZGQodCwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJldHVybiB0ZChCbihOdC5mcm9tRG9tKGUuZ2V0RWxlbWVudCgpKSkpLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5OwogICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIHJldHVybiBlLmRvbTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5OwogICAgICAgICAgfQogICAgICAgIH0odCkpIHx8IGUgIT09IHQgfHwgKHQuZmlyZSgiYmx1ciIsIHsKICAgICAgICAgIGZvY3VzZWRFZGl0b3I6IG51bGwKICAgICAgICB9KSwgbi5mb2N1c2VkRWRpdG9yID0gbnVsbCk7CiAgICAgIH0pOwogICAgfSksIE5kIHx8IChOZCA9IGZ1bmN0aW9uIE5kKGUpIHsKICAgICAgdmFyIHQgPSBuLmFjdGl2ZUVkaXRvcjsKICAgICAgdCAmJiAhZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoT24oKSAmJiBWKGUudGFyZ2V0KSkgewogICAgICAgICAgdmFyIHQgPSBOdC5mcm9tRG9tKGUudGFyZ2V0KTsKCiAgICAgICAgICBpZiAoa24odCkgJiYgVih0LmRvbS5zaGFkb3dSb290KSAmJiBlLmNvbXBvc2VkICYmIGUuY29tcG9zZWRQYXRoKSB7CiAgICAgICAgICAgIHZhciBuID0gZS5jb21wb3NlZFBhdGgoKTsKICAgICAgICAgICAgaWYgKG4pIHJldHVybiBRKG4pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHZlLmZyb20oZS50YXJnZXQpOwogICAgICB9KGUpLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICBlLm93bmVyRG9jdW1lbnQgPT09IGRvY3VtZW50ICYmIChlID09PSBkb2N1bWVudC5ib2R5IHx8IGRkKHQsIGUpIHx8IG4uZm9jdXNlZEVkaXRvciAhPT0gdCB8fCAodC5maXJlKCJibHVyIiwgewogICAgICAgICAgZm9jdXNlZEVkaXRvcjogbnVsbAogICAgICAgIH0pLCBuLmZvY3VzZWRFZGl0b3IgPSBudWxsKSk7CiAgICAgIH0pOwogICAgfSwgSWQuYmluZChkb2N1bWVudCwgImZvY3VzaW4iLCBOZCkpOwogIH0KCiAgZnVuY3Rpb24gZ2QoZSwgdCkgewogICAgZS5mb2N1c2VkRWRpdG9yID09PSB0LmVkaXRvciAmJiAoZS5mb2N1c2VkRWRpdG9yID0gbnVsbCksIGUuYWN0aXZlRWRpdG9yIHx8IChJZC51bmJpbmQoZG9jdW1lbnQsICJmb2N1c2luIiwgTmQpLCBOZCA9IG51bGwpOwogIH0KCiAgZnVuY3Rpb24gcGQodCwgZSkgewogICAgdmFyIG4sIHI7CiAgICBuID0gTnQuZnJvbURvbSh0LmdldEJvZHkoKSksICgociA9IGUpLmNvbGxhcHNlZCA/IHZlLmZyb20oQnUoci5zdGFydENvbnRhaW5lciwgci5zdGFydE9mZnNldCkpLm1hcChOdC5mcm9tRG9tKSA6IHZlLm5vbmUoKSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gcG8oZSkgPyB2ZS5zb21lKGUpIDogITEgPT09IFZlKG4sIGUpID8gdmUuc29tZShuKSA6IHZlLm5vbmUoKTsKICAgIH0pLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGVmKGUuZG9tKTsKICAgIH0pLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICB0LnNlbGVjdGlvbi5ub3JtYWxpemUoKTsKICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB0LnNlbGVjdGlvbi5zZXRSbmcoZS50b1JhbmdlKCkpOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBoZCh0KSB7CiAgICBpZiAodC5zZXRBY3RpdmUpIHRyeSB7CiAgICAgIHQuc2V0QWN0aXZlKCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHQuZm9jdXMoKTsKICAgIH0gZWxzZSB0LmZvY3VzKCk7CiAgfQoKICBmdW5jdGlvbiB2ZChlKSB7CiAgICByZXR1cm4gZS5pbmxpbmUgPyAociA9IGUuZ2V0Qm9keSgpKSAmJiAoZWQodCA9IE50LmZyb21Eb20ocikpIHx8IHRkKEJuKG4gPSB0KSkuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBuLmRvbS5jb250YWlucyhlLmRvbSk7CiAgICB9KS5pc1NvbWUoKSkgOiBlLmlmcmFtZUVsZW1lbnQgJiYgZWQoTnQuZnJvbURvbShlLmlmcmFtZUVsZW1lbnQpKTsKICAgIHZhciB0LCBuLCByOwogIH0KCiAgZnVuY3Rpb24gYmQoZSwgdCwgbiwgciwgbykgewogICAgdmFyIGkgPSBuID8gdC5zdGFydENvbnRhaW5lciA6IHQuZW5kQ29udGFpbmVyLAogICAgICAgIGEgPSBuID8gdC5zdGFydE9mZnNldCA6IHQuZW5kT2Zmc2V0OwogICAgcmV0dXJuIHZlLmZyb20oaSkubWFwKE50LmZyb21Eb20pLm1hcChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gciAmJiB0LmNvbGxhcHNlZCA/IGUgOiBNdChlLCBvKGUsIGEpKS5nZXRPcihlKTsKICAgIH0pLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGtuKGUpID8gdmUuc29tZShlKSA6IE90KGUpLmZpbHRlcihrbik7CiAgICB9KS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGUuZG9tOwogICAgfSkuZ2V0T3IoZSk7CiAgfQoKICBmdW5jdGlvbiB5ZChlLCB0LCBuKSB7CiAgICByZXR1cm4gYmQoZSwgdCwgITAsIG4sIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHJldHVybiBNYXRoLm1pbih6dChlKSwgdCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIENkKGUsIHQsIG4pIHsKICAgIHJldHVybiBiZChlLCB0LCAhMSwgbiwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgcmV0dXJuIDAgPCB0ID8gdCAtIDEgOiB0OwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiB4ZChlLCB0KSB7CiAgICBmb3IgKHZhciBuID0gZTsgZSAmJiBqbihlKSAmJiAwID09PSBlLmxlbmd0aDspIHsKICAgICAgZSA9IHQgPyBlLm5leHRTaWJsaW5nIDogZS5wcmV2aW91c1NpYmxpbmc7CiAgICB9CgogICAgcmV0dXJuIGUgfHwgbjsKICB9CgogIGZ1bmN0aW9uIHdkKG4sIGUpIHsKICAgIHJldHVybiBUKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gbi5maXJlKCJHZXRTZWxlY3Rpb25SYW5nZSIsIHsKICAgICAgICByYW5nZTogZQogICAgICB9KTsKICAgICAgcmV0dXJuIHQucmFuZ2UgIT09IGUgPyB0LnJhbmdlIDogZTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gU2QoZSwgdCwgbikgewogICAgdmFyIHIgPSBuID8gImxhc3RDaGlsZCIgOiAiZmlyc3RDaGlsZCIsCiAgICAgICAgbyA9IG4gPyAicHJldiIgOiAibmV4dCI7CiAgICBpZiAoZVtyXSkgcmV0dXJuIGVbcl07CgogICAgaWYgKGUgIT09IHQpIHsKICAgICAgdmFyIGkgPSBlW29dOwogICAgICBpZiAoaSkgcmV0dXJuIGk7CgogICAgICBmb3IgKHZhciBhID0gZS5wYXJlbnQ7IGEgJiYgYSAhPT0gdDsgYSA9IGEucGFyZW50KSB7CiAgICAgICAgaWYgKGkgPSBhW29dKSByZXR1cm4gaTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gRWQoZSkgewogICAgdmFyIHQgPSAiYSIgPT09IGUubmFtZSAmJiAhZS5hdHRyKCJocmVmIikgJiYgZS5hdHRyKCJpZCIpOwogICAgcmV0dXJuIGUuYXR0cigibmFtZSIpIHx8IGUuYXR0cigiaWQiKSAmJiAhZS5maXJzdENoaWxkIHx8IGUuYXR0cigiZGF0YS1tY2UtYm9va21hcmsiKSB8fCB0OwogIH0KCiAgdmFyIE5kLAogICAgICBrZCA9IGZ1bmN0aW9uIGtkKHIsIGUpIHsKICAgIHJldHVybiByLnZpZXcoZSkuZm9sZChKKFtdKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSByLm93bmVyKGUpLAogICAgICAgICAgbiA9IGtkKHIsIHQpOwogICAgICByZXR1cm4gW2VdLmNvbmNhdChuKTsKICAgIH0pOwogIH0sCiAgICAgIF9kID0gT2JqZWN0LmZyZWV6ZSh7CiAgICBfX3Byb3RvX186IG51bGwsCiAgICB2aWV3OiBmdW5jdGlvbiB2aWV3KGUpIHsKICAgICAgdmFyIHQ7CiAgICAgIHJldHVybiAoZS5kb20gPT09IGRvY3VtZW50ID8gdmUubm9uZSgpIDogdmUuZnJvbShudWxsID09PSAodCA9IGUuZG9tLmRlZmF1bHRWaWV3KSB8fCB2b2lkIDAgPT09IHQgPyB2b2lkIDAgOiB0LmZyYW1lRWxlbWVudCkpLm1hcChOdC5mcm9tRG9tKTsKICAgIH0sCiAgICBvd25lcjogRHQKICB9KSwKICAgICAgQWQgPSBmdW5jdGlvbiBBZChlLCB0LCBuLCByKSB7CiAgICB2YXIgbyA9IE50LmZyb21Eb20oZS5nZXRCb2R5KCkpLAogICAgICAgIGkgPSBOdC5mcm9tRG9tKGUuZ2V0RG9jKCkpOwogICAgby5kb20ub2Zmc2V0V2lkdGg7CiAgICB2YXIgYSwKICAgICAgICB1LAogICAgICAgIHMsCiAgICAgICAgYywKICAgICAgICBsID0gKGEgPSBOdC5mcm9tRG9tKG4uc3RhcnRDb250YWluZXIpLCB1ID0gbi5zdGFydE9mZnNldCwgcyA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHZhciBuID0gRG4oZSk7CiAgICAgIGlmICgwID09PSBuLmxlbmd0aCB8fCB6ZihlKSkgcmV0dXJuIHsKICAgICAgICBlbGVtZW50OiBlLAogICAgICAgIG9mZnNldDogdAogICAgICB9OwogICAgICBpZiAodCA8IG4ubGVuZ3RoICYmICF6ZihuW3RdKSkgcmV0dXJuIHsKICAgICAgICBlbGVtZW50OiBuW3RdLAogICAgICAgIG9mZnNldDogMAogICAgICB9OwogICAgICB2YXIgciA9IG5bbi5sZW5ndGggLSAxXTsKICAgICAgcmV0dXJuIHpmKHIpID8gewogICAgICAgIGVsZW1lbnQ6IGUsCiAgICAgICAgb2Zmc2V0OiB0CiAgICAgIH0gOiAiaW1nIiA9PT0ga3QocikgPyB7CiAgICAgICAgZWxlbWVudDogciwKICAgICAgICBvZmZzZXQ6IDEKICAgICAgfSA6IF9uKHIpID8gewogICAgICAgIGVsZW1lbnQ6IHIsCiAgICAgICAgb2Zmc2V0OiBQbChyKS5sZW5ndGgKICAgICAgfSA6IHsKICAgICAgICBlbGVtZW50OiByLAogICAgICAgIG9mZnNldDogRG4ocikubGVuZ3RoCiAgICAgIH07CiAgICB9KGEsIHUpLCBjID0gTnQuZnJvbUh0bWwoIjxzcGFuIGRhdGEtbWNlLWJvZ3VzPVwiYWxsXCIgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XCI+XHVGRUZGPC9zcGFuPiIpLCBxdChzLmVsZW1lbnQsIGMpLCBIZihjLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBMbihjKTsKICAgIH0pKTsKICAgIFZmKGUsIGksIHQsIGwsIHIpLCBsLmNsZWFudXAoKTsKICB9LAogICAgICBSZCA9IGZ1bmN0aW9uIFJkKGUsIHQsIG4pIHsKICAgIHZhciByID0gbi5zdGFydENvbnRhaW5lciwKICAgICAgICBvID0gbi5zdGFydE9mZnNldCwKICAgICAgICBpID0gbi5lbmRDb250YWluZXIsCiAgICAgICAgYSA9IG4uZW5kT2Zmc2V0OwogICAgdChOdC5mcm9tRG9tKHIpLCBOdC5mcm9tRG9tKGkpKTsKICAgIHZhciB1ID0gZS5kb20uY3JlYXRlUm5nKCk7CiAgICB1LnNldFN0YXJ0KHIsIG8pLCB1LnNldEVuZChpLCBhKSwgZS5zZWxlY3Rpb24uc2V0Um5nKG4pOwogIH0sCiAgICAgIERkID0gb3IoW3sKICAgIGJlZm9yZTogWyJlbGVtZW50Il0KICB9LCB7CiAgICBvbjogWyJlbGVtZW50IiwgIm9mZnNldCJdCiAgfSwgewogICAgYWZ0ZXI6IFsiZWxlbWVudCJdCiAgfV0pLAogICAgICBUZCA9IChEZC5iZWZvcmUsIERkLm9uLCBEZC5hZnRlciwgZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiBlLmZvbGQodSwgdSwgdSk7CiAgfSksCiAgICAgIE9kID0gb3IoW3sKICAgIGRvbVJhbmdlOiBbInJuZyJdCiAgfSwgewogICAgcmVsYXRpdmU6IFsic3RhcnRTaXR1IiwgImZpbmlzaFNpdHUiXQogIH0sIHsKICAgIGV4YWN0OiBbInN0YXJ0IiwgInNvZmZzZXQiLCAiZmluaXNoIiwgImZvZmZzZXQiXQogIH1dKSwKICAgICAgQmQgPSB7CiAgICBkb21SYW5nZTogT2QuZG9tUmFuZ2UsCiAgICByZWxhdGl2ZTogT2QucmVsYXRpdmUsCiAgICBleGFjdDogT2QuZXhhY3QsCiAgICBleGFjdEZyb21SYW5nZTogZnVuY3Rpb24gZXhhY3RGcm9tUmFuZ2UoZSkgewogICAgICByZXR1cm4gT2QuZXhhY3QoZS5zdGFydCwgZS5zb2Zmc2V0LCBlLmZpbmlzaCwgZS5mb2Zmc2V0KTsKICAgIH0sCiAgICBnZXRXaW46IGZ1bmN0aW9uIGdldFdpbihlKSB7CiAgICAgIHJldHVybiBUdChlLm1hdGNoKHsKICAgICAgICBkb21SYW5nZTogZnVuY3Rpb24gZG9tUmFuZ2UoZSkgewogICAgICAgICAgcmV0dXJuIE50LmZyb21Eb20oZS5zdGFydENvbnRhaW5lcik7CiAgICAgICAgfSwKICAgICAgICByZWxhdGl2ZTogZnVuY3Rpb24gcmVsYXRpdmUoZSwgdCkgewogICAgICAgICAgcmV0dXJuIFRkKGUpOwogICAgICAgIH0sCiAgICAgICAgZXhhY3Q6IGZ1bmN0aW9uIGV4YWN0KGUsIHQsIG4sIHIpIHsKICAgICAgICAgIHJldHVybiBlOwogICAgICAgIH0KICAgICAgfSkpOwogICAgfSwKICAgIHJhbmdlOiBmdW5jdGlvbiByYW5nZShlLCB0LCBuLCByKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgc3RhcnQ6IGUsCiAgICAgICAgc29mZnNldDogdCwKICAgICAgICBmaW5pc2g6IG4sCiAgICAgICAgZm9mZnNldDogcgogICAgICB9OwogICAgfQogIH0sCiAgICAgIFBkID0gZHQoKS5icm93c2VyLAogICAgICBMZCA9IHsKICAgIGlzRWRpdG9yVUlFbGVtZW50OiBmdW5jdGlvbiBpc0VkaXRvclVJRWxlbWVudChlKSB7CiAgICAgIHZhciB0ID0gZS5jbGFzc05hbWUudG9TdHJpbmcoKTsKICAgICAgcmV0dXJuIC0xICE9PSB0LmluZGV4T2YoInRveC0iKSB8fCAtMSAhPT0gdC5pbmRleE9mKCJtY2UtIik7CiAgICB9CiAgfSwKICAgICAgSWQgPSBKYS5ET00sCiAgICAgIE1kID0gZnVuY3Rpb24gTWQoZSkgewogICAgcmV0dXJuIGUuZWRpdG9yTWFuYWdlci5zZXRBY3RpdmUoZSk7CiAgfSwKICAgICAgRmQgPSB7CiAgICAiI3RleHQiOiAzLAogICAgIiNjb21tZW50IjogOCwKICAgICIjY2RhdGEiOiA0LAogICAgIiNwaSI6IDcsCiAgICAiI2RvY3R5cGUiOiAxMCwKICAgICIjZG9jdW1lbnQtZnJhZ21lbnQiOiAxMQogIH0sCiAgICAgIFVkID0gKHpkLmNyZWF0ZSA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICB2YXIgbiA9IG5ldyB6ZChlLCBGZFtlXSB8fCAxKTsKICAgIHJldHVybiB0ICYmIG5lKHQsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIG4uYXR0cih0LCBlKTsKICAgIH0pLCBuOwogIH0sIHpkLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiBlLnBhcmVudCAmJiBlLnJlbW92ZSgpLCB0aGlzLmluc2VydChlLCB0aGlzKSwgdGhpcy5yZW1vdmUoKSwgdGhpczsKICB9LCB6ZC5wcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICB2YXIgbiwKICAgICAgICByID0gdGhpczsKICAgIGlmICgic3RyaW5nIiAhPSB0eXBlb2YgZSkgcmV0dXJuIG51bGwgIT0gZSAmJiBuZShlLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICByLmF0dHIodCwgZSk7CiAgICB9KSwgcjsKCiAgICBpZiAobiA9IHIuYXR0cmlidXRlcykgewogICAgICBpZiAodm9pZCAwID09PSB0KSByZXR1cm4gbi5tYXBbZV07CgogICAgICBpZiAobnVsbCA9PT0gdCkgewogICAgICAgIGlmIChlIGluIG4ubWFwKSB7CiAgICAgICAgICBkZWxldGUgbi5tYXBbZV07CgogICAgICAgICAgZm9yICh2YXIgbyA9IG4ubGVuZ3RoOyBvLS07KSB7CiAgICAgICAgICAgIGlmIChuW29dLm5hbWUgPT09IGUpIHJldHVybiBuLnNwbGljZShvLCAxKSwgcjsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiByOwogICAgICB9CgogICAgICBpZiAoZSBpbiBuLm1hcCkgewogICAgICAgIGZvciAobyA9IG4ubGVuZ3RoOyBvLS07KSB7CiAgICAgICAgICBpZiAobltvXS5uYW1lID09PSBlKSB7CiAgICAgICAgICAgIG5bb10udmFsdWUgPSB0OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSBuLnB1c2goewogICAgICAgIG5hbWU6IGUsCiAgICAgICAgdmFsdWU6IHQKICAgICAgfSk7CgogICAgICByZXR1cm4gbi5tYXBbZV0gPSB0LCByOwogICAgfQogIH0sIHpkLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlLAogICAgICAgIHQgPSBuZXcgemQodGhpcy5uYW1lLCB0aGlzLnR5cGUpOwoKICAgIGlmIChlID0gdGhpcy5hdHRyaWJ1dGVzKSB7CiAgICAgIHZhciBuID0gW107CiAgICAgIG4ubWFwID0ge307CgogICAgICBmb3IgKHZhciByID0gMCwgbyA9IGUubGVuZ3RoOyByIDwgbzsgcisrKSB7CiAgICAgICAgdmFyIGkgPSBlW3JdOwogICAgICAgICJpZCIgIT09IGkubmFtZSAmJiAobltuLmxlbmd0aF0gPSB7CiAgICAgICAgICBuYW1lOiBpLm5hbWUsCiAgICAgICAgICB2YWx1ZTogaS52YWx1ZQogICAgICAgIH0sIG4ubWFwW2kubmFtZV0gPSBpLnZhbHVlKTsKICAgICAgfQoKICAgICAgdC5hdHRyaWJ1dGVzID0gbjsKICAgIH0KCiAgICByZXR1cm4gdC52YWx1ZSA9IHRoaXMudmFsdWUsIHQuc2hvcnRFbmRlZCA9IHRoaXMuc2hvcnRFbmRlZCwgdDsKICB9LCB6ZC5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gdGhpcy5wYXJlbnQuaW5zZXJ0KGUsIHRoaXMpLCBlLmFwcGVuZCh0aGlzKSwgdGhpczsKICB9LCB6ZC5wcm90b3R5cGUudW53cmFwID0gZnVuY3Rpb24gKCkgewogICAgZm9yICh2YXIgZSA9IHRoaXMuZmlyc3RDaGlsZDsgZTspIHsKICAgICAgdmFyIHQgPSBlLm5leHQ7CiAgICAgIHRoaXMuaW5zZXJ0KGUsIHRoaXMsICEwKSwgZSA9IHQ7CiAgICB9CgogICAgdGhpcy5yZW1vdmUoKTsKICB9LCB6ZC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGUgPSB0aGlzLnBhcmVudCwKICAgICAgICB0ID0gdGhpcy5uZXh0LAogICAgICAgIG4gPSB0aGlzLnByZXY7CiAgICByZXR1cm4gZSAmJiAoZS5maXJzdENoaWxkID09PSB0aGlzID8gKGUuZmlyc3RDaGlsZCA9IHQpICYmICh0LnByZXYgPSBudWxsKSA6IG4ubmV4dCA9IHQsIGUubGFzdENoaWxkID09PSB0aGlzID8gKGUubGFzdENoaWxkID0gbikgJiYgKG4ubmV4dCA9IG51bGwpIDogdC5wcmV2ID0gbiwgdGhpcy5wYXJlbnQgPSB0aGlzLm5leHQgPSB0aGlzLnByZXYgPSBudWxsKSwgdGhpczsKICB9LCB6ZC5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKGUpIHsKICAgIGUucGFyZW50ICYmIGUucmVtb3ZlKCk7CiAgICB2YXIgdCA9IHRoaXMubGFzdENoaWxkOwogICAgcmV0dXJuIHQgPyAoKHQubmV4dCA9IGUpLnByZXYgPSB0LCB0aGlzLmxhc3RDaGlsZCA9IGUpIDogdGhpcy5sYXN0Q2hpbGQgPSB0aGlzLmZpcnN0Q2hpbGQgPSBlLCBlLnBhcmVudCA9IHRoaXMsIGU7CiAgfSwgemQucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICBlLnBhcmVudCAmJiBlLnJlbW92ZSgpOwogICAgdmFyIHIgPSB0LnBhcmVudCB8fCB0aGlzOwogICAgcmV0dXJuIG4gPyAodCA9PT0gci5maXJzdENoaWxkID8gci5maXJzdENoaWxkID0gZSA6IHQucHJldi5uZXh0ID0gZSwgZS5wcmV2ID0gdC5wcmV2LCAoZS5uZXh0ID0gdCkucHJldiA9IGUpIDogKHQgPT09IHIubGFzdENoaWxkID8gci5sYXN0Q2hpbGQgPSBlIDogdC5uZXh0LnByZXYgPSBlLCBlLm5leHQgPSB0Lm5leHQsIChlLnByZXYgPSB0KS5uZXh0ID0gZSksIGUucGFyZW50ID0gciwgZTsKICB9LCB6ZC5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24gKGUpIHsKICAgIGZvciAodmFyIHQgPSBbXSwgbiA9IHRoaXMuZmlyc3RDaGlsZDsgbjsgbiA9IFNkKG4sIHRoaXMpKSB7CiAgICAgIG4ubmFtZSA9PT0gZSAmJiB0LnB1c2gobik7CiAgICB9CgogICAgcmV0dXJuIHQ7CiAgfSwgemQucHJvdG90eXBlLmNoaWxkcmVuID0gZnVuY3Rpb24gKCkgewogICAgZm9yICh2YXIgZSA9IFtdLCB0ID0gdGhpcy5maXJzdENoaWxkOyB0OyB0ID0gdC5uZXh0KSB7CiAgICAgIGUucHVzaCh0KTsKICAgIH0KCiAgICByZXR1cm4gZTsKICB9LCB6ZC5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAodGhpcy5maXJzdENoaWxkKSB7CiAgICAgIGZvciAodmFyIGUgPSBbXSwgdCA9IHRoaXMuZmlyc3RDaGlsZDsgdDsgdCA9IFNkKHQsIHRoaXMpKSB7CiAgICAgICAgZS5wdXNoKHQpOwogICAgICB9CgogICAgICBmb3IgKHZhciBuID0gZS5sZW5ndGg7IG4tLTspIHsKICAgICAgICAodCA9IGVbbl0pLnBhcmVudCA9IHQuZmlyc3RDaGlsZCA9IHQubGFzdENoaWxkID0gdC5uZXh0ID0gdC5wcmV2ID0gbnVsbDsKICAgICAgfQogICAgfQoKICAgIHJldHVybiB0aGlzLmZpcnN0Q2hpbGQgPSB0aGlzLmxhc3RDaGlsZCA9IG51bGwsIHRoaXM7CiAgfSwgemQucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgdm9pZCAwID09PSB0ICYmICh0ID0ge30pOwogICAgdmFyIHIgPSB0aGlzLmZpcnN0Q2hpbGQ7CiAgICBpZiAoRWQodGhpcykpIHJldHVybiAhMTsKICAgIGlmIChyKSBkbyB7CiAgICAgIGlmICgxID09PSByLnR5cGUpIHsKICAgICAgICBpZiAoci5hdHRyKCJkYXRhLW1jZS1ib2d1cyIpKSBjb250aW51ZTsKICAgICAgICBpZiAoZVtyLm5hbWVdKSByZXR1cm4gITE7CiAgICAgICAgaWYgKEVkKHIpKSByZXR1cm4gITE7CiAgICAgIH0KCiAgICAgIGlmICg4ID09PSByLnR5cGUpIHJldHVybiAhMTsKICAgICAgaWYgKDMgPT09IHIudHlwZSAmJiAhZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAocXIoZS52YWx1ZSkpIHsKICAgICAgICAgIHZhciB0ID0gZS5wYXJlbnQ7CiAgICAgICAgICByZXR1cm4gIXQgfHwgInNwYW4iID09PSB0Lm5hbWUgJiYgIXQuYXR0cigic3R5bGUiKSB8fCAhL15bIF0rJC8udGVzdChlLnZhbHVlKTsKICAgICAgICB9CiAgICAgIH0ocikpIHJldHVybiAhMTsKICAgICAgaWYgKDMgPT09IHIudHlwZSAmJiByLnBhcmVudCAmJiB0W3IucGFyZW50Lm5hbWVdICYmIHFyKHIudmFsdWUpKSByZXR1cm4gITE7CiAgICAgIGlmIChuICYmIG4ocikpIHJldHVybiAhMTsKICAgIH0gd2hpbGUgKHIgPSBTZChyLCB0aGlzKSk7CiAgICByZXR1cm4gITA7CiAgfSwgemQucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiAoZSkgewogICAgcmV0dXJuIFNkKHRoaXMsIG51bGwsIGUpOwogIH0sIHpkKTsKCiAgZnVuY3Rpb24gemQoZSwgdCkgewogICAgdGhpcy5uYW1lID0gZSwgMSA9PT0gKHRoaXMudHlwZSA9IHQpICYmICh0aGlzLmF0dHJpYnV0ZXMgPSBbXSwgdGhpcy5hdHRyaWJ1dGVzLm1hcCA9IHt9KTsKICB9CgogIGZ1bmN0aW9uIEhkKGUsIHQpIHsKICAgIHJldHVybiBlLnJlcGxhY2UodC5yZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHVlKHQudXJpcywgZSkuZ2V0T3IoZSk7CiAgICB9KTsKICB9CgogIHZhciBqZCA9IEV0LmVhY2gsCiAgICAgIFZkID0gRXQudHJpbSwKICAgICAgcWQgPSAic291cmNlIHByb3RvY29sIGF1dGhvcml0eSB1c2VySW5mbyB1c2VyIHBhc3N3b3JkIGhvc3QgcG9ydCByZWxhdGl2ZSBwYXRoIGRpcmVjdG9yeSBmaWxlIHF1ZXJ5IGFuY2hvciIuc3BsaXQoIiAiKSwKICAgICAgJGQgPSB7CiAgICBmdHA6IDIxLAogICAgaHR0cDogODAsCiAgICBodHRwczogNDQzLAogICAgbWFpbHRvOiAyNQogIH0sCiAgICAgIFdkID0gWyJpbWciLCAidmlkZW8iXSwKICAgICAgS2QgPSAoWGQucGFyc2VEYXRhVXJpID0gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0LAogICAgICAgIG4gPSBkZWNvZGVVUklDb21wb25lbnQoZSkuc3BsaXQoIiwiKSwKICAgICAgICByID0gL2RhdGE6KFteO10rKS8uZXhlYyhuWzBdKTsKICAgIHJldHVybiB7CiAgICAgIHR5cGU6IHQgPSByID8gclsxXSA6IHQsCiAgICAgIGRhdGE6IG5bMV0KICAgIH07CiAgfSwgWGQuaXNEb21TYWZlID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgIGlmICgobiA9IHZvaWQgMCA9PT0gbiA/IHt9IDogbikuYWxsb3dfc2NyaXB0X3VybHMpIHJldHVybiAhMDsKICAgIHZhciByLAogICAgICAgIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUgPSBHby5kZWNvZGUoZSkucmVwbGFjZSgvW1xzXHUwMDAwLVx1MDAxRl0rL2csICIiKTsKCiAgICB0cnkgewogICAgICB1ID0gZGVjb2RlVVJJQ29tcG9uZW50KHUpOwogICAgfSBjYXRjaCAoZSkgewogICAgICB1ID0gdW5lc2NhcGUodSk7CiAgICB9CgogICAgcmV0dXJuICEoLygoamF2YXx2YilzY3JpcHR8bWh0bWwpOi9pLnRlc3QodSkgfHwgKG8gPSB1LCBpID0gdCwgIShyID0gbikuYWxsb3dfaHRtbF9kYXRhX3VybHMgJiYgKC9eZGF0YTppbWFnZVwvL2kudGVzdChvKSA/IChWKGEgPSByLmFsbG93X3N2Z19kYXRhX3VybHMpID8gIWEgOiAhVihpKSB8fCAhRChXZCwgaSkpICYmIC9eZGF0YTppbWFnZVwvc3ZnXCt4bWwvaS50ZXN0KG8pIDogL15kYXRhOi9pLnRlc3QobykpKSk7CiAgfSwgWGQuZ2V0RG9jdW1lbnRCYXNlVXJsID0gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0ID0gMCAhPT0gZS5wcm90b2NvbC5pbmRleE9mKCJodHRwIikgJiYgImZpbGU6IiAhPT0gZS5wcm90b2NvbCA/IGUuaHJlZiA6IGUucHJvdG9jb2wgKyAiLy8iICsgZS5ob3N0ICsgZS5wYXRobmFtZTsKICAgIHJldHVybiAvXlteOl0rOlwvXC9cLz9bXlwvXStcLy8udGVzdCh0KSAmJiAodCA9IHQucmVwbGFjZSgvW1w/I10uKiQvLCAiIikucmVwbGFjZSgvW1wvXFxdW15cL10rJC8sICIiKSwgL1tcL1xcXSQvLnRlc3QodCkgfHwgKHQgKz0gIi8iKSksIHQ7CiAgfSwgWGQucHJvdG90eXBlLnNldFBhdGggPSBmdW5jdGlvbiAoZSkgewogICAgdmFyIHQgPSAvXiguKj8pXC8/KFx3Kyk/JC8uZXhlYyhlKTsKICAgIHRoaXMucGF0aCA9IHRbMF0sIHRoaXMuZGlyZWN0b3J5ID0gdFsxXSwgdGhpcy5maWxlID0gdFsyXSwgdGhpcy5zb3VyY2UgPSAiIiwgdGhpcy5nZXRVUkkoKTsKICB9LCBYZC5wcm90b3R5cGUudG9SZWxhdGl2ZSA9IGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgdDsKICAgIGlmICgiLi8iID09PSBlKSByZXR1cm4gZTsKICAgIHZhciBuID0gbmV3IFhkKGUsIHsKICAgICAgYmFzZV91cmk6IHRoaXMKICAgIH0pOwogICAgaWYgKCJtY2VfaG9zdCIgIT09IG4uaG9zdCAmJiB0aGlzLmhvc3QgIT09IG4uaG9zdCAmJiBuLmhvc3QgfHwgdGhpcy5wb3J0ICE9PSBuLnBvcnQgfHwgdGhpcy5wcm90b2NvbCAhPT0gbi5wcm90b2NvbCAmJiAiIiAhPT0gbi5wcm90b2NvbCkgcmV0dXJuIG4uZ2V0VVJJKCk7CiAgICB2YXIgciA9IHRoaXMuZ2V0VVJJKCksCiAgICAgICAgbyA9IG4uZ2V0VVJJKCk7CiAgICByZXR1cm4gciA9PT0gbyB8fCAiLyIgPT09IHIuY2hhckF0KHIubGVuZ3RoIC0gMSkgJiYgci5zdWJzdHIoMCwgci5sZW5ndGggLSAxKSA9PT0gbyA/IHIgOiAodCA9IHRoaXMudG9SZWxQYXRoKHRoaXMucGF0aCwgbi5wYXRoKSwgbi5xdWVyeSAmJiAodCArPSAiPyIgKyBuLnF1ZXJ5KSwgbi5hbmNob3IgJiYgKHQgKz0gIiMiICsgbi5hbmNob3IpLCB0KTsKICB9LCBYZC5wcm90b3R5cGUudG9BYnNvbHV0ZSA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICB2YXIgbiA9IG5ldyBYZChlLCB7CiAgICAgIGJhc2VfdXJpOiB0aGlzCiAgICB9KTsKICAgIHJldHVybiBuLmdldFVSSSh0ICYmIHRoaXMuaXNTYW1lT3JpZ2luKG4pKTsKICB9LCBYZC5wcm90b3R5cGUuaXNTYW1lT3JpZ2luID0gZnVuY3Rpb24gKGUpIHsKICAgIGlmICh0aGlzLmhvc3QgPT0gZS5ob3N0ICYmIHRoaXMucHJvdG9jb2wgPT0gZS5wcm90b2NvbCkgewogICAgICBpZiAodGhpcy5wb3J0ID09IGUucG9ydCkgcmV0dXJuICEwOwogICAgICB2YXIgdCA9ICRkW3RoaXMucHJvdG9jb2xdOwogICAgICBpZiAodCAmJiAodGhpcy5wb3J0IHx8IHQpID09IChlLnBvcnQgfHwgdCkpIHJldHVybiAhMDsKICAgIH0KCiAgICByZXR1cm4gITE7CiAgfSwgWGQucHJvdG90eXBlLnRvUmVsUGF0aCA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICB2YXIgbiwKICAgICAgICByLAogICAgICAgIG8gPSAwLAogICAgICAgIGkgPSAiIiwKICAgICAgICBhID0gZS5zdWJzdHJpbmcoMCwgZS5sYXN0SW5kZXhPZigiLyIpKS5zcGxpdCgiLyIpLAogICAgICAgIHUgPSB0LnNwbGl0KCIvIik7CiAgICBpZiAoYS5sZW5ndGggPj0gdS5sZW5ndGgpIGZvciAobiA9IDAsIHIgPSBhLmxlbmd0aDsgbiA8IHI7IG4rKykgewogICAgICBpZiAobiA+PSB1Lmxlbmd0aCB8fCBhW25dICE9PSB1W25dKSB7CiAgICAgICAgbyA9IG4gKyAxOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgICBpZiAoYS5sZW5ndGggPCB1Lmxlbmd0aCkgZm9yIChuID0gMCwgciA9IHUubGVuZ3RoOyBuIDwgcjsgbisrKSB7CiAgICAgIGlmIChuID49IGEubGVuZ3RoIHx8IGFbbl0gIT09IHVbbl0pIHsKICAgICAgICBvID0gbiArIDE7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGlmICgxID09PSBvKSByZXR1cm4gdDsKCiAgICBmb3IgKG4gPSAwLCByID0gYS5sZW5ndGggLSAobyAtIDEpOyBuIDwgcjsgbisrKSB7CiAgICAgIGkgKz0gIi4uLyI7CiAgICB9CgogICAgZm9yIChuID0gbyAtIDEsIHIgPSB1Lmxlbmd0aDsgbiA8IHI7IG4rKykgewogICAgICBpICs9IG4gIT09IG8gLSAxID8gIi8iICsgdVtuXSA6IHVbbl07CiAgICB9CgogICAgcmV0dXJuIGk7CiAgfSwgWGQucHJvdG90eXBlLnRvQWJzUGF0aCA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICB2YXIgbiwKICAgICAgICByLAogICAgICAgIG8gPSAwLAogICAgICAgIGkgPSBbXSwKICAgICAgICBhID0gL1wvJC8udGVzdCh0KSA/ICIvIiA6ICIiLAogICAgICAgIHUgPSBlLnNwbGl0KCIvIiksCiAgICAgICAgcyA9IHQuc3BsaXQoIi8iKTsKCiAgICBmb3IgKGpkKHUsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGUgJiYgaS5wdXNoKGUpOwogICAgfSksIHUgPSBpLCBuID0gcy5sZW5ndGggLSAxLCBpID0gW107IDAgPD0gbjsgbi0tKSB7CiAgICAgIDAgIT09IHNbbl0ubGVuZ3RoICYmICIuIiAhPT0gc1tuXSAmJiAoIi4uIiAhPT0gc1tuXSA/IDAgPCBvID8gby0tIDogaS5wdXNoKHNbbl0pIDogbysrKTsKICAgIH0KCiAgICByZXR1cm4gMCAhPT0gKHIgPSAobiA9IHUubGVuZ3RoIC0gbykgPD0gMCA/IHEoaSkuam9pbigiLyIpIDogdS5zbGljZSgwLCBuKS5qb2luKCIvIikgKyAiLyIgKyBxKGkpLmpvaW4oIi8iKSkuaW5kZXhPZigiLyIpICYmIChyID0gIi8iICsgciksIGEgJiYgci5sYXN0SW5kZXhPZigiLyIpICE9PSByLmxlbmd0aCAtIDEgJiYgKHIgKz0gYSksIHI7CiAgfSwgWGQucHJvdG90eXBlLmdldFVSSSA9IGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgdDsKICAgIHJldHVybiB2b2lkIDAgPT09IGUgJiYgKGUgPSAhMSksIHRoaXMuc291cmNlICYmICFlIHx8ICh0ID0gIiIsIGUgfHwgKHRoaXMucHJvdG9jb2wgPyB0ICs9IHRoaXMucHJvdG9jb2wgKyAiOi8vIiA6IHQgKz0gIi8vIiwgdGhpcy51c2VySW5mbyAmJiAodCArPSB0aGlzLnVzZXJJbmZvICsgIkAiKSwgdGhpcy5ob3N0ICYmICh0ICs9IHRoaXMuaG9zdCksIHRoaXMucG9ydCAmJiAodCArPSAiOiIgKyB0aGlzLnBvcnQpKSwgdGhpcy5wYXRoICYmICh0ICs9IHRoaXMucGF0aCksIHRoaXMucXVlcnkgJiYgKHQgKz0gIj8iICsgdGhpcy5xdWVyeSksIHRoaXMuYW5jaG9yICYmICh0ICs9ICIjIiArIHRoaXMuYW5jaG9yKSwgdGhpcy5zb3VyY2UgPSB0KSwgdGhpcy5zb3VyY2U7CiAgfSwgWGQpOwoKICBmdW5jdGlvbiBYZChlLCB0KSB7CiAgICBlID0gVmQoZSksIHRoaXMuc2V0dGluZ3MgPSB0IHx8IHt9OwogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYSA9IHRoaXMuc2V0dGluZ3MuYmFzZV91cmksCiAgICAgICAgdSA9IHRoaXM7CiAgICAvXihbXHdcLV0rKTooW15cL117Mn0pL2kudGVzdChlKSB8fCAvXlxzKiMvLnRlc3QoZSkgPyB1LnNvdXJjZSA9IGUgOiAobiA9IDAgPT09IGUuaW5kZXhPZigiLy8iKSwgMCAhPT0gZS5pbmRleE9mKCIvIikgfHwgbiB8fCAoZSA9IChhICYmIGEucHJvdG9jb2wgfHwgImh0dHAiKSArICI6Ly9tY2VfaG9zdCIgKyBlKSwgL15bXHdcLV0qOj9cL1wvLy50ZXN0KGUpIHx8IChyID0gdGhpcy5zZXR0aW5ncy5iYXNlX3VyaSA/IHRoaXMuc2V0dGluZ3MuYmFzZV91cmkucGF0aCA6IG5ldyBYZChkb2N1bWVudC5sb2NhdGlvbi5ocmVmKS5kaXJlY3RvcnksIGUgPSB0aGlzLnNldHRpbmdzLmJhc2VfdXJpICYmICIiID09IHRoaXMuc2V0dGluZ3MuYmFzZV91cmkucHJvdG9jb2wgPyAiLy9tY2VfaG9zdCIgKyB1LnRvQWJzUGF0aChyLCBlKSA6IChvID0gLyhbXiM/XSopKFsjP10/LiopLy5leGVjKGUpLCAoYSAmJiBhLnByb3RvY29sIHx8ICJodHRwIikgKyAiOi8vbWNlX2hvc3QiICsgdS50b0Fic1BhdGgociwgb1sxXSkgKyBvWzJdKSksIGUgPSBlLnJlcGxhY2UoL0BAL2csICIobWNlX2F0KSIpLCBpID0gL14oPzooPyFbXjpAXSs6W146QFwvXSpAKShbXjpcLz8jLl0rKTopPyg/OlwvXC8pPygoPzooKFteOkBcL10qKTo/KFteOkBcL10qKSk/QCk/KFxbW2EtekEtWjAtOTouJV0rXF18W146XC8/I10qKSg/OjooXGQqKSk/KSgoKFwvKD86W14/I10oPyFbXj8jXC9dKlwuW14/I1wvLl0rKD86Wz8jXXwkKSkpKlwvPyk/KFtePyNcL10qKSkoPzpcPyhbXiNdKikpPyg/OiMoLiopKT8pLy5leGVjKGUpLCBqZChxZCwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgdmFyIG4gPSAobiA9IGlbdF0pICYmIG4ucmVwbGFjZSgvXChtY2VfYXRcKS9nLCAiQEAiKTsKICAgICAgdVtlXSA9IG47CiAgICB9KSwgYSAmJiAodS5wcm90b2NvbCB8fCAodS5wcm90b2NvbCA9IGEucHJvdG9jb2wpLCB1LnVzZXJJbmZvIHx8ICh1LnVzZXJJbmZvID0gYS51c2VySW5mbyksIHUucG9ydCB8fCAibWNlX2hvc3QiICE9PSB1Lmhvc3QgfHwgKHUucG9ydCA9IGEucG9ydCksIHUuaG9zdCAmJiAibWNlX2hvc3QiICE9PSB1Lmhvc3QgfHwgKHUuaG9zdCA9IGEuaG9zdCksIHUuc291cmNlID0gIiIpLCBuICYmICh1LnByb3RvY29sID0gIiIpKTsKICB9CgogIGZ1bmN0aW9uIFlkKGUsIHQsIG4pIHsKICAgIGZvciAodmFyIHIgPSAvPChbIT9cL10pPyhbQS1aYS16MC05XC1fOi5dKykvZywgbyA9IC8oPzpccyg/OlteJyI+XSsoPzoiW14iXSoifCdbXiddKicpKSpbXiInPl0qKD86IlteIj5dKnwnW14nPl0qKT98XHMqfFwvKT4vZywgaSA9IGUuZ2V0U2hvcnRFbmRlZEVsZW1lbnRzKCksIGEgPSAxLCB1ID0gbjsgMCAhPT0gYTspIHsKICAgICAgZm9yIChyLmxhc3RJbmRleCA9IHU7OykgewogICAgICAgIHZhciBzID0gci5leGVjKHQpOwogICAgICAgIGlmIChudWxsID09PSBzKSByZXR1cm4gdTsKCiAgICAgICAgaWYgKCIhIiA9PT0gc1sxXSkgewogICAgICAgICAgdSA9IEdlKHNbMl0sICItLSIpID8gUWQodCwgITEsIHMuaW5kZXggKyAiIS0tIi5sZW5ndGgpIDogUWQodCwgITAsIHMuaW5kZXggKyAxKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgby5sYXN0SW5kZXggPSByLmxhc3RJbmRleDsKICAgICAgICB2YXIgYyA9IG8uZXhlYyh0KTsKCiAgICAgICAgaWYgKCFsKGMpICYmIGMuaW5kZXggPT09IHIubGFzdEluZGV4KSB7CiAgICAgICAgICAiLyIgPT09IHNbMV0gPyAtLWEgOiBOZShpLCBzWzJdKSB8fCAoYSArPSAxKSwgdSA9IHIubGFzdEluZGV4ICsgY1swXS5sZW5ndGg7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdTsKICB9CgogIGZ1bmN0aW9uIEdkKHEsICQpIHsKICAgIHZhciBlOwogICAgdm9pZCAwID09PSAkICYmICgkID0gdG8oKSk7CiAgICB2YXIgVyA9IG51bGwgIT09IChlID0gKHEgPSBxIHx8IHt9KS5kb2N1bWVudCkgJiYgdm9pZCAwICE9PSBlID8gZSA6IGRvY3VtZW50LAogICAgICAgIEsgPSBXLmNyZWF0ZUVsZW1lbnQoImZvcm0iKTsKCiAgICBmdW5jdGlvbiBuKHMsIGUpIHsKICAgICAgdm9pZCAwID09PSBlICYmIChlID0gImh0bWwiKTsKCiAgICAgIGZvciAodmFyIHQsIGksIG4sIGMsIHIsIG8sIGEsIGwsIHUsIGYsIGQsIG0sIGcsIHAsIGgsIHYsIGIsIHksIEMsIHggPSBzLmh0bWwsIHcgPSAwLCBTID0gW10sIEUgPSAwLCBOID0gR28uZGVjb2RlLCBrID0gRXQubWFrZU1hcCgic3JjLGhyZWYsZGF0YSxiYWNrZ3JvdW5kLGFjdGlvbixmb3JtYWN0aW9uLHBvc3Rlcix4bGluazpocmVmIiksIF8gPSAiaHRtbCIgPT09IGUgPyAwIDogMSwgQSA9IGZ1bmN0aW9uIEEoZSkgewogICAgICAgIGZvciAodmFyIHQsIG4gPSBTLmxlbmd0aDsgbi0tICYmIFNbbl0ubmFtZSAhPT0gZTspIHsKICAgICAgICAgIDsKICAgICAgICB9CgogICAgICAgIGlmICgwIDw9IG4pIHsKICAgICAgICAgIGZvciAodCA9IFMubGVuZ3RoIC0gMTsgbiA8PSB0OyB0LS0pIHsKICAgICAgICAgICAgKGUgPSBTW3RdKS52YWxpZCAmJiBRKGUubmFtZSk7CiAgICAgICAgICB9CgogICAgICAgICAgUy5sZW5ndGggPSBuOwogICAgICAgIH0KICAgICAgfSwgUiA9IGZ1bmN0aW9uIFIoZSwgdCkgewogICAgICAgIHJldHVybiBHKEhkKGUsIHMpLCB0KTsKICAgICAgfSwgRCA9IGZ1bmN0aW9uIEQoZSkgewogICAgICAgICIiICE9PSBlICYmICgiPiIgPT09IGUuY2hhckF0KDApICYmIChlID0gIiAiICsgZSksIHEuYWxsb3dfY29uZGl0aW9uYWxfY29tbWVudHMgfHwgIltpZiIgIT09IGUuc3Vic3RyKDAsIDMpLnRvTG93ZXJDYXNlKCkgfHwgKGUgPSAiICIgKyBlKSwgWChIZChlLCBzKSkpOwogICAgICB9LCBUID0gZnVuY3Rpb24gVChlLCB0KSB7CiAgICAgICAgdmFyIG4gPSBlIHx8ICIiLAogICAgICAgICAgICByID0gIUdlKG4sICItLSIpLAogICAgICAgICAgICBvID0gUWQoeCwgciwgdCk7CiAgICAgICAgcmV0dXJuIGUgPSB4LnN1YnN0cih0LCBvIC0gdCksIEQociA/IG4gKyBlIDogZSksIG8gKyAxOwogICAgICB9LCBPID0gbmV3IFJlZ0V4cCgiPCg/Oig/OiEtLShbXFx3XFxXXSo/KS0tIT8+KXwoPzohXFxbQ0RBVEFcXFsoW1xcd1xcV10qPylcXF1cXF0+KXwoPzohW0RkXVtPb11bQ2NdW1R0XVtZeV1bUHBdW0VlXShbXFx3XFxXXSo/KT4pfCg/OiEoLS0pPyl8KD86XFw/KFteXFxzXFwvPD5dKykgPyhbXFx3XFxXXSo/KVs/L10+KXwoPzpcXC8oW0EtWmEtel1bQS1aYS16MC05XFwtX1xcOlxcLl0qKT4pfCg/OihbQS1aYS16XVtBLVphLXowLTlcXC1fOi5dKikoXFxzKD86W14nXCI+XSsoPzpcIlteXCJdKlwifCdbXiddKicpKSpbXlwiJz5dKig/OlwiW15cIj5dKnwnW14nPl0qKT98XFxzKnxcXC8pPikpIiwgImciKSwgQiA9IC8oW1x3OlwtXSspKD86XHMqPVxzKig/Oig/OlwiKCg/OlteXCJdKSopXCIpfCg/OlwnKCg/OlteXCddKSopXCcpfChbXj5cc10rKSkpPy9nLCBQID0gJC5nZXRTaG9ydEVuZGVkRWxlbWVudHMoKSwgTCA9IHEuc2VsZl9jbG9zaW5nX2VsZW1lbnRzIHx8ICQuZ2V0U2VsZkNsb3NpbmdFbGVtZW50cygpLCBJID0gJC5nZXRCb29sQXR0cnMoKSwgTSA9IHEudmFsaWRhdGUsIEYgPSBxLnJlbW92ZV9pbnRlcm5hbHMsIFUgPSBxLmZpeF9zZWxmX2Nsb3NpbmcsIHogPSAkLmdldFNwZWNpYWxFbGVtZW50cygpLCBIID0geCArICI+IjsgdCA9IE8uZXhlYyhIKTspIHsKICAgICAgICB2YXIgaiA9IHRbMF07CiAgICAgICAgaWYgKHcgPCB0LmluZGV4ICYmIFIoTih4LnN1YnN0cih3LCB0LmluZGV4IC0gdykpKSwgaSA9IHRbN10pIEEoaSA9ICI6IiA9PT0gKGkgPSBpLnRvTG93ZXJDYXNlKCkpLmNoYXJBdCgwKSA/IGkuc3Vic3RyKDEpIDogaSk7ZWxzZSBpZiAoaSA9IHRbOF0pIHsKICAgICAgICAgIGlmICh0LmluZGV4ICsgai5sZW5ndGggPiB4Lmxlbmd0aCkgewogICAgICAgICAgICBSKE4oeC5zdWJzdHIodC5pbmRleCkpKSwgdyA9IHQuaW5kZXggKyBqLmxlbmd0aDsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CgogICAgICAgICAgdSA9IChpID0gIjoiID09PSAoaSA9IGkudG9Mb3dlckNhc2UoKSkuY2hhckF0KDApID8gaS5zdWJzdHIoMSkgOiBpKSBpbiBQLCBVICYmIExbaV0gJiYgMCA8IFMubGVuZ3RoICYmIFNbUy5sZW5ndGggLSAxXS5uYW1lID09PSBpICYmIEEoaSk7CgogICAgICAgICAgdmFyIFYgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICB2YXIgbiA9IGUuZXhlYyh0KTsKCiAgICAgICAgICAgIGlmIChuKSB7CiAgICAgICAgICAgICAgdmFyIHIgPSBuWzFdLAogICAgICAgICAgICAgICAgICBvID0gblsyXTsKICAgICAgICAgICAgICByZXR1cm4gInN0cmluZyIgPT0gdHlwZW9mIHIgJiYgImRhdGEtbWNlLWJvZ3VzIiA9PT0gci50b0xvd2VyQ2FzZSgpID8gbyA6IG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfShCLCB0WzldKTsKCiAgICAgICAgICBpZiAobnVsbCAhPT0gVikgewogICAgICAgICAgICBpZiAoImFsbCIgPT09IFYpIHsKICAgICAgICAgICAgICB3ID0gWWQoJCwgeCwgTy5sYXN0SW5kZXgpLCBPLmxhc3RJbmRleCA9IHc7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGQgPSAhMTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoIU0gfHwgKGYgPSAkLmdldEVsZW1lbnRSdWxlKGkpKSkgewogICAgICAgICAgICBpZiAoZCA9ICEwLCBNICYmIChwID0gZi5hdHRyaWJ1dGVzLCBoID0gZi5hdHRyaWJ1dGVQYXR0ZXJucyksIChnID0gdFs5XSkgPyAoKGwgPSAtMSAhPT0gZy5pbmRleE9mKCJkYXRhLW1jZS10eXBlIikpICYmIEYgJiYgKGQgPSAhMSksIChjID0gW10pLm1hcCA9IHt9LCBnLnJlcGxhY2UoQiwgZnVuY3Rpb24gKGUsIHQsIG4sIHIsIG8pIHsKICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIHQsIG4sIHIsIG8pIHsKICAgICAgICAgICAgICAgIHZhciBpOwoKICAgICAgICAgICAgICAgIGlmIChuID0gSGQoKHQgPSB0LnRvTG93ZXJDYXNlKCkpIGluIEkgPyB0IDogTihuIHx8IHIgfHwgbyB8fCAiIiksIHMpLCBNICYmICFsICYmIDAgPT0gKDAgPT09IChpID0gdCkuaW5kZXhPZigiZGF0YS0iKSB8fCAwID09PSBpLmluZGV4T2YoImFyaWEtIikpKSB7CiAgICAgICAgICAgICAgICAgIHZhciBhID0gcFt0XTsKCiAgICAgICAgICAgICAgICAgIGlmICghYSAmJiBoKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdSA9IGgubGVuZ3RoOyB1LS0gJiYgIShhID0gaFt1XSkucGF0dGVybi50ZXN0KHQpOykgewogICAgICAgICAgICAgICAgICAgICAgOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLTEgPT09IHUgJiYgKGEgPSBudWxsKTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgaWYgKCFhKSByZXR1cm47CiAgICAgICAgICAgICAgICAgIGlmIChhLnZhbGlkVmFsdWVzICYmICEobiBpbiBhLnZhbGlkVmFsdWVzKSkgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICgibmFtZSIgPT09IHQgfHwgImlkIiA9PT0gdCkgJiYgZSBpbiBKZCAmJiAobiBpbiBXIHx8IG4gaW4gSykgfHwga1t0XSAmJiAhS2QuaXNEb21TYWZlKG4sIGUsIHEpIHx8IGwgJiYgKHQgaW4gayB8fCAwID09PSB0LmluZGV4T2YoIm9uIikpIHx8IChjLm1hcFt0XSA9IG4sIGMucHVzaCh7CiAgICAgICAgICAgICAgICAgIG5hbWU6IHQsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBuCiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgfShpLCB0LCBuLCByLCBvKSwgIiI7CiAgICAgICAgICAgIH0pKSA6IChjID0gW10pLm1hcCA9IHt9LCBNICYmICFsKSB7CiAgICAgICAgICAgICAgaWYgKHYgPSBmLmF0dHJpYnV0ZXNSZXF1aXJlZCwgYiA9IGYuYXR0cmlidXRlc0RlZmF1bHQsIHkgPSBmLmF0dHJpYnV0ZXNGb3JjZWQsIGYucmVtb3ZlRW1wdHlBdHRycyAmJiAhYy5sZW5ndGggJiYgKGQgPSAhMSksIHkpIGZvciAociA9IHkubGVuZ3RoOyByLS07KSB7CiAgICAgICAgICAgICAgICBhID0gKG0gPSB5W3JdKS5uYW1lLCAieyR1aWR9IiA9PT0gKEMgPSBtLnZhbHVlKSAmJiAoQyA9ICJtY2VfIiArIEUrKyksIGMubWFwW2FdID0gQywgYy5wdXNoKHsKICAgICAgICAgICAgICAgICAgbmFtZTogYSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IEMKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoYikgZm9yIChyID0gYi5sZW5ndGg7IHItLTspIHsKICAgICAgICAgICAgICAgIChhID0gKG0gPSBiW3JdKS5uYW1lKSBpbiBjLm1hcCB8fCAoInskdWlkfSIgPT09IChDID0gbS52YWx1ZSkgJiYgKEMgPSAibWNlXyIgKyBFKyspLCBjLm1hcFthXSA9IEMsIGMucHVzaCh7CiAgICAgICAgICAgICAgICAgIG5hbWU6IGEsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBDCiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAodikgewogICAgICAgICAgICAgICAgZm9yIChyID0gdi5sZW5ndGg7IHItLSAmJiAhKHZbcl0gaW4gYy5tYXApOykgewogICAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLTEgPT09IHIgJiYgKGQgPSAhMSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAobSA9IGMubWFwWyJkYXRhLW1jZS1ib2d1cyJdKSB7CiAgICAgICAgICAgICAgICBpZiAoImFsbCIgPT09IG0pIHsKICAgICAgICAgICAgICAgICAgdyA9IFlkKCQsIHgsIE8ubGFzdEluZGV4KSwgTy5sYXN0SW5kZXggPSB3OwogICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBkID0gITE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBkICYmIEooaSwgYywgdSk7CiAgICAgICAgICB9IGVsc2UgZCA9ICExOwoKICAgICAgICAgIGlmIChuID0geltpXSkgewogICAgICAgICAgICBuLmxhc3RJbmRleCA9IHcgPSB0LmluZGV4ICsgai5sZW5ndGgsIHcgPSAodCA9IG4uZXhlYyh4KSkgPyAoZCAmJiAobyA9IHguc3Vic3RyKHcsIHQuaW5kZXggLSB3KSksIHQuaW5kZXggKyB0WzBdLmxlbmd0aCkgOiAobyA9IHguc3Vic3RyKHcpLCB4Lmxlbmd0aCksIGQgJiYgKDAgPCBvLmxlbmd0aCAmJiBSKG8sICEwKSwgUShpKSksIE8ubGFzdEluZGV4ID0gdzsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CgogICAgICAgICAgdSB8fCAoZyAmJiBnLmluZGV4T2YoIi8iKSA9PT0gZy5sZW5ndGggLSAxID8gZCAmJiBRKGkpIDogUy5wdXNoKHsKICAgICAgICAgICAgbmFtZTogaSwKICAgICAgICAgICAgdmFsaWQ6IGQKICAgICAgICAgIH0pKTsKICAgICAgICB9IGVsc2UgaWYgKGkgPSB0WzFdKSBEKGkpO2Vsc2UgaWYgKGkgPSB0WzJdKSB7CiAgICAgICAgICBpZiAoISgxID09IF8gfHwgcS5wcmVzZXJ2ZV9jZGF0YSB8fCAwIDwgUy5sZW5ndGggJiYgJC5pc1ZhbGlkQ2hpbGQoU1tTLmxlbmd0aCAtIDFdLm5hbWUsICIjY2RhdGEiKSkpIHsKICAgICAgICAgICAgdyA9IFQoIiIsIHQuaW5kZXggKyAyKSwgTy5sYXN0SW5kZXggPSB3OwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBZKGkpOwogICAgICAgIH0gZWxzZSBpZiAoaSA9IHRbM10pIGVlKGkpO2Vsc2UgewogICAgICAgICAgaWYgKChpID0gdFs0XSkgfHwgIjwhIiA9PT0gaikgewogICAgICAgICAgICB3ID0gVChpLCB0LmluZGV4ICsgai5sZW5ndGgpLCBPLmxhc3RJbmRleCA9IHc7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChpID0gdFs1XSkgewogICAgICAgICAgICBpZiAoMSAhPSBfKSB7CiAgICAgICAgICAgICAgdyA9IFQoIj8iLCB0LmluZGV4ICsgMiksIE8ubGFzdEluZGV4ID0gdzsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgWihpLCB0WzZdKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdyA9IHQuaW5kZXggKyBqLmxlbmd0aDsKICAgICAgfQoKICAgICAgZm9yICh3IDwgeC5sZW5ndGggJiYgUihOKHguc3Vic3RyKHcpKSksIHIgPSBTLmxlbmd0aCAtIDE7IDAgPD0gcjsgci0tKSB7CiAgICAgICAgKGkgPSBTW3JdKS52YWxpZCAmJiBRKGkubmFtZSk7CiAgICAgIH0KICAgIH0KCiAgICAhMSAhPT0gcS5maXhfc2VsZl9jbG9zaW5nICYmIChxLmZpeF9zZWxmX2Nsb3NpbmcgPSAhMCk7CiAgICB2YXIgWCA9IHEuY29tbWVudCB8fCB0ZSwKICAgICAgICBZID0gcS5jZGF0YSB8fCB0ZSwKICAgICAgICBHID0gcS50ZXh0IHx8IHRlLAogICAgICAgIEogPSBxLnN0YXJ0IHx8IHRlLAogICAgICAgIFEgPSBxLmVuZCB8fCB0ZSwKICAgICAgICBaID0gcS5waSB8fCB0ZSwKICAgICAgICBlZSA9IHEuZG9jdHlwZSB8fCB0ZTsKICAgIHJldHVybiB7CiAgICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShlLCB0KSB7CiAgICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0gImh0bWwiKSwgbihmdW5jdGlvbiAoZSkgewogICAgICAgICAgZm9yICh2YXIgdCwgbiA9IC9kYXRhOlteO10rO2Jhc2U2NCwoW2EtejAtOVwrXC89XHNdKykvZ2ksIHIgPSBbXSwgbyA9IHt9LCBpID0geXUoImltZyIpLCBhID0gMCwgdSA9IDA7IHQgPSBuLmV4ZWMoZSk7KSB7CiAgICAgICAgICAgIHZhciBzID0gdFswXSwKICAgICAgICAgICAgICAgIGMgPSBpICsgIl8iICsgdSsrOwogICAgICAgICAgICBvW2NdID0gcywgYSA8IHQuaW5kZXggJiYgci5wdXNoKGUuc3Vic3RyKGEsIHQuaW5kZXggLSBhKSksIHIucHVzaChjKSwgYSA9IHQuaW5kZXggKyBzLmxlbmd0aDsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgbCA9IG5ldyBSZWdFeHAoaSArICJfWzAtOV0rIiwgImciKTsKICAgICAgICAgIHJldHVybiAwID09PSBhID8gewogICAgICAgICAgICBwcmVmaXg6IGksCiAgICAgICAgICAgIHVyaXM6IG8sCiAgICAgICAgICAgIGh0bWw6IGUsCiAgICAgICAgICAgIHJlOiBsCiAgICAgICAgICB9IDogKGEgPCBlLmxlbmd0aCAmJiByLnB1c2goZS5zdWJzdHIoYSkpLCB7CiAgICAgICAgICAgIHByZWZpeDogaSwKICAgICAgICAgICAgdXJpczogbywKICAgICAgICAgICAgaHRtbDogci5qb2luKCIiKSwKICAgICAgICAgICAgcmU6IGwKICAgICAgICAgIH0pOwogICAgICAgIH0oZSksIHQpOwogICAgICB9CiAgICB9OwogIH0KCiAgdmFyIEpkID0gRXQubWFrZU1hcCgiYnV0dG9uLGZpZWxkc2V0LGZvcm0saWZyYW1lLGltZyxpbWFnZSxpbnB1dCxvYmplY3Qsb3V0cHV0LHNlbGVjdCx0ZXh0YXJlYSIpLAogICAgICBRZCA9IGZ1bmN0aW9uIFFkKGUsIHQsIG4pIHsKICAgIHZvaWQgMCA9PT0gbiAmJiAobiA9IDApOwogICAgdmFyIHIgPSBlLnRvTG93ZXJDYXNlKCk7CgogICAgaWYgKC0xICE9PSByLmluZGV4T2YoIltpZiAiLCBuKSAmJiAodSA9IG4sIC9eXHMqXFtpZiBbXHdcV10rXF0+Lio8IVxbZW5kaWZcXSgtLSE/KT8+Ly50ZXN0KHIuc3Vic3RyKHUpKSkpIHsKICAgICAgdmFyIG8gPSByLmluZGV4T2YoIltlbmRpZl0iLCBuKTsKICAgICAgcmV0dXJuIHIuaW5kZXhPZigiPiIsIG8pOwogICAgfQoKICAgIGlmICh0KSB7CiAgICAgIHZhciBpID0gci5pbmRleE9mKCI+Iiwgbik7CiAgICAgIHJldHVybiAtMSAhPT0gaSA/IGkgOiByLmxlbmd0aDsKICAgIH0KCiAgICB2YXIgYSA9IC8tLSE/Pi9nOwogICAgYS5sYXN0SW5kZXggPSBuOwogICAgdmFyIHUsCiAgICAgICAgcyA9IGEuZXhlYyhlKTsKICAgIHJldHVybiBzID8gcy5pbmRleCArIHNbMF0ubGVuZ3RoIDogci5sZW5ndGg7CiAgfTsKCiAgZnVuY3Rpb24gWmQoZSwgdCkgewogICAgZm9yICh2YXIgbiwgciwgbywgaSwgYSA9IC88KFx3KykgW14+XSpkYXRhLW1jZS1ib2d1cz0iYWxsIltePl0qPi9nLCB1ID0gZS5zY2hlbWEsIHMgPSAobiA9IGUuZ2V0VGVtcEF0dHJzKCksIHIgPSB0LCBvID0gbmV3IFJlZ0V4cChbIlxccz8oIiArIG4uam9pbigifCIpICsgJyk9IlteIl0rIiddLmpvaW4oInwiKSwgImdpIiksIHIucmVwbGFjZShvLCAiIikpLCBjID0gdS5nZXRTaG9ydEVuZGVkRWxlbWVudHMoKTsgaSA9IGEuZXhlYyhzKTspIHsKICAgICAgdmFyIGwgPSBhLmxhc3RJbmRleCwKICAgICAgICAgIGYgPSBpWzBdLmxlbmd0aCwKICAgICAgICAgIGQgPSBjW2lbMV1dID8gbCA6IEdkLmZpbmRFbmRUYWcodSwgcywgbCksCiAgICAgICAgICBzID0gcy5zdWJzdHJpbmcoMCwgbCAtIGYpICsgcy5zdWJzdHJpbmcoZCk7CiAgICAgIGEubGFzdEluZGV4ID0gbCAtIGY7CiAgICB9CgogICAgcmV0dXJuIHdvKHMpOwogIH0KCiAgZnVuY3Rpb24gZW0obykgewogICAgcmV0dXJuIHsKICAgICAgY29tcGFyZTogZnVuY3Rpb24gY29tcGFyZShlLCB0KSB7CiAgICAgICAgcmV0dXJuIGUubm9kZU5hbWUgPT09IHQubm9kZU5hbWUgJiYgISghcihuKGUpLCBuKHQpKSB8fCAhcihvLnBhcnNlU3R5bGUoby5nZXRBdHRyaWIoZSwgInN0eWxlIikpLCBvLnBhcnNlU3R5bGUoby5nZXRBdHRyaWIodCwgInN0eWxlIikpKSB8fCBZYyhlKSB8fCBZYyh0KSk7CgogICAgICAgIGZ1bmN0aW9uIG4obikgewogICAgICAgICAgdmFyIHIgPSB7fTsKICAgICAgICAgIHJldHVybiBvbShvLmdldEF0dHJpYnMobiksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciB0ID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAwICE9PSB0LmluZGV4T2YoIl8iKSAmJiAic3R5bGUiICE9PSB0ICYmIDAgIT09IHQuaW5kZXhPZigiZGF0YS0iKSAmJiAoclt0XSA9IG8uZ2V0QXR0cmliKG4sIHQpKTsKICAgICAgICAgIH0pLCByOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcihlLCB0KSB7CiAgICAgICAgICB2YXIgbiwgcjsKCiAgICAgICAgICBmb3IgKHIgaW4gZSkgewogICAgICAgICAgICBpZiAoTmUoZSwgcikpIHsKICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSAobiA9IHRbcl0pKSByZXR1cm47CiAgICAgICAgICAgICAgaWYgKGVbcl0gIT09IG4pIHJldHVybjsKICAgICAgICAgICAgICBkZWxldGUgdFtyXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGZvciAociBpbiB0KSB7CiAgICAgICAgICAgIGlmIChOZSh0LCByKSkgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiAxOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIHRtKGUpIHsKICAgIHZhciB1ID0gW10sCiAgICAgICAgcyA9IChlID0gZSB8fCB7fSkuaW5kZW50LAogICAgICAgIGMgPSBpbShlLmluZGVudF9iZWZvcmUgfHwgIiIpLAogICAgICAgIGwgPSBpbShlLmluZGVudF9hZnRlciB8fCAiIiksCiAgICAgICAgZiA9IEdvLmdldEVuY29kZUZ1bmMoZS5lbnRpdHlfZW5jb2RpbmcgfHwgInJhdyIsIGUuZW50aXRpZXMpLAogICAgICAgIGQgPSAiaHRtbCIgPT09IGUuZWxlbWVudF9mb3JtYXQ7CiAgICByZXR1cm4gewogICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoZSwgdCwgbikgewogICAgICAgIHZhciByLCBvLCBpLCBhOwogICAgICAgIGlmIChzICYmIGNbZV0gJiYgMCA8IHUubGVuZ3RoICYmIDAgPCAoYSA9IHVbdS5sZW5ndGggLSAxXSkubGVuZ3RoICYmICJcbiIgIT09IGEgJiYgdS5wdXNoKCJcbiIpLCB1LnB1c2goIjwiLCBlKSwgdCkgZm9yIChyID0gMCwgbyA9IHQubGVuZ3RoOyByIDwgbzsgcisrKSB7CiAgICAgICAgICBpID0gdFtyXSwgdS5wdXNoKCIgIiwgaS5uYW1lLCAnPSInLCBmKGkudmFsdWUsICEwKSwgJyInKTsKICAgICAgICB9CiAgICAgICAgdVt1Lmxlbmd0aF0gPSAhbiB8fCBkID8gIj4iIDogIiAvPiIsIG4gJiYgcyAmJiBsW2VdICYmIDAgPCB1Lmxlbmd0aCAmJiAwIDwgKGEgPSB1W3UubGVuZ3RoIC0gMV0pLmxlbmd0aCAmJiAiXG4iICE9PSBhICYmIHUucHVzaCgiXG4iKTsKICAgICAgfSwKICAgICAgZW5kOiBmdW5jdGlvbiBlbmQoZSkgewogICAgICAgIHZhciB0OwogICAgICAgIHUucHVzaCgiPC8iLCBlLCAiPiIpLCBzICYmIGxbZV0gJiYgMCA8IHUubGVuZ3RoICYmIDAgPCAodCA9IHVbdS5sZW5ndGggLSAxXSkubGVuZ3RoICYmICJcbiIgIT09IHQgJiYgdS5wdXNoKCJcbiIpOwogICAgICB9LAogICAgICB0ZXh0OiBmdW5jdGlvbiB0ZXh0KGUsIHQpIHsKICAgICAgICAwIDwgZS5sZW5ndGggJiYgKHVbdS5sZW5ndGhdID0gdCA/IGUgOiBmKGUpKTsKICAgICAgfSwKICAgICAgY2RhdGE6IGZ1bmN0aW9uIGNkYXRhKGUpIHsKICAgICAgICB1LnB1c2goIjwhW0NEQVRBWyIsIGUsICJdXT4iKTsKICAgICAgfSwKICAgICAgY29tbWVudDogZnVuY3Rpb24gY29tbWVudChlKSB7CiAgICAgICAgdS5wdXNoKCJceDNjIS0tIiwgZSwgIi0tXHgzZSIpOwogICAgICB9LAogICAgICBwaTogZnVuY3Rpb24gcGkoZSwgdCkgewogICAgICAgIHQgPyB1LnB1c2goIjw/IiwgZSwgIiAiLCBmKHQpLCAiPz4iKSA6IHUucHVzaCgiPD8iLCBlLCAiPz4iKSwgcyAmJiB1LnB1c2goIlxuIik7CiAgICAgIH0sCiAgICAgIGRvY3R5cGU6IGZ1bmN0aW9uIGRvY3R5cGUoZSkgewogICAgICAgIHUucHVzaCgiPCFET0NUWVBFIiwgZSwgIj4iLCBzID8gIlxuIiA6ICIiKTsKICAgICAgfSwKICAgICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkgewogICAgICAgIHUubGVuZ3RoID0gMDsKICAgICAgfSwKICAgICAgZ2V0Q29udGVudDogZnVuY3Rpb24gZ2V0Q29udGVudCgpIHsKICAgICAgICByZXR1cm4gdS5qb2luKCIiKS5yZXBsYWNlKC9cbiQvLCAiIik7CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBubSh0LCBnKSB7CiAgICB2b2lkIDAgPT09IGcgJiYgKGcgPSB0bygpKTsKICAgIHZhciBwID0gdG0odCk7CiAgICByZXR1cm4gKHQgPSB0IHx8IHt9KS52YWxpZGF0ZSA9ICEoInZhbGlkYXRlIiBpbiB0KSB8fCB0LnZhbGlkYXRlLCB7CiAgICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24gc2VyaWFsaXplKGUpIHsKICAgICAgICB2YXIgZiA9IHQudmFsaWRhdGUsCiAgICAgICAgICAgIGQgPSB7CiAgICAgICAgICAzOiBmdW5jdGlvbiBfKGUpIHsKICAgICAgICAgICAgcC50ZXh0KGUudmFsdWUsIGUucmF3KTsKICAgICAgICAgIH0sCiAgICAgICAgICA4OiBmdW5jdGlvbiBfKGUpIHsKICAgICAgICAgICAgcC5jb21tZW50KGUudmFsdWUpOwogICAgICAgICAgfSwKICAgICAgICAgIDc6IGZ1bmN0aW9uIF8oZSkgewogICAgICAgICAgICBwLnBpKGUubmFtZSwgZS52YWx1ZSk7CiAgICAgICAgICB9LAogICAgICAgICAgMTA6IGZ1bmN0aW9uIF8oZSkgewogICAgICAgICAgICBwLmRvY3R5cGUoZS52YWx1ZSk7CiAgICAgICAgICB9LAogICAgICAgICAgNDogZnVuY3Rpb24gXyhlKSB7CiAgICAgICAgICAgIHAuY2RhdGEoZS52YWx1ZSk7CiAgICAgICAgICB9LAogICAgICAgICAgMTE6IGZ1bmN0aW9uIF8oZSkgewogICAgICAgICAgICBpZiAoZSA9IGUuZmlyc3RDaGlsZCkgZm9yICg7IG0oZSksIGUgPSBlLm5leHQ7KSB7CiAgICAgICAgICAgICAgOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBwLnJlc2V0KCk7CgogICAgICAgIHZhciBtID0gZnVuY3Rpb24gbShlKSB7CiAgICAgICAgICB2YXIgdCA9IGRbZS50eXBlXTsKICAgICAgICAgIGlmICh0KSB0KGUpO2Vsc2UgewogICAgICAgICAgICB2YXIgbiA9IGUubmFtZSwKICAgICAgICAgICAgICAgIHIgPSBlLnNob3J0RW5kZWQsCiAgICAgICAgICAgICAgICBvID0gZS5hdHRyaWJ1dGVzOwoKICAgICAgICAgICAgaWYgKGYgJiYgbyAmJiAxIDwgby5sZW5ndGgpIHsKICAgICAgICAgICAgICB2YXIgaSA9IFtdOwogICAgICAgICAgICAgIGkubWFwID0ge307CiAgICAgICAgICAgICAgdmFyIGEgPSBnLmdldEVsZW1lbnRSdWxlKGUubmFtZSk7CgogICAgICAgICAgICAgIGlmIChhKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciB1ID0gMCwgcyA9IGEuYXR0cmlidXRlc09yZGVyLmxlbmd0aDsgdSA8IHM7IHUrKykgewogICAgICAgICAgICAgICAgICAoYyA9IGEuYXR0cmlidXRlc09yZGVyW3VdKSBpbiBvLm1hcCAmJiAobCA9IG8ubWFwW2NdLCBpLm1hcFtjXSA9IGwsIGkucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogYywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbAogICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZm9yICh2YXIgYywgbCwgdSA9IDAsIHMgPSBvLmxlbmd0aDsgdSA8IHM7IHUrKykgewogICAgICAgICAgICAgICAgICAoYyA9IG9bdV0ubmFtZSkgaW4gaS5tYXAgfHwgKGwgPSBvLm1hcFtjXSwgaS5tYXBbY10gPSBsLCBpLnB1c2goewogICAgICAgICAgICAgICAgICAgIG5hbWU6IGMsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGwKICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG8gPSBpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHAuc3RhcnQoZS5uYW1lLCBvLCByKSwgIXIpIHsKICAgICAgICAgICAgICBpZiAoZSA9IGUuZmlyc3RDaGlsZCkgZm9yICg7IG0oZSksIGUgPSBlLm5leHQ7KSB7CiAgICAgICAgICAgICAgICA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHAuZW5kKG4pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIDEgIT09IGUudHlwZSB8fCB0LmlubmVyID8gZFsxMV0oZSkgOiBtKGUpLCBwLmdldENvbnRlbnQoKTsKICAgICAgfQogICAgfTsKICB9CgogIEdkLmZpbmRFbmRUYWcgPSBZZDsKICB2YXIgcm0gPSBaZCwKICAgICAgb20gPSBFdC5lYWNoLAogICAgICBpbSA9IEV0Lm1ha2VNYXAsCiAgICAgIGFtID0gbmV3IFNldCgpOwoKICBmdW5jdGlvbiB1bShlLCB0KSB7CiAgICByZXR1cm4gd2UoZS5wYXJzZVN0eWxlKGUuZ2V0QXR0cmliKHQsICJzdHlsZSIpKSk7CiAgfQoKICBmdW5jdGlvbiBzbShuLCByLCBvKSB7CiAgICByZXR1cm4gdmUuZnJvbShvLmNvbnRhaW5lcigpKS5maWx0ZXIoam4pLmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCA9IG4gPyAwIDogLTE7CiAgICAgIHJldHVybiByKGUuZGF0YS5jaGFyQXQoby5vZmZzZXQoKSArIHQpKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gY20oZSkgewogICAgdmFyIHQgPSBlLmNvbnRhaW5lcigpOwogICAgcmV0dXJuIGpuKHQpICYmICgwID09PSB0LmRhdGEubGVuZ3RoIHx8IHhvKHQuZGF0YSkgJiYgRmwuaXNCb29rbWFya05vZGUodC5wYXJlbnROb2RlKSk7CiAgfQoKICBmdW5jdGlvbiBsbSh0LCBuKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHZlLmZyb20oR3ModCA/IDAgOiAtMSwgZSkpLmZpbHRlcihuKS5pc1NvbWUoKTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBmbShlKSB7CiAgICByZXR1cm4gS24oZSkgJiYgImJsb2NrIiA9PT0geG4oTnQuZnJvbURvbShlKSwgImRpc3BsYXkiKTsKICB9CgogIGZ1bmN0aW9uIGRtKGUpIHsKICAgIHJldHVybiBZbihlKSAmJiAhKHpuKHQgPSBlKSAmJiAiYWxsIiA9PT0gdC5nZXRBdHRyaWJ1dGUoImRhdGEtbWNlLWJvZ3VzIikpOwogICAgdmFyIHQ7CiAgfQoKICBmdW5jdGlvbiBtbShlKSB7CiAgICBYdChlKSwgUG4oZSwgTnQuZnJvbUh0bWwoJzxiciBkYXRhLW1jZS1ib2d1cz0iMSI+JykpOwogIH0KCiAgZnVuY3Rpb24gZ20obikgewogICAgVXQobikuZWFjaChmdW5jdGlvbiAodCkgewogICAgICBCdCh0KS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgbG8obikgJiYgQnIodCkgJiYgbG8oZSkgJiYgTG4odCk7CiAgICAgIH0pOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBwbShlLCB0KSB7CiAgICByZXR1cm4gbyA9IFIsIFZlKHIgPSB0LCBuID0gZSkgPyBmdW5jdGlvbiAoZSwgdCkgewogICAgICBmb3IgKHZhciBuID0geSh0KSA/IHQgOiBSLCByID0gZS5kb20sIG8gPSBbXTsgbnVsbCAhPT0gci5wYXJlbnROb2RlICYmIHZvaWQgMCAhPT0gci5wYXJlbnROb2RlOykgewogICAgICAgIHZhciBpID0gci5wYXJlbnROb2RlLAogICAgICAgICAgICBhID0gTnQuZnJvbURvbShpKTsKICAgICAgICBpZiAoby5wdXNoKGEpLCAhMCA9PT0gbihhKSkgYnJlYWs7CiAgICAgICAgciA9IGk7CiAgICAgIH0KCiAgICAgIHJldHVybiBvOwogICAgfShuLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gbyhlKSB8fCBqZShlLCByKTsKICAgIH0pLnNsaWNlKDAsIC0xKSA6IFtdOwogICAgdmFyIG4sIHIsIG87CiAgfQoKICBmdW5jdGlvbiBobShlLCB0KSB7CiAgICByZXR1cm4gW2VdLmNvbmNhdChwbShlLCB0KSk7CiAgfQoKICBmdW5jdGlvbiB2bShlLCB0LCBuKSB7CiAgICByZXR1cm4gSmwoZSwgdCwgbiwgY20pOwogIH0KCiAgZnVuY3Rpb24gYm0oZSwgdCkgewogICAgcmV0dXJuIE0oaG0oTnQuZnJvbURvbSh0LmNvbnRhaW5lcigpKSwgZSksIGxvKTsKICB9CgogIGZ1bmN0aW9uIHltKGUsIG4sIHIpIHsKICAgIHJldHVybiB2bShlLCBuLmRvbSwgcikuZm9yYWxsKGZ1bmN0aW9uICh0KSB7CiAgICAgIHJldHVybiBibShuLCByKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gITEgPT09IFlzKHQsIHIsIG4uZG9tKTsKICAgICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gITEgPT09IFlzKHQsIHIsIG4uZG9tKSAmJiBWZShlLCBOdC5mcm9tRG9tKHQuY29udGFpbmVyKCkpKTsKICAgICAgfSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIENtKHQsIG4sIHIpIHsKICAgIHJldHVybiBibShuLCByKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHZtKHQsIG4uZG9tLCByKS5mb3JhbGwoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gITEgPT09IFlzKGUsIHIsIG4uZG9tKTsKICAgICAgfSk7CiAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gdm0odCwgZS5kb20sIHIpLmlzTm9uZSgpOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiB4bShlKSB7CiAgICByZXR1cm4gbmMoZSkuZXhpc3RzKEJyKTsKICB9CgogIGZ1bmN0aW9uIHdtKGUsIHQsIG4pIHsKICAgIHZhciByID0gUShVKGhtKE50LmZyb21Eb20obi5jb250YWluZXIoKSksIHQpLCBsbykpLmdldE9yKHQpOwogICAgcmV0dXJuIEdsKGUsIHIuZG9tLCBuKS5maWx0ZXIoeG0pOwogIH0KCiAgZnVuY3Rpb24gU20oZSwgdCkgewogICAgcmV0dXJuIG5jKHQpLmV4aXN0cyhCcikgfHwgd20oITAsIGUsIHQpLmlzU29tZSgpOwogIH0KCiAgZnVuY3Rpb24gRW0oZSwgdCkgewogICAgcmV0dXJuIHZlLmZyb20odC5nZXROb2RlKCEwKSkubWFwKE50LmZyb21Eb20pLmV4aXN0cyhCcikgfHwgd20oITEsIGUsIHQpLmlzU29tZSgpOwogIH0KCiAgZnVuY3Rpb24gTm0oZSkgewogICAgcmV0dXJuIGFzLmlzVGV4dFBvc2l0aW9uKGUpICYmICFlLmlzQXRTdGFydCgpICYmICFlLmlzQXRFbmQoKTsKICB9CgogIGZ1bmN0aW9uIGttKGUsIHQpIHsKICAgIHJldHVybiBRKFUoaG0oTnQuZnJvbURvbSh0LmNvbnRhaW5lcigpKSwgZSksIGxvKSkuZ2V0T3IoZSk7CiAgfQoKICBmdW5jdGlvbiBfbShlLCB0KSB7CiAgICByZXR1cm4gTm0odCkgPyBLZyh0KSA6IEtnKHQpIHx8IFpsKGttKGUsIHQpLmRvbSwgdCkuZXhpc3RzKEtnKTsKICB9CgogIGZ1bmN0aW9uIEFtKGUsIHQpIHsKICAgIHJldHVybiBObSh0KSA/IFdnKHQpIDogV2codCkgfHwgUWwoa20oZSwgdCkuZG9tLCB0KS5leGlzdHMoV2cpOwogIH0KCiAgZnVuY3Rpb24gUm0oZSkgewogICAgcmV0dXJuIG5jKGUpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHByKGUsIGtuKTsKICAgIH0pLmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gRChbInByZSIsICJwcmUtd3JhcCJdLCB4bihlLCAid2hpdGUtc3BhY2UiKSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIERtKGUsIHQpIHsKICAgIHJldHVybiAhUm0odCkgJiYgKG5wKGUsIHQpIHx8IG9wKGUsIHQpIHx8IEVtKGUsIHQpIHx8IF9tKGUsIHQpKTsKICB9CgogIGZ1bmN0aW9uIFRtKGUsIHQpIHsKICAgIHJldHVybiAhUm0odCkgJiYgKHJwKGUsIHQpIHx8IGlwKGUsIHQpIHx8IFNtKGUsIHQpIHx8IEFtKGUsIHQpKTsKICB9CgogIGZ1bmN0aW9uIE9tKGUsIHQpIHsKICAgIHJldHVybiBEbShlLCB0KSB8fCBUbShlLCAociA9IChuID0gdCkuY29udGFpbmVyKCksIG8gPSBuLm9mZnNldCgpLCBqbihyKSAmJiBvIDwgci5kYXRhLmxlbmd0aCA/IGFzKHIsIG8gKyAxKSA6IG4pKTsKICAgIHZhciBuLCByLCBvOwogIH0KCiAgZnVuY3Rpb24gQm0oZSwgdCkgewogICAgcmV0dXJuIG9mKGUuY2hhckF0KHQpKTsKICB9CgogIGZ1bmN0aW9uIFBtKGUpIHsKICAgIHZhciB0ID0gZS5jb250YWluZXIoKTsKICAgIHJldHVybiBqbih0KSAmJiBUZSh0LmRhdGEsIHlvKTsKICB9CgogIGZ1bmN0aW9uIExtKGcsIGUpIHsKICAgIHJldHVybiB2ZS5zb21lKGUpLmZpbHRlcihQbSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCwKICAgICAgICAgIG4sCiAgICAgICAgICByLAogICAgICAgICAgbywKICAgICAgICAgIGksCiAgICAgICAgICBhLAogICAgICAgICAgdSwKICAgICAgICAgIHMsCiAgICAgICAgICBjLAogICAgICAgICAgbCA9IGUuY29udGFpbmVyKCksCiAgICAgICAgICBmID0gZywKICAgICAgICAgIGQgPSAoaSA9IGwpLmRhdGEsCiAgICAgICAgICBtID0gYXMoaSwgMCk7CiAgICAgIHJldHVybiAoIUJtKGQsIDApIHx8IE9tKGYsIG0pID8gKHMgPSAoYSA9IGwpLmRhdGEsIChjID0gVCh1ID0gcy5zcGxpdCgiIiksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgcmV0dXJuIG9mKGUpICYmIDAgPCB0ICYmIHQgPCB1Lmxlbmd0aCAtIDEgJiYgSmModVt0IC0gMV0pICYmIEpjKHVbdCArIDFdKSA/ICIgIiA6IGU7CiAgICAgIH0pLmpvaW4oIiIpKSAhPT0gcyAmJiAoYS5kYXRhID0gYywgMSkpIDogKGkuZGF0YSA9ICIgIiArIGQuc2xpY2UoMSksIDEpKSB8fCAodCA9IGcsIHIgPSAobiA9IGwpLmRhdGEsIG8gPSBhcyhuLCByLmxlbmd0aCAtIDEpLCBCbShyLCByLmxlbmd0aCAtIDEpICYmICFPbSh0LCBvKSAmJiAobi5kYXRhID0gci5zbGljZSgwLCAtMSkgKyAiICIsIDEpKSA/IHZlLnNvbWUoZSkgOiB2ZS5ub25lKCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIEltKHQpIHsKICAgIHZhciBlID0gTnQuZnJvbURvbSh0LmdldEJvZHkoKSk7CiAgICB0LnNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpICYmIExtKGUsIGFzLmZyb21SYW5nZVN0YXJ0KHQuc2VsZWN0aW9uLmdldFJuZygpKSkuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICB0LnNlbGVjdGlvbi5zZXRSbmcoZS50b1JhbmdlKCkpOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBNbShlLCB0LCBuKSB7CiAgICB2YXIgciwgbywgaSwgYSwgdSwgcywgYywgbDsKICAgIDAgIT09IG4gJiYgKG8gPSBncihyID0gTnQuZnJvbURvbShlKSwgbG8pLmdldE9yKHIpLCBpID0gZS5kYXRhLnNsaWNlKHQsIHQgKyBuKSwgYSA9IHQgKyBuID49IGUuZGF0YS5sZW5ndGggJiYgVG0obywgYXMoZSwgZS5kYXRhLmxlbmd0aCkpLCB1ID0gMCA9PT0gdCAmJiBEbShvLCBhcyhlLCAwKSksIGUucmVwbGFjZURhdGEodCwgbiwgKGMgPSB1LCBsID0gYSwgTChzID0gaSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgcmV0dXJuIEdjKHQpIHx8IG9mKHQpID8gZS5wcmV2aW91c0NoYXJJc1NwYWNlIHx8ICIiID09PSBlLnN0ciAmJiBjIHx8IGUuc3RyLmxlbmd0aCA9PT0gcy5sZW5ndGggLSAxICYmIGwgPyB7CiAgICAgICAgcHJldmlvdXNDaGFySXNTcGFjZTogITEsCiAgICAgICAgc3RyOiBlLnN0ciArIHlvCiAgICAgIH0gOiB7CiAgICAgICAgcHJldmlvdXNDaGFySXNTcGFjZTogITAsCiAgICAgICAgc3RyOiBlLnN0ciArICIgIgogICAgICB9IDogewogICAgICAgIHByZXZpb3VzQ2hhcklzU3BhY2U6ICExLAogICAgICAgIHN0cjogZS5zdHIgKyB0CiAgICAgIH07CiAgICB9LCB7CiAgICAgIHByZXZpb3VzQ2hhcklzU3BhY2U6ICExLAogICAgICBzdHI6ICIiCiAgICB9KS5zdHIpKSk7CiAgfQoKICBmdW5jdGlvbiBGbShlLCB0KSB7CiAgICB2YXIgbiA9IGUuZGF0YS5zbGljZSh0KTsKICAgIE1tKGUsIHQsIG4ubGVuZ3RoIC0gUWUobikubGVuZ3RoKTsKICB9CgogIGZ1bmN0aW9uIFVtKGUsIHQpIHsKICAgIHZhciBuID0gZS5kYXRhLnNsaWNlKDAsIHQpLAogICAgICAgIHIgPSBuLmxlbmd0aCAtIFplKG4pLmxlbmd0aDsKICAgIE1tKGUsIHQgLSByLCByKTsKICB9CgogIGZ1bmN0aW9uIHptKGUsIHQsIG4sIHIpIHsKICAgIHZvaWQgMCA9PT0gciAmJiAociA9ICEwKTsKICAgIHZhciBvID0gWmUoZS5kYXRhKS5sZW5ndGgsCiAgICAgICAgaSA9IHIgPyBlIDogdCwKICAgICAgICBhID0gciA/IHQgOiBlOwogICAgcmV0dXJuIHIgPyBpLmFwcGVuZERhdGEoYS5kYXRhKSA6IGkuaW5zZXJ0RGF0YSgwLCBhLmRhdGEpLCBMbihOdC5mcm9tRG9tKGEpKSwgbiAmJiBGbShpLCBvKSwgaTsKICB9CgogIGZ1bmN0aW9uIEhtKGUsIHQpIHsKICAgIHJldHVybiByID0gZSwgbyA9IChuID0gdCkuY29udGFpbmVyKCksIGkgPSBuLm9mZnNldCgpLCAhMSA9PT0gYXMuaXNUZXh0UG9zaXRpb24obikgJiYgbyA9PT0gci5wYXJlbnROb2RlICYmIGkgPiBhcy5iZWZvcmUocikub2Zmc2V0KCkgPyBhcyh0LmNvbnRhaW5lcigpLCB0Lm9mZnNldCgpIC0gMSkgOiB0OwogICAgdmFyIG4sIHIsIG8sIGk7CiAgfQoKICBmdW5jdGlvbiBqbShlKSB7CiAgICByZXR1cm4ganIoZS5wcmV2aW91c1NpYmxpbmcpID8gdmUuc29tZSgodCA9IGUucHJldmlvdXNTaWJsaW5nLCBqbih0KSA/IGFzKHQsIHQuZGF0YS5sZW5ndGgpIDogYXMuYWZ0ZXIodCkpKSA6IGUucHJldmlvdXNTaWJsaW5nID8gdGYoZS5wcmV2aW91c1NpYmxpbmcpIDogdmUubm9uZSgpOwogICAgdmFyIHQ7CiAgfQoKICBmdW5jdGlvbiBWbShlKSB7CiAgICByZXR1cm4ganIoZS5uZXh0U2libGluZykgPyB2ZS5zb21lKCh0ID0gZS5uZXh0U2libGluZywgam4odCkgPyBhcyh0LCAwKSA6IGFzLmJlZm9yZSh0KSkpIDogZS5uZXh0U2libGluZyA/IGVmKGUubmV4dFNpYmxpbmcpIDogdmUubm9uZSgpOwogICAgdmFyIHQ7CiAgfQoKICBmdW5jdGlvbiBxbShyLCBvKSB7CiAgICByZXR1cm4gam0obykub3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBWbShvKTsKICAgIH0pLm9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gZSA9IHIsIG4gPSBhcy5iZWZvcmUoKHQgPSBvKS5wcmV2aW91c1NpYmxpbmcgfHwgdC5wYXJlbnROb2RlKSwgWmwoZSwgbikuZm9sZChmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIFFsKGUsIGFzLmFmdGVyKHQpKTsKICAgICAgfSwgdmUuc29tZSk7CiAgICAgIHZhciBlLCB0LCBuOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiAkbShuLCByKSB7CiAgICByZXR1cm4gVm0ocikub3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBqbShyKTsKICAgIH0pLm9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gUWwoZSA9IG4sIGFzLmFmdGVyKHQgPSByKSkuZm9sZChmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIFpsKGUsIGFzLmJlZm9yZSh0KSk7CiAgICAgIH0sIHZlLnNvbWUpOwogICAgICB2YXIgZSwgdDsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gV20odCwgbiwgZSkgewogICAgZS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgdC5mb2N1cygpOwogICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgdC5zZWxlY3Rpb24uc2V0Um5nKGUudG9SYW5nZSgpLCBuKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gS20oZSwgdCkgewogICAgcmV0dXJuIHQgJiYgTmUoZS5zY2hlbWEuZ2V0QmxvY2tFbGVtZW50cygpLCBrdCh0KSk7CiAgfQoKICBmdW5jdGlvbiBYbShlKSB7CiAgICBpZiAoV3IoZSkpIHsKICAgICAgdmFyIHQgPSBOdC5mcm9tSHRtbCgnPGJyIGRhdGEtbWNlLWJvZ3VzPSIxIj4nKTsKICAgICAgcmV0dXJuIFh0KGUpLCBQbihlLCB0KSwgdmUuc29tZShhcy5iZWZvcmUodC5kb20pKTsKICAgIH0KCiAgICByZXR1cm4gdmUubm9uZSgpOwogIH0KCiAgZnVuY3Rpb24gWW0odCwgbiwgZSwgcikgewogICAgdm9pZCAwID09PSByICYmIChyID0gITApOwogICAgdmFyIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgcywKICAgICAgICBjLAogICAgICAgIGwsCiAgICAgICAgZiwKICAgICAgICBkLAogICAgICAgIG0sCiAgICAgICAgZywKICAgICAgICBwLAogICAgICAgIGgsCiAgICAgICAgdiwKICAgICAgICBiID0gKHAgPSBuLCBoID0gdC5nZXRCb2R5KCksIHYgPSBlLmRvbSwgKHAgPyAkbSA6IHFtKShoLCB2KS5tYXAoQShIbSwgdikpKSwKICAgICAgICB5ID0gZ3IoZSwgQShLbSwgdCksIChvID0gdC5nZXRCb2R5KCksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBlLmRvbSA9PT0gbzsKICAgIH0pKSwKICAgICAgICBDID0gKHUgPSBiLCBpID0gYSA9IGUsIHMgPSBOZSh0LnNjaGVtYS5nZXRUZXh0SW5saW5lRWxlbWVudHMoKSwga3QoaSkpLCBtID0gQnQoYSkuZmlsdGVyKF9uKSwgZyA9IFB0KGEpLmZpbHRlcihfbiksIExuKGEpLCBsID0gZywgZiA9IHUsIGQgPSBmdW5jdGlvbiBkKGUsIHQsIG4pIHsKICAgICAgdmFyIHIgPSBlLmRvbSwKICAgICAgICAgIG8gPSB0LmRvbSwKICAgICAgICAgIGkgPSByLmRhdGEubGVuZ3RoOwogICAgICByZXR1cm4gem0ociwgbywgcyksIG4uY29udGFpbmVyKCkgPT09IG8gPyBhcyhyLCBpKSA6IG47CiAgICB9LCAoKGMgPSBtKS5pc1NvbWUoKSAmJiBsLmlzU29tZSgpICYmIGYuaXNTb21lKCkgPyB2ZS5zb21lKGQoYy5nZXRPckRpZSgpLCBsLmdldE9yRGllKCksIGYuZ2V0T3JEaWUoKSkpIDogdmUubm9uZSgpKS5vclRodW5rKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHMgJiYgKG0uZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBVbShlLmRvbSwgZS5kb20ubGVuZ3RoKTsKICAgICAgfSksIGcuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBGbShlLmRvbSwgMCk7CiAgICAgIH0pKSwgdTsKICAgIH0pKTsKICAgIHQuZG9tLmlzRW1wdHkodC5nZXRCb2R5KCkpID8gKHQuc2V0Q29udGVudCgiIiksIHQuc2VsZWN0aW9uLnNldEN1cnNvckxvY2F0aW9uKCkpIDogeS5iaW5kKFhtKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgciAmJiBXbSh0LCBuLCBDKTsKICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgIHIgJiYgV20odCwgbiwgdmUuc29tZShlKSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIEdtKGUpIHsKICAgIHJldHVybiBodShlLCAidGQsdGgiKTsKICB9CgogIGZ1bmN0aW9uIEptKGUsIHQpIHsKICAgIHJldHVybiB7CiAgICAgIHN0YXJ0OiBlLAogICAgICBlbmQ6IHQKICAgIH07CiAgfQoKICBmdW5jdGlvbiBRbShlLCB0KSB7CiAgICByZXR1cm4gYnIoTnQuZnJvbURvbShlKSwgInRkLHRoIiwgdCk7CiAgfQoKICBmdW5jdGlvbiBabShlKSB7CiAgICByZXR1cm4gIWplKGUuc3RhcnQsIGUuZW5kKTsKICB9CgogIGZ1bmN0aW9uIGVnKGUsIG4pIHsKICAgIHJldHVybiBBbChlLnN0YXJ0LCBuKS5iaW5kKGZ1bmN0aW9uICh0KSB7CiAgICAgIHJldHVybiBBbChlLmVuZCwgbikuYmluZChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBqZSh0LCBlKSA/IHZlLnNvbWUodCkgOiB2ZS5ub25lKCk7CiAgICAgIH0pOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiB0ZyhlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHsKICAgICAgcmV0dXJuIGVnKHQsIGUpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBybmc6IHQsCiAgICAgICAgICB0YWJsZTogZSwKICAgICAgICAgIGNlbGxzOiBHbShlKQogICAgICAgIH07CiAgICAgIH0pOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIG5nKGUsIHQsIG4sIHIpIHsKICAgIGlmIChuLmNvbGxhcHNlZCB8fCAhZS5mb3JhbGwoWm0pKSByZXR1cm4gdmUubm9uZSgpOwoKICAgIGlmICh0LmlzU2FtZVRhYmxlKSB7CiAgICAgIHZhciBvID0gZS5iaW5kKHRnKHIpKTsKICAgICAgcmV0dXJuIHZlLnNvbWUoewogICAgICAgIHN0YXJ0OiBvLAogICAgICAgIGVuZDogbwogICAgICB9KTsKICAgIH0KCiAgICB2YXIgaSwKICAgICAgICBhLAogICAgICAgIHUgPSBRbShuLnN0YXJ0Q29udGFpbmVyLCByKSwKICAgICAgICBzID0gUW0obi5lbmRDb250YWluZXIsIHIpLAogICAgICAgIGMgPSB1LmJpbmQoKGEgPSByLCBmdW5jdGlvbiAodCkgewogICAgICByZXR1cm4gQWwodCwgYSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBaKEdtKGUpKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBKbSh0LCBlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSkuYmluZCh0ZyhyKSksCiAgICAgICAgbCA9IHMuYmluZCgoaSA9IHIsIGZ1bmN0aW9uICh0KSB7CiAgICAgIHJldHVybiBBbCh0LCBpKS5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIFEoR20oZSkpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIEptKGUsIHQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pKS5iaW5kKHRnKHIpKTsKICAgIHJldHVybiB2ZS5zb21lKHsKICAgICAgc3RhcnQ6IGMsCiAgICAgIGVuZDogbAogICAgfSk7CiAgfQoKICBmdW5jdGlvbiByZyhlLCB0KSB7CiAgICByZXR1cm4geihlLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gamUoZSwgdCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIG9nKG4pIHsKICAgIHJldHVybiBkbihyZyhuLmNlbGxzLCBuLnJuZy5zdGFydCksIHJnKG4uY2VsbHMsIG4ucm5nLmVuZCksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHJldHVybiBuLmNlbGxzLnNsaWNlKGUsIHQgKyAxKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gaWcoZSwgdCkgewogICAgdmFyIG4gPSB0LnN0YXJ0VGFibGUsCiAgICAgICAgciA9IHQuZW5kVGFibGUsCiAgICAgICAgbyA9IGUuY2xvbmVSYW5nZSgpOwogICAgcmV0dXJuIG4uZWFjaChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gby5zZXRTdGFydEFmdGVyKGUuZG9tKTsKICAgIH0pLCByLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIG8uc2V0RW5kQmVmb3JlKGUuZG9tKTsKICAgIH0pLCBvOwogIH0KCiAgZnVuY3Rpb24gYWcoZSwgdCkgewogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYSwKICAgICAgICB1LAogICAgICAgIHMsCiAgICAgICAgYywKICAgICAgICBsLAogICAgICAgIGYsCiAgICAgICAgZCwKICAgICAgICBtLAogICAgICAgIGcsCiAgICAgICAgcCwKICAgICAgICBoLAogICAgICAgIHYsCiAgICAgICAgYiA9IChuID0gZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGplKG4sIGUpOwogICAgfSksCiAgICAgICAgeSA9IGRuKFFtKChyID0gdCkuc3RhcnRDb250YWluZXIsIG8gPSBiKSwgUW0oci5lbmRDb250YWluZXIsIG8pLCBKbSksCiAgICAgICAgQyA9IChsID0gYiwgZiA9IHgoKGMgPSB0KS5zdGFydENvbnRhaW5lciksIGQgPSB4KGMuZW5kQ29udGFpbmVyKSwgbSA9IGYuaXNTb21lKCksIGcgPSBkLmlzU29tZSgpLCBwID0gZG4oZiwgZCwgamUpLmdldE9yKCExKSwgewogICAgICBzdGFydFRhYmxlOiBmLAogICAgICBlbmRUYWJsZTogZCwKICAgICAgaXNTdGFydEluVGFibGU6IG0sCiAgICAgIGlzRW5kSW5UYWJsZTogZywKICAgICAgaXNTYW1lVGFibGU6IHAsCiAgICAgIGlzTXVsdGlUYWJsZTogIXAgJiYgbSAmJiBnCiAgICB9KTsKCiAgICBmdW5jdGlvbiB4KGUpIHsKICAgICAgcmV0dXJuIEFsKE50LmZyb21Eb20oZSksIGwpOwogICAgfQoKICAgIHJldHVybiBoID0gdCwgdiA9IGIsIHkuZXhpc3RzKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiAhWm0odCA9IGUpICYmIGVnKHQsIHYpLmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gZS5kb20ucm93czsKICAgICAgICByZXR1cm4gMSA9PT0gdC5sZW5ndGggJiYgMSA9PT0gdFswXS5jZWxscy5sZW5ndGg7CiAgICAgIH0pICYmIFJsKGUuc3RhcnQsIGgpOwogICAgICB2YXIgdDsKICAgIH0pID8geS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHNwLnNpbmdsZUNlbGxUYWJsZSh0LCBlLnN0YXJ0KTsKICAgIH0pIDogQy5pc011bHRpVGFibGUgPyBuZyh5LCB1ID0gQywgcyA9IHQsIGIpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBlLnN0YXJ0LAogICAgICAgICAgbiA9IGUuZW5kLAogICAgICAgICAgciA9IHQuYmluZChvZykuZ2V0T3IoW10pLAogICAgICAgICAgbyA9IG4uYmluZChvZykuZ2V0T3IoW10pOwoKICAgICAgaWYgKDAgPCByLmxlbmd0aCAmJiAwIDwgby5sZW5ndGgpIHsKICAgICAgICB2YXIgaSA9IGlnKHMsIHUpOwogICAgICAgIHJldHVybiB2ZS5zb21lKHNwLm11bHRpVGFibGUociwgbywgaSkpOwogICAgICB9CgogICAgICByZXR1cm4gdmUubm9uZSgpOwogICAgfSkgOiBuZyh5LCBpID0gQywgYSA9IHQsIGIpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBlLnN0YXJ0LAogICAgICAgICAgbiA9IGUuZW5kOwogICAgICByZXR1cm4gdC5vcihuKTsKICAgIH0pLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBpLmlzU2FtZVRhYmxlLAogICAgICAgICAgbiA9IG9nKGUpLmdldE9yKFtdKTsKICAgICAgaWYgKHQgJiYgZS5jZWxscy5sZW5ndGggPT09IG4ubGVuZ3RoKSByZXR1cm4gdmUuc29tZShzcC5mdWxsVGFibGUoZS50YWJsZSkpOwoKICAgICAgaWYgKDAgPCBuLmxlbmd0aCkgewogICAgICAgIGlmICh0KSByZXR1cm4gdmUuc29tZShzcC5wYXJ0aWFsVGFibGUobiwgdmUubm9uZSgpKSk7CiAgICAgICAgdmFyIHIgPSBpZyhhLCBpKTsKICAgICAgICByZXR1cm4gdmUuc29tZShzcC5wYXJ0aWFsVGFibGUobiwgdmUuc29tZShfZTIoX2UyKHt9LCBpKSwgewogICAgICAgICAgcm5nOiByCiAgICAgICAgfSkpKSk7CiAgICAgIH0KCiAgICAgIHJldHVybiB2ZS5ub25lKCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIHVnKGUpIHsKICAgIHJldHVybiBZKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHluKGUsICJjb250ZW50ZWRpdGFibGUiKSwgbW0oZSk7CiAgICB9KSwgMDsKICB9CgogIGZ1bmN0aW9uIHNnKGUsIHQsIG4sIHIpIHsKICAgIHZhciBvID0gbi5jbG9uZVJhbmdlKCk7CiAgICByID8gKG8uc2V0U3RhcnQobi5zdGFydENvbnRhaW5lciwgbi5zdGFydE9mZnNldCksIG8uc2V0RW5kQWZ0ZXIodC5kb20ubGFzdENoaWxkKSkgOiAoby5zZXRTdGFydEJlZm9yZSh0LmRvbS5maXJzdENoaWxkKSwgby5zZXRFbmQobi5lbmRDb250YWluZXIsIG4uZW5kT2Zmc2V0KSksIGxwKGUsIG8sIHQsICExKTsKICB9CgogIGZ1bmN0aW9uIGNnKGUpIHsKICAgIHZhciB0ID0gX2woZSksCiAgICAgICAgbiA9IE50LmZyb21Eb20oZS5zZWxlY3Rpb24uZ2V0Tm9kZSgpKTsKCiAgICBHbihuLmRvbSkgJiYgV3IobikgPyBlLnNlbGVjdGlvbi5zZXRDdXJzb3JMb2NhdGlvbihuLmRvbSwgMCkgOiBlLnNlbGVjdGlvbi5jb2xsYXBzZSghMCksIDEgPCB0Lmxlbmd0aCAmJiBGKHQsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBqZShlLCBuKTsKICAgIH0pICYmIHBuKG4sICJkYXRhLW1jZS1zZWxlY3RlZCIsICIxIik7CiAgfQoKICBmdW5jdGlvbiBsZyhzLCBjLCBlKSB7CiAgICB2YXIgbCA9IHMuc2VsZWN0aW9uLmdldFJuZygpOwogICAgcmV0dXJuIHVnKGUuYmluZChmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCwKICAgICAgICAgIG4sCiAgICAgICAgICByLAogICAgICAgICAgbyA9IGUucm5nLAogICAgICAgICAgaSA9IGUuaXNTdGFydEluVGFibGUsCiAgICAgICAgICBhID0gKHQgPSBpID8gby5lbmRDb250YWluZXIgOiBvLnN0YXJ0Q29udGFpbmVyLCB2ZS5mcm9tKHMuZG9tLmdldFBhcmVudCh0LCBzLmRvbS5pc0Jsb2NrKSkubWFwKE50LmZyb21Eb20pKTsKICAgICAgby5kZWxldGVDb250ZW50cygpLCBuID0gcywgciA9IGksIGEuZmlsdGVyKFdyKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgciA/IExuKGUpIDogKG1tKGUpLCBuLnNlbGVjdGlvbi5zZXRDdXJzb3JMb2NhdGlvbihlLmRvbSwgMCkpOwogICAgICB9KTsKICAgICAgdmFyIHUgPSBpID8gY1swXSA6IGNbYy5sZW5ndGggLSAxXTsKICAgICAgcmV0dXJuIHNnKHMsIHUsIGwsIGkpLCBXcih1KSA/IHZlLm5vbmUoKSA6IHZlLnNvbWUoaSA/IGMuc2xpY2UoMSkgOiBjLnNsaWNlKDAsIC0xKSk7CiAgICB9KS5nZXRPcihjKSksIGNnKHMpLCAhMDsKICB9CgogIGZ1bmN0aW9uIGZnKGUsIHQsIG4sIHIpIHsKICAgIHZhciBvID0gZS5zZWxlY3Rpb24uZ2V0Um5nKCksCiAgICAgICAgaSA9IHRbMF0sCiAgICAgICAgYSA9IG5bbi5sZW5ndGggLSAxXTsKICAgIHNnKGUsIGksIG8sICEwKSwgc2coZSwgYSwgbywgITEpOwogICAgdmFyIHUgPSBXcihpKSA/IHQgOiB0LnNsaWNlKDEpLAogICAgICAgIHMgPSBXcihhKSA/IG4gOiBuLnNsaWNlKDAsIC0xKTsKICAgIHJldHVybiB1Zyh1LmNvbmNhdChzKSksIHIuZGVsZXRlQ29udGVudHMoKSwgY2coZSksICEwOwogIH0KCiAgZnVuY3Rpb24gZGcoZSwgdCkgewogICAgcmV0dXJuIFltKGUsICExLCB0KSwgITA7CiAgfQoKICBmdW5jdGlvbiBtZyhlLCB0KSB7CiAgICByZXR1cm4gTShobSh0LCBlKSwgaG8pOwogIH0KCiAgZnVuY3Rpb24gZ2coZSwgdCkgewogICAgcmV0dXJuIChlID8gUWcgOiBaZykodCk7CiAgfQoKICBmdW5jdGlvbiBwZyhmLCBkLCBzKSB7CiAgICB2YXIgbSA9IE50LmZyb21Eb20oZi5nZXRCb2R5KCkpOwogICAgcmV0dXJuIGZwKG0sIHMpLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gbyA9IGYsIGkgPSBkLCBhID0gbSwgZSA9IHMsIHUgPSBhcy5mcm9tUmFuZ2VTdGFydChvLnNlbGVjdGlvbi5nZXRSbmcoKSksIG1nKGEsIGUpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gV3IoZSkgPyBkcChvLCBlKSA6ICh0ID0gYSwgbiA9IGUsIHIgPSB1LCBGYyhpLCBvLmdldEJvZHkoKSwgcikuYmluZChmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIG1nKHQsIE50LmZyb21Eb20oZS5nZXROb2RlKCkpKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgcmV0dXJuICExID09PSBqZShlLCBuKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pKTsKICAgICAgICB2YXIgdCwgbiwgcjsKICAgICAgfSkuZ2V0T3IoITEpIHx8IChuID0gZCwgciA9IGFzLmZyb21SYW5nZVN0YXJ0KCh0ID0gZikuc2VsZWN0aW9uLmdldFJuZygpKSwgZ2cobiwgcikgfHwgR2wobiwgdC5nZXRCb2R5KCksIHIpLmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBnZyhuLCBlKTsKICAgICAgfSkpOwogICAgICB2YXIgbywgaSwgYSwgZSwgdSwgdCwgbiwgcjsKICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBuID0gZCwgciA9IG0sIG8gPSBlLCBpID0gYXMuZnJvbVJhbmdlU3RhcnQoKHQgPSBmKS5zZWxlY3Rpb24uZ2V0Um5nKCkpLCAoV3IobykgPyBkcCh0LCBvKSA6ICh1ID0gciwgYyA9IG8sIGwgPSBpLCBGYyhzID0gbiwgKGEgPSB0KS5nZXRCb2R5KCksIGwpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gciA9IHMsIG8gPSBsLCBpID0gZSwgZWYoKG4gPSBjKS5kb20pLmJpbmQoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIHJldHVybiB0ZihuLmRvbSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiByID8gby5pc0VxdWFsKHQpICYmIGkuaXNFcXVhbChlKSA6IG8uaXNFcXVhbChlKSAmJiBpLmlzRXF1YWwodCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KS5nZXRPcighMCkgPyBkcChhLCBjKSA6ICh0ID0gYywgZnAodSwgTnQuZnJvbURvbShlLmdldE5vZGUoKSkpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuICExID09PSBqZShlLCB0KTsKICAgICAgICB9KSk7CiAgICAgICAgdmFyIHQsIG4sIHIsIG8sIGk7CiAgICAgIH0pLm9yKHZlLnNvbWUoITApKSkpLmdldE9yKCExKTsKICAgICAgdmFyIGEsIHUsIHMsIGMsIGwsIHQsIG4sIHIsIG8sIGk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGhnKGUsIHQpIHsKICAgIHZhciBuLAogICAgICAgIHIsCiAgICAgICAgbywKICAgICAgICBpLAogICAgICAgIGEsCiAgICAgICAgdSwKICAgICAgICBzLAogICAgICAgIGMsCiAgICAgICAgbCA9IE50LmZyb21Eb20oZS5zZWxlY3Rpb24uZ2V0U3RhcnQoITApKSwKICAgICAgICBmID0gX2woZSk7CgogICAgcmV0dXJuIGUuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgJiYgMCA9PT0gZi5sZW5ndGggPyBwZyhlLCB0LCBsKSA6IChyID0gbCwgbyA9IGYsIGkgPSBOdC5mcm9tRG9tKChuID0gZSkuZ2V0Qm9keSgpKSwgYSA9IG4uc2VsZWN0aW9uLmdldFJuZygpLCAwICE9PSBvLmxlbmd0aCA/IGxnKG4sIG8sIHZlLm5vbmUoKSkgOiAodSA9IG4sIGMgPSBhLCBmcChzID0gaSwgcikuZm9sZChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0ID0gdSwgYWcocywgYykubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGUuZm9sZChBKGxwLCB0KSwgQShkZywgdCksIEEobGcsIHQpLCBBKGZnLCB0KSk7CiAgICAgIH0pOwogICAgICB2YXIgdDsKICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBkcCh1LCBlKTsKICAgIH0pLmdldE9yKCExKSkpOwogIH0KCiAgZnVuY3Rpb24gdmcoZSkgewogICAgcmV0dXJuIGUuY29sbGFwc2VkID8gZSA6IChhID0gZSwgdSA9IGFzLmZyb21SYW5nZVN0YXJ0KGEpLCBzID0gYXMuZnJvbVJhbmdlRW5kKGEpLCBjID0gYS5jb21tb25BbmNlc3RvckNvbnRhaW5lciwgR2woITEsIGMsIHMpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gIVlzKHUsIHMsIGMpICYmIFlzKHUsIGUsIGMpID8gKHQgPSB1LmNvbnRhaW5lcigpLCBuID0gdS5vZmZzZXQoKSwgciA9IGUuY29udGFpbmVyKCksIG8gPSBlLm9mZnNldCgpLCAoaSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCkpLnNldFN0YXJ0KHQsIG4pLCBpLnNldEVuZChyLCBvKSwgaSkgOiBhOwogICAgICB2YXIgdCwgbiwgciwgbywgaTsKICAgIH0pLmdldE9yKGEpKTsKICAgIHZhciBhLCB1LCBzLCBjOwogIH0KCiAgZnVuY3Rpb24gYmcoZSwgdCkgewogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYSwKICAgICAgICB1ID0gdC5maXJzdENoaWxkLAogICAgICAgIHMgPSB0Lmxhc3RDaGlsZDsKICAgIHJldHVybiB1ICYmICJtZXRhIiA9PT0gdS5uYW1lICYmICh1ID0gdS5uZXh0KSwgciA9IHMgPSBzICYmICJtY2VfbWFya2VyIiA9PT0gcy5hdHRyKCJpZCIpID8gcy5wcmV2IDogcywgbyA9IChuID0gZSkuZ2V0Tm9uRW1wdHlFbGVtZW50cygpLCByICYmIChyLmlzRW1wdHkobykgfHwgKGkgPSByLCBuLmdldEJsb2NrRWxlbWVudHMoKVtpLm5hbWVdICYmIGkuZmlyc3RDaGlsZCAmJiBpLmZpcnN0Q2hpbGQgPT09IGkubGFzdENoaWxkICYmICgiYnIiID09PSAoYSA9IGkuZmlyc3RDaGlsZCkubmFtZSB8fCBhLnZhbHVlID09PSB5bykpKSAmJiAocyA9IHMucHJldiksIHUgJiYgdSA9PT0gcyAmJiAoInVsIiA9PT0gdS5uYW1lIHx8ICJvbCIgPT09IHUubmFtZSk7CiAgfQoKICBmdW5jdGlvbiB5ZyhlKSB7CiAgICByZXR1cm4gMCA8IGUubGVuZ3RoICYmICghKHIgPSBlW2UubGVuZ3RoIC0gMV0pLmZpcnN0Q2hpbGQgfHwgKHQgPSByKSAmJiB0LmZpcnN0Q2hpbGQgJiYgdC5maXJzdENoaWxkID09PSB0Lmxhc3RDaGlsZCAmJiAoKG4gPSB0LmZpcnN0Q2hpbGQpLmRhdGEgPT09IHlvIHx8IFduKG4pKSkgPyBlLnNsaWNlKDAsIC0xKSA6IGU7CiAgICB2YXIgdCwgbiwgcjsKICB9CgogIGZ1bmN0aW9uIENnKGUsIHQpIHsKICAgIHZhciBuID0gZS5nZXRQYXJlbnQodCwgZS5pc0Jsb2NrKTsKICAgIHJldHVybiBuICYmICJMSSIgPT09IG4ubm9kZU5hbWUgPyBuIDogbnVsbDsKICB9CgogIGZ1bmN0aW9uIHhnKGUsIHQpIHsKICAgIHZhciBuID0gYXMuYWZ0ZXIoZSksCiAgICAgICAgciA9IFBjKHQpLnByZXYobik7CiAgICByZXR1cm4gciA/IHIudG9SYW5nZSgpIDogbnVsbDsKICB9CgogIGZ1bmN0aW9uIHdnKGUsIG8sIGksIHQpIHsKICAgIGZ1bmN0aW9uIG4oZSkgewogICAgICB2YXIgdCA9IGFzLmZyb21SYW5nZVN0YXJ0KGkpLAogICAgICAgICAgbiA9IFBjKG8uZ2V0Um9vdCgpKSwKICAgICAgICAgIHIgPSAxID09PSBlID8gbi5wcmV2KHQpIDogbi5uZXh0KHQpOwogICAgICByZXR1cm4gIXIgfHwgQ2cobywgci5nZXROb2RlKCkpICE9PSBSOwogICAgfQoKICAgIHZhciByLAogICAgICAgIGEsCiAgICAgICAgdSwKICAgICAgICBzLAogICAgICAgIGMsCiAgICAgICAgbCwKICAgICAgICBmLAogICAgICAgIGQsCiAgICAgICAgbSwKICAgICAgICBnLAogICAgICAgIHAsCiAgICAgICAgaCwKICAgICAgICB2LAogICAgICAgIGIsCiAgICAgICAgeSwKICAgICAgICBDLAogICAgICAgIHgsCiAgICAgICAgdywKICAgICAgICBTLAogICAgICAgIEUsCiAgICAgICAgTiwKICAgICAgICBrLAogICAgICAgIF8sCiAgICAgICAgQSA9IChyID0gbywgYyA9IGUuc2VyaWFsaXplKHQpLCB1ID0gKGEgPSByLmNyZWF0ZUZyYWdtZW50KGMpKS5maXJzdENoaWxkLCBzID0gYS5sYXN0Q2hpbGQsIHUgJiYgIk1FVEEiID09PSB1Lm5vZGVOYW1lICYmIHUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh1KSwgcyAmJiAibWNlX21hcmtlciIgPT09IHMuaWQgJiYgcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHMpLCBhKSwKICAgICAgICBSID0gQ2cobywgaS5zdGFydENvbnRhaW5lciksCiAgICAgICAgRCA9IHlnKFUoQS5maXJzdENoaWxkLmNoaWxkTm9kZXMsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiAiTEkiID09PSBlLm5vZGVOYW1lOwogICAgfSkpLAogICAgICAgIFQgPSBvLmdldFJvb3QoKTsKCiAgICByZXR1cm4gbigxKSA/IChTID0gVCwgXyA9ICh3ID0gUikucGFyZW50Tm9kZSwgRXQuZWFjaChELCBmdW5jdGlvbiAoZSkgewogICAgICBfLmluc2VydEJlZm9yZShlLCB3KTsKICAgIH0pLCBFID0gUywgTiA9IGFzLmJlZm9yZSh3KSwgKGsgPSBQYyhFKS5uZXh0KE4pKSA/IGsudG9SYW5nZSgpIDogbnVsbCkgOiBuKDIpID8gKGwgPSBSLCBkID0gVCwgby5pbnNlcnRBZnRlcigoZiA9IEQpLnJldmVyc2UoKSwgbCksIHhnKGZbMF0sIGQpKSA6IChnID0gRCwgcCA9IFQsIGggPSBtID0gUiwgYiA9ICh2ID0gaSkuY2xvbmVSYW5nZSgpLCB5ID0gdi5jbG9uZVJhbmdlKCksIGIuc2V0U3RhcnRCZWZvcmUoaCksIHkuc2V0RW5kQWZ0ZXIoaCksIEMgPSBbYi5jbG9uZUNvbnRlbnRzKCksIHkuY2xvbmVDb250ZW50cygpXSwgKHggPSBtLnBhcmVudE5vZGUpLmluc2VydEJlZm9yZShDWzBdLCBtKSwgRXQuZWFjaChnLCBmdW5jdGlvbiAoZSkgewogICAgICB4Lmluc2VydEJlZm9yZShlLCBtKTsKICAgIH0pLCB4Lmluc2VydEJlZm9yZShDWzFdLCBtKSwgeC5yZW1vdmVDaGlsZChtKSwgeGcoZ1tnLmxlbmd0aCAtIDFdLCBwKSk7CiAgfQoKICBmdW5jdGlvbiBTZyhlLCB0LCBuKSB7CiAgICB2YXIgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYSwKICAgICAgICB1ID0gZS5zZWxlY3Rpb24sCiAgICAgICAgcyA9IGUuZG9tOwogICAgL14gfCAkLy50ZXN0KHQpICYmIChyID0gcywgbyA9IHUuZ2V0Um5nKCksIGkgPSB0LCBpID0gRG0oYSA9IE50LmZyb21Eb20oci5nZXRSb290KCkpLCBhcy5mcm9tUmFuZ2VTdGFydChvKSkgPyBpLnJlcGxhY2UoL14gLywgIiZuYnNwOyIpIDogaS5yZXBsYWNlKC9eJm5ic3A7LywgIiAiKSwgdCA9IGkgPSBUbShhLCBhcy5mcm9tUmFuZ2VFbmQobykpID8gaS5yZXBsYWNlKC8oJm5ic3A7fCApKDxiciggXC8pPik/JC8sICImbmJzcDsiKSA6IGkucmVwbGFjZSgvJm5ic3A7KDxiciggXC8pPz4pPyQvLCAiICIpKTsKICAgIHZhciBjID0gZS5wYXJzZXIsCiAgICAgICAgbCA9IG4ubWVyZ2UsCiAgICAgICAgZiA9IG5tKHsKICAgICAgdmFsaWRhdGU6IGUuZ2V0UGFyYW0oInZhbGlkYXRlIikKICAgIH0sIGUuc2NoZW1hKSwKICAgICAgICBkID0gJzxzcGFuIGlkPSJtY2VfbWFya2VyIiBkYXRhLW1jZS10eXBlPSJib29rbWFyayI+JiN4RkVGRjs8L3NwYW4+JywKICAgICAgICBtID0gZS5maXJlKCJCZWZvcmVTZXRDb250ZW50IiwgewogICAgICBjb250ZW50OiB0LAogICAgICBmb3JtYXQ6ICJodG1sIiwKICAgICAgc2VsZWN0aW9uOiAhMCwKICAgICAgcGFzdGU6IG4ucGFzdGUKICAgIH0pOwogICAgaWYgKG0uaXNEZWZhdWx0UHJldmVudGVkKCkpIGUuZmlyZSgiU2V0Q29udGVudCIsIHsKICAgICAgY29udGVudDogbS5jb250ZW50LAogICAgICBmb3JtYXQ6ICJodG1sIiwKICAgICAgc2VsZWN0aW9uOiAhMCwKICAgICAgcGFzdGU6IG4ucGFzdGUKICAgIH0pO2Vsc2UgewogICAgICAtMSA9PT0gKHQgPSBtLmNvbnRlbnQpLmluZGV4T2YoInskY2FyZXR9IikgJiYgKHQgKz0gInskY2FyZXR9IiksIHQgPSB0LnJlcGxhY2UoL1x7XCRjYXJldFx9LywgZCk7CiAgICAgIHZhciBnLAogICAgICAgICAgcCwKICAgICAgICAgIGggPSAoZyA9IHUuZ2V0Um5nKCkpLnN0YXJ0Q29udGFpbmVyIHx8IChnLnBhcmVudEVsZW1lbnQgPyBnLnBhcmVudEVsZW1lbnQoKSA6IG51bGwpLAogICAgICAgICAgdiA9IGUuZ2V0Qm9keSgpOwogICAgICBoID09PSB2ICYmIHUuaXNDb2xsYXBzZWQoKSAmJiBzLmlzQmxvY2sodi5maXJzdENoaWxkKSAmJiAocCA9IHYuZmlyc3RDaGlsZCkgJiYgIWUuc2NoZW1hLmdldFNob3J0RW5kZWRFbGVtZW50cygpW3Aubm9kZU5hbWVdICYmIHMuaXNFbXB0eSh2LmZpcnN0Q2hpbGQpICYmICgoZyA9IHMuY3JlYXRlUm5nKCkpLnNldFN0YXJ0KHYuZmlyc3RDaGlsZCwgMCksIGcuc2V0RW5kKHYuZmlyc3RDaGlsZCwgMCksIHUuc2V0Um5nKGcpKSwgdS5pc0NvbGxhcHNlZCgpIHx8IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIHQgPSBlLmRvbSwKICAgICAgICAgICAgbiA9IHZnKGUuc2VsZWN0aW9uLmdldFJuZygpKTsKICAgICAgICBlLnNlbGVjdGlvbi5zZXRSbmcobik7CiAgICAgICAgdmFyIHIsCiAgICAgICAgICAgIG8gPSB0LmdldFBhcmVudChuLnN0YXJ0Q29udGFpbmVyLCBtcCksCiAgICAgICAgICAgIGkgPSBuOwogICAgICAgIG51bGwgIT09IChyID0gbykgJiYgciA9PT0gdC5nZXRQYXJlbnQoaS5lbmRDb250YWluZXIsIG1wKSAmJiBSbChOdC5mcm9tRG9tKHIpLCBpKSA/IGxwKGUsIG4sIE50LmZyb21Eb20obykpIDogZS5nZXREb2MoKS5leGVjQ29tbWFuZCgiRGVsZXRlIiwgITEsIG51bGwpOwogICAgICB9KGUpOwoKICAgICAgdmFyIGIsCiAgICAgICAgICB5LAogICAgICAgICAgQywKICAgICAgICAgIHgsCiAgICAgICAgICB3LAogICAgICAgICAgUywKICAgICAgICAgIEUsCiAgICAgICAgICBOLAogICAgICAgICAgaywKICAgICAgICAgIF8sCiAgICAgICAgICBBLAogICAgICAgICAgUiwKICAgICAgICAgIEQsCiAgICAgICAgICBULAogICAgICAgICAgTyA9IHsKICAgICAgICBjb250ZXh0OiAoSSA9IHUuZ2V0Tm9kZSgpKS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLAogICAgICAgIGRhdGE6IG4uZGF0YSwKICAgICAgICBpbnNlcnQ6ICEwCiAgICAgIH0sCiAgICAgICAgICBCID0gYy5wYXJzZSh0LCBPKTsKCiAgICAgIGlmICghMCA9PT0gbi5wYXN0ZSAmJiBiZyhlLnNjaGVtYSwgQikgJiYgQ2cocywgSSkpIHJldHVybiBnID0gd2coZiwgcywgdS5nZXRSbmcoKSwgQiksIHUuc2V0Um5nKGcpLCB2b2lkIGUuZmlyZSgiU2V0Q29udGVudCIsIG0pOwogICAgICBpZiAoZnVuY3Rpb24gKCkgewogICAgICAgIGZvciAodmFyIGUgPSBCOyBlID0gZS53YWxrKCk7KSB7CiAgICAgICAgICAxID09PSBlLnR5cGUgJiYgZS5hdHRyKCJkYXRhLW1jZS1mcmFnbWVudCIsICIxIik7CiAgICAgICAgfQogICAgICB9KCksICJtY2VfbWFya2VyIiA9PT0gKEwgPSBCLmxhc3RDaGlsZCkuYXR0cigiaWQiKSkgZm9yICh2YXIgUCA9IEwsIEwgPSBMLnByZXY7IEw7IEwgPSBMLndhbGsoITApKSB7CiAgICAgICAgaWYgKDMgPT09IEwudHlwZSB8fCAhcy5pc0Jsb2NrKEwubmFtZSkpIHsKICAgICAgICAgIGUuc2NoZW1hLmlzVmFsaWRDaGlsZChMLnBhcmVudC5uYW1lLCAic3BhbiIpICYmIEwucGFyZW50Lmluc2VydChQLCBMLCAiYnIiID09PSBMLm5hbWUpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoZS5fc2VsZWN0aW9uT3ZlcnJpZGVzLnNob3dCbG9ja0NhcmV0Q29udGFpbmVyKEkpLCBPLmludmFsaWQpIHsKICAgICAgICBlLnNlbGVjdGlvbi5zZXRDb250ZW50KGQpOwogICAgICAgIHZhciBJID0gdS5nZXROb2RlKCksCiAgICAgICAgICAgIE0gPSBlLmdldEJvZHkoKTsKCiAgICAgICAgZm9yICg5ID09PSBJLm5vZGVUeXBlID8gSSA9IEwgPSBNIDogTCA9IEk7IEwgIT09IE07KSB7CiAgICAgICAgICBMID0gKEkgPSBMKS5wYXJlbnROb2RlOwogICAgICAgIH0KCiAgICAgICAgdCA9IEkgPT09IE0gPyBNLmlubmVySFRNTCA6IHMuZ2V0T3V0ZXJIVE1MKEkpLCB0ID0gZi5zZXJpYWxpemUoYy5wYXJzZSh0LnJlcGxhY2UoLzxzcGFuIChpZD0ibWNlX21hcmtlciJ8aWQ9bWNlX21hcmtlcikuKz88XC9zcGFuPi9pLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gZi5zZXJpYWxpemUoQik7CiAgICAgICAgfSkpKSwgSSA9PT0gTSA/IHMuc2V0SFRNTChNLCB0KSA6IHMuc2V0T3V0ZXJIVE1MKEksIHQpOwogICAgICB9IGVsc2UgYiA9IGUsIHkgPSB0ID0gZi5zZXJpYWxpemUoQiksICJhbGwiID09PSAoQyA9IEkpLmdldEF0dHJpYnV0ZSgiZGF0YS1tY2UtYm9ndXMiKSA/IEMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYi5kb20uY3JlYXRlRnJhZ21lbnQoeSksIEMpIDogKHggPSBDLmZpcnN0Q2hpbGQsIHcgPSBDLmxhc3RDaGlsZCwgIXggfHwgeCA9PT0gdyAmJiAiQlIiID09PSB4Lm5vZGVOYW1lID8gYi5kb20uc2V0SFRNTChDLCB5KSA6IGIuc2VsZWN0aW9uLnNldENvbnRlbnQoeSkpOwoKICAgICAgRSA9IGwsIF8gPSAoUyA9IGUpLnNjaGVtYS5nZXRUZXh0SW5saW5lRWxlbWVudHMoKSwgQSA9IFMuZG9tLCBFICYmIChOID0gUy5nZXRCb2R5KCksIGsgPSBlbShBKSwgRXQuZWFjaChBLnNlbGVjdCgiKltkYXRhLW1jZS1mcmFnbWVudF0iKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoVihfW2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pICYmIGoodW0oQSwgZSksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gIWFtLmhhcyhlKTsKICAgICAgICB9KSkgZm9yICh2YXIgdCA9IGUucGFyZW50Tm9kZTsgVih0KSAmJiB0ICE9PSBOICYmICFmdW5jdGlvbiAociwgbywgaSkgewogICAgICAgICAgZnVuY3Rpb24gYShlKSB7CiAgICAgICAgICAgIHZhciB0ID0gci5nZXRTdHlsZShvLCBlKSwKICAgICAgICAgICAgICAgIG4gPSByLmdldFN0eWxlKGksIGUpOwogICAgICAgICAgICByZXR1cm4gQmUodCkgJiYgQmUobikgJiYgdCAhPT0gbjsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgZSA9IHVtKHIsIG8pLAogICAgICAgICAgICAgIHUgPSB1bShyLCBpKTsKICAgICAgICAgIHJldHVybiBGKGUsIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIGUoZSkgewogICAgICAgICAgICAgIHJldHVybiBGKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZSA9PT0gdDsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGUodSkgfHwgIWUoJGcpKSByZXR1cm4gYSh0KTsKICAgICAgICAgICAgdmFyIG4gPSBVKHUsIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIEYoJGcsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gR2UodCwgZSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gRihuLCBhKTsKICAgICAgICAgIH0pOwogICAgICAgIH0oQSwgZSwgdCk7IHQgPSB0LnBhcmVudE5vZGUpIHsKICAgICAgICAgIGlmIChrLmNvbXBhcmUodCwgZSkpIHsKICAgICAgICAgICAgQS5yZW1vdmUoZSwgITApOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pKSwgZnVuY3Rpb24gKG4sIGUpIHsKICAgICAgICB2YXIgdCwKICAgICAgICAgICAgciA9IG4uZG9tLAogICAgICAgICAgICBvID0gbi5zZWxlY3Rpb247CgogICAgICAgIGlmIChlKSB7CiAgICAgICAgICBvLnNjcm9sbEludG9WaWV3KGUpOwogICAgICAgICAgdmFyIGkgPSBwZihuLmdldEJvZHkoKSwgZSk7CiAgICAgICAgICBpZiAoImZhbHNlIiA9PT0gci5nZXRDb250ZW50RWRpdGFibGUoaSkpIHJldHVybiByLnJlbW92ZShlKSwgby5zZWxlY3QoaSk7CiAgICAgICAgICB2YXIgYSwKICAgICAgICAgICAgICB1ID0gci5jcmVhdGVSbmcoKSwKICAgICAgICAgICAgICBzID0gZS5wcmV2aW91c1NpYmxpbmc7CiAgICAgICAgICBqbihzKSA/ICh1LnNldFN0YXJ0KHMsIHMubm9kZVZhbHVlLmxlbmd0aCksIHh0LmllIHx8IChhID0gZS5uZXh0U2libGluZywgam4oYSkgJiYgKHMuYXBwZW5kRGF0YShhLmRhdGEpLCBhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYSkpKSkgOiAodS5zZXRTdGFydEJlZm9yZShlKSwgdS5zZXRFbmRCZWZvcmUoZSkpOwogICAgICAgICAgdmFyIGMgPSByLmdldFBhcmVudChlLCByLmlzQmxvY2spOwogICAgICAgICAgci5yZW1vdmUoZSksIGMgJiYgci5pc0VtcHR5KGMpICYmIChuLiQoYykuZW1wdHkoKSwgdS5zZXRTdGFydChjLCAwKSwgdS5zZXRFbmQoYywgMCksIG1wKGMpIHx8IGMuZ2V0QXR0cmlidXRlKCJkYXRhLW1jZS1mcmFnbWVudCIpIHx8ICEodCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciB0ID0gYXMuZnJvbVJhbmdlU3RhcnQoZSk7CiAgICAgICAgICAgIGlmICh0ID0gUGMobi5nZXRCb2R5KCkpLm5leHQodCkpIHJldHVybiB0LnRvUmFuZ2UoKTsKICAgICAgICAgIH0odSkpID8gci5hZGQoYywgci5jcmVhdGUoImJyIiwgewogICAgICAgICAgICAiZGF0YS1tY2UtYm9ndXMiOiAiMSIKICAgICAgICAgIH0pKSA6ICh1ID0gdCwgci5yZW1vdmUoYykpKSwgby5zZXRSbmcodSk7CiAgICAgICAgfQogICAgICB9KGUsIHMuZ2V0KCJtY2VfbWFya2VyIikpLCBSID0gZS5nZXRCb2R5KCksIEV0LmVhY2goUi5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGUucmVtb3ZlQXR0cmlidXRlKCJkYXRhLW1jZS1mcmFnbWVudCIpOwogICAgICB9KSwgRCA9IHMsIFQgPSB1LmdldFN0YXJ0KCksIHZlLmZyb20oRC5nZXRQYXJlbnQoVCwgInRkLHRoIikpLm1hcChOdC5mcm9tRG9tKS5lYWNoKGdtKSwgZS5maXJlKCJTZXRDb250ZW50IiwgbSksIGUuYWRkVmlzdWFsKCk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBFZyhlKSB7CiAgICByZXR1cm4gZSBpbnN0YW5jZW9mIFVkOwogIH0KCiAgZnVuY3Rpb24gTmcoZSwgdCwgbikgewogICAgdmFyIHI7CiAgICBlLmRvbS5zZXRIVE1MKGUuZ2V0Qm9keSgpLCB0KSwgITAgIT09IG4gJiYgdmQociA9IGUpICYmIGVmKHIuZ2V0Qm9keSgpKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gZS5nZXROb2RlKCksCiAgICAgICAgICBuID0gY24odCkgPyBlZih0KS5nZXRPcihlKSA6IGU7CiAgICAgIHIuc2VsZWN0aW9uLnNldFJuZyhuLnRvUmFuZ2UoKSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGtnKHUsIHMsIGUpIHsKICAgIHZhciB0LAogICAgICAgIG4gPSAodCA9IHMsIF9lMihfZTIoewogICAgICBmb3JtYXQ6ICJodG1sIgogICAgfSwgZSksIHsKICAgICAgc2V0OiAhMCwKICAgICAgY29udGVudDogRWcodCkgPyAiIiA6IHQKICAgIH0pKSwKICAgICAgICBjID0gZS5ub19ldmVudHMgPyBuIDogdS5maXJlKCJCZWZvcmVTZXRDb250ZW50Iiwgbik7CiAgICByZXR1cm4gRWcocykgfHwgKHMgPSBjLmNvbnRlbnQpLCB2ZS5mcm9tKHUuZ2V0Qm9keSgpKS5mb2xkKEoocyksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBFZyhzKSA/IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7CiAgICAgICAgdmFyIG8sIGksIHUsIGE7CiAgICAgICAgbyA9IGUucGFyc2VyLmdldE5vZGVGaWx0ZXJzKCksIGkgPSBlLnBhcnNlci5nZXRBdHRyaWJ1dGVGaWx0ZXJzKCksIHUgPSBuLCBhID0gZnVuY3Rpb24gKGUsIG4pIHsKICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgIHIsCiAgICAgICAgICAgICAgbyA9IHt9LAogICAgICAgICAgICAgIGkgPSB7fSwKICAgICAgICAgICAgICBhID0gW107CgogICAgICAgICAgZm9yICh0IGluIHUuZmlyc3RDaGlsZCAmJiBncCh1LmZpcnN0Q2hpbGQsIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgIFkoZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBlLm5hbWUgPT09IHQubmFtZSAmJiAob1tlLm5hbWVdID8gb1tlLm5hbWVdLm5vZGVzLnB1c2godCkgOiBvW2UubmFtZV0gPSB7CiAgICAgICAgICAgICAgICBmaWx0ZXI6IGUsCiAgICAgICAgICAgICAgICBub2RlczogW3RdCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pLCBZKG4sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgInN0cmluZyIgPT0gdHlwZW9mIHQuYXR0cihlLm5hbWUpICYmIChpW2UubmFtZV0gPyBpW2UubmFtZV0ubm9kZXMucHVzaCh0KSA6IGlbZS5uYW1lXSA9IHsKICAgICAgICAgICAgICAgIGZpbHRlcjogZSwKICAgICAgICAgICAgICAgIG5vZGVzOiBbdF0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KSwgbykgewogICAgICAgICAgICBOZShvLCB0KSAmJiBhLnB1c2gob1t0XSk7CiAgICAgICAgICB9CgogICAgICAgICAgZm9yIChyIGluIGkpIHsKICAgICAgICAgICAgTmUoaSwgcikgJiYgYS5wdXNoKGlbcl0pOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBhOwogICAgICAgIH0obywgaSksIFkoYSwgZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIFkodC5maWx0ZXIuY2FsbGJhY2tzLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBlKHQubm9kZXMsIHQuZmlsdGVyLm5hbWUsIHt9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIHZhciBzID0gbm0oewogICAgICAgICAgdmFsaWRhdGU6IGUudmFsaWRhdGUKICAgICAgICB9LCBlLnNjaGVtYSkuc2VyaWFsaXplKG4pOwogICAgICAgIHJldHVybiByLmNvbnRlbnQgPSB2byhOdC5mcm9tRG9tKHQpKSA/IHMgOiBFdC50cmltKHMpLCBOZyhlLCByLmNvbnRlbnQsIHIubm9fc2VsZWN0aW9uKSwgci5ub19ldmVudHMgfHwgZS5maXJlKCJTZXRDb250ZW50IiwgciksIG47CiAgICAgIH0odSwgZSwgcywgYykgOiAodCA9IHUsIG4gPSBlLCBvID0gYywgMCA9PT0gKHIgPSBzKS5sZW5ndGggfHwgL15ccyskLy50ZXN0KHIpID8gKGkgPSAnPGJyIGRhdGEtbWNlLWJvZ3VzPSIxIj4nLCAiVEFCTEUiID09PSBuLm5vZGVOYW1lID8gciA9ICI8dHI+PHRkPiIgKyBpICsgIjwvdGQ+PC90cj4iIDogL14oVUx8T0wpJC8udGVzdChuLm5vZGVOYW1lKSAmJiAociA9ICI8bGk+IiArIGkgKyAiPC9saT4iKSwgciA9IChhID0gU3ModCkpICYmIHQuc2NoZW1hLmlzVmFsaWRDaGlsZChuLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIGEudG9Mb3dlckNhc2UoKSkgPyAociA9IGksIHQuZG9tLmNyZWF0ZUhUTUwoYSwgRXModCksIHIpKSA6IHIgfHwgJzxiciBkYXRhLW1jZS1ib2d1cz0iMSI+JywgTmcodCwgciwgby5ub19zZWxlY3Rpb24pLCB0LmZpcmUoIlNldENvbnRlbnQiLCBvKSkgOiAoInJhdyIgIT09IG8uZm9ybWF0ICYmIChyID0gbm0oewogICAgICAgIHZhbGlkYXRlOiB0LnZhbGlkYXRlCiAgICAgIH0sIHQuc2NoZW1hKS5zZXJpYWxpemUodC5wYXJzZXIucGFyc2UociwgewogICAgICAgIGlzUm9vdENvbnRlbnQ6ICEwLAogICAgICAgIGluc2VydDogITAKICAgICAgfSkpKSwgby5jb250ZW50ID0gdm8oTnQuZnJvbURvbShuKSkgPyByIDogRXQudHJpbShyKSwgTmcodCwgby5jb250ZW50LCBvLm5vX3NlbGVjdGlvbiksIG8ubm9fZXZlbnRzIHx8IHQuZmlyZSgiU2V0Q29udGVudCIsIG8pKSwgby5jb250ZW50KTsKICAgICAgdmFyIHQsIG4sIHIsIG8sIGksIGE7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIF9nKGUpIHsKICAgIHJldHVybiB5KGUpID8gZSA6IFI7CiAgfQoKICBmdW5jdGlvbiBBZyhpLCBlLCB0KSB7CiAgICB2YXIgbiA9IGUoaSksCiAgICAgICAgYSA9IF9nKHQpOwoKICAgIHJldHVybiBuLm9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gYShpKSA/IHZlLm5vbmUoKSA6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgZm9yICh2YXIgdCA9IGkuZG9tLCBuID0gX2coYSk7IHQucGFyZW50Tm9kZTspIHsKICAgICAgICAgIHZhciB0ID0gdC5wYXJlbnROb2RlLAogICAgICAgICAgICAgIHIgPSBOdC5mcm9tRG9tKHQpLAogICAgICAgICAgICAgIG8gPSBlKHIpOwogICAgICAgICAgaWYgKG8uaXNTb21lKCkpIHJldHVybiBvOwogICAgICAgICAgaWYgKG4ocikpIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHZlLm5vbmUoKTsKICAgICAgfShlKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gUmcoZSwgdCwgbikgewogICAgdmFyIHIgPSBlLmZvcm1hdHRlci5nZXQobik7CiAgICBpZiAocikgZm9yICh2YXIgbyA9IDA7IG8gPCByLmxlbmd0aDsgbysrKSB7CiAgICAgIHZhciBpID0gcltvXTsKICAgICAgaWYgKGZsKGkpICYmICExID09PSBpLmluaGVyaXQgJiYgZS5kb20uaXModCwgaS5zZWxlY3RvcikpIHJldHVybiAxOwogICAgfQogIH0KCiAgZnVuY3Rpb24gRGcodCwgZSwgbiwgciwgbykgewogICAgdmFyIGkgPSB0LmRvbS5nZXRSb290KCk7CiAgICByZXR1cm4gZSAhPT0gaSAmJiAoZSA9IHQuZG9tLmdldFBhcmVudChlLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gISFSZyh0LCBlLCBuKSB8fCBlLnBhcmVudE5vZGUgPT09IGkgfHwgISFocCh0LCBlLCBuLCByLCAhMCk7CiAgICB9KSwgISFocCh0LCBlLCBuLCByLCBvKSk7CiAgfQoKICBmdW5jdGlvbiBUZyhlLCB0LCBuKSB7CiAgICByZXR1cm4gISFwcCh0LCBuLmlubGluZSkgfHwgISFwcCh0LCBuLmJsb2NrKSB8fCAobi5zZWxlY3RvciA/IDEgPT09IHQubm9kZVR5cGUgJiYgZS5pcyh0LCBuLnNlbGVjdG9yKSA6IHZvaWQgMCk7CiAgfQoKICBmdW5jdGlvbiBPZyhlLCB0LCBuLCByLCBvLCBpKSB7CiAgICB2YXIgYSA9IG5bcl07CiAgICBpZiAoeShuLm9ubWF0Y2gpKSByZXR1cm4gbi5vbm1hdGNoKHQsIG4sIHIpOwogICAgaWYgKGEpIGlmIChiKGEubGVuZ3RoKSkgewogICAgICBmb3IgKHZhciB1IGluIGEpIHsKICAgICAgICBpZiAoTmUoYSwgdSkpIHsKICAgICAgICAgIHZhciBzID0gImF0dHJpYnV0ZXMiID09PSByID8gZS5nZXRBdHRyaWIodCwgdSkgOiBhbChlLCB0LCB1KSwKICAgICAgICAgICAgICBjID0gcmwoYVt1XSwgaSksCiAgICAgICAgICAgICAgbCA9IEsocykgfHwgUGUocyk7CgogICAgICAgICAgaWYgKCFsIHx8ICFLKGMpKSB7CiAgICAgICAgICAgIGlmIChvICYmIGwgJiYgIW4uZXhhY3QpIHJldHVybjsKICAgICAgICAgICAgaWYgKCghbyB8fCBuLmV4YWN0KSAmJiAhcHAocywgaWwoZSwgYywgdSkpKSByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgZm9yICh2YXIgZiA9IDA7IGYgPCBhLmxlbmd0aDsgZisrKSB7CiAgICAgIGlmICgiYXR0cmlidXRlcyIgPT09IHIgPyBlLmdldEF0dHJpYih0LCBhW2ZdKSA6IGFsKGUsIHQsIGFbZl0pKSByZXR1cm4gMTsKICAgIH0KICAgIHJldHVybiAxOwogIH0KCiAgZnVuY3Rpb24gQmcoZSwgdCwgbiwgciwgbykgewogICAgaWYgKHIpIHJldHVybiBEZyhlLCByLCB0LCBuLCBvKTsKICAgIGlmIChyID0gZS5zZWxlY3Rpb24uZ2V0Tm9kZSgpLCBEZyhlLCByLCB0LCBuLCBvKSkgcmV0dXJuICEwOwogICAgdmFyIGkgPSBlLnNlbGVjdGlvbi5nZXRTdGFydCgpOwogICAgcmV0dXJuICEoaSA9PT0gciB8fCAhRGcoZSwgaSwgdCwgbiwgbykpOwogIH0KCiAgZnVuY3Rpb24gUGcoZSkgewogICAgcmV0dXJuIDAgPCBmdW5jdGlvbiAoZSkgewogICAgICBmb3IgKHZhciB0ID0gW107IGU7KSB7CiAgICAgICAgaWYgKDMgPT09IGUubm9kZVR5cGUgJiYgZS5ub2RlVmFsdWUgIT09IHZwIHx8IDEgPCBlLmNoaWxkTm9kZXMubGVuZ3RoKSByZXR1cm4gW107CiAgICAgICAgMSA9PT0gZS5ub2RlVHlwZSAmJiB0LnB1c2goZSksIGUgPSBlLmZpcnN0Q2hpbGQ7CiAgICAgIH0KCiAgICAgIHJldHVybiB0OwogICAgfShlKS5sZW5ndGg7CiAgfQoKICBmdW5jdGlvbiBMZyhlKSB7CiAgICBpZiAoZSkgewogICAgICB2YXIgdCA9IG5ldyBScihlLCBlKTsKCiAgICAgIGZvciAoZSA9IHQuY3VycmVudCgpOyBlOyBlID0gdC5uZXh0KCkpIHsKICAgICAgICBpZiAoam4oZSkpIHJldHVybiBlOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG51bGw7CiAgfQoKICBmdW5jdGlvbiBJZyhlKSB7CiAgICB2YXIgdCA9IE50LmZyb21UYWcoInNwYW4iKTsKICAgIHJldHVybiBobih0LCB7CiAgICAgIGlkOiBicCwKICAgICAgImRhdGEtbWNlLWJvZ3VzIjogIjEiLAogICAgICAiZGF0YS1tY2UtdHlwZSI6ICJmb3JtYXQtY2FyZXQiCiAgICB9KSwgZSAmJiBQbih0LCBOdC5mcm9tVGV4dCh2cCkpLCB0OwogIH0KCiAgZnVuY3Rpb24gTWcoZSwgdCwgbikgewogICAgdm9pZCAwID09PSBuICYmIChuID0gITApOwogICAgdmFyIHIsCiAgICAgICAgbywKICAgICAgICBpLAogICAgICAgIGEsCiAgICAgICAgdSwKICAgICAgICBzLAogICAgICAgIGMsCiAgICAgICAgbCwKICAgICAgICBmID0gZS5kb20sCiAgICAgICAgZCA9IGUuc2VsZWN0aW9uOwogICAgUGcodCkgPyBZbShlLCAhMSwgTnQuZnJvbURvbSh0KSwgbikgOiAociA9IGQuZ2V0Um5nKCksIG8gPSBmLmdldFBhcmVudCh0LCBmLmlzQmxvY2spLCBpID0gci5zdGFydENvbnRhaW5lciwgYSA9IHIuc3RhcnRPZmZzZXQsIHUgPSByLmVuZENvbnRhaW5lciwgcyA9IHIuZW5kT2Zmc2V0LCAobCA9IExnKHQpKSAmJiBsLm5vZGVWYWx1ZS5jaGFyQXQoMCkgPT09IHZwICYmIGwuZGVsZXRlRGF0YSgwLCAxKSwgYyA9IGwsIGYucmVtb3ZlKHQsICEwKSwgaSA9PT0gYyAmJiAwIDwgYSAmJiByLnNldFN0YXJ0KGMsIGEgLSAxKSwgdSA9PT0gYyAmJiAwIDwgcyAmJiByLnNldEVuZChjLCBzIC0gMSksIG8gJiYgZi5pc0VtcHR5KG8pICYmIG1tKE50LmZyb21Eb20obykpLCBkLnNldFJuZyhyKSk7CiAgfQoKICBmdW5jdGlvbiBGZyhlLCB0LCBuKSB7CiAgICB2b2lkIDAgPT09IG4gJiYgKG4gPSAhMCk7CiAgICB2YXIgciA9IGUuZG9tLAogICAgICAgIG8gPSBlLnNlbGVjdGlvbjsKICAgIGlmICh0KSBNZyhlLCB0LCBuKTtlbHNlIGlmICghKHQgPSBIYyhlLmdldEJvZHkoKSwgby5nZXRTdGFydCgpKSkpIGZvciAoOyB0ID0gci5nZXQoYnApOykgewogICAgICBNZyhlLCB0LCAhMSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBVZyhlLCB0KSB7CiAgICByZXR1cm4gZS5hcHBlbmRDaGlsZCh0KSwgdDsKICB9CgogIGZ1bmN0aW9uIHpnKGUsIHQpIHsKICAgIHZhciBuID0gUChlLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICByZXR1cm4gVWcoZSwgdC5jbG9uZU5vZGUoITEpKTsKICAgIH0sIHQpOwogICAgcmV0dXJuIFVnKG4sIG4ub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2cCkpOwogIH0KCiAgZnVuY3Rpb24gSGcobywgZSwgdCwgaSwgbiwgcikgewogICAgdmFyIGEsCiAgICAgICAgdSwKICAgICAgICBzID0gby5mb3JtYXR0ZXIsCiAgICAgICAgYyA9IG8uZG9tLAogICAgICAgIGwgPSBVKHdlKHMuZ2V0KCkpLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gZSAhPT0gaSAmJiAhVGUoZSwgInJlbW92ZWZvcm1hdCIpOwogICAgfSk7CgogICAgaWYgKDAgPCBVKChhID0gbywgdSA9IHQsIEwobCwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgdmFyIG4gPSBjbChhLCB0KTsKICAgICAgcmV0dXJuIGEuZm9ybWF0dGVyLm1hdGNoTm9kZSh1LCB0LCB7fSwgbikgPyBlLmNvbmNhdChbdF0pIDogZTsKICAgIH0sIFtdKSksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBuID0gaSwgciA9IFsiaW5saW5lIiwgImJsb2NrIiwgInNlbGVjdG9yIiwgImF0dHJpYnV0ZXMiLCAic3R5bGVzIiwgImNsYXNzZXMiXSwgIUYoKHQgPSBvKS5mb3JtYXR0ZXIuZ2V0KGUpLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciBpID0gYShlKTsKICAgICAgICByZXR1cm4gRih0LmZvcm1hdHRlci5nZXQobiksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB2YXIgdCwKICAgICAgICAgICAgICBuID0gYShlKSwKICAgICAgICAgICAgICByID0gaSwKICAgICAgICAgICAgICBvID0gbjsKICAgICAgICAgIHJldHVybiBkKHQgPSB2b2lkIDAgPT09IHQgPyBwIDogdCkuZXEociwgbyk7CiAgICAgICAgfSk7CiAgICAgIH0pOwoKICAgICAgZnVuY3Rpb24gYShlKSB7CiAgICAgICAgcmV0dXJuIGFlKGUsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICByZXR1cm4gRihyLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gZSA9PT0gdDsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgdCwgbiwgcjsKICAgIH0pLmxlbmd0aCkgewogICAgICB2YXIgZiA9IHQuY2xvbmVOb2RlKCExKTsKICAgICAgcmV0dXJuIGMuYWRkKGUsIGYpLCBzLnJlbW92ZShpLCBuLCBmLCByKSwgYy5yZW1vdmUoZiksIHZlLnNvbWUoZik7CiAgICB9CgogICAgcmV0dXJuIHZlLm5vbmUoKTsKICB9CgogIGZ1bmN0aW9uIGpnKGUsIHQsIG4sIHIpIHsKICAgIHZhciBvLAogICAgICAgIGksCiAgICAgICAgYSwKICAgICAgICB1LAogICAgICAgIHMsCiAgICAgICAgYywKICAgICAgICBsLAogICAgICAgIGYsCiAgICAgICAgZCwKICAgICAgICBtLAogICAgICAgIGcsCiAgICAgICAgcCwKICAgICAgICBoLAogICAgICAgIHYsCiAgICAgICAgYiwKICAgICAgICB5ID0gZS5kb20sCiAgICAgICAgQyA9IGUuc2VsZWN0aW9uLAogICAgICAgIHggPSBbXSwKICAgICAgICB3ID0gQy5nZXRSbmcoKSwKICAgICAgICBTID0gdy5zdGFydENvbnRhaW5lciwKICAgICAgICBFID0gdy5zdGFydE9mZnNldCwKICAgICAgICBOID0gUzsKCiAgICBmb3IgKDMgPT09IFMubm9kZVR5cGUgJiYgKEUgIT09IFMubm9kZVZhbHVlLmxlbmd0aCAmJiAobyA9ICEwKSwgTiA9IE4ucGFyZW50Tm9kZSk7IE47KSB7CiAgICAgIGlmIChocChlLCBOLCB0LCBuLCByKSkgewogICAgICAgIGkgPSBOOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBOLm5leHRTaWJsaW5nICYmIChvID0gITApLCB4LnB1c2goTiksIE4gPSBOLnBhcmVudE5vZGU7CiAgICB9CgogICAgaSAmJiAobyA/IChhID0gQy5nZXRCb29rbWFyaygpLCB3LmNvbGxhcHNlKCEwKSwgdSA9IFRmKFNsKGUsIHcsIGUuZm9ybWF0dGVyLmdldCh0KSwgITApKSwgZS5mb3JtYXR0ZXIucmVtb3ZlKHQsIG4sIHUsIHIpLCBDLm1vdmVUb0Jvb2ttYXJrKGEpKSA6IChzID0gSGMoZS5nZXRCb2R5KCksIGkpLCBkID0gYyA9IElnKCExKS5kb20sIChwID0gKGcgPSBlLmRvbSkuZ2V0UGFyZW50KG0gPSBudWxsICE9PSBzID8gcyA6IGksIEEodGwsIGUpKSkgJiYgZy5pc0VtcHR5KHApID8gbS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChkLCBtKSA6IChoID0gTnQuZnJvbURvbShtKSwgdiA9IGh1KGgsICJiciIpLCBiID0gVShmdW5jdGlvbiAoKSB7CiAgICAgIGZvciAodmFyIGUgPSBbXSwgdCA9IGguZG9tOyB0OykgewogICAgICAgIGUucHVzaChOdC5mcm9tRG9tKHQpKSwgdCA9IHQubGFzdENoaWxkOwogICAgICB9CgogICAgICByZXR1cm4gZTsKICAgIH0oKS5zbGljZSgtMSksIEJyKSwgdi5sZW5ndGggPT09IGIubGVuZ3RoICYmIFkoYiwgTG4pLCBnLmlzRW1wdHkobSkgPyBtLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGQsIG0pIDogZy5pbnNlcnRBZnRlcihkLCBtKSksIGwgPSBIZyhlLCBjLCBpLCB0LCBuLCByKSwgZiA9IHpnKHguY29uY2F0KGwudG9BcnJheSgpKSwgYyksIE1nKGUsIHMsICExKSwgQy5zZXRDdXJzb3JMb2NhdGlvbihmLCAxKSwgeS5pc0VtcHR5KGkpICYmIHkucmVtb3ZlKGkpKSk7CiAgfQoKICBmdW5jdGlvbiBWZyhlLCB0KSB7CiAgICB2YXIgbiA9IGUuc2NoZW1hLmdldFRleHRJbmxpbmVFbGVtZW50cygpOwogICAgcmV0dXJuIE5lKG4sIGt0KHQpKSAmJiAhemModC5kb20pICYmICFzbih0LmRvbSk7CiAgfQoKICBZKFsibWFyZ2luIiwgIm1hcmdpbi1sZWZ0IiwgIm1hcmdpbi1yaWdodCIsICJtYXJnaW4tdG9wIiwgIm1hcmdpbi1ib3R0b20iLCAicGFkZGluZyIsICJwYWRkaW5nLWxlZnQiLCAicGFkZGluZy1yaWdodCIsICJwYWRkaW5nLXRvcCIsICJwYWRkaW5nLWJvdHRvbSIsICJib3JkZXIiLCAiYm9yZGVyLXdpZHRoIiwgImJvcmRlci1zdHlsZSIsICJib3JkZXItY29sb3IiLCAiYmFja2dyb3VuZCIsICJiYWNrZ3JvdW5kLWF0dGFjaG1lbnQiLCAiYmFja2dyb3VuZC1jbGlwIiwgImJhY2tncm91bmQtY29sb3IiLCAiYmFja2dyb3VuZC1pbWFnZSIsICJiYWNrZ3JvdW5kLW9yaWdpbiIsICJiYWNrZ3JvdW5kLXBvc2l0aW9uIiwgImJhY2tncm91bmQtcmVwZWF0IiwgImJhY2tncm91bmQtc2l6ZSIsICJmbG9hdCIsICJwb3NpdGlvbiIsICJsZWZ0IiwgInJpZ2h0IiwgInRvcCIsICJib3R0b20iLCAiei1pbmRleCIsICJkaXNwbGF5IiwgInRyYW5zZm9ybSIsICJ3aWR0aCIsICJtYXgtd2lkdGgiLCAibWluLXdpZHRoIiwgImhlaWdodCIsICJtYXgtaGVpZ2h0IiwgIm1pbi1oZWlnaHQiLCAib3ZlcmZsb3ciLCAib3ZlcmZsb3cteCIsICJvdmVyZmxvdy15IiwgInRleHQtb3ZlcmZsb3ciLCAidmVydGljYWwtYWxpZ24iLCAidHJhbnNpdGlvbiIsICJ0cmFuc2l0aW9uLWRlbGF5IiwgInRyYW5zaXRpb24tZHVyYXRpb24iLCAidHJhbnNpdGlvbi1wcm9wZXJ0eSIsICJ0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbiJdLCBmdW5jdGlvbiAoZSkgewogICAgYW0uYWRkKGUpOwogIH0pOwoKICB2YXIgcWcsCiAgICAgICRnID0gWyJmb250IiwgInRleHQtZGVjb3JhdGlvbiIsICJ0ZXh0LWVtcGhhc2lzIl0sCiAgICAgIFdnID0gQShzbSwgITAsIEdjKSwKICAgICAgS2cgPSBBKHNtLCAhMSwgR2MpLAogICAgICBYZyA9IGxtKCEwLCBmbSksCiAgICAgIFlnID0gbG0oITEsIGZtKSwKICAgICAgR2cgPSBsbSghMCwgSm4pLAogICAgICBKZyA9IGxtKCExLCBKbiksCiAgICAgIFFnID0gbG0oITAsIGNuKSwKICAgICAgWmcgPSBsbSghMSwgY24pLAogICAgICBlcCA9IGxtKCEwLCBkbSksCiAgICAgIHRwID0gbG0oITEsIGRtKSwKICAgICAgbnAgPSBBKENtLCAhMSksCiAgICAgIHJwID0gQShDbSwgITApLAogICAgICBvcCA9IEEoeW0sICExKSwKICAgICAgaXAgPSBBKHltLCAhMCksCiAgICAgIGFwID0gQSh3bSwgITEpLAogICAgICB1cCA9IEEod20sICEwKSwKICAgICAgc3AgPSBvcihbewogICAgc2luZ2xlQ2VsbFRhYmxlOiBbInJuZyIsICJjZWxsIl0KICB9LCB7CiAgICBmdWxsVGFibGU6IFsidGFibGUiXQogIH0sIHsKICAgIHBhcnRpYWxUYWJsZTogWyJjZWxscyIsICJvdXRzaWRlRGV0YWlscyJdCiAgfSwgewogICAgbXVsdGlUYWJsZTogWyJzdGFydFRhYmxlQ2VsbHMiLCAiZW5kVGFibGVDZWxscyIsICJiZXR3ZWVuUm5nIl0KICB9XSksCiAgICAgIGNwID0gZnVuY3Rpb24gY3AoZSkgewogICAgdmFyIHQ7CiAgICByZXR1cm4gKDggPT09IF90KHQgPSBlKSB8fCAiI2NvbW1lbnQiID09PSBrdCh0KSA/IEJ0IDogVXQpKGUpLmJpbmQoY3ApLm9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdmUuc29tZShlKTsKICAgIH0pOwogIH0sCiAgICAgIGxwID0gZnVuY3Rpb24gbHAoZSwgdCwgbiwgcikgewogICAgdm9pZCAwID09PSByICYmIChyID0gITApLCB0LmRlbGV0ZUNvbnRlbnRzKCk7CiAgICB2YXIgbywKICAgICAgICBpID0gY3AobikuZ2V0T3IobiksCiAgICAgICAgYSA9IE50LmZyb21Eb20oZS5kb20uZ2V0UGFyZW50KGkuZG9tLCBlLmRvbS5pc0Jsb2NrKSk7CiAgICByZXR1cm4gV3IoYSkgJiYgKG1tKGEpLCByICYmIGUuc2VsZWN0aW9uLnNldEN1cnNvckxvY2F0aW9uKGEuZG9tLCAwKSksIGplKG4sIGEpIHx8IFkoKGZuKE90KGEpLCBuKSA/IFtdIDogT3QobyA9IGEpLm1hcChEbikubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBVKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuICFqZShvLCBlKTsKICAgICAgfSk7CiAgICB9KS5nZXRPcihbXSkpLmNvbmNhdChEbihuKSksIGZ1bmN0aW9uIChlKSB7CiAgICAgIGplKGUsIGEpIHx8IFZlKGUsIGEpIHx8ICFXcihlKSB8fCBMbihlKTsKICAgIH0pLCAhMDsKICB9LAogICAgICBmcCA9IGZ1bmN0aW9uIGZwKGUsIHQpIHsKICAgIHJldHVybiBNKGhtKHQsIGUpLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4ga24oZSkgJiYgImNhcHRpb24iID09PSBrdChlKTsKICAgIH0pOwogIH0sCiAgICAgIGRwID0gZnVuY3Rpb24gZHAoZSwgdCkgewogICAgcmV0dXJuIG1tKHQpLCBlLnNlbGVjdGlvbi5zZXRDdXJzb3JMb2NhdGlvbih0LmRvbSwgMCksIHZlLnNvbWUoITApOwogIH0sCiAgICAgIG1wID0gR24sCiAgICAgIGdwID0gZnVuY3Rpb24gZ3AoZSwgdCkgewogICAgdChlKSwgZS5maXJzdENoaWxkICYmIGdwKGUuZmlyc3RDaGlsZCwgdCksIGUubmV4dCAmJiBncChlLm5leHQsIHQpOwogIH0sCiAgICAgIHBwID0gb2wsCiAgICAgIGhwID0gZnVuY3Rpb24gaHAoZSwgdCwgbiwgciwgbykgewogICAgdmFyIGkgPSBlLmZvcm1hdHRlci5nZXQobiksCiAgICAgICAgYSA9IGUuZG9tOwogICAgaWYgKGkgJiYgdCkgZm9yICh2YXIgdSA9IDA7IHUgPCBpLmxlbmd0aDsgdSsrKSB7CiAgICAgIHZhciBzID0gaVt1XTsKCiAgICAgIGlmIChUZyhlLmRvbSwgdCwgcykgJiYgT2coYSwgdCwgcywgImF0dHJpYnV0ZXMiLCBvLCByKSAmJiBPZyhhLCB0LCBzLCAic3R5bGVzIiwgbywgcikpIHsKICAgICAgICB2YXIgYyA9IHMuY2xhc3NlczsKICAgICAgICBpZiAoYykgZm9yICh2YXIgbCA9IDA7IGwgPCBjLmxlbmd0aDsgbCsrKSB7CiAgICAgICAgICBpZiAoIWUuZG9tLmhhc0NsYXNzKHQsIHJsKGNbbF0sIHIpKSkgcmV0dXJuOwogICAgICAgIH0KICAgICAgICByZXR1cm4gczsKICAgICAgfQogICAgfQogIH0sCiAgICAgIHZwID0gQ28sCiAgICAgIGJwID0gIl9tY2VfY2FyZXQiLAogICAgICB5cCA9IHt9LAogICAgICBDcCA9IGZlLAogICAgICB4cCA9IGNlOwoKICBmdW5jdGlvbiB3cChlKSB7CiAgICByZXR1cm4gem4oZSkgJiYgIVljKGUpICYmICF6YyhlKSAmJiAhc24oZSk7CiAgfQoKICBmdW5jdGlvbiBTcChlLCB0KSB7CiAgICBmb3IgKHZhciBuID0gZTsgbjsgbiA9IG5bdF0pIHsKICAgICAgaWYgKGpuKG4pICYmIEJlKG4uZGF0YSkpIHJldHVybiBlOwogICAgICBpZiAoem4obikgJiYgIVljKG4pKSByZXR1cm4gbjsKICAgIH0KCiAgICByZXR1cm4gZTsKICB9CgogIGZ1bmN0aW9uIEVwKGUsIHQsIG4pIHsKICAgIHZhciByID0gZW0oZSk7CgogICAgaWYgKHQgJiYgbiAmJiAodCA9IFNwKHQsICJwcmV2aW91c1NpYmxpbmciKSwgbiA9IFNwKG4sICJuZXh0U2libGluZyIpLCByLmNvbXBhcmUodCwgbikpKSB7CiAgICAgIGZvciAodmFyIG8gPSB0Lm5leHRTaWJsaW5nOyBvICYmIG8gIT09IG47KSB7CiAgICAgICAgdmFyIGkgPSBvLAogICAgICAgICAgICBvID0gby5uZXh0U2libGluZzsKICAgICAgICB0LmFwcGVuZENoaWxkKGkpOwogICAgICB9CgogICAgICByZXR1cm4gZS5yZW1vdmUobiksIEV0LmVhY2goRXQuZ3JlcChuLmNoaWxkTm9kZXMpLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHQuYXBwZW5kQ2hpbGQoZSk7CiAgICAgIH0pLCB0OwogICAgfQoKICAgIHJldHVybiBuOwogIH0KCiAgZnVuY3Rpb24gTnAoZSwgdCwgbiwgcikgewogICAgdmFyIG87CiAgICByICYmICExICE9PSB0Lm1lcmdlX3NpYmxpbmdzICYmIChvID0gRXAoZSwgZWwociksIHIpLCBFcChlLCBvLCBlbChvLCAhMCkpKTsKICB9CgogIGZ1bmN0aW9uIGtwKHQsIG4pIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gISghZSB8fCAhYWwodCwgZSwgbikpOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIF9wKHIsIG8sIGkpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCwgbjsKICAgICAgci5zZXRTdHlsZShlLCBvLCBpKSwgIiIgPT09IGUuZ2V0QXR0cmlidXRlKCJzdHlsZSIpICYmIGUucmVtb3ZlQXR0cmlidXRlKCJzdHlsZSIpLCB0ID0gciwgIlNQQU4iID09PSAobiA9IGUpLm5vZGVOYW1lICYmIDAgPT09IHQuZ2V0QXR0cmlicyhuKS5sZW5ndGggJiYgdC5yZW1vdmUobiwgITApOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIEFwKGUsIHQsIG4pIHsKICAgIHJldHVybiBlLmlzQ2hpbGRPZih0LCBuKSAmJiB0ICE9PSBuICYmICFlLmlzQmxvY2sobik7CiAgfQoKICBmdW5jdGlvbiBScChlLCB0LCBuKSB7CiAgICB2YXIgciwKICAgICAgICBvID0gdFtuID8gInN0YXJ0Q29udGFpbmVyIiA6ICJlbmRDb250YWluZXIiXSwKICAgICAgICBpID0gdFtuID8gInN0YXJ0T2Zmc2V0IiA6ICJlbmRPZmZzZXQiXTsKICAgIHJldHVybiB6bihvKSAmJiAociA9IG8uY2hpbGROb2Rlcy5sZW5ndGggLSAxLCAhbiAmJiBpICYmIGktLSwgbyA9IG8uY2hpbGROb2Rlc1tyIDwgaSA/IHIgOiBpXSksIGpuKG8pICYmIG4gJiYgaSA+PSBvLm5vZGVWYWx1ZS5sZW5ndGggJiYgKG8gPSBuZXcgUnIobywgZS5nZXRCb2R5KCkpLm5leHQoKSB8fCBvKSwgam4obykgJiYgIW4gJiYgMCA9PT0gaSAmJiBuZXcgUnIobywgZS5nZXRCb2R5KCkpLnByZXYoKSB8fCBvOwogIH0KCiAgZnVuY3Rpb24gRHAoZSwgdCkgewogICAgdmFyIG4gPSB0ID8gImZpcnN0Q2hpbGQiIDogImxhc3RDaGlsZCI7CgogICAgaWYgKC9eKFRSfFRIfFREKSQvLnRlc3QoZS5ub2RlTmFtZSkgJiYgZVtuXSkgewogICAgICB2YXIgciA9IGVbbl07CiAgICAgIHJldHVybiAiVFIiID09PSBlLm5vZGVOYW1lICYmIHJbbl0gfHwgcjsKICAgIH0KCiAgICByZXR1cm4gZTsKICB9CgogIGZ1bmN0aW9uIFRwKGUsIHQsIG4sIHIpIHsKICAgIHZhciBvID0gZS5jcmVhdGUobiwgcik7CiAgICByZXR1cm4gdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShvLCB0KSwgby5hcHBlbmRDaGlsZCh0KSwgbzsKICB9CgogIGZ1bmN0aW9uIE9wKGUsIHQsIG4sIHIsIG8pIHsKICAgIHZhciBpID0gTnQuZnJvbURvbSh0KSwKICAgICAgICBhID0gTnQuZnJvbURvbShlLmNyZWF0ZShyLCBvKSk7CiAgICByZXR1cm4gS3QoYSwgKG4gPyBJdCA6IEx0KShpKSksIG4gPyAocXQoaSwgYSksIFd0KGEsIGkpKSA6ICgkdChpLCBhKSwgUG4oYSwgaSkpLCBhLmRvbTsKICB9CgogIGZ1bmN0aW9uIEJwKGUsIHQsIG4sIHIpIHsKICAgIHZhciBvID0gZWwodCwgbiwgcik7CiAgICByZXR1cm4gSyhvKSB8fCAiQlIiID09PSBvLm5vZGVOYW1lIHx8IGUuaXNCbG9jayhvKTsKICB9CgogIGZ1bmN0aW9uIFBwKGUsIHIsIG8sIHQsIGkpIHsKICAgIHZhciBuLAogICAgICAgIGEsCiAgICAgICAgdSA9IGUuZG9tLAogICAgICAgIHMgPSB1LAogICAgICAgIGMgPSB0OwogICAgaWYgKCEoZGwoYSA9IHIpICYmIGtoKGMsIGEuaW5saW5lKSB8fCBsbChhKSAmJiBraChjLCBhLmJsb2NrKSB8fCBmbChhKSAmJiB6bihjKSAmJiBzLmlzKGMsIGEuc2VsZWN0b3IpIHx8IHIubGlua3MgJiYgIkEiID09PSB0Lm5vZGVOYW1lKSkgcmV0dXJuIFNoLmtlZXAoKTsKICAgIHZhciBsLAogICAgICAgIGYsCiAgICAgICAgZCwKICAgICAgICBtLAogICAgICAgIGcsCiAgICAgICAgcCwKICAgICAgICBoLAogICAgICAgIHYsCiAgICAgICAgYiA9IHQ7CgogICAgaWYgKGRsKHIpICYmICJhbGwiID09PSByLnJlbW92ZSAmJiBTKHIucHJlc2VydmVfYXR0cmlidXRlcykpIHsKICAgICAgdmFyIHkgPSBVKHUuZ2V0QXR0cmlicyhiKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gRChyLnByZXNlcnZlX2F0dHJpYnV0ZXMsIGUubmFtZS50b0xvd2VyQ2FzZSgpKTsKICAgICAgfSk7CiAgICAgIGlmICh1LnJlbW92ZUFsbEF0dHJpYnMoYiksIFkoeSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gdS5zZXRBdHRyaWIoYiwgZS5uYW1lLCBlLnZhbHVlKTsKICAgICAgfSksIDAgPCB5Lmxlbmd0aCkgcmV0dXJuIFNoLnJlbmFtZSgic3BhbiIpOwogICAgfQoKICAgIGlmICgiYWxsIiAhPT0gci5yZW1vdmUpIHsKICAgICAgTmgoci5zdHlsZXMsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgZSA9IGlsKHUsIHJsKGUsIG8pLCB0ICsgIiIpLCBFKHQpICYmICh0ID0gZSwgaSA9IG51bGwpLCAhci5yZW1vdmVfc2ltaWxhciAmJiBpICYmICFraChhbCh1LCBpLCB0KSwgZSkgfHwgdS5zZXRTdHlsZShiLCB0LCAiIiksIG4gPSAhMDsKICAgICAgfSksIG4gJiYgIiIgPT09IHUuZ2V0QXR0cmliKGIsICJzdHlsZSIpICYmIChiLnJlbW92ZUF0dHJpYnV0ZSgic3R5bGUiKSwgYi5yZW1vdmVBdHRyaWJ1dGUoImRhdGEtbWNlLXN0eWxlIikpLCBOaChyLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgdmFyIG47CiAgICAgICAgaWYgKGUgPSBybChlLCBvKSwgRSh0KSAmJiAodCA9IGUsIGkgPSBudWxsKSwgci5yZW1vdmVfc2ltaWxhciB8fCAhaSB8fCBraCh1LmdldEF0dHJpYihpLCB0KSwgZSkpIGlmICgiY2xhc3MiID09PSB0ICYmIChlID0gdS5nZXRBdHRyaWIoYiwgdCkpICYmIChuID0gIiIsIFkoZS5zcGxpdCgvXHMrLyksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAvbWNlXC1cdysvLnRlc3QoZSkgJiYgKG4gKz0gKG4gPyAiICIgOiAiIikgKyBlKTsKICAgICAgICB9KSwgbikpIHUuc2V0QXR0cmliKGIsIHQsIG4pO2Vsc2UgewogICAgICAgICAgaWYgKEVoLnRlc3QodCkgJiYgYi5yZW1vdmVBdHRyaWJ1dGUoImRhdGEtbWNlLSIgKyB0KSwgInN0eWxlIiA9PT0gdCAmJiBvbihbImxpIl0pKGIpICYmICJub25lIiA9PT0gdS5nZXRTdHlsZShiLCAibGlzdC1zdHlsZS10eXBlIikpIHJldHVybiBiLnJlbW92ZUF0dHJpYnV0ZSh0KSwgdm9pZCB1LnNldFN0eWxlKGIsICJsaXN0LXN0eWxlLXR5cGUiLCAibm9uZSIpOwogICAgICAgICAgImNsYXNzIiA9PT0gdCAmJiBiLnJlbW92ZUF0dHJpYnV0ZSgiY2xhc3NOYW1lIiksIGIucmVtb3ZlQXR0cmlidXRlKHQpOwogICAgICAgIH0KICAgICAgfSksIE5oKHIuY2xhc3NlcywgZnVuY3Rpb24gKGUpIHsKICAgICAgICBlID0gcmwoZSwgbyksIGkgJiYgIXUuaGFzQ2xhc3MoaSwgZSkgfHwgdS5yZW1vdmVDbGFzcyhiLCBlKTsKICAgICAgfSk7CgogICAgICBmb3IgKHZhciBDID0gdS5nZXRBdHRyaWJzKGIpLCB4ID0gMDsgeCA8IEMubGVuZ3RoOyB4KyspIHsKICAgICAgICB2YXIgdyA9IENbeF0ubm9kZU5hbWU7CiAgICAgICAgaWYgKDAgIT09IHcuaW5kZXhPZigiXyIpICYmIDAgIT09IHcuaW5kZXhPZigiZGF0YS0iKSkgcmV0dXJuIFNoLmtlZXAoKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiAibm9uZSIgIT09IHIucmVtb3ZlID8gKGwgPSBlLCBkID0gciwgcCA9IChmID0gYikucGFyZW50Tm9kZSwgaCA9IGwuZG9tLCB2ID0gU3MobCksIGxsKGQpICYmICh2ID8gcCA9PT0gaC5nZXRSb290KCkgJiYgKGQubGlzdF9ibG9jayAmJiBraChmLCBkLmxpc3RfYmxvY2spIHx8IFkoeGUoZi5jaGlsZE5vZGVzKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgbmwobCwgdiwgZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSA/IG0gPyBtLmFwcGVuZENoaWxkKGUpIDogKG0gPSBUcChoLCBlLCB2KSwgaC5zZXRBdHRyaWJzKG0sIGwuc2V0dGluZ3MuZm9yY2VkX3Jvb3RfYmxvY2tfYXR0cnMpKSA6IG0gPSBudWxsOwogICAgfSkpIDogaC5pc0Jsb2NrKGYpICYmICFoLmlzQmxvY2socCkgJiYgKEJwKGgsIGYsICExKSB8fCBCcChoLCBmLmZpcnN0Q2hpbGQsICEwLCAhMCkgfHwgZi5pbnNlcnRCZWZvcmUoaC5jcmVhdGUoImJyIiksIGYuZmlyc3RDaGlsZCksIEJwKGgsIGYsICEwKSB8fCBCcChoLCBmLmxhc3RDaGlsZCwgITEsICEwKSB8fCBmLmFwcGVuZENoaWxkKGguY3JlYXRlKCJiciIpKSkpLCBmbChnID0gZCkgJiYgZGwoZykgJiYgZm4odWUoZywgIm1peGVkIiksICEwKSAmJiAha2goZC5pbmxpbmUsIGYpIHx8IGgucmVtb3ZlKGYsICEwKSwgU2gucmVtb3ZlZCgpKSA6IFNoLmtlZXAoKTsKICB9CgogIGZ1bmN0aW9uIExwKHQsIGUsIG4sIHIsIG8pIHsKICAgIHJldHVybiBQcCh0LCBlLCBuLCByLCBvKS5mb2xkKFIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB0LmRvbS5yZW5hbWUociwgZSksICEwOwogICAgfSwgdyk7CiAgfQoKICBmdW5jdGlvbiBJcCh1LCBzLCBjLCBlLCBsKSB7CiAgICBmdW5jdGlvbiBhKGUpIHsKICAgICAgdmFyIG4sCiAgICAgICAgICByLAogICAgICAgICAgbywKICAgICAgICAgIGksCiAgICAgICAgICBhLAogICAgICAgICAgdCA9IChyID0gcywgbyA9IGMsIGkgPSBsLCBZKHNsKChuID0gdSkuZG9tLCBlLnBhcmVudE5vZGUpLnJldmVyc2UoKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdDsKICAgICAgICBhIHx8ICJfc3RhcnQiID09PSBlLmlkIHx8ICJfZW5kIiA9PT0gZS5pZCB8fCAodCA9IGhwKG4sIGUsIHIsIG8sIGkpKSAmJiAhMSAhPT0gdC5zcGxpdCAmJiAoYSA9IGUpOwogICAgICB9KSwgYSk7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoZSwgdCwgbiwgciwgbywgaSwgYSwgdSkgewogICAgICAgIHZhciBzLAogICAgICAgICAgICBjLAogICAgICAgICAgICBsID0gZS5kb207CgogICAgICAgIGlmIChuKSB7CiAgICAgICAgICBmb3IgKHZhciBmID0gbi5wYXJlbnROb2RlLCBkID0gci5wYXJlbnROb2RlOyBkICYmIGQgIT09IGY7IGQgPSBkLnBhcmVudE5vZGUpIHsKICAgICAgICAgICAgZm9yICh2YXIgbSA9IGwuY2xvbmUoZCwgITEpLCBnID0gMDsgZyA8IHQubGVuZ3RoICYmIG51bGwgIT09IChtID0gZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgICAgICAgICByZXR1cm4gUHAodCwgZSwgdSwgbiwgbikuZm9sZChKKG4pLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHQuZG9tLmNyZWF0ZUZyYWdtZW50KCkuYXBwZW5kQ2hpbGQobiksIHQuZG9tLnJlbmFtZShuLCBlKTsKICAgICAgICAgICAgICB9LCBKKG51bGwpKTsKICAgICAgICAgICAgfShlLCB0W2ddLCBtKSk7IGcrKykgewogICAgICAgICAgICAgIDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbSAmJiAocyAmJiBtLmFwcGVuZENoaWxkKHMpLCBjID0gYyB8fCBtLCBzID0gbSk7CiAgICAgICAgICB9CgogICAgICAgICAgIWkgfHwgYS5taXhlZCAmJiBsLmlzQmxvY2sobikgfHwgKHIgPSBsLnNwbGl0KG4sIHIpKSwgcyAmJiAoby5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzLCBvKSwgYy5hcHBlbmRDaGlsZChvKSwgZGwoYSkgJiYgTnAobCwgYSwgMCwgcykpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHI7CiAgICAgIH0odSwgbSwgdCwgZSwgZSwgITAsIGcsIGMpOwogICAgfQoKICAgIGZ1bmN0aW9uIGYodCkgewogICAgICByZXR1cm4gRihtLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBMcCh1LCBlLCBjLCB0LCB0KTsKICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gZChlKSB7CiAgICAgIHZhciB0LAogICAgICAgICAgbiA9IGguZ2V0KGUgPyAiX3N0YXJ0IiA6ICJfZW5kIiksCiAgICAgICAgICByID0gbltlID8gImZpcnN0Q2hpbGQiIDogImxhc3RDaGlsZCJdOwogICAgICByZXR1cm4gWWModCA9IHIpICYmIHpuKHQpICYmICgiX3N0YXJ0IiA9PT0gdC5pZCB8fCAiX2VuZCIgPT09IHQuaWQpICYmIChyID0gcltlID8gImZpcnN0Q2hpbGQiIDogImxhc3RDaGlsZCJdKSwgam4ocikgJiYgMCA9PT0gci5kYXRhLmxlbmd0aCAmJiAociA9IGUgPyBuLnByZXZpb3VzU2libGluZyB8fCBuLm5leHRTaWJsaW5nIDogbi5uZXh0U2libGluZyB8fCBuLnByZXZpb3VzU2libGluZyksIGgucmVtb3ZlKG4sICEwKSwgcjsKICAgIH0KCiAgICBmdW5jdGlvbiB0KGUpIHsKICAgICAgdmFyIHQgPSBTbCh1LCBlLCBtLCBlLmNvbGxhcHNlZCk7CgogICAgICBpZiAoZy5zcGxpdCkgewogICAgICAgIGlmICh0ID0gVGYodCksIChyID0gUnAodSwgdCwgITApKSAhPT0gKG8gPSBScCh1LCB0KSkpIHsKICAgICAgICAgIGlmIChyID0gRHAociwgITApLCBvID0gRHAobywgITEpLCBBcChoLCByLCBvKSkgewogICAgICAgICAgICB2YXIgbiA9IHZlLmZyb20oci5maXJzdENoaWxkKS5nZXRPcihyKTsKICAgICAgICAgICAgcmV0dXJuIGEoT3AoaCwgbiwgITAsICJzcGFuIiwgewogICAgICAgICAgICAgIGlkOiAiX3N0YXJ0IiwKICAgICAgICAgICAgICAiZGF0YS1tY2UtdHlwZSI6ICJib29rbWFyayIKICAgICAgICAgICAgfSkpLCB2b2lkIGQoITApOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChBcChoLCBvLCByKSkgcmV0dXJuIG4gPSB2ZS5mcm9tKG8ubGFzdENoaWxkKS5nZXRPcihvKSwgYShPcChoLCBuLCAhMSwgInNwYW4iLCB7CiAgICAgICAgICAgIGlkOiAiX2VuZCIsCiAgICAgICAgICAgICJkYXRhLW1jZS10eXBlIjogImJvb2ttYXJrIgogICAgICAgICAgfSkpLCB2b2lkIGQoITEpOwogICAgICAgICAgdmFyIHIgPSBUcChoLCByLCAic3BhbiIsIHsKICAgICAgICAgICAgaWQ6ICJfc3RhcnQiLAogICAgICAgICAgICAiZGF0YS1tY2UtdHlwZSI6ICJib29rbWFyayIKICAgICAgICAgIH0pLAogICAgICAgICAgICAgIG8gPSBUcChoLCBvLCAic3BhbiIsIHsKICAgICAgICAgICAgaWQ6ICJfZW5kIiwKICAgICAgICAgICAgImRhdGEtbWNlLXR5cGUiOiAiYm9va21hcmsiCiAgICAgICAgICB9KSwKICAgICAgICAgICAgICBpID0gaC5jcmVhdGVSbmcoKTsKICAgICAgICAgIGkuc2V0U3RhcnRBZnRlcihyKSwgaS5zZXRFbmRCZWZvcmUobyksIEVsKGgsIGksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIFkoZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBZYyhlKSB8fCBZYyhlLnBhcmVudE5vZGUpIHx8IGEoZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSksIGEociksIGEobyksIHIgPSBkKCEwKSwgbyA9IGQoKTsKICAgICAgICB9IGVsc2UgciA9IG8gPSBhKHIpOwoKICAgICAgICB0LnN0YXJ0Q29udGFpbmVyID0gci5wYXJlbnROb2RlIHx8IHIsIHQuc3RhcnRPZmZzZXQgPSBoLm5vZGVJbmRleChyKSwgdC5lbmRDb250YWluZXIgPSBvLnBhcmVudE5vZGUgfHwgbywgdC5lbmRPZmZzZXQgPSBoLm5vZGVJbmRleChvKSArIDE7CiAgICAgIH0KCiAgICAgIEVsKGgsIHQsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgWShlLCB2KTsKICAgICAgfSk7CiAgICB9CgogICAgdmFyIG4sCiAgICAgICAgbSA9IHUuZm9ybWF0dGVyLmdldChzKSwKICAgICAgICBnID0gbVswXSwKICAgICAgICBwID0gITAsCiAgICAgICAgaCA9IHUuZG9tLAogICAgICAgIHIgPSB1LnNlbGVjdGlvbiwKICAgICAgICB2ID0gZnVuY3Rpb24gdih0KSB7CiAgICAgIHZhciBlID0gITAsCiAgICAgICAgICBuID0gITE7CiAgICAgIHpuKHQpICYmIGguZ2V0Q29udGVudEVkaXRhYmxlKHQpICYmIChlID0gcCwgcCA9ICJ0cnVlIiA9PT0gaC5nZXRDb250ZW50RWRpdGFibGUodCksIG4gPSAhMCk7CiAgICAgIHZhciByLAogICAgICAgICAgbywKICAgICAgICAgIGkgPSB4ZSh0LmNoaWxkTm9kZXMpOwoKICAgICAgaWYgKHAgJiYgIW4gJiYgKHIgPSBmKHQpLCBvID0gdC5wYXJlbnROb2RlLCAhciAmJiBWKG8pICYmIG1sKGcpICYmIGYobykpLCBnLmRlZXAgJiYgaS5sZW5ndGgpIHsKICAgICAgICBmb3IgKHZhciBhID0gMDsgYSA8IGkubGVuZ3RoOyBhKyspIHsKICAgICAgICAgIHYoaVthXSk7CiAgICAgICAgfQoKICAgICAgICBuICYmIChwID0gZSk7CiAgICAgIH0KCiAgICAgIFkoWyJ1bmRlcmxpbmUiLCAibGluZS10aHJvdWdoIiwgIm92ZXJsaW5lIl0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgem4odCkgJiYgdS5kb20uZ2V0U3R5bGUodCwgInRleHQtZGVjb3JhdGlvbiIpID09PSBlICYmIHQucGFyZW50Tm9kZSAmJiB1bChoLCB0LnBhcmVudE5vZGUpID09PSBlICYmIExwKHUsIHsKICAgICAgICAgIGRlZXA6ICExLAogICAgICAgICAgZXhhY3Q6ICEwLAogICAgICAgICAgaW5saW5lOiAic3BhbiIsCiAgICAgICAgICBzdHlsZXM6IHsKICAgICAgICAgICAgdGV4dERlY29yYXRpb246IGUKICAgICAgICAgIH0KICAgICAgICB9LCBudWxsLCB0KTsKICAgICAgfSk7CiAgICB9OwoKICAgIGlmIChlKSByZXR1cm4gUWMoZSkgPyAoKG4gPSBoLmNyZWF0ZVJuZygpKS5zZXRTdGFydEJlZm9yZShlKSwgbi5zZXRFbmRBZnRlcihlKSwgdChuKSkgOiB0KGUpLCB2b2lkIHlmKHUsIHMsIGUsIGMpOwogICAgaWYgKCJmYWxzZSIgIT09IGguZ2V0Q29udGVudEVkaXRhYmxlKHIuZ2V0Tm9kZSgpKSkgci5pc0NvbGxhcHNlZCgpICYmIGRsKGcpICYmICFfbCh1KS5sZW5ndGggPyBqZyh1LCBzLCBjLCBsKSA6IChCbChyLCAhMCwgZnVuY3Rpb24gKCkgewogICAgICBPbCh1LCB0KTsKICAgIH0pLCBkbChnKSAmJiBCZyh1LCBzLCBjLCByLmdldFN0YXJ0KCkpICYmIFpjKGgsIHIsIHIuZ2V0Um5nKCkpLCB1Lm5vZGVDaGFuZ2VkKCkpLCB5Zih1LCBzLCBlLCBjKTtlbHNlIHsKICAgICAgZSA9IHIuZ2V0Tm9kZSgpOwoKICAgICAgZm9yICh2YXIgbyA9IDA7IG8gPCBtLmxlbmd0aCAmJiAoIW1bb10uY2VGYWxzZU92ZXJyaWRlIHx8ICFMcCh1LCBtW29dLCBjLCBlLCBlKSk7IG8rKykgewogICAgICAgIDsKICAgICAgfQoKICAgICAgeWYodSwgcywgZSwgYyk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBNcChlKSB7CiAgICByZXR1cm4gem4oZSkgJiYgIVljKGUpICYmICF6YyhlKSAmJiAhc24oZSk7CiAgfQoKICBmdW5jdGlvbiBGcChlKSB7CiAgICByZXR1cm4gTmUoZSwgInZhcnMiKTsKICB9CgogIGZ1bmN0aW9uIFVwKG4sIGUsIHIsIG8sIGkpIHsKICAgIHJldHVybiBJKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gbi5mb3JtYXR0ZXIubWF0Y2hOb2RlKGUsIHIsIG51bGwgIT0gaSA/IGkgOiB7fSwgbyk7CiAgICAgIHJldHVybiAhYih0KTsKICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBSZyhuLCBlLCByKSB8fCAhbyAmJiBWKG4uZm9ybWF0dGVyLm1hdGNoTm9kZShlLCByLCBpLCAhMCkpOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiB6cChlLCB0KSB7CiAgICB2YXIgbiA9IG51bGwgIT0gdCA/IHQgOiBEaChlKTsKICAgIHJldHVybiBVKHNsKGUuZG9tLCBuKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHpuKGUpICYmICFzbihlKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gSHAoZSwgbywgaSwgYSwgdCwgbikgewogICAgdmFyIHIsIHUsIHMsIGMsIGwsIGYsIGQsIG0sIGc7CiAgICByZXR1cm4gbnVsbCA9PT0gby5nZXQoKSAmJiAodSA9IGUsIChyID0gbykuc2V0KHt9KSwgdS5vbigiTm9kZUNoYW5nZSIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIFRoKHUsIGUuZWxlbWVudCwgci5nZXQoKSk7CiAgICB9KSwgdS5vbigiRm9ybWF0QXBwbHkgRm9ybWF0UmVtb3ZlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSB2ZS5mcm9tKGUubm9kZSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIFFjKGUpID8gZSA6IGUuc3RhcnRDb250YWluZXI7CiAgICAgIH0pLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gem4oZSkgPyB2ZS5zb21lKGUpIDogdmUuZnJvbShlLnBhcmVudEVsZW1lbnQpOwogICAgICB9KS5nZXRPclRodW5rKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gRGgodSk7CiAgICAgIH0pOwogICAgICBUaCh1LCB0LCByLmdldCgpKTsKICAgIH0pKSwgcyA9IGUsIGwgPSBpLCBmID0gYSwgZCA9IHQsIG0gPSBuLCBnID0gKGMgPSBvKS5nZXQoKSwgWShsLnNwbGl0KCIsIiksIGZ1bmN0aW9uICh0KSB7CiAgICAgIGZ1bmN0aW9uIGUoKSB7CiAgICAgICAgdmFyIGUgPSB6cChzKTsKICAgICAgICByZXR1cm4gVXAocywgZSwgdCwgZCwgbSkuaXNTb21lKCk7CiAgICAgIH0KCiAgICAgIHZhciBuLAogICAgICAgICAgciA9IHVlKGcsIHQpLmdldE9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBlID0gewogICAgICAgICAgd2l0aFNpbWlsYXI6IHsKICAgICAgICAgICAgc3RhdGU6IHJ1KCExKSwKICAgICAgICAgICAgc2ltaWxhcjogITAsCiAgICAgICAgICAgIGNhbGxiYWNrczogW10KICAgICAgICAgIH0sCiAgICAgICAgICB3aXRob3V0U2ltaWxhcjogewogICAgICAgICAgICBzdGF0ZTogcnUoITEpLAogICAgICAgICAgICBzaW1pbGFyOiAhMSwKICAgICAgICAgICAgY2FsbGJhY2tzOiBbXQogICAgICAgICAgfSwKICAgICAgICAgIHdpdGhWYXJzOiBbXQogICAgICAgIH07CiAgICAgICAgcmV0dXJuIGdbdF0gPSBlOwogICAgICB9KTsKICAgICAgYihtKSA/ICgobiA9IGQgPyByLndpdGhTaW1pbGFyIDogci53aXRob3V0U2ltaWxhcikuY2FsbGJhY2tzLnB1c2goZiksIDEgPT09IG4uY2FsbGJhY2tzLmxlbmd0aCAmJiBuLnN0YXRlLnNldChlKCkpKSA6IHIud2l0aFZhcnMucHVzaCh7CiAgICAgICAgc3RhdGU6IHJ1KGUoKSksCiAgICAgICAgc2ltaWxhcjogZCwKICAgICAgICB2YXJzOiBtLAogICAgICAgIGNhbGxiYWNrOiBmCiAgICAgIH0pOwogICAgfSksIGMuc2V0KGcpLCB7CiAgICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkgewogICAgICAgIHZhciBlLAogICAgICAgICAgICB0ID0gaSwKICAgICAgICAgICAgbiA9IGEsCiAgICAgICAgICAgIHIgPSAoZSA9IG8pLmdldCgpOwogICAgICAgIFkodC5zcGxpdCgiLCIpLCBmdW5jdGlvbiAodCkgewogICAgICAgICAgcmV0dXJuIHVlKHIsIHQpLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgclt0XSA9IHsKICAgICAgICAgICAgICB3aXRoU2ltaWxhcjogX2UyKF9lMih7fSwgZS53aXRoU2ltaWxhciksIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrczogVShlLndpdGhTaW1pbGFyLmNhbGxiYWNrcywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgIT09IG47CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIHdpdGhvdXRTaW1pbGFyOiBfZTIoX2UyKHt9LCBlLndpdGhvdXRTaW1pbGFyKSwgewogICAgICAgICAgICAgICAgY2FsbGJhY2tzOiBVKGUud2l0aG91dFNpbWlsYXIuY2FsbGJhY2tzLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZSAhPT0gbjsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgd2l0aFZhcnM6IFUoZS53aXRoVmFycywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlLmNhbGxiYWNrICE9PSBuOwogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH07CiAgICAgICAgICB9KTsKICAgICAgICB9KSwgZS5zZXQocik7CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBqcChlLCB0KSB7CiAgICB2YXIgbiA9ICh0IHx8IGRvY3VtZW50KS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICByZXR1cm4gWShlLCBmdW5jdGlvbiAoZSkgewogICAgICBuLmFwcGVuZENoaWxkKGUuZG9tKTsKICAgIH0pLCBOdC5mcm9tRG9tKG4pOwogIH0KCiAgZnVuY3Rpb24gVnAoZSwgdCwgbikgewogICAgcmV0dXJuIHsKICAgICAgZWxlbWVudDogZSwKICAgICAgd2lkdGg6IHQsCiAgICAgIHJvd3M6IG4KICAgIH07CiAgfQoKICBmdW5jdGlvbiBxcChlLCB0KSB7CiAgICByZXR1cm4gewogICAgICBlbGVtZW50OiBlLAogICAgICBjZWxsczogdAogICAgfTsKICB9CgogIGZ1bmN0aW9uICRwKGUsIHQpIHsKICAgIHZhciBuID0gcGFyc2VJbnQodm4oZSwgdCksIDEwKTsKICAgIHJldHVybiBpc05hTihuKSA/IDEgOiBuOwogIH0KCiAgZnVuY3Rpb24gV3AoZSkgewogICAgcmV0dXJuIEwoZSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgcmV0dXJuIHQuY2VsbHMubGVuZ3RoID4gZSA/IHQuY2VsbHMubGVuZ3RoIDogZTsKICAgIH0sIDApOwogIH0KCiAgZnVuY3Rpb24gS3AoZSwgdCkgewogICAgZm9yICh2YXIgbiA9IGUucm93cywgciA9IDA7IHIgPCBuLmxlbmd0aDsgcisrKSB7CiAgICAgIGZvciAodmFyIG8gPSBuW3JdLmNlbGxzLCBpID0gMDsgaSA8IG8ubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoamUob1tpXSwgdCkpIHJldHVybiB2ZS5zb21lKHsKICAgICAgICAgIHg6IGksCiAgICAgICAgICB5OiByCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdmUubm9uZSgpOwogIH0KCiAgZnVuY3Rpb24gWHAoZSwgdCwgbiwgciwgbykgewogICAgZm9yICh2YXIgaSA9IFtdLCBhID0gZS5yb3dzLCB1ID0gbjsgdSA8PSBvOyB1KyspIHsKICAgICAgdmFyIHMgPSBhW3VdLmNlbGxzLAogICAgICAgICAgYyA9IHQgPCByID8gcy5zbGljZSh0LCByICsgMSkgOiBzLnNsaWNlKHIsIHQgKyAxKTsKICAgICAgaS5wdXNoKHFwKGFbdV0uZWxlbWVudCwgYykpOwogICAgfQoKICAgIHJldHVybiBpOwogIH0KCiAgZnVuY3Rpb24gWXAoZSkgewogICAgdmFyIG8gPSBWcCh3dShlKSwgMCwgW10pOwogICAgcmV0dXJuIFkoaHUoZSwgInRyIiksIGZ1bmN0aW9uIChuLCByKSB7CiAgICAgIFkoaHUobiwgInRkLHRoIiksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgIWZ1bmN0aW9uIChlLCB0LCBuLCByLCBvKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gJHAobywgInJvd3NwYW4iKSwgYSA9ICRwKG8sICJjb2xzcGFuIiksIHUgPSBlLnJvd3MsIHMgPSBuOyBzIDwgbiArIGk7IHMrKykgewogICAgICAgICAgICB1W3NdIHx8ICh1W3NdID0gcXAoU3UociksIFtdKSk7CgogICAgICAgICAgICBmb3IgKHZhciBjID0gdDsgYyA8IHQgKyBhOyBjKyspIHsKICAgICAgICAgICAgICB1W3NdLmNlbGxzW2NdID0gcyA9PT0gbiAmJiBjID09PSB0ID8gbyA6IHd1KG8pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfShvLCBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICAgICAgZm9yICg7IHIgPSB0LCAoKG8gPSBlLnJvd3MpW25dID8gb1tuXS5jZWxscyA6IFtdKVtyXTspIHsKICAgICAgICAgICAgdCsrOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciByLCBvOwogICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgfShvLCB0LCByKSwgciwgbiwgZSk7CiAgICAgIH0pOwogICAgfSksIFZwKG8uZWxlbWVudCwgV3Aoby5yb3dzKSwgby5yb3dzKTsKICB9CgogIGZ1bmN0aW9uIEdwKGUsIHQpIHsKICAgIHZhciBuLAogICAgICAgIHIsCiAgICAgICAgbywKICAgICAgICBpID0gTnQuZnJvbURvbSh0LmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSwKICAgICAgICBhID0gaG0oaSwgZSksCiAgICAgICAgdSA9IFUoYSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIE9yKGUpIHx8IGNvKGUpOwogICAgfSksCiAgICAgICAgcyA9IChvID0gdCwgTShyID0gYSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuICJsaSIgPT09IGt0KGUpICYmIFJsKGUsIG8pOwogICAgfSkuZm9sZChKKFtdKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIE0ociwgZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gInVsIiA9PT0ga3QoZSkgfHwgIm9sIiA9PT0ga3QoZSk7CiAgICAgIH0pLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gTnQuZnJvbVRhZyhrdChlKSk7CiAgICAgICAgcmV0dXJuIENuKHQsIGFlKFNuKGUpLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgcmV0dXJuIEdlKHQsICJsaXN0LXN0eWxlIik7CiAgICAgICAgfSkpLCBbTnQuZnJvbVRhZygibGkiKSwgdF07CiAgICAgIH0pLmdldE9yKFtdKTsKICAgIH0pKTsKICAgIHJldHVybiBUKHUuY29uY2F0KHMubGVuZ3RoID8gcyA6IGdvKG4gPSBpKSA/IE90KG4pLmZpbHRlcihtbykuZm9sZChKKFtdKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIFtuLCBlXTsKICAgIH0pIDogbW8obikgPyBbbl0gOiBbXSksIHd1KTsKICB9CgogIGZ1bmN0aW9uIEpwKCkgewogICAgcmV0dXJuIGpwKFtdKTsKICB9CgogIGZ1bmN0aW9uIFFwKGUsIGkpIHsKICAgIHJldHVybiBocihpWzBdLCAidGFibGUiLCBBKGplLCBlKSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICB2YXIgcywKICAgICAgICAgIHQsCiAgICAgICAgICBuID0gaVswXSwKICAgICAgICAgIHIgPSBpW2kubGVuZ3RoIC0gMV0sCiAgICAgICAgICBvID0gWXAoZSk7CiAgICAgIHJldHVybiB0ID0gciwgS3AocyA9IG8sIG4pLmJpbmQoZnVuY3Rpb24gKHUpIHsKICAgICAgICByZXR1cm4gS3AocywgdCkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gdCA9IHMsIG4gPSB1LngsIHIgPSB1LnksIG8gPSBlLngsIGEgPSByIDwgKGkgPSBlLnkpID8gWHAodCwgbiwgciwgbywgaSkgOiBYcCh0LCBuLCBpLCBvLCByKSwgVnAodC5lbGVtZW50LCBXcChhKSwgYSk7CiAgICAgICAgICB2YXIgdCwgbiwgciwgbywgaSwgYTsKICAgICAgICB9KTsKICAgICAgfSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGpwKFsobiA9IFQoKHQgPSBlKS5yb3dzLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQgPSBUKGUuY2VsbHMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciB0ID0gU3UoZSk7CiAgICAgICAgICAgIHJldHVybiB5bih0LCAiY29sc3BhbiIpLCB5bih0LCAicm93c3BhbiIpLCB0OwogICAgICAgICAgfSksCiAgICAgICAgICAgICAgbiA9IHd1KGUuZWxlbWVudCk7CiAgICAgICAgICByZXR1cm4gS3QobiwgdCksIG47CiAgICAgICAgfSksIHIgPSB3dSh0LmVsZW1lbnQpLCBLdChvID0gTnQuZnJvbVRhZygidGJvZHkiKSwgbiksIFBuKHIsIG8pLCByKV0pOwogICAgICAgIHZhciB0LCBuLCByLCBvOwogICAgICB9KTsKICAgIH0pLmdldE9yVGh1bmsoSnApOwogIH0KCiAgZnVuY3Rpb24gWnAoZSwgdCkgewogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYSwKICAgICAgICB1LAogICAgICAgIHMsCiAgICAgICAgYyA9IGtsKHQsIGUpOwogICAgcmV0dXJuIDAgPCBjLmxlbmd0aCA/IFFwKGUsIGMpIDogKG4gPSBlLCAwIDwgKHIgPSB0KS5sZW5ndGggJiYgclswXS5jb2xsYXBzZWQgPyBKcCgpIDogKG8gPSBuLCBpID0gclswXSwgYSA9IE50LmZyb21Eb20oaS5jbG9uZUNvbnRlbnRzKCkpLCBzID0gTCh1ID0gR3AobywgaSksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHJldHVybiBQbih0LCBlKSwgdDsKICAgIH0sIGEpLCAwIDwgdS5sZW5ndGggPyBqcChbc10pIDogcykpOwogIH0KCiAgZnVuY3Rpb24gZWgoZSwgdCkgewogICAgcmV0dXJuIDAgPD0gdCAmJiB0IDwgZS5sZW5ndGggJiYgR2MoZS5jaGFyQXQodCkpOwogIH0KCiAgZnVuY3Rpb24gdGgoZSwgdCkgewogICAgdmFyIG4gPSB3byhlLmlubmVyVGV4dCk7CiAgICByZXR1cm4gdCA/IG4ucmVwbGFjZSgvXlsgXGZcblxyXHRcdl0rLywgIiIpIDogbjsKICB9CgogIGZ1bmN0aW9uIG5oKGUpIHsKICAgIHJldHVybiB6bihlKSA/IGUub3V0ZXJIVE1MIDogam4oZSkgPyBHby5lbmNvZGVSYXcoZS5kYXRhLCAhMSkgOiBWbihlKSA/ICJceDNjIS0tIiArIGUuZGF0YSArICItLVx4M2UiIDogIiI7CiAgfQoKICBmdW5jdGlvbiByaChlLCBjKSB7CiAgICB2YXIgbCA9IDA7CiAgICBZKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0LCBuLCByLCBvLCBpLCBhLCB1LCBzOwogICAgICAwID09PSBlWzBdID8gbCsrIDogMSA9PT0gZVswXSA/IChvID0gYywgaSA9IGVbMV0sIGEgPSBsLCBzID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdCwKICAgICAgICAgICAgbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLAogICAgICAgICAgICByID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoKICAgICAgICBmb3IgKGUgJiYgKG4uaW5uZXJIVE1MID0gZSk7IHQgPSBuLmZpcnN0Q2hpbGQ7KSB7CiAgICAgICAgICByLmFwcGVuZENoaWxkKHQpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHI7CiAgICAgIH0oaSksIG8uaGFzQ2hpbGROb2RlcygpICYmIGEgPCBvLmNoaWxkTm9kZXMubGVuZ3RoID8gKHUgPSBvLmNoaWxkTm9kZXNbYV0pLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHMsIHUpIDogby5hcHBlbmRDaGlsZChzKSwgbCsrKSA6IDIgPT09IGVbMF0gJiYgKG4gPSBsLCAodCA9IGMpLmhhc0NoaWxkTm9kZXMoKSAmJiBuIDwgdC5jaGlsZE5vZGVzLmxlbmd0aCAmJiAociA9IHQuY2hpbGROb2Rlc1tuXSkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIG9oKG4pIHsKICAgIHZhciBlLAogICAgICAgIHQgPSBIKChlID0gbi5nZXRCb2R5KCksIFUoVCh4ZShlLmNoaWxkTm9kZXMpLCBuaCksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiAwIDwgZS5sZW5ndGg7CiAgICB9KSksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gWmQobi5zZXJpYWxpemVyLCBlKTsKICAgICAgcmV0dXJuIDAgPCB0Lmxlbmd0aCA/IFt0XSA6IFtdOwogICAgfSksCiAgICAgICAgciA9IHQuam9pbigiIik7CiAgICByZXR1cm4gLTEgIT09IHIuaW5kZXhPZigiPC9pZnJhbWU+IikgPyB7CiAgICAgIHR5cGU6ICJmcmFnbWVudGVkIiwKICAgICAgZnJhZ21lbnRzOiB0LAogICAgICBjb250ZW50OiAiIiwKICAgICAgYm9va21hcms6IG51bGwsCiAgICAgIGJlZm9yZUJvb2ttYXJrOiBudWxsCiAgICB9IDogewogICAgICB0eXBlOiAiY29tcGxldGUiLAogICAgICBmcmFnbWVudHM6IG51bGwsCiAgICAgIGNvbnRlbnQ6IHIsCiAgICAgIGJvb2ttYXJrOiBudWxsLAogICAgICBiZWZvcmVCb29rbWFyazogbnVsbAogICAgfTsKICB9CgogIGZ1bmN0aW9uIGloKGUsIHQsIG4pIHsKICAgIHZhciByLAogICAgICAgIG8sCiAgICAgICAgaSwKICAgICAgICBnLAogICAgICAgIHAsCiAgICAgICAgYSwKICAgICAgICBoLAogICAgICAgIHYsCiAgICAgICAgX2MyLAogICAgICAgIGwsCiAgICAgICAgdSwKICAgICAgICBzID0gbiA/IHQuYmVmb3JlQm9va21hcmsgOiB0LmJvb2ttYXJrOwoKICAgIGZ1bmN0aW9uIGIoZSwgdCwgbiwgcikgewogICAgICBmb3IgKHZhciBvID0gZTsgbyAtIHQgPCByICYmIG8gPCBuICYmIGdbb10gPT09IHBbbyAtIHRdOykgewogICAgICAgICsrbzsKICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICBzdGFydDogZSwKICAgICAgICBlbmQ6IG8sCiAgICAgICAgZGlhZzogdAogICAgICB9OwogICAgfQoKICAgICJmcmFnbWVudGVkIiA9PT0gdC50eXBlID8gKHIgPSB0LmZyYWdtZW50cywgbyA9IGUuZ2V0Qm9keSgpLCBpID0gVCh4ZShvLmNoaWxkTm9kZXMpLCBuaCksIHJoKChwID0gciwgYSA9IChnID0gaSkubGVuZ3RoICsgcC5sZW5ndGggKyAyLCBoID0gbmV3IEFycmF5KGEpLCB2ID0gbmV3IEFycmF5KGEpLCBfYzIgPSBmdW5jdGlvbiBjKGUsIHQsIG4sIHIsIG8pIHsKICAgICAgdmFyIGkgPSBsKGUsIHQsIG4sIHIpOwogICAgICBpZiAobnVsbCA9PT0gaSB8fCBpLnN0YXJ0ID09PSB0ICYmIGkuZGlhZyA9PT0gdCAtIHIgfHwgaS5lbmQgPT09IGUgJiYgaS5kaWFnID09PSBlIC0gbikgZm9yICh2YXIgYSA9IGUsIHUgPSBuOyBhIDwgdCB8fCB1IDwgcjspIHsKICAgICAgICBhIDwgdCAmJiB1IDwgciAmJiBnW2FdID09PSBwW3VdID8gKG8ucHVzaChbMCwgZ1thXV0pLCArK2EsICsrdSkgOiByIC0gbiA8IHQgLSBlID8gKG8ucHVzaChbMiwgZ1thXV0pLCArK2EpIDogKG8ucHVzaChbMSwgcFt1XV0pLCArK3UpOwogICAgICB9IGVsc2UgewogICAgICAgIF9jMihlLCBpLnN0YXJ0LCBuLCBpLnN0YXJ0IC0gaS5kaWFnLCBvKTsKCiAgICAgICAgZm9yICh2YXIgcyA9IGkuc3RhcnQ7IHMgPCBpLmVuZDsgKytzKSB7CiAgICAgICAgICBvLnB1c2goWzAsIGdbc11dKTsKICAgICAgICB9CgogICAgICAgIF9jMihpLmVuZCwgdCwgaS5lbmQgLSBpLmRpYWcsIHIsIG8pOwogICAgICB9CiAgICB9LCBsID0gZnVuY3Rpb24gbChlLCB0LCBuLCByKSB7CiAgICAgIHZhciBvID0gdCAtIGUsCiAgICAgICAgICBpID0gciAtIG47CiAgICAgIGlmICgwID09IG8gfHwgMCA9PSBpKSByZXR1cm4gbnVsbDsKICAgICAgdmFyIGEsCiAgICAgICAgICB1LAogICAgICAgICAgcywKICAgICAgICAgIGMsCiAgICAgICAgICBsLAogICAgICAgICAgZiA9IG8gLSBpLAogICAgICAgICAgZCA9IGkgKyBvLAogICAgICAgICAgbSA9IChkICUgMiA9PSAwID8gZCA6IDEgKyBkKSAvIDI7CgogICAgICBmb3IgKGhbMSArIG1dID0gZSwgdlsxICsgbV0gPSB0ICsgMSwgYSA9IDA7IGEgPD0gbTsgKythKSB7CiAgICAgICAgZm9yICh1ID0gLWE7IHUgPD0gYTsgdSArPSAyKSB7CiAgICAgICAgICBmb3IgKHMgPSB1ICsgbSwgdSA9PT0gLWEgfHwgdSAhPT0gYSAmJiBoW3MgLSAxXSA8IGhbcyArIDFdID8gaFtzXSA9IGhbcyArIDFdIDogaFtzXSA9IGhbcyAtIDFdICsgMSwgbCA9IChjID0gaFtzXSkgLSBlICsgbiAtIHU7IGMgPCB0ICYmIGwgPCByICYmIGdbY10gPT09IHBbbF07KSB7CiAgICAgICAgICAgIGhbc10gPSArK2MsICsrbDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoZiAlIDIgIT0gMCAmJiBmIC0gYSA8PSB1ICYmIHUgPD0gZiArIGEgJiYgdltzIC0gZl0gPD0gaFtzXSkgcmV0dXJuIGIodltzIC0gZl0sIHUgKyBlIC0gbiwgdCwgcik7CiAgICAgICAgfQoKICAgICAgICBmb3IgKHUgPSBmIC0gYTsgdSA8PSBmICsgYTsgdSArPSAyKSB7CiAgICAgICAgICBmb3IgKHMgPSB1ICsgbSAtIGYsIHUgPT09IGYgLSBhIHx8IHUgIT09IGYgKyBhICYmIHZbcyArIDFdIDw9IHZbcyAtIDFdID8gdltzXSA9IHZbcyArIDFdIC0gMSA6IHZbc10gPSB2W3MgLSAxXSwgbCA9IChjID0gdltzXSAtIDEpIC0gZSArIG4gLSB1OyBlIDw9IGMgJiYgbiA8PSBsICYmIGdbY10gPT09IHBbbF07KSB7CiAgICAgICAgICAgIHZbc10gPSBjLS0sIGwtLTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoZiAlIDIgPT0gMCAmJiAtYSA8PSB1ICYmIHUgPD0gYSAmJiB2W3NdIDw9IGhbcyArIGZdKSByZXR1cm4gYih2W3NdLCB1ICsgZSAtIG4sIHQsIHIpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgdSA9IFtdLCBfYzIoMCwgZy5sZW5ndGgsIDAsIHAubGVuZ3RoLCB1KSwgdSksIG8pKSA6IGUuc2V0Q29udGVudCh0LmNvbnRlbnQsIHsKICAgICAgZm9ybWF0OiAicmF3IiwKICAgICAgbm9fc2VsZWN0aW9uOiAhVihzKSB8fCAhamMocykgfHwgIXMuaXNGYWtlQ2FyZXQKICAgIH0pLCBlLnNlbGVjdGlvbi5tb3ZlVG9Cb29rbWFyayhzKTsKICB9CgogIGZ1bmN0aW9uIGFoKGUpIHsKICAgIHJldHVybiAiZnJhZ21lbnRlZCIgPT09IGUudHlwZSA/IGUuZnJhZ21lbnRzLmpvaW4oIiIpIDogZS5jb250ZW50OwogIH0KCiAgZnVuY3Rpb24gdWgoZSkgewogICAgdmFyIHQgPSBOdC5mcm9tVGFnKCJib2R5IiwgT2goKSk7CiAgICByZXR1cm4gQ3UodCwgYWgoZSkpLCBZKGh1KHQsICIqW2RhdGEtbWNlLWJvZ3VzXSIpLCBZdCksIHQuZG9tLmlubmVySFRNTDsKICB9CgogIGZ1bmN0aW9uIHNoKGUsIHQpIHsKICAgIHJldHVybiAhKCFlIHx8ICF0KSAmJiAociA9IHQsIGFoKGUpID09PSBhaChyKSB8fCAobiA9IHQsIHVoKGUpID09PSB1aChuKSkpOwogICAgdmFyIG4sIHI7CiAgfQoKICBmdW5jdGlvbiBjaChlKSB7CiAgICByZXR1cm4gMCA9PT0gZS5nZXQoKTsKICB9CgogIGZ1bmN0aW9uIGxoKGUsIHQsIG4pIHsKICAgIGNoKG4pICYmIChlLnR5cGluZyA9IHQpOwogIH0KCiAgZnVuY3Rpb24gZmgoZSwgdCkgewogICAgZS50eXBpbmcgJiYgKGxoKGUsICExLCB0KSwgZS5hZGQoKSk7CiAgfQoKICBmdW5jdGlvbiBkaChjKSB7CiAgICByZXR1cm4gewogICAgICB1bmRvTWFuYWdlcjogewogICAgICAgIGJlZm9yZUNoYW5nZTogZnVuY3Rpb24gYmVmb3JlQ2hhbmdlKGUsIHQpIHsKICAgICAgICAgIHZhciBuID0gYywKICAgICAgICAgICAgICByID0gdDsKICAgICAgICAgIGNoKGUpICYmIHIuc2V0KG1jKG4uc2VsZWN0aW9uKSk7CiAgICAgICAgfSwKICAgICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChlLCB0LCBuLCByLCBvLCBpKSB7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIHQsIG4sIHIsIG8sIGksIGEpIHsKICAgICAgICAgICAgdmFyIHUgPSBvaChlKTsKICAgICAgICAgICAgaWYgKGkgPSBFdC5leHRlbmQoaSA9IGkgfHwge30sIHUpLCAhMSA9PT0gY2gocikgfHwgZS5yZW1vdmVkKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgdmFyIHMgPSB0LmRhdGFbbi5nZXQoKV07CiAgICAgICAgICAgIGlmIChlLmZpcmUoIkJlZm9yZUFkZFVuZG8iLCB7CiAgICAgICAgICAgICAgbGV2ZWw6IGksCiAgICAgICAgICAgICAgbGFzdExldmVsOiBzLAogICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGEKICAgICAgICAgICAgfSkuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybiBudWxsOwogICAgICAgICAgICBpZiAocyAmJiBzaChzLCBpKSkgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIHQuZGF0YVtuLmdldCgpXSAmJiBvLmdldCgpLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICB0LmRhdGFbbi5nZXQoKV0uYmVmb3JlQm9va21hcmsgPSBlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIGMgPSBlLmdldFBhcmFtKCJjdXN0b21fdW5kb19yZWRvX2xldmVscyIsIDAsICJudW1iZXIiKTsKCiAgICAgICAgICAgIGlmIChjICYmIHQuZGF0YS5sZW5ndGggPiBjKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgbCA9IDA7IGwgPCB0LmRhdGEubGVuZ3RoIC0gMTsgbCsrKSB7CiAgICAgICAgICAgICAgICB0LmRhdGFbbF0gPSB0LmRhdGFbbCArIDFdOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdC5kYXRhLmxlbmd0aC0tLCBuLnNldCh0LmRhdGEubGVuZ3RoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaS5ib29rbWFyayA9IG1jKGUuc2VsZWN0aW9uKSwgbi5nZXQoKSA8IHQuZGF0YS5sZW5ndGggLSAxICYmICh0LmRhdGEubGVuZ3RoID0gbi5nZXQoKSArIDEpLCB0LmRhdGEucHVzaChpKSwgbi5zZXQodC5kYXRhLmxlbmd0aCAtIDEpOwogICAgICAgICAgICB2YXIgZiA9IHsKICAgICAgICAgICAgICBsZXZlbDogaSwKICAgICAgICAgICAgICBsYXN0TGV2ZWw6IHMsCiAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogYQogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gMCA8IG4uZ2V0KCkgPyAoZS5zZXREaXJ0eSghMCksIGUuZmlyZSgiQWRkVW5kbyIsIGYpLCBlLmZpcmUoImNoYW5nZSIsIGYpKSA6IGUuZmlyZSgiQWRkVW5kbyIsIGYpLCBpOwogICAgICAgICAgfShjLCBlLCB0LCBuLCByLCBvLCBpKTsKICAgICAgICB9LAogICAgICAgIHVuZG86IGZ1bmN0aW9uIHVuZG8oZSwgdCwgbikgewogICAgICAgICAgcmV0dXJuIHIgPSBjLCBpID0gdCwgYSA9IG4sIChvID0gZSkudHlwaW5nICYmIChvLmFkZCgpLCBvLnR5cGluZyA9ICExLCBsaChvLCAhMSwgaSkpLCAwIDwgYS5nZXQoKSAmJiAoYS5zZXQoYS5nZXQoKSAtIDEpLCBpaChyLCB1ID0gby5kYXRhW2EuZ2V0KCldLCAhMCksIHIuc2V0RGlydHkoITApLCByLmZpcmUoIlVuZG8iLCB7CiAgICAgICAgICAgIGxldmVsOiB1CiAgICAgICAgICB9KSksIHU7CiAgICAgICAgICB2YXIgciwgbywgaSwgYSwgdTsKICAgICAgICB9LAogICAgICAgIHJlZG86IGZ1bmN0aW9uIHJlZG8oZSwgdCkgewogICAgICAgICAgcmV0dXJuIG4gPSBjLCBvID0gdCwgKHIgPSBlKS5nZXQoKSA8IG8ubGVuZ3RoIC0gMSAmJiAoci5zZXQoci5nZXQoKSArIDEpLCBpaChuLCBpID0gb1tyLmdldCgpXSwgITEpLCBuLnNldERpcnR5KCEwKSwgbi5maXJlKCJSZWRvIiwgewogICAgICAgICAgICBsZXZlbDogaQogICAgICAgICAgfSkpLCBpOwogICAgICAgICAgdmFyIG4sIHIsIG8sIGk7CiAgICAgICAgfSwKICAgICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoZSwgdCkgewogICAgICAgICAgdmFyIG4sCiAgICAgICAgICAgICAgciA9IGMsCiAgICAgICAgICAgICAgbyA9IHQ7CiAgICAgICAgICAobiA9IGUpLmRhdGEgPSBbXSwgby5zZXQoMCksIG4udHlwaW5nID0gITEsIHIuZmlyZSgiQ2xlYXJVbmRvcyIpOwogICAgICAgIH0sCiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KGUpIHsKICAgICAgICAgIHZhciB0OwogICAgICAgICAgKHQgPSBlKS5jbGVhcigpLCB0LmFkZCgpOwogICAgICAgIH0sCiAgICAgICAgaGFzVW5kbzogZnVuY3Rpb24gaGFzVW5kbyhlLCB0KSB7CiAgICAgICAgICByZXR1cm4gbiA9IGMsIHIgPSBlLCAwIDwgdC5nZXQoKSB8fCByLnR5cGluZyAmJiByLmRhdGFbMF0gJiYgIXNoKG9oKG4pLCByLmRhdGFbMF0pOwogICAgICAgICAgdmFyIG4sIHI7CiAgICAgICAgfSwKICAgICAgICBoYXNSZWRvOiBmdW5jdGlvbiBoYXNSZWRvKGUsIHQpIHsKICAgICAgICAgIHJldHVybiBuID0gZSwgdC5nZXQoKSA8IG4uZGF0YS5sZW5ndGggLSAxICYmICFuLnR5cGluZzsKICAgICAgICAgIHZhciBuOwogICAgICAgIH0sCiAgICAgICAgdHJhbnNhY3Q6IGZ1bmN0aW9uIHRyYW5zYWN0KGUsIHQsIG4pIHsKICAgICAgICAgIHJldHVybiBvID0gbiwgZmgociA9IGUsIHQpLCByLmJlZm9yZUNoYW5nZSgpLCByLmlnbm9yZShvKSwgci5hZGQoKTsKICAgICAgICAgIHZhciByLCBvOwogICAgICAgIH0sCiAgICAgICAgaWdub3JlOiBmdW5jdGlvbiBpZ25vcmUoZSwgdCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZS5zZXQoZS5nZXQoKSArIDEpLCB0KCk7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBlLnNldChlLmdldCgpIC0gMSk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBleHRyYTogZnVuY3Rpb24gZXh0cmEoZSwgdCwgbiwgcikgewogICAgICAgICAgdmFyIG8sCiAgICAgICAgICAgICAgaSwKICAgICAgICAgICAgICBhID0gYywKICAgICAgICAgICAgICB1ID0gdCwKICAgICAgICAgICAgICBzID0gcjsKICAgICAgICAgIChvID0gZSkudHJhbnNhY3QobikgJiYgKGkgPSBvLmRhdGFbdS5nZXQoKV0uYm9va21hcmssIGloKGEsIG8uZGF0YVt1LmdldCgpIC0gMV0sICEwKSwgby50cmFuc2FjdChzKSAmJiAoby5kYXRhW3UuZ2V0KCkgLSAxXS5iZWZvcmVCb29rbWFyayA9IGkpKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGZvcm1hdHRlcjogewogICAgICAgIG1hdGNoOiBmdW5jdGlvbiBtYXRjaChlLCB0LCBuLCByKSB7CiAgICAgICAgICByZXR1cm4gQmcoYywgZSwgdCwgbiwgcik7CiAgICAgICAgfSwKICAgICAgICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwoZSwgdCkgewogICAgICAgICAgcmV0dXJuIG8gPSBlLCBpID0gdCwgYSA9IFtdLCB1ID0ge30sIG4gPSAociA9IGMpLnNlbGVjdGlvbi5nZXRTdGFydCgpLCByLmRvbS5nZXRQYXJlbnQobiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCBvLmxlbmd0aDsgdCsrKSB7CiAgICAgICAgICAgICAgdmFyIG4gPSBvW3RdOwogICAgICAgICAgICAgICF1W25dICYmIGhwKHIsIGUsIG4sIGkpICYmICh1W25dID0gITAsIGEucHVzaChuKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIHIuZG9tLmdldFJvb3QoKSksIGE7CiAgICAgICAgICB2YXIgciwgbywgaSwgYSwgdSwgbjsKICAgICAgICB9LAogICAgICAgIG1hdGNoTm9kZTogZnVuY3Rpb24gbWF0Y2hOb2RlKGUsIHQsIG4sIHIpIHsKICAgICAgICAgIHJldHVybiBocChjLCBlLCB0LCBuLCByKTsKICAgICAgICB9LAogICAgICAgIGNhbkFwcGx5OiBmdW5jdGlvbiBjYW5BcHBseSh1KSB7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdmFyIHQgPSBlLmZvcm1hdHRlci5nZXQodSksCiAgICAgICAgICAgICAgICBuID0gZS5kb207CiAgICAgICAgICAgIGlmICh0KSBmb3IgKHZhciByID0gc2wobiwgZS5zZWxlY3Rpb24uZ2V0U3RhcnQoKSksIG8gPSB0Lmxlbmd0aCAtIDE7IDAgPD0gbzsgby0tKSB7CiAgICAgICAgICAgICAgdmFyIGkgPSB0W29dOwogICAgICAgICAgICAgIGlmICghZmwoaSkgfHwgVihpLmRlZmF1bHRCbG9jaykpIHJldHVybiAhMDsKCiAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IHIubGVuZ3RoIC0gMTsgMCA8PSBhOyBhLS0pIHsKICAgICAgICAgICAgICAgIGlmIChuLmlzKHJbYV0sIGkuc2VsZWN0b3IpKSByZXR1cm4gITA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAhMTsKICAgICAgICAgIH0oYyk7CiAgICAgICAgfSwKICAgICAgICBjbG9zZXN0OiBmdW5jdGlvbiBjbG9zZXN0KGUpIHsKICAgICAgICAgIHJldHVybiByID0gYywgbyA9IGUsIHZlLmZyb20oci5zZWxlY3Rpb24uZ2V0U3RhcnQoITApKS5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiBBZyhOdC5mcm9tRG9tKGUpLCBmdW5jdGlvbiAobikgewogICAgICAgICAgICAgIHJldHVybiBlZShvLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGhwKHIsIG4uZG9tLCB0ID0gZSkgPyB2ZS5zb21lKHQpIDogdmUubm9uZSgpOwogICAgICAgICAgICAgICAgdmFyIHQ7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sIHQpOwogICAgICAgICAgfSkuZ2V0T3JOdWxsKCk7CgogICAgICAgICAgZnVuY3Rpb24gdChlKSB7CiAgICAgICAgICAgIHJldHVybiBqZShlLCBOdC5mcm9tRG9tKHIuZ2V0Qm9keSgpKSk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHIsIG87CiAgICAgICAgfSwKICAgICAgICBhcHBseTogZnVuY3Rpb24gYXBwbHkoZSwgdCwgbikgewogICAgICAgICAgcmV0dXJuIFJoKGMsIGUsIHQsIG4pOwogICAgICAgIH0sCiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoZSwgdCwgbiwgcikgewogICAgICAgICAgcmV0dXJuIElwKGMsIGUsIHQsIG4sIHIpOwogICAgICAgIH0sCiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoZSwgdCwgbikgewogICAgICAgICAgdmFyIHIsCiAgICAgICAgICAgICAgbyA9IGUsCiAgICAgICAgICAgICAgaSA9IHQsCiAgICAgICAgICAgICAgYSA9IG4sCiAgICAgICAgICAgICAgdSA9IChyID0gYykuZm9ybWF0dGVyLmdldChvKTsKICAgICAgICAgICghQmcociwgbywgaSwgYSkgfHwgInRvZ2dsZSIgaW4gdVswXSAmJiAhdVswXS50b2dnbGUgPyBSaCA6IElwKShyLCBvLCBpLCBhKTsKICAgICAgICB9LAogICAgICAgIGZvcm1hdENoYW5nZWQ6IGZ1bmN0aW9uIGZvcm1hdENoYW5nZWQoZSwgdCwgbiwgciwgbykgewogICAgICAgICAgcmV0dXJuIEhwKGMsIGUsIHQsIG4sIHIsIG8pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZWRpdG9yOiB7CiAgICAgICAgZ2V0Q29udGVudDogZnVuY3Rpb24gZ2V0Q29udGVudChlLCB0KSB7CiAgICAgICAgICByZXR1cm4gZCA9IGMsIG0gPSBlLCBnID0gdCwgdmUuZnJvbShkLmdldEJvZHkoKSkuZm9sZChKKCJ0cmVlIiA9PT0gbS5mb3JtYXQgPyBuZXcgVWQoImJvZHkiLCAxMSkgOiAiIiksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiB0ID0gZCwgciA9IGUsIG8gPSBnLCBjID0gX2UyKF9lMih7fSwgbiA9IG0pLCB7CiAgICAgICAgICAgICAgZm9ybWF0OiBvLAogICAgICAgICAgICAgIGdldDogITAsCiAgICAgICAgICAgICAgZ2V0SW5uZXI6ICEwCiAgICAgICAgICAgIH0pLCBsID0gbi5ub19ldmVudHMgPyBjIDogdC5maXJlKCJCZWZvcmVHZXRDb250ZW50IiwgYyksIGYgPSAicmF3IiA9PT0gbC5mb3JtYXQgPyBFdC50cmltKHJtKHQuc2VyaWFsaXplciwgci5pbm5lckhUTUwpKSA6ICJ0ZXh0IiA9PT0gbC5mb3JtYXQgPyB0LmRvbS5pc0VtcHR5KHIpID8gIiIgOiB3byhyLmlubmVyVGV4dCB8fCByLnRleHRDb250ZW50KSA6ICJ0cmVlIiA9PT0gbC5mb3JtYXQgPyB0LnNlcmlhbGl6ZXIuc2VyaWFsaXplKHIsIGwpIDogKGEgPSAoaSA9IHQpLnNlcmlhbGl6ZXIuc2VyaWFsaXplKHIsIGwpLCB1ID0gU3MoaSksIHMgPSBuZXcgUmVnRXhwKCJeKDwiICsgdSArICJbXj5dKj4oJm5ic3A7fCYjMTYwO3xcXHN8XHhhMHw8YnIgXFwvPnwpPFxcLyIgKyB1ICsgIj5bXHJcbl0qfDxiciBcXC8+W1xyXG5dKikkIiksIGEucmVwbGFjZShzLCAiIikpLCBEKFsidGV4dCIsICJ0cmVlIl0sIGwuZm9ybWF0KSB8fCB2byhOdC5mcm9tRG9tKHIpKSA/IGwuY29udGVudCA9IGYgOiBsLmNvbnRlbnQgPSBFdC50cmltKGYpLCAobC5ub19ldmVudHMgPyBsIDogdC5maXJlKCJHZXRDb250ZW50IiwgbCkpLmNvbnRlbnQ7CiAgICAgICAgICAgIHZhciB0LCBuLCByLCBvLCBpLCBhLCB1LCBzLCBjLCBsLCBmOwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgZCwgbSwgZzsKICAgICAgICB9LAogICAgICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIHNldENvbnRlbnQoZSwgdCkgewogICAgICAgICAgcmV0dXJuIGtnKGMsIGUsIHQpOwogICAgICAgIH0sCiAgICAgICAgaW5zZXJ0Q29udGVudDogZnVuY3Rpb24gaW5zZXJ0Q29udGVudChlLCB0KSB7CiAgICAgICAgICByZXR1cm4gU2coYywgZSwgdCk7CiAgICAgICAgfSwKICAgICAgICBhZGRWaXN1YWw6IGZ1bmN0aW9uIGFkZFZpc3VhbChlKSB7CiAgICAgICAgICB2YXIgaSwKICAgICAgICAgICAgICB0ID0gZSwKICAgICAgICAgICAgICBhID0gKGkgPSBjKS5kb20sCiAgICAgICAgICAgICAgbiA9IFYodCkgPyB0IDogaS5nZXRCb2R5KCk7CiAgICAgICAgICBiKGkuaGFzVmlzdWFsKSAmJiAoaS5oYXNWaXN1YWwgPSBpLmdldFBhcmFtKCJ2aXN1YWwiLCAhMCwgImJvb2xlYW4iKSksIFkoYS5zZWxlY3QoInRhYmxlLGEiLCBuKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgc3dpdGNoIChlLm5vZGVOYW1lKSB7CiAgICAgICAgICAgICAgY2FzZSAiVEFCTEUiOgogICAgICAgICAgICAgICAgdmFyIHQgPSBpLmdldFBhcmFtKCJ2aXN1YWxfdGFibGVfY2xhc3MiLCAibWNlLWl0ZW0tdGFibGUiLCAic3RyaW5nIiksCiAgICAgICAgICAgICAgICAgICAgbiA9IGEuZ2V0QXR0cmliKGUsICJib3JkZXIiKTsKICAgICAgICAgICAgICAgIG4gJiYgIjAiICE9PSBuIHx8ICFpLmhhc1Zpc3VhbCA/IGEucmVtb3ZlQ2xhc3MoZSwgdCkgOiBhLmFkZENsYXNzKGUsIHQpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgIkEiOgogICAgICAgICAgICAgICAgdmFyIHIsIG87CiAgICAgICAgICAgICAgICBhLmdldEF0dHJpYihlLCAiaHJlZiIpIHx8IChyID0gYS5nZXRBdHRyaWIoZSwgIm5hbWUiKSB8fCBlLmlkLCBvID0gaS5nZXRQYXJhbSgidmlzdWFsX2FuY2hvcl9jbGFzcyIsICJtY2UtaXRlbS1hbmNob3IiLCAic3RyaW5nIiksIHIgJiYgaS5oYXNWaXN1YWwgPyBhLmFkZENsYXNzKGUsIG8pIDogYS5yZW1vdmVDbGFzcyhlLCBvKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLCBpLmZpcmUoIlZpc3VhbEFpZCIsIHsKICAgICAgICAgICAgZWxlbWVudDogdCwKICAgICAgICAgICAgaGFzVmlzdWFsOiBpLmhhc1Zpc3VhbAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBzZWxlY3Rpb246IHsKICAgICAgICBnZXRDb250ZW50OiBmdW5jdGlvbiBnZXRDb250ZW50KGUsIHQpIHsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICAgICAgICB2YXIgciwKICAgICAgICAgICAgICAgIG8gPSAociA9IHQsIF9lMihfZTIoe30sIG4gPSB2b2lkIDAgPT09IG4gPyB7fSA6IG4pLCB7CiAgICAgICAgICAgICAgZm9ybWF0OiByLAogICAgICAgICAgICAgIGdldDogITAsCiAgICAgICAgICAgICAgc2VsZWN0aW9uOiAhMAogICAgICAgICAgICB9KSksCiAgICAgICAgICAgICAgICBpID0gZS5maXJlKCJCZWZvcmVHZXRDb250ZW50Iiwgbyk7CiAgICAgICAgICAgIGlmIChpLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm4gZS5maXJlKCJHZXRDb250ZW50IiwgaSksIGkuY29udGVudDsKICAgICAgICAgICAgaWYgKCJ0ZXh0IiA9PT0gaS5mb3JtYXQpIHJldHVybiBtID0gZSwgdmUuZnJvbShtLnNlbGVjdGlvbi5nZXRSbmcoKSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgdmFyIHQgPSB2ZS5mcm9tKG0uZG9tLmdldFBhcmVudChlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLCBtLmRvbS5pc0Jsb2NrKSksCiAgICAgICAgICAgICAgICAgIG4gPSBtLmdldEJvZHkoKSwKICAgICAgICAgICAgICAgICAgciA9IHQubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZS5ub2RlTmFtZTsKICAgICAgICAgICAgICB9KS5nZXRPcigiZGl2IikudG9Mb3dlckNhc2UoKSwKICAgICAgICAgICAgICAgICAgbyA9IHh0LmJyb3dzZXIuaXNJRSgpICYmICJwcmUiICE9PSByLAogICAgICAgICAgICAgICAgICBpID0gbS5kb20uYWRkKG4sIHIsIHsKICAgICAgICAgICAgICAgICJkYXRhLW1jZS1ib2d1cyI6ICJhbGwiLAogICAgICAgICAgICAgICAgc3R5bGU6ICJvdmVyZmxvdzogaGlkZGVuOyBvcGFjaXR5OiAwOyIKICAgICAgICAgICAgICB9LCBlLmNsb25lQ29udGVudHMoKSksCiAgICAgICAgICAgICAgICAgIGEgPSB0aChpLCBvKSwKICAgICAgICAgICAgICAgICAgdSA9IHdvKGkudGV4dENvbnRlbnQpOwoKICAgICAgICAgICAgICBpZiAobS5kb20ucmVtb3ZlKGkpLCBlaCh1LCAwKSB8fCBlaCh1LCB1Lmxlbmd0aCAtIDEpKSB7CiAgICAgICAgICAgICAgICB2YXIgcyA9IHRoKHQuZ2V0T3IobiksIG8pLAogICAgICAgICAgICAgICAgICAgIGMgPSBzLmluZGV4T2YoYSk7CiAgICAgICAgICAgICAgICByZXR1cm4gLTEgPT09IGMgPyBhIDogKGVoKHMsIGMgLSAxKSA/ICIgIiA6ICIiKSArIGEgKyAoZWgocywgYyArIGEubGVuZ3RoKSA/ICIgIiA6ICIiKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgICAgICB9KS5nZXRPcigiIik7CiAgICAgICAgICAgIGkuZ2V0SW5uZXIgPSAhMDsKICAgICAgICAgICAgdmFyIGEsCiAgICAgICAgICAgICAgICB1LAogICAgICAgICAgICAgICAgcywKICAgICAgICAgICAgICAgIGMsCiAgICAgICAgICAgICAgICBsLAogICAgICAgICAgICAgICAgZiwKICAgICAgICAgICAgICAgIGQsCiAgICAgICAgICAgICAgICBtLAogICAgICAgICAgICAgICAgZyA9ICh1ID0gaSwgcyA9IChhID0gZSkuc2VsZWN0aW9uLmdldFJuZygpLCBjID0gYS5kb20uY3JlYXRlKCJib2R5IiksIGwgPSBhLnNlbGVjdGlvbi5nZXRTZWwoKSwgZiA9IHdkKGEsIE5sKGwpKSwgKGQgPSB1LmNvbnRleHR1YWwgPyBacChOdC5mcm9tRG9tKGEuZ2V0Qm9keSgpKSwgZikuZG9tIDogcy5jbG9uZUNvbnRlbnRzKCkpICYmIGMuYXBwZW5kQ2hpbGQoZCksIGEuc2VsZWN0aW9uLnNlcmlhbGl6ZXIuc2VyaWFsaXplKGMsIHUpKTsKICAgICAgICAgICAgcmV0dXJuICJ0cmVlIiA9PT0gaS5mb3JtYXQgPyBnIDogKGkuY29udGVudCA9IGUuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgPyAiIiA6IGcsIGUuZmlyZSgiR2V0Q29udGVudCIsIGkpLCBpLmNvbnRlbnQpOwogICAgICAgICAgfShjLCBlLCB0KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHJhdzogewogICAgICAgIGdldE1vZGVsOiBmdW5jdGlvbiBnZXRNb2RlbCgpIHsKICAgICAgICAgIHJldHVybiB2ZS5ub25lKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gbWgoZSkgewogICAgcmV0dXJuIE5lKGUucGx1Z2lucywgInJ0YyIpOwogIH0KCiAgZnVuY3Rpb24gZ2goZSkgewogICAgdmFyIHUgPSBlOwogICAgcmV0dXJuIHVlKGUucGx1Z2lucywgInJ0YyIpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHZlLmZyb20oZS5zZXR1cCk7CiAgICB9KS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHUucnRjSW5zdGFuY2UgPSBkaChlKSwgdmUubm9uZSgpOwogICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsIG47CiAgICAgIHJldHVybiB1LnJ0Y0luc3RhbmNlID0gKHQgPSBKKG51bGwpLCBuID0gSigiIiksIHsKICAgICAgICB1bmRvTWFuYWdlcjogewogICAgICAgICAgYmVmb3JlQ2hhbmdlOiB0ZSwKICAgICAgICAgIGFkZDogdCwKICAgICAgICAgIHVuZG86IHQsCiAgICAgICAgICByZWRvOiB0LAogICAgICAgICAgY2xlYXI6IHRlLAogICAgICAgICAgcmVzZXQ6IHRlLAogICAgICAgICAgaGFzVW5kbzogUiwKICAgICAgICAgIGhhc1JlZG86IFIsCiAgICAgICAgICB0cmFuc2FjdDogdCwKICAgICAgICAgIGlnbm9yZTogdGUsCiAgICAgICAgICBleHRyYTogdGUKICAgICAgICB9LAogICAgICAgIGZvcm1hdHRlcjogewogICAgICAgICAgbWF0Y2g6IFIsCiAgICAgICAgICBtYXRjaEFsbDogSihbXSksCiAgICAgICAgICBtYXRjaE5vZGU6IEoodm9pZCAwKSwKICAgICAgICAgIGNhbkFwcGx5OiBSLAogICAgICAgICAgY2xvc2VzdDogbiwKICAgICAgICAgIGFwcGx5OiB0ZSwKICAgICAgICAgIHJlbW92ZTogdGUsCiAgICAgICAgICB0b2dnbGU6IHRlLAogICAgICAgICAgZm9ybWF0Q2hhbmdlZDogSih7CiAgICAgICAgICAgIHVuYmluZDogdGUKICAgICAgICAgIH0pCiAgICAgICAgfSwKICAgICAgICBlZGl0b3I6IHsKICAgICAgICAgIGdldENvbnRlbnQ6IG4sCiAgICAgICAgICBzZXRDb250ZW50OiBuLAogICAgICAgICAgaW5zZXJ0Q29udGVudDogdGUsCiAgICAgICAgICBhZGRWaXN1YWw6IHRlCiAgICAgICAgfSwKICAgICAgICBzZWxlY3Rpb246IHsKICAgICAgICAgIGdldENvbnRlbnQ6IG4KICAgICAgICB9LAogICAgICAgIHJhdzogewogICAgICAgICAgZ2V0TW9kZWw6IEoodmUubm9uZSgpKQogICAgICAgIH0KICAgICAgfSksIHZlLnNvbWUoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBlKCkudGhlbihmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIHUucnRjSW5zdGFuY2UgPSAoaSA9IGUudW5kb01hbmFnZXIsIGEgPSBlLmZvcm1hdHRlciwgbiA9IGUuZWRpdG9yLCByID0gZS5zZWxlY3Rpb24sIHQgPSBlLnJhdywgewogICAgICAgICAgICB1bmRvTWFuYWdlcjogewogICAgICAgICAgICAgIGJlZm9yZUNoYW5nZTogaS5iZWZvcmVDaGFuZ2UsCiAgICAgICAgICAgICAgYWRkOiBpLmFkZCwKICAgICAgICAgICAgICB1bmRvOiBpLnVuZG8sCiAgICAgICAgICAgICAgcmVkbzogaS5yZWRvLAogICAgICAgICAgICAgIGNsZWFyOiBpLmNsZWFyLAogICAgICAgICAgICAgIHJlc2V0OiBpLnJlc2V0LAogICAgICAgICAgICAgIGhhc1VuZG86IGkuaGFzVW5kbywKICAgICAgICAgICAgICBoYXNSZWRvOiBpLmhhc1JlZG8sCiAgICAgICAgICAgICAgdHJhbnNhY3Q6IGZ1bmN0aW9uIHRyYW5zYWN0KGUsIHQsIG4pIHsKICAgICAgICAgICAgICAgIHJldHVybiBpLnRyYW5zYWN0KG4pOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgaWdub3JlOiBmdW5jdGlvbiBpZ25vcmUoZSwgdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGkuaWdub3JlKHQpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZXh0cmE6IGZ1bmN0aW9uIGV4dHJhKGUsIHQsIG4sIHIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpLmV4dHJhKG4sIHIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZm9ybWF0dGVyOiB7CiAgICAgICAgICAgICAgbWF0Y2g6IGZ1bmN0aW9uIG1hdGNoKGUsIHQsIG4sIHIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBhLm1hdGNoKGUsIG8odCksIHIpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbWF0Y2hBbGw6IGEubWF0Y2hBbGwsCiAgICAgICAgICAgICAgbWF0Y2hOb2RlOiBhLm1hdGNoTm9kZSwKICAgICAgICAgICAgICBjYW5BcHBseTogZnVuY3Rpb24gY2FuQXBwbHkoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGEuY2FuQXBwbHkoZSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBjbG9zZXN0OiBmdW5jdGlvbiBjbG9zZXN0KGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBhLmNsb3Nlc3QoZSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhcHBseTogZnVuY3Rpb24gYXBwbHkoZSwgdCwgbikgewogICAgICAgICAgICAgICAgcmV0dXJuIGEuYXBwbHkoZSwgbyh0KSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShlLCB0LCBuLCByKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYS5yZW1vdmUoZSwgbyh0KSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZShlLCB0LCBuKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYS50b2dnbGUoZSwgbyh0KSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmb3JtYXRDaGFuZ2VkOiBmdW5jdGlvbiBmb3JtYXRDaGFuZ2VkKGUsIHQsIG4sIHIsIG8pIHsKICAgICAgICAgICAgICAgIHJldHVybiBhLmZvcm1hdENoYW5nZWQodCwgbiwgciwgbyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBlZGl0b3I6IHsKICAgICAgICAgICAgICBnZXRDb250ZW50OiBmdW5jdGlvbiBnZXRDb250ZW50KGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuLmdldENvbnRlbnQoZSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBzZXRDb250ZW50OiBmdW5jdGlvbiBzZXRDb250ZW50KGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuLnNldENvbnRlbnQoZSwgdCk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBpbnNlcnRDb250ZW50OiBmdW5jdGlvbiBpbnNlcnRDb250ZW50KGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuLmluc2VydENvbnRlbnQoZSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhZGRWaXN1YWw6IG4uYWRkVmlzdWFsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNlbGVjdGlvbjogewogICAgICAgICAgICAgIGdldENvbnRlbnQ6IGZ1bmN0aW9uIGdldENvbnRlbnQoZSwgdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHIuZ2V0Q29udGVudCh0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJhdzogewogICAgICAgICAgICAgIGdldE1vZGVsOiBmdW5jdGlvbiBnZXRNb2RlbCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB2ZS5zb21lKHQuZ2V0UmF3TW9kZWwoKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KSwgZS5ydGMuaXNSZW1vdGU7CgogICAgICAgICAgZnVuY3Rpb24gbyhlKSB7CiAgICAgICAgICAgIHJldHVybiBoKGUpID8gZSA6IHt9OwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBpLCBhLCBuLCByLCB0OwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gcGgoZSkgewogICAgcmV0dXJuIGUucnRjSW5zdGFuY2UgfHwgZGgoZSk7CiAgfQoKICBmdW5jdGlvbiBoaChlKSB7CiAgICB2YXIgdCA9IGUucnRjSW5zdGFuY2U7CiAgICBpZiAodCkgcmV0dXJuIHQ7CiAgICB0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byBnZXQgUlRDIGluc3RhbmNlIG5vdCB5ZXQgaW5pdGlhbGl6ZWQuIik7CiAgfQoKICBmdW5jdGlvbiB2aChlKSB7CiAgICByZXR1cm4gMCA9PT0gZS5kb20ubGVuZ3RoID8gKExuKGUpLCB2ZS5ub25lKCkpIDogdmUuc29tZShlKTsKICB9CgogIGZ1bmN0aW9uIGJoKGUsIHQsIHUsIHMpIHsKICAgIGUuYmluZChmdW5jdGlvbiAoYSkgewogICAgICByZXR1cm4gKHMgPyBVbSA6IEZtKShhLmRvbSwgcyA/IGEuZG9tLmxlbmd0aCA6IDApLCB0LmZpbHRlcihfbikubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIHQgPSB1LAogICAgICAgICAgICBuID0gcywKICAgICAgICAgICAgciA9IGEuZG9tLAogICAgICAgICAgICBvID0gZS5kb20sCiAgICAgICAgICAgIGkgPSAobiA/IHIgOiBvKS5sZW5ndGg7CiAgICAgICAgbiA/ICh6bShyLCBvLCAhMSwgIW4pLCB0LnNldFN0YXJ0KG8sIGkpKSA6ICh6bShvLCByLCAhMSwgIW4pLCB0LnNldEVuZChvLCBpKSk7CiAgICAgIH0pOwogICAgfSkub3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBlID0gczsKICAgICAgcmV0dXJuIHQuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIEZsLmlzQm9va21hcmtOb2RlKGUuZG9tKTsKICAgICAgfSkuYmluZChlID8gUHQgOiBCdCkub3IodCkuZmlsdGVyKF9uKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgbiwKICAgICAgICAgICAgciA9IHM7CiAgICAgICAgT3QobiA9IGUpLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0ID0gbi5kb207CiAgICAgICAgICByICYmIERtKGUsIGFzKHQsIDApKSA/IEZtKHQsIDApIDogIXIgJiYgVG0oZSwgYXModCwgdC5sZW5ndGgpKSAmJiBVbSh0LCB0Lmxlbmd0aCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiB5aChlLCB0LCBuKSB7CiAgICB2YXIgciwKICAgICAgICBvID0gKHIgPSB0LCBfZTIoX2UyKHsKICAgICAgZm9ybWF0OiAiaHRtbCIKICAgIH0sIG4gPSB2b2lkIDAgPT09IG4gPyB7fSA6IG4pLCB7CiAgICAgIHNldDogITAsCiAgICAgIHNlbGVjdGlvbjogITAsCiAgICAgIGNvbnRlbnQ6IHIKICAgIH0pKSwKICAgICAgICBpID0gbzsKCiAgICBpZiAoIW8ubm9fZXZlbnRzKSB7CiAgICAgIHZhciBhID0gZS5maXJlKCJCZWZvcmVTZXRDb250ZW50Iiwgbyk7CiAgICAgIGlmIChhLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm4gdm9pZCBlLmZpcmUoIlNldENvbnRlbnQiLCBhKTsKICAgICAgaSA9IGE7CiAgICB9CgogICAgaS5jb250ZW50ID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgaWYgKCJyYXciID09PSB0LmZvcm1hdCkgcmV0dXJuIHQuY29udGVudDsKICAgICAgdmFyIG4gPSBlLnNlbGVjdGlvbi5nZXRSbmcoKSwKICAgICAgICAgIHIgPSBlLmRvbS5nZXRQYXJlbnQobi5jb21tb25BbmNlc3RvckNvbnRhaW5lciwgZS5kb20uaXNCbG9jayksCiAgICAgICAgICBvID0gciA/IHsKICAgICAgICBjb250ZXh0OiByLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkKICAgICAgfSA6IHt9LAogICAgICAgICAgaSA9IGUucGFyc2VyLnBhcnNlKHQuY29udGVudCwgX2UyKF9lMih7CiAgICAgICAgaXNSb290Q29udGVudDogITAsCiAgICAgICAgZm9yY2VkX3Jvb3RfYmxvY2s6ICExCiAgICAgIH0sIG8pLCB0KSk7CiAgICAgIHJldHVybiBubSh7CiAgICAgICAgdmFsaWRhdGU6IGUudmFsaWRhdGUKICAgICAgfSwgZS5zY2hlbWEpLnNlcmlhbGl6ZShpKTsKICAgIH0oZSwgaSk7CgogICAgdmFyIHUgPSBlLnNlbGVjdGlvbi5nZXRSbmcoKTsKICAgICFmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiA9IHZlLmZyb20odC5maXJzdENoaWxkKS5tYXAoTnQuZnJvbURvbSksCiAgICAgICAgICByID0gdmUuZnJvbSh0Lmxhc3RDaGlsZCkubWFwKE50LmZyb21Eb20pOwogICAgICBlLmRlbGV0ZUNvbnRlbnRzKCksIGUuaW5zZXJ0Tm9kZSh0KTsKICAgICAgdmFyIG8gPSBuLmJpbmQoQnQpLmZpbHRlcihfbikuYmluZCh2aCksCiAgICAgICAgICBpID0gci5iaW5kKFB0KS5maWx0ZXIoX24pLmJpbmQodmgpOwogICAgICBiaChvLCBuLCBlLCAhMCksIGJoKGksIHIsIGUsICExKSwgZS5jb2xsYXBzZSghMSk7CiAgICB9KHUsIHUuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGkuY29udGVudCkpLCBlLnNlbGVjdGlvbi5zZXRSbmcodSksIFpmKGUsIHUpLCBpLm5vX2V2ZW50cyB8fCBlLmZpcmUoIlNldENvbnRlbnQiLCBpKTsKICB9CgogIGZ1bmN0aW9uIENoKGUsIHQsIG4pIHsKICAgIHZhciByOwogICAgZSAmJiBOZShlLCB0KSAmJiAoMCA9PT0gKHIgPSBVKGVbdF0sIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBlICE9PSBuOwogICAgfSkpLmxlbmd0aCA/IGRlbGV0ZSBlW3RdIDogZVt0XSA9IHIpOwogIH0KCiAgcWcgPSBmdW5jdGlvbiBxZyhlKSB7CiAgICB2YXIgdCwKICAgICAgICBuID0gZS5zZWxlY3Rpb24uZ2V0Um5nKCksCiAgICAgICAgciA9IG9uKFsicHJlIl0pOwogICAgbi5jb2xsYXBzZWQgfHwgKHQgPSBlLnNlbGVjdGlvbi5nZXRTZWxlY3RlZEJsb2NrcygpLCB4cChDcChDcCh0LCByKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHIoZS5wcmV2aW91c1NpYmxpbmcpICYmIC0xICE9PSBkZSh0LCBlLnByZXZpb3VzU2libGluZyk7CiAgICB9KSwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsCiAgICAgICAgICBuID0gZS5wcmV2aW91c1NpYmxpbmc7CiAgICAgIFdhKHQgPSBlKS5yZW1vdmUoKSwgV2EobikuYXBwZW5kKCI8YnI+PGJyPiIpLmFwcGVuZCh0LmNoaWxkTm9kZXMpOwogICAgfSkpOwogIH0sIHlwWyJwcmUiXSB8fCAoeXAucHJlID0gW10pLCB5cC5wcmUucHVzaChxZyk7CgogIHZhciB4aCA9IEV0LmVhY2gsCiAgICAgIHdoID0gZnVuY3Rpb24gd2goZSwgdCwgbikgewogICAgeGgoZS5jaGlsZE5vZGVzLCBmdW5jdGlvbiAoZSkgewogICAgICB3cChlKSAmJiAodChlKSAmJiBuKGUpLCBlLmhhc0NoaWxkTm9kZXMoKSAmJiB3aChlLCB0LCBuKSk7CiAgICB9KTsKICB9LAogICAgICBTaCA9IG9yKFt7CiAgICBrZWVwOiBbXQogIH0sIHsKICAgIHJlbmFtZTogWyJuYW1lIl0KICB9LCB7CiAgICByZW1vdmVkOiBbXQogIH1dKSwKICAgICAgRWggPSAvXihzcmN8aHJlZnxzdHlsZSkkLywKICAgICAgTmggPSBFdC5lYWNoLAogICAgICBraCA9IG9sLAogICAgICBfaCA9IEV0LmVhY2gsCiAgICAgIEFoID0gRXQuZWFjaCwKICAgICAgUmggPSBmdW5jdGlvbiBSaChTLCBFLCBOLCByKSB7CiAgICBmdW5jdGlvbiBrKG4sIGUpIHsKICAgICAgdmFyIHQ7CiAgICAgIHkoKGUgPSB2b2lkIDAgPT09IGUgPyBBIDogZSkub25mb3JtYXQpICYmIGUub25mb3JtYXQobiwgZSwgTiwgciksIEFoKGUuc3R5bGVzLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgIHUuc2V0U3R5bGUobiwgdCwgcmwoZSwgTikpOwogICAgICB9KSwgIWUuc3R5bGVzIHx8ICh0ID0gdS5nZXRBdHRyaWIobiwgInN0eWxlIikpICYmIHUuc2V0QXR0cmliKG4sICJkYXRhLW1jZS1zdHlsZSIsIHQpLCBBaChlLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgdS5zZXRBdHRyaWIobiwgdCwgcmwoZSwgTikpOwogICAgICB9KSwgQWgoZS5jbGFzc2VzLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGUgPSBybChlLCBOKSwgdS5oYXNDbGFzcyhuLCBlKSB8fCB1LmFkZENsYXNzKG4sIGUpOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBnKGUsIHQpIHsKICAgICAgdmFyIG4gPSAhMTsKICAgICAgcmV0dXJuIEFoKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuICEhZmwoZSkgJiYgKFYoZS5jb2xsYXBzZWQpICYmIGUuY29sbGFwc2VkICE9PSBhIHx8ICF1LmlzKHQsIGUuc2VsZWN0b3IpIHx8IHpjKHQpID8gdm9pZCAwIDogKGsodCwgZSksICEobiA9ICEwKSkpOwogICAgICB9KSwgbjsKICAgIH0KCiAgICBmdW5jdGlvbiBvKHgsIGUsIGwpIHsKICAgICAgdmFyIHcgPSBbXSwKICAgICAgICAgIGYgPSAhMCwKICAgICAgICAgIGQgPSBBLmlubGluZSB8fCBBLmJsb2NrLAogICAgICAgICAgbSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKFgoZSkpIHsKICAgICAgICAgIHZhciB0ID0gdS5jcmVhdGUoZSk7CiAgICAgICAgICByZXR1cm4gayh0KSwgdDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBudWxsOwogICAgICB9KGQpOwoKICAgICAgRWwoeCwgZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgcywKICAgICAgICAgICAgYyA9IGZ1bmN0aW9uIGMoZSkgewogICAgICAgICAgdmFyIHQgPSAhMSwKICAgICAgICAgICAgICBuID0gZiwKICAgICAgICAgICAgICByID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLAogICAgICAgICAgICAgIG8gPSBlLnBhcmVudE5vZGUsCiAgICAgICAgICAgICAgaSA9IG8ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgIGlmICh6bihlKSAmJiB4LmdldENvbnRlbnRFZGl0YWJsZShlKSAmJiAobiA9IGYsIGYgPSAidHJ1ZSIgPT09IHguZ2V0Q29udGVudEVkaXRhYmxlKGUpLCB0ID0gITApLCBXbihlKSAmJiAhZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsKICAgICAgICAgICAgaWYgKGUuZ2V0UGFyYW0oImZvcm1hdF9lbXB0eV9saW5lcyIsICExLCAiYm9vbGVhbiIpICYmIGRsKHQpKSB7CiAgICAgICAgICAgICAgdmFyIG8gPSBfZTIoX2UyKHt9LCBlLnNjaGVtYS5nZXRUZXh0QmxvY2tFbGVtZW50cygpKSwgewogICAgICAgICAgICAgICAgdGQ6IHt9LAogICAgICAgICAgICAgICAgdGg6IHt9LAogICAgICAgICAgICAgICAgbGk6IHt9LAogICAgICAgICAgICAgICAgZHQ6IHt9LAogICAgICAgICAgICAgICAgZGQ6IHt9LAogICAgICAgICAgICAgICAgZmlnY2FwdGlvbjoge30sCiAgICAgICAgICAgICAgICBjYXB0aW9uOiB7fSwKICAgICAgICAgICAgICAgIGRldGFpbHM6IHt9LAogICAgICAgICAgICAgICAgc3VtbWFyeToge30KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgaSA9IChhID0gTnQuZnJvbURvbShuKSwgcyA9IGZ1bmN0aW9uIHMoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHpjKGUuZG9tKTsKICAgICAgICAgICAgICB9LCAoKGMgPSAodSA9IGEpLmRvbSkucGFyZW50Tm9kZSA/IE5yKE50LmZyb21Eb20oYy5wYXJlbnROb2RlKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiAhamUodSwgZSkgJiYgcyhlKTsKICAgICAgICAgICAgICB9KSA6IHZlLm5vbmUoKSkuaXNTb21lKCkpOwoKICAgICAgICAgICAgICByZXR1cm4gc2UobywgcikgJiYgV3IoTnQuZnJvbURvbShuLnBhcmVudE5vZGUpLCAhMSkgJiYgIWk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBhLCB1LCBzLCBjOwogICAgICAgICAgfShTLCBBLCBlLCBpKSkgcmV0dXJuIHMgPSBudWxsLCB2b2lkIChsbChBKSAmJiB4LnJlbW92ZShlKSk7CiAgICAgICAgICBpZiAobGwoQSkgJiYgQS53cmFwcGVyICYmIGhwKFMsIGUsIEUsIE4pKSBzID0gbnVsbDtlbHNlIHsKICAgICAgICAgICAgaWYgKGYgJiYgIXQgJiYgbGwoQSkgJiYgIUEud3JhcHBlciAmJiB0bChTLCByKSAmJiBubChTLCBpLCBkKSkgewogICAgICAgICAgICAgIHZhciBhID0geC5yZW5hbWUoZSwgZCk7CiAgICAgICAgICAgICAgcmV0dXJuIGsoYSksIHcucHVzaChhKSwgdm9pZCAocyA9IG51bGwpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZmwoQSkpIHsKICAgICAgICAgICAgICB2YXIgdSA9IGcoXywgZSk7CiAgICAgICAgICAgICAgaWYgKCF1ICYmIFYobykgJiYgbWwoQSkgJiYgKHUgPSBnKF8sIG8pKSwgIWRsKEEpIHx8IHUpIHJldHVybiB2b2lkIChzID0gbnVsbCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICFmIHx8IHQgfHwgIW5sKFMsIGQsIHIpIHx8ICFubChTLCBpLCBkKSB8fCAhbCAmJiBqbihlKSAmJiB4byhlLmRhdGEpIHx8IHpjKGUpIHx8IGRsKEEpICYmIHguaXNCbG9jayhlKSA/IChzID0gbnVsbCwgWSh4ZShlLmNoaWxkTm9kZXMpLCBjKSwgdCAmJiAoZiA9IG4pLCBzID0gbnVsbCkgOiAocyB8fCAocyA9IHguY2xvbmUobSwgITEpLCBlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHMsIGUpLCB3LnB1c2gocykpLCBzLmFwcGVuZENoaWxkKGUpKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBZKGUsIGMpOwogICAgICB9KSwgITAgPT09IEEubGlua3MgJiYgWSh3LCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gZnVuY3Rpb24gdChlKSB7CiAgICAgICAgICAiQSIgPT09IGUubm9kZU5hbWUgJiYgayhlLCBBKSwgWSh4ZShlLmNoaWxkTm9kZXMpLCB0KTsKICAgICAgICB9OwoKICAgICAgICB0KGUpOwogICAgICB9KSwgWSh3LCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciBuLAogICAgICAgICAgICB0LAogICAgICAgICAgICByLAogICAgICAgICAgICBvLAogICAgICAgICAgICBpLAogICAgICAgICAgICBhLAogICAgICAgICAgICB1LAogICAgICAgICAgICBzLAogICAgICAgICAgICBjLAogICAgICAgICAgICBsLAogICAgICAgICAgICBmLAogICAgICAgICAgICBkLAogICAgICAgICAgICBtLAogICAgICAgICAgICBnLAogICAgICAgICAgICBwLAogICAgICAgICAgICBoLAogICAgICAgICAgICB2LAogICAgICAgICAgICBiLAogICAgICAgICAgICB5ID0gKG4gPSAwLCBZKGUuY2hpbGROb2RlcywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0OwogICAgICAgICAgVih0ID0gZSkgJiYgam4odCkgJiYgMCA9PT0gdC5sZW5ndGggfHwgWWMoZSkgfHwgbisrOwogICAgICAgIH0pLCBuKTsKCiAgICAgICAgZnVuY3Rpb24gQyhlKSB7CiAgICAgICAgICB2YXIgdDsKICAgICAgICAgIDEgPT09IGUubm9kZVR5cGUgJiYgZS5wYXJlbnROb2RlICYmIDEgPT09IGUucGFyZW50Tm9kZS5ub2RlVHlwZSAmJiAodCA9IHVsKG0sIGUucGFyZW50Tm9kZSksIG0uZ2V0U3R5bGUoZSwgImNvbG9yIikgJiYgdCA/IG0uc2V0U3R5bGUoZSwgInRleHQtZGVjb3JhdGlvbiIsIHQpIDogbS5nZXRTdHlsZShlLCAidGV4dC1kZWNvcmF0aW9uIikgPT09IHQgJiYgbS5zZXRTdHlsZShlLCAidGV4dC1kZWNvcmF0aW9uIiwgbnVsbCkpOwogICAgICAgIH0KCiAgICAgICAgISgxIDwgdy5sZW5ndGgpICYmIHguaXNCbG9jayhlKSB8fCAwICE9PSB5ID8gKGRsKEEpIHx8IGxsKEEpICYmIEEud3JhcHBlcikgJiYgKEEuZXhhY3QgfHwgMSAhPT0geSB8fCAoZSA9IE0oKGQgPSBlKS5jaGlsZE5vZGVzLCBNcCkuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gVGcoeCwgZSwgQSk7CiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB2YXIgdCA9IHguY2xvbmUoZSwgITEpOwogICAgICAgICAgcmV0dXJuIGsodCksIHgucmVwbGFjZSh0LCBkLCAhMCksIHgucmVtb3ZlKGUsICEwKSwgdDsKICAgICAgICB9KS5nZXRPcihkKSksIGggPSBTLCB2ID0gTiwgYiA9IGUsIF9oKF8sIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICB2YXIgciwgZSwgbjsKICAgICAgICAgIGRsKHQpICYmIF9oKGguZG9tLnNlbGVjdCh0LmlubGluZSwgYiksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHdwKGUpICYmIExwKGgsIHQsIHYsIGUsIHQuZXhhY3QgPyBlIDogbnVsbCk7CiAgICAgICAgICB9KSwgciA9IGguZG9tLCAoZSA9IHQpLmNsZWFyX2NoaWxkX3N0eWxlcyAmJiAobiA9IGUubGlua3MgPyAiKjpub3QoYSkiIDogIioiLCB4aChyLnNlbGVjdChuLCBiKSwgZnVuY3Rpb24gKG4pIHsKICAgICAgICAgICAgd3AobikgJiYgeGgoZS5zdHlsZXMsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgICAgci5zZXRTdHlsZShuLCB0LCAiIik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSkpOwogICAgICAgIH0pLCBzID0gQSwgaHAodSA9IFMsIChmID0gZSkucGFyZW50Tm9kZSwgYyA9IEUsIGwgPSBOKSAmJiBMcCh1LCBzLCBsLCBmKSB8fCBzLm1lcmdlX3dpdGhfcGFyZW50cyAmJiB1LmRvbS5nZXRQYXJlbnQoZi5wYXJlbnROb2RlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgaWYgKGhwKHUsIGUsIGMsIGwpKSByZXR1cm4gTHAodSwgcywgbCwgZiksICEwOwogICAgICAgIH0pLCBhID0gZSwgKGkgPSBBKS5zdHlsZXMgJiYgaS5zdHlsZXMuYmFja2dyb3VuZENvbG9yICYmIHdoKGEsIGtwKHgsICJmb250U2l6ZSIpLCBfcCh4LCAiYmFja2dyb3VuZENvbG9yIiwgcmwoaS5zdHlsZXMuYmFja2dyb3VuZENvbG9yLCBOKSkpLCBtID0geCwgcCA9IGUsIChnID0gQSkuc3R5bGVzICYmIChnLnN0eWxlcy5jb2xvciB8fCBnLnN0eWxlcy50ZXh0RGVjb3JhdGlvbikgJiYgKEV0LndhbGsocCwgQywgImNoaWxkTm9kZXMiKSwgQyhwKSksIHQgPSB4LCBvID0gZSwgIWRsKHIgPSBBKSB8fCAic3ViIiAhPT0gci5pbmxpbmUgJiYgInN1cCIgIT09IHIuaW5saW5lIHx8ICh3aChvLCBrcCh0LCAiZm9udFNpemUiKSwgX3AodCwgImZvbnRTaXplIiwgIiIpKSwgdC5yZW1vdmUodC5zZWxlY3QoInN1cCIgPT09IHIuaW5saW5lID8gInN1YiIgOiAic3VwIiwgbyksICEwKSksIE5wKHgsIEEsIDAsIGUpKSA6IHgucmVtb3ZlKGUsICEwKTsKICAgICAgfSk7CiAgICB9CgogICAgdmFyIGUsCiAgICAgICAgdCwKICAgICAgICBuLAogICAgICAgIGksCiAgICAgICAgXyA9IFMuZm9ybWF0dGVyLmdldChFKSwKICAgICAgICBBID0gX1swXSwKICAgICAgICBhID0gIXIgJiYgUy5zZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSwKICAgICAgICB1ID0gUy5kb20sCiAgICAgICAgcyA9IFMuc2VsZWN0aW9uOwoKICAgIGlmICgiZmFsc2UiICE9PSB1LmdldENvbnRlbnRFZGl0YWJsZShzLmdldE5vZGUoKSkpIEEgJiYgKHIgPyBRYyhyKSA/IGcoXywgcikgfHwgKChlID0gdS5jcmVhdGVSbmcoKSkuc2V0U3RhcnRCZWZvcmUociksIGUuc2V0RW5kQWZ0ZXIociksIG8odSwgU2woUywgZSwgXyksICEwKSkgOiBvKHUsIHIsICEwKSA6IGEgJiYgZGwoQSkgJiYgIV9sKFMpLmxlbmd0aCA/IGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICAgIHZhciByLAogICAgICAgICAgbyA9IGUuc2VsZWN0aW9uLAogICAgICAgICAgaSA9IG8uZ2V0Um5nKCksCiAgICAgICAgICBhID0gaS5zdGFydE9mZnNldCwKICAgICAgICAgIHUgPSBpLnN0YXJ0Q29udGFpbmVyLm5vZGVWYWx1ZSwKICAgICAgICAgIHMgPSBIYyhlLmdldEJvZHkoKSwgby5nZXRTdGFydCgpKTsKICAgICAgcyAmJiAociA9IExnKHMpKTsKICAgICAgdmFyIGMsCiAgICAgICAgICBsLAogICAgICAgICAgZiwKICAgICAgICAgIGQsCiAgICAgICAgICBtID0gL1teXHNcdTAwYTBcdTAwYWRcdTIwMGJcdWZlZmZdLzsKICAgICAgdSAmJiAwIDwgYSAmJiBhIDwgdS5sZW5ndGggJiYgbS50ZXN0KHUuY2hhckF0KGEpKSAmJiBtLnRlc3QodS5jaGFyQXQoYSAtIDEpKSA/IChjID0gby5nZXRCb29rbWFyaygpLCBpLmNvbGxhcHNlKCEwKSwgbCA9IFRmKFNsKGUsIGksIGUuZm9ybWF0dGVyLmdldCh0KSkpLCBlLmZvcm1hdHRlci5hcHBseSh0LCBuLCBsKSwgby5tb3ZlVG9Cb29rbWFyayhjKSkgOiAocyAmJiByLm5vZGVWYWx1ZSA9PT0gdnAgfHwgKGYgPSBlLmdldERvYygpLCBkID0gSWcoITApLmRvbSwgciA9IChzID0gZi5pbXBvcnROb2RlKGQsICEwKSkuZmlyc3RDaGlsZCwgaS5pbnNlcnROb2RlKHMpLCBhID0gMSksIGUuZm9ybWF0dGVyLmFwcGx5KHQsIG4sIHMpLCBvLnNldEN1cnNvckxvY2F0aW9uKHIsIGEpKTsKICAgIH0oUywgRSwgTikgOiAodCA9IHMuZ2V0Tm9kZSgpLCBuID0gX1swXSwgUy5zZXR0aW5ncy5mb3JjZWRfcm9vdF9ibG9jayB8fCAhbi5kZWZhdWx0QmxvY2sgfHwgdS5nZXRQYXJlbnQodCwgdS5pc0Jsb2NrKSB8fCBSaChTLCBuLmRlZmF1bHRCbG9jayksIHMuc2V0Um5nKHZnKHMuZ2V0Um5nKCkpKSwgQmwocywgITAsIGZ1bmN0aW9uICgpIHsKICAgICAgT2woUywgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICB2YXIgbiA9IHQgPyBlIDogU2woUywgZSwgXyk7CiAgICAgICAgbyh1LCBuLCAhMSk7CiAgICAgIH0pOwogICAgfSksIFpjKHUsIHMsIHMuZ2V0Um5nKCkpLCBTLm5vZGVDaGFuZ2VkKCkpLCBpID0gUywgeHAoeXBbRV0sIGZ1bmN0aW9uIChlKSB7CiAgICAgIGUoaSk7CiAgICB9KSksIGJmKFMsIEUsIHIsIE4pO2Vsc2UgewogICAgICByID0gcy5nZXROb2RlKCk7CgogICAgICBmb3IgKHZhciBjID0gMCwgbCA9IF8ubGVuZ3RoOyBjIDwgbDsgYysrKSB7CiAgICAgICAgdmFyIGYgPSBfW2NdOwoKICAgICAgICBpZiAoZi5jZUZhbHNlT3ZlcnJpZGUgJiYgZmwoZikgJiYgdS5pcyhyLCBmLnNlbGVjdG9yKSkgewogICAgICAgICAgayhyLCBmKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQoKICAgICAgYmYoUywgRSwgciwgTik7CiAgICB9CiAgfSwKICAgICAgRGggPSBmdW5jdGlvbiBEaChlKSB7CiAgICByZXR1cm4gZS5zZWxlY3Rpb24uZ2V0U3RhcnQoKTsKICB9LAogICAgICBUaCA9IGZ1bmN0aW9uIFRoKGksIGEsIGUpIHsKICAgIHZhciB1ID0genAoaSwgYSk7CiAgICBuZShlLCBmdW5jdGlvbiAoZSwgbykgewogICAgICBmdW5jdGlvbiB0KGUpIHsKICAgICAgICB2YXIgdCwKICAgICAgICAgICAgbiA9IFVwKGksIHUsIG8sIGUuc2ltaWxhciwgRnAoZSkgPyBlLnZhcnMgOiB2b2lkIDApLAogICAgICAgICAgICByID0gbi5pc1NvbWUoKTsKICAgICAgICBlLnN0YXRlLmdldCgpICE9PSByICYmIChlLnN0YXRlLnNldChyKSwgdCA9IG4uZ2V0T3IoYSksIEZwKGUpID8gZS5jYWxsYmFjayhyLCB7CiAgICAgICAgICBub2RlOiB0LAogICAgICAgICAgZm9ybWF0OiBvLAogICAgICAgICAgcGFyZW50czogdQogICAgICAgIH0pIDogWShlLmNhbGxiYWNrcywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlKHIsIHsKICAgICAgICAgICAgbm9kZTogdCwKICAgICAgICAgICAgZm9ybWF0OiBvLAogICAgICAgICAgICBwYXJlbnRzOiB1CiAgICAgICAgICB9KTsKICAgICAgICB9KSk7CiAgICAgIH0KCiAgICAgIFkoW2Uud2l0aFNpbWlsYXIsIGUud2l0aG91dFNpbWlsYXJdLCB0KSwgWShlLndpdGhWYXJzLCB0KTsKICAgIH0pOwogIH0sCiAgICAgIE9oID0gUmUoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgidW5kbyIpOwogIH0pOwoKICBmdW5jdGlvbiBCaChlKSB7CiAgICByZXR1cm4gZS5zZWxlY3Q7CiAgfQoKICBmdW5jdGlvbiBQaChlKSB7CiAgICByZXR1cm4gZSAmJiBlLm93bmVyRG9jdW1lbnQgJiYgVmUoTnQuZnJvbURvbShlLm93bmVyRG9jdW1lbnQpLCBOdC5mcm9tRG9tKGUpKTsKICB9CgogIGZ1bmN0aW9uIExoKGEsIHUsIGUsIHMpIHsKICAgIGZ1bmN0aW9uIHQoZSwgdCkgewogICAgICByZXR1cm4geWgocywgZSwgdCk7CiAgICB9CgogICAgZnVuY3Rpb24gbigpIHsKICAgICAgdmFyIGUgPSBjKCksCiAgICAgICAgICB0ID0gbnVsbCA9PSBlID8gdm9pZCAwIDogZS5hbmNob3JOb2RlLAogICAgICAgICAgbiA9IG51bGwgPT0gZSA/IHZvaWQgMCA6IGUuZm9jdXNOb2RlOwogICAgICBpZiAoIWUgfHwgIXQgfHwgIW4gfHwgcm4odCkgfHwgcm4obikpIHJldHVybiAhMDsKICAgICAgdmFyIHIgPSBhLmNyZWF0ZVJuZygpOwogICAgICByLnNldFN0YXJ0KHQsIGUuYW5jaG9yT2Zmc2V0KSwgci5jb2xsYXBzZSghMCk7CiAgICAgIHZhciBvID0gYS5jcmVhdGVSbmcoKTsKICAgICAgcmV0dXJuIG8uc2V0U3RhcnQobiwgZS5mb2N1c09mZnNldCksIG8uY29sbGFwc2UoITApLCByLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhyLlNUQVJUX1RPX1NUQVJULCBvKSA8PSAwOwogICAgfQoKICAgIGZ1bmN0aW9uIHIoZSkgewogICAgICB2YXIgdCA9IHAoKTsKICAgICAgdC5jb2xsYXBzZSghIWUpLCBoKHQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGMoKSB7CiAgICAgIHJldHVybiB1LmdldFNlbGVjdGlvbiA/IHUuZ2V0U2VsZWN0aW9uKCkgOiB1LmRvY3VtZW50LnNlbGVjdGlvbjsKICAgIH0KCiAgICB2YXIgbCwKICAgICAgICBmLAogICAgICAgIG8sCiAgICAgICAgaSwKICAgICAgICBkLAogICAgICAgIG0sCiAgICAgICAgZyA9IGZ1bmN0aW9uIGcoZSwgdCkgewogICAgICByZXR1cm4gZCB8fCAoZCA9IHt9LCBtID0ge30sIGkub24oIk5vZGVDaGFuZ2UiLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciBuID0gZS5lbGVtZW50LAogICAgICAgICAgICByID0geChuKSwKICAgICAgICAgICAgbyA9IHt9OwogICAgICAgIEV0LmVhY2goZCwgZnVuY3Rpb24gKGUsIG4pIHsKICAgICAgICAgIEMobiwgcikuZWFjaChmdW5jdGlvbiAodCkgewogICAgICAgICAgICBtW25dIHx8IChZKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgZSghMCwgewogICAgICAgICAgICAgICAgbm9kZTogdCwKICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBuLAogICAgICAgICAgICAgICAgcGFyZW50czogcgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KSwgbVtuXSA9IGUpLCBvW25dID0gZTsKICAgICAgICAgIH0pOwogICAgICAgIH0pLCBFdC5lYWNoKG0sIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICBvW3RdIHx8IChkZWxldGUgbVt0XSwgRXQuZWFjaChlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBlKCExLCB7CiAgICAgICAgICAgICAgbm9kZTogbiwKICAgICAgICAgICAgICBzZWxlY3RvcjogdCwKICAgICAgICAgICAgICBwYXJlbnRzOiByCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSkpOwogICAgICAgIH0pOwogICAgICB9KSksIGRbZV0gfHwgKGRbZV0gPSBbXSksIGRbZV0ucHVzaCh0KSwgQyhlLCB4KGkuc2VsZWN0aW9uLmdldFN0YXJ0KCkpKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICBtW2VdID0gZFtlXTsKICAgICAgfSksIHsKICAgICAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHsKICAgICAgICAgIENoKGQsIGUsIHQpLCBDaChtLCBlLCB0KTsKICAgICAgICB9CiAgICAgIH07CiAgICB9LAogICAgICAgIHAgPSBmdW5jdGlvbiBwKCkgewogICAgICBmdW5jdGlvbiBlKGUsIHQsIG4pIHsKICAgICAgICB0cnkgewogICAgICAgICAgcmV0dXJuIHQuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKGUsIG4pOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciB0LAogICAgICAgICAgbiwKICAgICAgICAgIHIsCiAgICAgICAgICBvID0gdS5kb2N1bWVudDsKCiAgICAgIGlmICh2b2lkIDAgIT09IHMuYm9va21hcmsgJiYgITEgPT09IHZkKHMpKSB7CiAgICAgICAgdmFyIGkgPSBsZChzKTsKICAgICAgICBpZiAoaS5pc1NvbWUoKSkgcmV0dXJuIGkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gd2QocywgW2VdKVswXTsKICAgICAgICB9KS5nZXRPcihvLmNyZWF0ZVJhbmdlKCkpOwogICAgICB9CgogICAgICB0cnkgewogICAgICAgICh0ID0gYygpKSAmJiAhcm4odC5hbmNob3JOb2RlKSAmJiAobiA9IDAgPCB0LnJhbmdlQ291bnQgPyB0LmdldFJhbmdlQXQoMCkgOiAodC5jcmVhdGVSYW5nZSA/IHQgOiBvKS5jcmVhdGVSYW5nZSgpLCBuID0gd2QocywgW25dKVswXSk7CiAgICAgIH0gY2F0Y2ggKGUpIHt9CgogICAgICByZXR1cm4gKG4gPSBuIHx8IChvLmNyZWF0ZVJhbmdlID8gby5jcmVhdGVSYW5nZSgpIDogby5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpKSkuc2V0U3RhcnQgJiYgOSA9PT0gbi5zdGFydENvbnRhaW5lci5ub2RlVHlwZSAmJiBuLmNvbGxhcHNlZCAmJiAociA9IGEuZ2V0Um9vdCgpLCBuLnNldFN0YXJ0KHIsIDApLCBuLnNldEVuZChyLCAwKSksIGwgJiYgZiAmJiAoMCA9PT0gZShuLlNUQVJUX1RPX1NUQVJULCBuLCBsKSAmJiAwID09PSBlKG4uRU5EX1RPX0VORCwgbiwgbCkgPyBuID0gZiA6IGYgPSBsID0gbnVsbCksIG47CiAgICB9LAogICAgICAgIGggPSBmdW5jdGlvbiBoKGUsIHQpIHsKICAgICAgdmFyIG47CgogICAgICBpZiAoKHIgPSBlKSAmJiAoQmgocikgfHwgUGgoci5zdGFydENvbnRhaW5lcikgJiYgUGgoci5lbmRDb250YWluZXIpKSkgewogICAgICAgIHZhciByLAogICAgICAgICAgICBvID0gQmgoZSkgPyBlIDogbnVsbDsKCiAgICAgICAgaWYgKG8pIHsKICAgICAgICAgIGYgPSBudWxsOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIG8uc2VsZWN0KCk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgaSA9IGMoKTsKCiAgICAgICAgICBpZiAoZSA9IHMuZmlyZSgiU2V0U2VsZWN0aW9uUmFuZ2UiLCB7CiAgICAgICAgICAgIHJhbmdlOiBlLAogICAgICAgICAgICBmb3J3YXJkOiB0CiAgICAgICAgICB9KS5yYW5nZSwgaSkgewogICAgICAgICAgICBmID0gZTsKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaS5yZW1vdmVBbGxSYW5nZXMoKSwgaS5hZGRSYW5nZShlKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkge30KCiAgICAgICAgICAgICExID09PSB0ICYmIGkuZXh0ZW5kICYmIChpLmNvbGxhcHNlKGUuZW5kQ29udGFpbmVyLCBlLmVuZE9mZnNldCksIGkuZXh0ZW5kKGUuc3RhcnRDb250YWluZXIsIGUuc3RhcnRPZmZzZXQpKSwgbCA9IDAgPCBpLnJhbmdlQ291bnQgPyBpLmdldFJhbmdlQXQoMCkgOiBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIGUuY29sbGFwc2VkIHx8IGUuc3RhcnRDb250YWluZXIgIT09IGUuZW5kQ29udGFpbmVyIHx8ICFpLnNldEJhc2VBbmRFeHRlbnQgfHwgeHQuaWUgfHwgZS5lbmRPZmZzZXQgLSBlLnN0YXJ0T2Zmc2V0IDwgMiAmJiBlLnN0YXJ0Q29udGFpbmVyLmhhc0NoaWxkTm9kZXMoKSAmJiAobiA9IGUuc3RhcnRDb250YWluZXIuY2hpbGROb2Rlc1tlLnN0YXJ0T2Zmc2V0XSkgJiYgIklNRyIgPT09IG4udGFnTmFtZSAmJiAoaS5zZXRCYXNlQW5kRXh0ZW50KGUuc3RhcnRDb250YWluZXIsIGUuc3RhcnRPZmZzZXQsIGUuZW5kQ29udGFpbmVyLCBlLmVuZE9mZnNldCksIGkuYW5jaG9yTm9kZSA9PT0gZS5zdGFydENvbnRhaW5lciAmJiBpLmZvY3VzTm9kZSA9PT0gZS5lbmRDb250YWluZXIgfHwgaS5zZXRCYXNlQW5kRXh0ZW50KG4sIDAsIG4sIDEpKSwgcy5maXJlKCJBZnRlclNldFNlbGVjdGlvblJhbmdlIiwgewogICAgICAgICAgICByYW5nZTogZSwKICAgICAgICAgICAgZm9yd2FyZDogdAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgICAgIHYgPSB7CiAgICAgIGJvb2ttYXJrTWFuYWdlcjogbnVsbCwKICAgICAgY29udHJvbFNlbGVjdGlvbjogbnVsbCwKICAgICAgZG9tOiBvID0gYSwKICAgICAgd2luOiB1LAogICAgICBzZXJpYWxpemVyOiBlLAogICAgICBlZGl0b3I6IGkgPSBzLAogICAgICBjb2xsYXBzZTogciwKICAgICAgc2V0Q3Vyc29yTG9jYXRpb246IGZ1bmN0aW9uIHNldEN1cnNvckxvY2F0aW9uKGUsIHQpIHsKICAgICAgICB2YXIgbiA9IGEuY3JlYXRlUm5nKCk7CiAgICAgICAgVihlKSAmJiBWKHQpID8gKG4uc2V0U3RhcnQoZSwgdCksIG4uc2V0RW5kKGUsIHQpLCBoKG4pLCByKCExKSkgOiAoRGwoYSwgbiwgcy5nZXRCb2R5KCksICEwKSwgaChuKSk7CiAgICAgIH0sCiAgICAgIGdldENvbnRlbnQ6IGZ1bmN0aW9uIGdldENvbnRlbnQoZSkgewogICAgICAgIHJldHVybiBuID0gKHQgPSB2b2lkIDAgPT09ICh0ID0gZSkgPyB7fSA6IHQpLmZvcm1hdCB8fCAiaHRtbCIsIHIgPSB0LCBoaChzKS5zZWxlY3Rpb24uZ2V0Q29udGVudChuLCByKTsKICAgICAgICB2YXIgdCwgbiwgcjsKICAgICAgfSwKICAgICAgc2V0Q29udGVudDogdCwKICAgICAgZ2V0Qm9va21hcms6IGZ1bmN0aW9uIGdldEJvb2ttYXJrKGUsIHQpIHsKICAgICAgICByZXR1cm4gYi5nZXRCb29rbWFyayhlLCB0KTsKICAgICAgfSwKICAgICAgbW92ZVRvQm9va21hcms6IGZ1bmN0aW9uIG1vdmVUb0Jvb2ttYXJrKGUpIHsKICAgICAgICByZXR1cm4gYi5tb3ZlVG9Cb29rbWFyayhlKTsKICAgICAgfSwKICAgICAgc2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QoZSwgdCkgewogICAgICAgIHZhciByID0gYSwKICAgICAgICAgICAgbyA9IHQ7CiAgICAgICAgcmV0dXJuIHZlLmZyb20oZSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB2YXIgdCA9IHIubm9kZUluZGV4KGUpLAogICAgICAgICAgICAgIG4gPSByLmNyZWF0ZVJuZygpOwogICAgICAgICAgcmV0dXJuIG4uc2V0U3RhcnQoZS5wYXJlbnROb2RlLCB0KSwgbi5zZXRFbmQoZS5wYXJlbnROb2RlLCB0ICsgMSksIG8gJiYgKERsKHIsIG4sIGUsICEwKSwgRGwociwgbiwgZSwgITEpKSwgbjsKICAgICAgICB9KS5lYWNoKGgpLCBlOwogICAgICB9LAogICAgICBpc0NvbGxhcHNlZDogZnVuY3Rpb24gaXNDb2xsYXBzZWQoKSB7CiAgICAgICAgdmFyIGUgPSBwKCksCiAgICAgICAgICAgIHQgPSBjKCk7CiAgICAgICAgcmV0dXJuICEoIWUgfHwgZS5pdGVtKSAmJiAoZS5jb21wYXJlRW5kUG9pbnRzID8gMCA9PT0gZS5jb21wYXJlRW5kUG9pbnRzKCJTdGFydFRvRW5kIiwgZSkgOiAhdCB8fCBlLmNvbGxhcHNlZCk7CiAgICAgIH0sCiAgICAgIGlzRm9yd2FyZDogbiwKICAgICAgc2V0Tm9kZTogZnVuY3Rpb24gc2V0Tm9kZShlKSB7CiAgICAgICAgcmV0dXJuIHQoYS5nZXRPdXRlckhUTUwoZSkpLCBlOwogICAgICB9LAogICAgICBnZXROb2RlOiBmdW5jdGlvbiBnZXROb2RlKCkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgaWYgKCF0KSByZXR1cm4gZTsKICAgICAgICAgIHZhciBuID0gdC5zdGFydENvbnRhaW5lciwKICAgICAgICAgICAgICByID0gdC5lbmRDb250YWluZXIsCiAgICAgICAgICAgICAgbyA9IHQuc3RhcnRPZmZzZXQsCiAgICAgICAgICAgICAgaSA9IHQuZW5kT2Zmc2V0LAogICAgICAgICAgICAgIGEgPSB0LmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyOwogICAgICAgICAgcmV0dXJuICF0LmNvbGxhcHNlZCAmJiAobiA9PT0gciAmJiBpIC0gbyA8IDIgJiYgbi5oYXNDaGlsZE5vZGVzKCkgJiYgKGEgPSBuLmNoaWxkTm9kZXNbb10pLCAzID09PSBuLm5vZGVUeXBlICYmIDMgPT09IHIubm9kZVR5cGUgJiYgKG4gPSBuLmxlbmd0aCA9PT0gbyA/IHhkKG4ubmV4dFNpYmxpbmcsICEwKSA6IG4ucGFyZW50Tm9kZSwgciA9IDAgPT09IGkgPyB4ZChyLnByZXZpb3VzU2libGluZywgITEpIDogci5wYXJlbnROb2RlLCBuICYmIG4gPT09IHIpKSA/IG4gOiBhICYmIDMgPT09IGEubm9kZVR5cGUgPyBhLnBhcmVudE5vZGUgOiBhOwogICAgICAgIH0ocy5nZXRCb2R5KCksIHAoKSk7CiAgICAgIH0sCiAgICAgIGdldFNlbDogYywKICAgICAgc2V0Um5nOiBoLAogICAgICBnZXRSbmc6IHAsCiAgICAgIGdldFN0YXJ0OiBmdW5jdGlvbiBnZXRTdGFydChlKSB7CiAgICAgICAgcmV0dXJuIHlkKHMuZ2V0Qm9keSgpLCBwKCksIGUpOwogICAgICB9LAogICAgICBnZXRFbmQ6IGZ1bmN0aW9uIGdldEVuZChlKSB7CiAgICAgICAgcmV0dXJuIENkKHMuZ2V0Qm9keSgpLCBwKCksIGUpOwogICAgICB9LAogICAgICBnZXRTZWxlY3RlZEJsb2NrczogZnVuY3Rpb24gZ2V0U2VsZWN0ZWRCbG9ja3MoZSwgdCkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSwgdCwgbiwgcikgewogICAgICAgICAgdmFyIG8gPSBbXSwKICAgICAgICAgICAgICBpID0gZS5nZXRSb290KCk7CiAgICAgICAgICBpZiAobiA9IGUuZ2V0UGFyZW50KG4gfHwgeWQoaSwgdCwgdC5jb2xsYXBzZWQpLCBlLmlzQmxvY2spLCByID0gZS5nZXRQYXJlbnQociB8fCBDZChpLCB0LCB0LmNvbGxhcHNlZCksIGUuaXNCbG9jayksIG4gJiYgbiAhPT0gaSAmJiBvLnB1c2gobiksIG4gJiYgciAmJiBuICE9PSByKSBmb3IgKHZhciBhLCB1ID0gbmV3IFJyKG4sIGkpOyAoYSA9IHUubmV4dCgpKSAmJiBhICE9PSByOykgewogICAgICAgICAgICBlLmlzQmxvY2soYSkgJiYgby5wdXNoKGEpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHIgJiYgbiAhPT0gciAmJiByICE9PSBpICYmIG8ucHVzaChyKSwgbzsKICAgICAgICB9KGEsIHAoKSwgZSwgdCk7CiAgICAgIH0sCiAgICAgIG5vcm1hbGl6ZTogZnVuY3Rpb24gbm9ybWFsaXplKCkgewogICAgICAgIHZhciBlID0gcCgpOwogICAgICAgIGlmICgxIDwgTmwoYygpKS5sZW5ndGggfHwgIVRsKHMpKSByZXR1cm4gZTsKICAgICAgICB2YXIgdCA9IFJmKGEsIGUpOwogICAgICAgIHJldHVybiB0LmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGgoZSwgbigpKTsKICAgICAgICB9KSwgdC5nZXRPcihlKTsKICAgICAgfSwKICAgICAgc2VsZWN0b3JDaGFuZ2VkOiBmdW5jdGlvbiBzZWxlY3RvckNoYW5nZWQoZSwgdCkgewogICAgICAgIHJldHVybiBnKGUsIHQpLCB2OwogICAgICB9LAogICAgICBzZWxlY3RvckNoYW5nZWRXaXRoVW5iaW5kOiBnLAogICAgICBnZXRTY3JvbGxDb250YWluZXI6IGZ1bmN0aW9uIGdldFNjcm9sbENvbnRhaW5lcigpIHsKICAgICAgICBmb3IgKHZhciBlLCB0ID0gYS5nZXRSb290KCk7IHQgJiYgIkJPRFkiICE9PSB0Lm5vZGVOYW1lOykgewogICAgICAgICAgaWYgKHQuc2Nyb2xsSGVpZ2h0ID4gdC5jbGllbnRIZWlnaHQpIHsKICAgICAgICAgICAgZSA9IHQ7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIHQgPSB0LnBhcmVudE5vZGU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZTsKICAgICAgfSwKICAgICAgc2Nyb2xsSW50b1ZpZXc6IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KGUsIHQpIHsKICAgICAgICBWKGUpID8gKHMuaW5saW5lID8gR2YgOiBRZikocywgZSwgdCkgOiBaZihzLCBwKCksIHQpOwogICAgICB9LAogICAgICBwbGFjZUNhcmV0QXQ6IGZ1bmN0aW9uIHBsYWNlQ2FyZXRBdChlLCB0KSB7CiAgICAgICAgcmV0dXJuIGgod2YoZSwgdCwgcy5nZXREb2MoKSkpOwogICAgICB9LAogICAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHsKICAgICAgICB2YXIgZSA9IHAoKTsKICAgICAgICByZXR1cm4gZS5jb2xsYXBzZWQgPyBhcy5mcm9tUmFuZ2VTdGFydChlKS5nZXRDbGllbnRSZWN0cygpWzBdIDogZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgICAgfSwKICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgICB1ID0gbCA9IGYgPSBudWxsLCB5LmRlc3Ryb3koKTsKICAgICAgfQogICAgfSwKICAgICAgICBiID0gRmwodiksCiAgICAgICAgeSA9IENmKHYsIHMpOwoKICAgIGZ1bmN0aW9uIEModCwgZSkgewogICAgICByZXR1cm4gTShlLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBvLmlzKGUsIHQpOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiB4KGUpIHsKICAgICAgcmV0dXJuIG8uZ2V0UGFyZW50cyhlLCBudWxsLCBvLmdldFJvb3QoKSk7CiAgICB9CgogICAgcmV0dXJuIHYuYm9va21hcmtNYW5hZ2VyID0gYiwgdi5jb250cm9sU2VsZWN0aW9uID0geSwgdjsKICB9CgogIGZ1bmN0aW9uIEloKGUsIHQpIHsKICAgIHZhciBuLAogICAgICAgIHIsCiAgICAgICAgYSwKICAgICAgICB1LAogICAgICAgIG8gPSBybygpOwogICAgdC5jb252ZXJ0X2ZvbnRzX3RvX3NwYW5zICYmIChyID0gZSwgYSA9IG8sIHUgPSBFdC5leHBsb2RlKHQuZm9udF9zaXplX2xlZ2FjeV92YWx1ZXMpLCByLmFkZE5vZGVGaWx0ZXIoImZvbnQiLCBmdW5jdGlvbiAoZSkgewogICAgICBZKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIHQsCiAgICAgICAgICAgIG4gPSBhLnBhcnNlKGUuYXR0cigic3R5bGUiKSksCiAgICAgICAgICAgIHIgPSBlLmF0dHIoImNvbG9yIiksCiAgICAgICAgICAgIG8gPSBlLmF0dHIoImZhY2UiKSwKICAgICAgICAgICAgaSA9IGUuYXR0cigic2l6ZSIpOwogICAgICAgIHIgJiYgKG4uY29sb3IgPSByKSwgbyAmJiAoblsiZm9udC1mYW1pbHkiXSA9IG8pLCBpICYmIChuWyJmb250LXNpemUiXSA9IHVbcGFyc2VJbnQoZS5hdHRyKCJzaXplIiksIDEwKSAtIDFdKSwgZS5uYW1lID0gInNwYW4iLCBlLmF0dHIoInN0eWxlIiwgYS5zZXJpYWxpemUobikpLCB0ID0gZSwgWShbImNvbG9yIiwgImZhY2UiLCAic2l6ZSJdLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdC5hdHRyKGUsIG51bGwpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pKSwgbiA9IG8sIGUuYWRkTm9kZUZpbHRlcigic3RyaWtlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgWShlLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gbi5wYXJzZShlLmF0dHIoInN0eWxlIikpOwogICAgICAgIHRbInRleHQtZGVjb3JhdGlvbiJdID0gImxpbmUtdGhyb3VnaCIsIGUubmFtZSA9ICJzcGFuIiwgZS5hdHRyKCJzdHlsZSIsIG4uc2VyaWFsaXplKHQpKTsKICAgICAgfSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIE1oKGUpIHsKICAgIHZhciB0LAogICAgICAgIG4gPSBkZWNvZGVVUklDb21wb25lbnQoZSkuc3BsaXQoIiwiKSwKICAgICAgICByID0gL2RhdGE6KFteO10rKS8uZXhlYyhuWzBdKTsKICAgIHJldHVybiB7CiAgICAgIHR5cGU6IHQgPSByID8gclsxXSA6IHQsCiAgICAgIGRhdGE6IG5bMV0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBGaChlLCB0KSB7CiAgICB2YXIgbjsKCiAgICB0cnkgewogICAgICBuID0gYXRvYih0KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgcmV0dXJuIHZlLm5vbmUoKTsKICAgIH0KCiAgICBmb3IgKHZhciByID0gbmV3IFVpbnQ4QXJyYXkobi5sZW5ndGgpLCBvID0gMDsgbyA8IHIubGVuZ3RoOyBvKyspIHsKICAgICAgcltvXSA9IG4uY2hhckNvZGVBdChvKTsKICAgIH0KCiAgICByZXR1cm4gdmUuc29tZShuZXcgQmxvYihbcl0sIHsKICAgICAgdHlwZTogZQogICAgfSkpOwogIH0KCiAgZnVuY3Rpb24gVWgoZSkgewogICAgcmV0dXJuIDAgPT09IGUuaW5kZXhPZigiYmxvYjoiKSA/IChvID0gZSwgbmV3IGtyKGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIGZ1bmN0aW9uIG4oKSB7CiAgICAgICAgdCgiQ2Fubm90IGNvbnZlcnQgIiArIG8gKyAiIHRvIEJsb2IuIFJlc291cmNlIG1pZ2h0IG5vdCBleGlzdCBvciBpcyBpbmFjY2Vzc2libGUuIik7CiAgICAgIH0KCiAgICAgIHRyeSB7CiAgICAgICAgdmFyIHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICByLm9wZW4oIkdFVCIsIG8sICEwKSwgci5yZXNwb25zZVR5cGUgPSAiYmxvYiIsIHIub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgMjAwID09PSByLnN0YXR1cyA/IGUoci5yZXNwb25zZSkgOiBuKCk7CiAgICAgICAgfSwgci5vbmVycm9yID0gbiwgci5zZW5kKCk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBuKCk7CiAgICAgIH0KICAgIH0pKSA6IDAgPT09IGUuaW5kZXhPZigiZGF0YToiKSA/IChuID0gZSwgbmV3IGtyKGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gTWgobik7CiAgICAgIEZoKHQudHlwZSwgdC5kYXRhKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gZShuZXcgQmxvYihbXSkpOwogICAgICB9LCBlKTsKICAgIH0pKSA6IG51bGw7CiAgICB2YXIgbywgbjsKICB9CgogIGZ1bmN0aW9uIHpoKGUpIHsKICAgIHJldHVybiAoZSB8fCAiYmxvYmlkIikgKyBsdisrOwogIH0KCiAgZnVuY3Rpb24gSGgociwgZCkgewogICAgdmFyIG8gPSB7fTsKICAgIHJldHVybiB7CiAgICAgIGZpbmRBbGw6IGZ1bmN0aW9uIGZpbmRBbGwoZSwgbikgewogICAgICAgIG4gPSBuIHx8IHc7CiAgICAgICAgdmFyIHQgPSBUKFUoZSA/IHhlKGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImltZyIpKSA6IFtdLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQgPSBlLnNyYzsKICAgICAgICAgIHJldHVybiB4dC5maWxlQXBpICYmICFlLmhhc0F0dHJpYnV0ZSgiZGF0YS1tY2UtYm9ndXMiKSAmJiAhZS5oYXNBdHRyaWJ1dGUoImRhdGEtbWNlLXBsYWNlaG9sZGVyIikgJiYgdCAmJiB0ICE9PSB4dC50cmFuc3BhcmVudFNyYyAmJiAoMCA9PT0gdC5pbmRleE9mKCJibG9iOiIpID8gIXIuaXNVcGxvYWRlZCh0KSAmJiBuKGUpIDogMCA9PT0gdC5pbmRleE9mKCJkYXRhOiIpICYmIG4oZSkpOwogICAgICAgIH0pLCBmdW5jdGlvbiAoZikgewogICAgICAgICAgaWYgKHZvaWQgMCAhPT0gb1tmLnNyY10pIHJldHVybiBuZXcga3IoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgb1tmLnNyY10udGhlbihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIHJldHVybiAic3RyaW5nIiA9PSB0eXBlb2YgZSA/IGUgOiB2b2lkIHQoewogICAgICAgICAgICAgICAgaW1hZ2U6IGYsCiAgICAgICAgICAgICAgICBibG9iSW5mbzogZS5ibG9iSW5mbwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgICAgdmFyIGUgPSBuZXcga3IoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgdmFyIHIsIG8sIGksIG4sIGEsIHUsIHMsIGMsIGw7CiAgICAgICAgICAgIHIgPSBkLCBpID0gZSwgbiA9IHQsIDAgIT09IChvID0gZikuc3JjLmluZGV4T2YoImJsb2I6IikgPyAodSA9IChhID0gTWgoby5zcmMpKS5kYXRhLCBzID0gYS50eXBlLCBjID0gdSwgKGwgPSByLmdldEJ5RGF0YShjLCBzKSkgPyBpKHsKICAgICAgICAgICAgICBpbWFnZTogbywKICAgICAgICAgICAgICBibG9iSW5mbzogbAogICAgICAgICAgICB9KSA6IFVoKG8uc3JjKS50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgbCA9IHIuY3JlYXRlKHpoKCksIGUsIGMpLCByLmFkZChsKSwgaSh7CiAgICAgICAgICAgICAgICBpbWFnZTogbywKICAgICAgICAgICAgICAgIGJsb2JJbmZvOiBsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgbihlKTsKICAgICAgICAgICAgfSkpIDogKGwgPSByLmdldEJ5VXJpKG8uc3JjKSkgPyBpKHsKICAgICAgICAgICAgICBpbWFnZTogbywKICAgICAgICAgICAgICBibG9iSW5mbzogbAogICAgICAgICAgICB9KSA6IFVoKG8uc3JjKS50aGVuKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgdmFyIG4gPSB0OwogICAgICAgICAgICAgIG5ldyBrcihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgICAgICAgICAgdC5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIGUodC5yZXN1bHQpOwogICAgICAgICAgICAgICAgfSwgdC5yZWFkQXNEYXRhVVJMKG4pOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGMgPSBNaChlKS5kYXRhLCBsID0gci5jcmVhdGUoemgoKSwgdCwgYyksIHIuYWRkKGwpLCBpKHsKICAgICAgICAgICAgICAgICAgaW1hZ2U6IG8sCiAgICAgICAgICAgICAgICAgIGJsb2JJbmZvOiBsCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBuKGUpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZSBvW2UuaW1hZ2Uuc3JjXSwgZTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiBkZWxldGUgb1tmLnNyY10sIGU7CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiBvW2Yuc3JjXSA9IGU7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGtyLmFsbCh0KTsKICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIGpoKGUsIHQsIG4sIHIpIHsKICAgIChlLnBhZGRfZW1wdHlfd2l0aF9iciB8fCB0Lmluc2VydCkgJiYgbltyLm5hbWVdID8gci5lbXB0eSgpLmFwcGVuZChuZXcgVWQoImJyIiwgMSkpLnNob3J0RW5kZWQgPSAhMCA6IHIuZW1wdHkoKS5hcHBlbmQobmV3IFVkKCIjdGV4dCIsIDMpKS52YWx1ZSA9IHlvOwogIH0KCiAgZnVuY3Rpb24gVmgobiwgZSwgdCwgcikgewogICAgcmV0dXJuIHIuaXNFbXB0eShlLCB0LCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gKHQgPSBuLmdldEVsZW1lbnRSdWxlKGUubmFtZSkpICYmIHQucGFkZEVtcHR5OwogICAgICB2YXIgdDsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gcWgoZSwgcCkgewogICAgdmFyIHQsCiAgICAgICAgbywKICAgICAgICBpLAogICAgICAgIGggPSBlLnNjaGVtYTsKCiAgICBmdW5jdGlvbiBuKHQpIHsKICAgICAgdmFyIGUsCiAgICAgICAgICBuLAogICAgICAgICAgciA9IHQuYXR0cigic3JjIik7CiAgICAgIChlID0gdCkuYXR0cigic3JjIikgPT09IHh0LnRyYW5zcGFyZW50U3JjIHx8IFYoZS5hdHRyKCJkYXRhLW1jZS1wbGFjZWhvbGRlciIpKSB8fCBWKHQuYXR0cigiZGF0YS1tY2UtYm9ndXMiKSkgfHwgKChuID0gL2RhdGE6KFteO10rKTtiYXNlNjQsKFthLXowLTlcK1wvPVxzXSspL2kuZXhlYyhyKSkgPyB2ZS5zb21lKHsKICAgICAgICB0eXBlOiBuWzFdLAogICAgICAgIGRhdGE6IGRlY29kZVVSSUNvbXBvbmVudChuWzJdKQogICAgICB9KSA6IHZlLm5vbmUoKSkuZmlsdGVyKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgIGlmICh0LmltYWdlc19kYXRhaW1nX2ZpbHRlcikgewogICAgICAgICAgICB2YXIgbiA9IG5ldyBJbWFnZSgpOwogICAgICAgICAgICByZXR1cm4gbi5zcmMgPSBlLmF0dHIoInNyYyIpLCBuZShlLmF0dHJpYnV0ZXMubWFwLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgIG4uc2V0QXR0cmlidXRlKHQsIGUpOwogICAgICAgICAgICB9KSwgdC5pbWFnZXNfZGF0YWltZ19maWx0ZXIobik7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuICEwOwogICAgICAgIH0odCwgbyk7CiAgICAgIH0pLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdCA9IGUudHlwZSwKICAgICAgICAgICAgbiA9IGUuZGF0YTsKICAgICAgICByZXR1cm4gdmUuZnJvbShpLmdldEJ5RGF0YShuLCB0KSkub3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gRmgodCwgbikubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciB0ID0gaS5jcmVhdGUoemgoKSwgZSwgbik7CiAgICAgICAgICAgIHJldHVybiBpLmFkZCh0KSwgdDsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdC5hdHRyKCJzcmMiLCBlLmJsb2JVcmkoKSk7CiAgICAgIH0pOwogICAgfQoKICAgIHAucmVtb3ZlX3RyYWlsaW5nX2JycyAmJiBlLmFkZE5vZGVGaWx0ZXIoImJyIiwgZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgICAgdmFyIHIsCiAgICAgICAgICBvLAogICAgICAgICAgaSwKICAgICAgICAgIGEsCiAgICAgICAgICB1LAogICAgICAgICAgcywKICAgICAgICAgIGMsCiAgICAgICAgICBsLAogICAgICAgICAgZiA9IGUubGVuZ3RoLAogICAgICAgICAgZCA9IEV0LmV4dGVuZCh7fSwgaC5nZXRCbG9ja0VsZW1lbnRzKCkpLAogICAgICAgICAgbSA9IGguZ2V0Tm9uRW1wdHlFbGVtZW50cygpLAogICAgICAgICAgZyA9IGguZ2V0V2hpdGVTcGFjZUVsZW1lbnRzKCk7CgogICAgICBmb3IgKGQuYm9keSA9IDEsIHIgPSAwOyByIDwgZjsgcisrKSB7CiAgICAgICAgaWYgKGkgPSAobyA9IGVbcl0pLnBhcmVudCwgZFtvLnBhcmVudC5uYW1lXSAmJiBvID09PSBpLmxhc3RDaGlsZCkgewogICAgICAgICAgZm9yICh1ID0gby5wcmV2OyB1OykgewogICAgICAgICAgICBpZiAoInNwYW4iICE9PSAocyA9IHUubmFtZSkgfHwgImJvb2ttYXJrIiAhPT0gdS5hdHRyKCJkYXRhLW1jZS10eXBlIikpIHsKICAgICAgICAgICAgICAiYnIiID09PSBzICYmIChvID0gbnVsbCk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHUgPSB1LnByZXY7CiAgICAgICAgICB9CgogICAgICAgICAgbyAmJiAoby5yZW1vdmUoKSwgVmgoaCwgbSwgZywgaSkgJiYgKGMgPSBoLmdldEVsZW1lbnRSdWxlKGkubmFtZSkpICYmIChjLnJlbW92ZUVtcHR5ID8gaS5yZW1vdmUoKSA6IGMucGFkZEVtcHR5ICYmIGpoKHAsIG4sIGQsIGkpKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGZvciAoYSA9IG87IGkgJiYgaS5maXJzdENoaWxkID09PSBhICYmIGkubGFzdENoaWxkID09PSBhICYmICFkWyhhID0gaSkubmFtZV07KSB7CiAgICAgICAgICAgIGkgPSBpLnBhcmVudDsKICAgICAgICAgIH0KCiAgICAgICAgICBhID09PSBpICYmICEwICE9PSBwLnBhZGRfZW1wdHlfd2l0aF9iciAmJiAoKGwgPSBuZXcgVWQoIiN0ZXh0IiwgMykpLnZhbHVlID0geW8sIG8ucmVwbGFjZShsKSk7CiAgICAgICAgfQogICAgICB9CiAgICB9KSwgZS5hZGRBdHRyaWJ1dGVGaWx0ZXIoImhyZWYiLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCwKICAgICAgICAgIG4sCiAgICAgICAgICByID0gZS5sZW5ndGg7CiAgICAgIGlmICghcC5hbGxvd191bnNhZmVfbGlua190YXJnZXQpIGZvciAoOyByLS07KSB7CiAgICAgICAgdmFyIG8gPSBlW3JdOwogICAgICAgICJhIiA9PT0gby5uYW1lICYmICJfYmxhbmsiID09PSBvLmF0dHIoInRhcmdldCIpICYmIG8uYXR0cigicmVsIiwgKG4gPSB2b2lkIDAsIG4gPSAodCA9IG8uYXR0cigicmVsIikpID8gRXQudHJpbSh0KSA6ICIiLCAvXGIobm9vcGVuZXIpXGIvZy50ZXN0KG4pID8gbiA6IG4uc3BsaXQoIiAiKS5maWx0ZXIoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiAwIDwgZS5sZW5ndGg7CiAgICAgICAgfSkuY29uY2F0KFsibm9vcGVuZXIiXSkuc29ydCgpLmpvaW4oIiAiKSkpOwogICAgICB9CiAgICB9KSwgcC5hbGxvd19odG1sX2luX25hbWVkX2FuY2hvciB8fCBlLmFkZEF0dHJpYnV0ZUZpbHRlcigiaWQsbmFtZSIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGZvciAodmFyIHQsIG4sIHIsIG8sIGkgPSBlLmxlbmd0aDsgaS0tOykgewogICAgICAgIGlmICgiYSIgPT09IChvID0gZVtpXSkubmFtZSAmJiBvLmZpcnN0Q2hpbGQgJiYgIW8uYXR0cigiaHJlZiIpKSBmb3IgKHIgPSBvLnBhcmVudCwgdCA9IG8ubGFzdENoaWxkOyBuID0gdC5wcmV2LCByLmluc2VydCh0LCBvKSwgdCA9IG47KSB7CiAgICAgICAgICA7CiAgICAgICAgfQogICAgICB9CiAgICB9KSwgcC5maXhfbGlzdF9lbGVtZW50cyAmJiBlLmFkZE5vZGVGaWx0ZXIoInVsLG9sIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgZm9yICh2YXIgdCwgbiwgciwgbyA9IGUubGVuZ3RoOyBvLS07KSB7CiAgICAgICAgInVsIiAhPT0gKHIgPSAobiA9IGVbb10pLnBhcmVudCkubmFtZSAmJiAib2wiICE9PSByLm5hbWUgfHwgKG4ucHJldiAmJiAibGkiID09PSBuLnByZXYubmFtZSA/IG4ucHJldi5hcHBlbmQobikgOiAoKHQgPSBuZXcgVWQoImxpIiwgMSkpLmF0dHIoInN0eWxlIiwgImxpc3Qtc3R5bGUtdHlwZTogbm9uZSIpLCBuLndyYXAodCkpKTsKICAgICAgfQogICAgfSksIHAudmFsaWRhdGUgJiYgaC5nZXRWYWxpZENsYXNzZXMoKSAmJiBlLmFkZEF0dHJpYnV0ZUZpbHRlcigiY2xhc3MiLCBmdW5jdGlvbiAoZSkgewogICAgICBmb3IgKHZhciB0ID0gaC5nZXRWYWxpZENsYXNzZXMoKSwgbiA9IGUubGVuZ3RoOyBuLS07KSB7CiAgICAgICAgZm9yICh2YXIgciA9IGVbbl0sIG8gPSByLmF0dHIoImNsYXNzIikuc3BsaXQoIiAiKSwgaSA9ICIiLCBhID0gMDsgYSA8IG8ubGVuZ3RoOyBhKyspIHsKICAgICAgICAgIHZhciB1ID0gb1thXSwKICAgICAgICAgICAgICBzID0gITEsCiAgICAgICAgICAgICAgYyA9IHRbIioiXTsKICAgICAgICAgIGMgJiYgY1t1XSAmJiAocyA9ICEwKSwgYyA9IHRbci5uYW1lXSwgKHMgPSAhKHMgfHwgIWMgfHwgIWNbdV0pIHx8IHMpICYmIChpICYmIChpICs9ICIgIiksIGkgKz0gdSk7CiAgICAgICAgfQoKICAgICAgICBpLmxlbmd0aCB8fCAoaSA9IG51bGwpLCByLmF0dHIoImNsYXNzIiwgaSk7CiAgICAgIH0KICAgIH0pLCB0ID0gZSwgKGkgPSAobyA9IHApLmJsb2JfY2FjaGUpICYmIHQuYWRkQXR0cmlidXRlRmlsdGVyKCJzcmMiLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gWShlLCBuKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gJGgoXywgQSkgewogICAgdm9pZCAwID09PSBBICYmIChBID0gdG8oKSk7CiAgICB2YXIgUiA9IHt9LAogICAgICAgIEQgPSBbXSwKICAgICAgICBUID0ge30sCiAgICAgICAgTyA9IHt9OwogICAgKF8gPSBfIHx8IHt9KS52YWxpZGF0ZSA9ICEoInZhbGlkYXRlIiBpbiBfKSB8fCBfLnZhbGlkYXRlLCBfLnJvb3RfbmFtZSA9IF8ucm9vdF9uYW1lIHx8ICJib2R5IjsKCiAgICBmdW5jdGlvbiBCKGUpIHsKICAgICAgdmFyIHQgPSBlLm5hbWU7CiAgICAgIHQgaW4gUiAmJiAoKHIgPSBUW3RdKSA/IHIucHVzaChlKSA6IFRbdF0gPSBbZV0pOwoKICAgICAgZm9yICh2YXIgbiA9IEQubGVuZ3RoOyBuLS07KSB7CiAgICAgICAgdmFyIHIsCiAgICAgICAgICAgIG8gPSBEW25dLm5hbWU7CiAgICAgICAgbyBpbiBlLmF0dHJpYnV0ZXMubWFwICYmICgociA9IE9bb10pID8gci5wdXNoKGUpIDogT1tvXSA9IFtlXSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBlOwogICAgfQoKICAgIHZhciBlID0gewogICAgICBzY2hlbWE6IEEsCiAgICAgIGFkZEF0dHJpYnV0ZUZpbHRlcjogZnVuY3Rpb24gYWRkQXR0cmlidXRlRmlsdGVyKGUsIG4pIHsKICAgICAgICBtdihndihlKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgRC5sZW5ndGg7IHQrKykgewogICAgICAgICAgICBpZiAoRFt0XS5uYW1lID09PSBlKSByZXR1cm4gdm9pZCBEW3RdLmNhbGxiYWNrcy5wdXNoKG4pOwogICAgICAgICAgfQoKICAgICAgICAgIEQucHVzaCh7CiAgICAgICAgICAgIG5hbWU6IGUsCiAgICAgICAgICAgIGNhbGxiYWNrczogW25dCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgZ2V0QXR0cmlidXRlRmlsdGVyczogZnVuY3Rpb24gZ2V0QXR0cmlidXRlRmlsdGVycygpIHsKICAgICAgICByZXR1cm4gW10uY29uY2F0KEQpOwogICAgICB9LAogICAgICBhZGROb2RlRmlsdGVyOiBmdW5jdGlvbiBhZGROb2RlRmlsdGVyKGUsIG4pIHsKICAgICAgICBtdihndihlKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0ID0gUltlXTsKICAgICAgICAgIHQgfHwgKFJbZV0gPSB0ID0gW10pLCB0LnB1c2gobik7CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGdldE5vZGVGaWx0ZXJzOiBmdW5jdGlvbiBnZXROb2RlRmlsdGVycygpIHsKICAgICAgICB2YXIgZSwKICAgICAgICAgICAgdCA9IFtdOwoKICAgICAgICBmb3IgKGUgaW4gUikgewogICAgICAgICAgTmUoUiwgZSkgJiYgdC5wdXNoKHsKICAgICAgICAgICAgbmFtZTogZSwKICAgICAgICAgICAgY2FsbGJhY2tzOiBSW2VdCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0OwogICAgICB9LAogICAgICBmaWx0ZXJOb2RlOiBCLAogICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UoZSwgdSkgewogICAgICAgIHZhciB0LAogICAgICAgICAgICBuLAogICAgICAgICAgICByLAogICAgICAgICAgICBvLAogICAgICAgICAgICBpLAogICAgICAgICAgICBzLAogICAgICAgICAgICBhLAogICAgICAgICAgICBjLAogICAgICAgICAgICBsID0gW107CgogICAgICAgIGZ1bmN0aW9uIGYoZSkgewogICAgICAgICAgZm9yICh2YXIgdCA9IEEuZ2V0QmxvY2tFbGVtZW50cygpLCBuID0gZS5wcmV2OyBuICYmIDMgPT09IG4udHlwZTspIHsKICAgICAgICAgICAgdmFyIHIgPSBuLnZhbHVlLnJlcGxhY2UoeCwgIiIpOwogICAgICAgICAgICBpZiAoMCA8IHIubGVuZ3RoKSByZXR1cm4gbi52YWx1ZSA9IHIsIDA7CiAgICAgICAgICAgIHZhciBvID0gbi5uZXh0OwoKICAgICAgICAgICAgaWYgKG8pIHsKICAgICAgICAgICAgICBpZiAoMyA9PT0gby50eXBlICYmIG8udmFsdWUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBuID0gbi5wcmV2OwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoIXRbby5uYW1lXSAmJiAic2NyaXB0IiAhPT0gby5uYW1lICYmICJzdHlsZSIgIT09IG8ubmFtZSkgewogICAgICAgICAgICAgICAgbiA9IG4ucHJldjsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGkgPSBuLnByZXY7CiAgICAgICAgICAgIG4ucmVtb3ZlKCksIG4gPSBpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdSA9IHUgfHwge30sIFQgPSB7fSwgTyA9IHt9OwoKICAgICAgICBmdW5jdGlvbiBkKGUsIHQpIHsKICAgICAgICAgIHZhciBuLAogICAgICAgICAgICAgIHIgPSBuZXcgVWQoZSwgdCk7CiAgICAgICAgICByZXR1cm4gZSBpbiBSICYmICgobiA9IFRbZV0pID8gbi5wdXNoKHIpIDogVFtlXSA9IFtyXSksIHI7CiAgICAgICAgfQoKICAgICAgICB2YXIgbSA9IHB2KGR2KCJzY3JpcHQsc3R5bGUsaGVhZCxodG1sLGJvZHksdGl0bGUsbWV0YSxwYXJhbSIpLCBBLmdldEJsb2NrRWxlbWVudHMoKSksCiAgICAgICAgICAgIGcgPSBBLmdldE5vbkVtcHR5RWxlbWVudHMoKSwKICAgICAgICAgICAgcCA9IEEuY2hpbGRyZW4sCiAgICAgICAgICAgIGggPSBfLnZhbGlkYXRlLAogICAgICAgICAgICB2ID0gKCJmb3JjZWRfcm9vdF9ibG9jayIgaW4gdSA/IHUgOiBfKS5mb3JjZWRfcm9vdF9ibG9jaywKICAgICAgICAgICAgYiA9ICExID09PSB2ID8gIiIgOiAhMCA9PT0gdiA/ICJwIiA6IHYsCiAgICAgICAgICAgIHkgPSBBLmdldFdoaXRlU3BhY2VFbGVtZW50cygpLAogICAgICAgICAgICBDID0gL15bIFx0XHJcbl0rLywKICAgICAgICAgICAgeCA9IC9bIFx0XHJcbl0rJC8sCiAgICAgICAgICAgIHcgPSAvWyBcdFxyXG5dKy9nLAogICAgICAgICAgICBTID0gL15bIFx0XHJcbl0rJC8sCiAgICAgICAgICAgIEUgPSBOZSh5LCB1LmNvbnRleHQpIHx8IE5lKHksIF8ucm9vdF9uYW1lKSwKICAgICAgICAgICAgTiA9IEdkKHsKICAgICAgICAgIHZhbGlkYXRlOiBoLAogICAgICAgICAgZG9jdW1lbnQ6IF8uZG9jdW1lbnQsCiAgICAgICAgICBhbGxvd19odG1sX2RhdGFfdXJsczogXy5hbGxvd19odG1sX2RhdGFfdXJscywKICAgICAgICAgIGFsbG93X3N2Z19kYXRhX3VybHM6IF8uYWxsb3dfc3ZnX2RhdGFfdXJscywKICAgICAgICAgIGFsbG93X3NjcmlwdF91cmxzOiBfLmFsbG93X3NjcmlwdF91cmxzLAogICAgICAgICAgYWxsb3dfY29uZGl0aW9uYWxfY29tbWVudHM6IF8uYWxsb3dfY29uZGl0aW9uYWxfY29tbWVudHMsCiAgICAgICAgICBwcmVzZXJ2ZV9jZGF0YTogXy5wcmVzZXJ2ZV9jZGF0YSwKICAgICAgICAgIHNlbGZfY2xvc2luZ19lbGVtZW50czogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdmFyIHQsCiAgICAgICAgICAgICAgICBuID0ge307CgogICAgICAgICAgICBmb3IgKHQgaW4gZSkgewogICAgICAgICAgICAgICJsaSIgIT09IHQgJiYgInAiICE9PSB0ICYmIChuW3RdID0gZVt0XSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBuOwogICAgICAgICAgfShBLmdldFNlbGZDbG9zaW5nRWxlbWVudHMoKSksCiAgICAgICAgICBjZGF0YTogZnVuY3Rpb24gY2RhdGEoZSkgewogICAgICAgICAgICBjLmFwcGVuZChkKCIjY2RhdGEiLCA0KSkudmFsdWUgPSBlOwogICAgICAgICAgfSwKICAgICAgICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoZSwgdCkgewogICAgICAgICAgICB2YXIgbiwgcjsKICAgICAgICAgICAgRSB8fCAoZSA9IGUucmVwbGFjZSh3LCAiICIpLCAociA9IGMubGFzdENoaWxkKSAmJiAoTmUobSwgci5uYW1lKSB8fCAiYnIiID09PSByLm5hbWUpICYmIChlID0gZS5yZXBsYWNlKEMsICIiKSkpLCAwICE9PSBlLmxlbmd0aCAmJiAoKG4gPSBkKCIjdGV4dCIsIDMpKS5yYXcgPSAhIXQsIGMuYXBwZW5kKG4pLnZhbHVlID0gZSk7CiAgICAgICAgICB9LAogICAgICAgICAgY29tbWVudDogZnVuY3Rpb24gY29tbWVudChlKSB7CiAgICAgICAgICAgIGMuYXBwZW5kKGQoIiNjb21tZW50IiwgOCkpLnZhbHVlID0gZTsKICAgICAgICAgIH0sCiAgICAgICAgICBwaTogZnVuY3Rpb24gcGkoZSwgdCkgewogICAgICAgICAgICBjLmFwcGVuZChkKGUsIDcpKS52YWx1ZSA9IHQsIGYoYyk7CiAgICAgICAgICB9LAogICAgICAgICAgZG9jdHlwZTogZnVuY3Rpb24gZG9jdHlwZShlKSB7CiAgICAgICAgICAgIGMuYXBwZW5kKGQoIiNkb2N0eXBlIiwgMTApKS52YWx1ZSA9IGUsIGYoYyk7CiAgICAgICAgICB9LAogICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KGUsIHQsIG4pIHsKICAgICAgICAgICAgdmFyIHIgPSBoID8gQS5nZXRFbGVtZW50UnVsZShlKSA6IHt9OwoKICAgICAgICAgICAgaWYgKHIpIHsKICAgICAgICAgICAgICB2YXIgbyA9IGQoci5vdXRwdXROYW1lIHx8IGUsIDEpOwogICAgICAgICAgICAgIG8uYXR0cmlidXRlcyA9IHQsIG8uc2hvcnRFbmRlZCA9IG4sIGMuYXBwZW5kKG8pOwogICAgICAgICAgICAgIHZhciBpID0gcFtjLm5hbWVdOwogICAgICAgICAgICAgIGkgJiYgcFtvLm5hbWVdICYmICFpW28ubmFtZV0gJiYgbC5wdXNoKG8pOwoKICAgICAgICAgICAgICBmb3IgKHZhciBhID0gRC5sZW5ndGg7IGEtLTspIHsKICAgICAgICAgICAgICAgIHZhciB1ID0gRFthXS5uYW1lOwogICAgICAgICAgICAgICAgdSBpbiB0Lm1hcCAmJiAoKHMgPSBPW3VdKSA/IHMucHVzaChvKSA6IE9bdV0gPSBbb10pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgbVtlXSAmJiBmKG8pLCBuIHx8IChjID0gbyksICFFICYmIHlbZV0gJiYgKEUgPSAhMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBlbmQ6IGZ1bmN0aW9uIGVuZChlKSB7CiAgICAgICAgICAgIHZhciB0LAogICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgIHIsCiAgICAgICAgICAgICAgICBvLAogICAgICAgICAgICAgICAgaSwKICAgICAgICAgICAgICAgIGEgPSBoID8gQS5nZXRFbGVtZW50UnVsZShlKSA6IHt9OwoKICAgICAgICAgICAgaWYgKGEpIHsKICAgICAgICAgICAgICBpZiAobVtlXSAmJiAhRSkgewogICAgICAgICAgICAgICAgaWYgKCh0ID0gYy5maXJzdENoaWxkKSAmJiAzID09PSB0LnR5cGUpIGlmICgwIDwgKG4gPSB0LnZhbHVlLnJlcGxhY2UoQywgIiIpKS5sZW5ndGgpIHQudmFsdWUgPSBuLCB0ID0gdC5uZXh0O2Vsc2UgZm9yIChyID0gdC5uZXh0LCB0LnJlbW92ZSgpLCB0ID0gcjsgdCAmJiAzID09PSB0LnR5cGU7KSB7CiAgICAgICAgICAgICAgICAgIG4gPSB0LnZhbHVlLCByID0gdC5uZXh0LCAwICE9PSBuLmxlbmd0aCAmJiAhUy50ZXN0KG4pIHx8ICh0LnJlbW92ZSgpLCB0ID0gciksIHQgPSByOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCh0ID0gYy5sYXN0Q2hpbGQpICYmIDMgPT09IHQudHlwZSkgaWYgKDAgPCAobiA9IHQudmFsdWUucmVwbGFjZSh4LCAiIikpLmxlbmd0aCkgdC52YWx1ZSA9IG4sIHQgPSB0LnByZXY7ZWxzZSBmb3IgKHIgPSB0LnByZXYsIHQucmVtb3ZlKCksIHQgPSByOyB0ICYmIDMgPT09IHQudHlwZTspIHsKICAgICAgICAgICAgICAgICAgbiA9IHQudmFsdWUsIHIgPSB0LnByZXYsIDAgIT09IG4ubGVuZ3RoICYmICFTLnRlc3QobikgfHwgKHQucmVtb3ZlKCksIHQgPSByKSwgdCA9IHI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoRSAmJiB5W2VdICYmIChFID0gITEpLCBhLnJlbW92ZUVtcHR5ICYmIFZoKEEsIGcsIHksIGMpKSByZXR1cm4gbyA9IGMucGFyZW50LCBtW2MubmFtZV0gPyBjLmVtcHR5KCkucmVtb3ZlKCkgOiBjLnVud3JhcCgpLCB2b2lkIChjID0gbyk7CiAgICAgICAgICAgICAgYS5wYWRkRW1wdHkgJiYgKGZ2KGkgPSBjLCAiI3RleHQiKSAmJiBpLmZpcnN0Q2hpbGQudmFsdWUgPT09IHlvIHx8IFZoKEEsIGcsIHksIGMpKSAmJiBqaChfLCB1LCBtLCBjKSwgYyA9IGMucGFyZW50OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgQSksCiAgICAgICAgICAgIGsgPSBjID0gbmV3IFVkKHUuY29udGV4dCB8fCBfLnJvb3RfbmFtZSwgMTEpOwoKICAgICAgICBpZiAoTi5wYXJzZShlLCB1LmZvcm1hdCksIGggJiYgbC5sZW5ndGggJiYgKHUuY29udGV4dCA/IHUuaW52YWxpZCA9ICEwIDogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGZvciAodmFyIHQgPSBkdigidHIsdGQsdGgsdGJvZHksdGhlYWQsdGZvb3QsdGFibGUiKSwgbiA9IEEuZ2V0Tm9uRW1wdHlFbGVtZW50cygpLCByID0gQS5nZXRXaGl0ZVNwYWNlRWxlbWVudHMoKSwgbyA9IEEuZ2V0VGV4dEJsb2NrRWxlbWVudHMoKSwgaSA9IEEuZ2V0U3BlY2lhbEVsZW1lbnRzKCksIGEgPSBmdW5jdGlvbiBhKGUsIHQpIHsKICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gdCAmJiAodCA9IGUucGFyZW50KSwgaVtlLm5hbWVdKSBlLmVtcHR5KCkucmVtb3ZlKCk7ZWxzZSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSBlLmNoaWxkcmVuKCk7IG4gPCByLmxlbmd0aDsgbisrKSB7CiAgICAgICAgICAgICAgICB2YXIgbyA9IHJbbl07CiAgICAgICAgICAgICAgICBBLmlzVmFsaWRDaGlsZCh0Lm5hbWUsIG8ubmFtZSkgfHwgYShvLCB0KTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGUudW53cmFwKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIHUgPSAwOyB1IDwgZS5sZW5ndGg7IHUrKykgewogICAgICAgICAgICB2YXIgcywKICAgICAgICAgICAgICAgIGMgPSBlW3VdLAogICAgICAgICAgICAgICAgbCA9IHZvaWQgMCwKICAgICAgICAgICAgICAgIGYgPSB2b2lkIDA7CiAgICAgICAgICAgIGlmIChjLnBhcmVudCAmJiAhYy5maXhlZCkgaWYgKG9bYy5uYW1lXSAmJiAibGkiID09PSBjLnBhcmVudC5uYW1lKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IGMubmV4dDsgZCAmJiBvW2QubmFtZV07KSB7CiAgICAgICAgICAgICAgICBkLm5hbWUgPSAibGkiLCBkLmZpeGVkID0gITAsIGMucGFyZW50Lmluc2VydChkLCBjLnBhcmVudCksIGQgPSBkLm5leHQ7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjLnVud3JhcCgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGZvciAodmFyIG0gPSBbY10sIGwgPSBjLnBhcmVudDsgbCAmJiAhQS5pc1ZhbGlkQ2hpbGQobC5uYW1lLCBjLm5hbWUpICYmICF0W2wubmFtZV07IGwgPSBsLnBhcmVudCkgewogICAgICAgICAgICAgICAgbS5wdXNoKGwpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKGwgJiYgMSA8IG0ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBpZiAoQS5pc1ZhbGlkQ2hpbGQobC5uYW1lLCBjLm5hbWUpKSB7CiAgICAgICAgICAgICAgICAgIG0ucmV2ZXJzZSgpOwoKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZyA9IHMgPSBCKG1bMF0uY2xvbmUoKSksIHAgPSAwOyBwIDwgbS5sZW5ndGggLSAxOyBwKyspIHsKICAgICAgICAgICAgICAgICAgICBBLmlzVmFsaWRDaGlsZChnLm5hbWUsIG1bcF0ubmFtZSkgPyAoZiA9IEIobVtwXS5jbG9uZSgpKSwgZy5hcHBlbmQoZikpIDogZiA9IGc7CgogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGggPSBtW3BdLmZpcnN0Q2hpbGQ7IGggJiYgaCAhPT0gbVtwICsgMV07KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IGgubmV4dDsKICAgICAgICAgICAgICAgICAgICAgIGYuYXBwZW5kKGgpLCBoID0gdjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGcgPSBmOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBWaChBLCBuLCByLCBzKSA/IGwuaW5zZXJ0KGMsIG1bMF0sICEwKSA6IChsLmluc2VydChzLCBtWzBdLCAhMCksIGwuaW5zZXJ0KGMsIHMpKSwgbCA9IG1bMF0sIChWaChBLCBuLCByLCBsKSB8fCBmdihsLCAiYnIiKSkgJiYgbC5lbXB0eSgpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIGEoYyk7CiAgICAgICAgICAgICAgfSBlbHNlIGMucGFyZW50ICYmICgibGkiICE9PSBjLm5hbWUgPyBBLmlzVmFsaWRDaGlsZChjLnBhcmVudC5uYW1lLCAiZGl2IikgJiYgQS5pc1ZhbGlkQ2hpbGQoImRpdiIsIGMubmFtZSkgPyBjLndyYXAoQihuZXcgVWQoImRpdiIsIDEpKSkgOiBhKGMpIDogIShkID0gYy5wcmV2KSB8fCAidWwiICE9PSBkLm5hbWUgJiYgIm9sIiAhPT0gZC5uYW1lID8gIShkID0gYy5uZXh0KSB8fCAidWwiICE9PSBkLm5hbWUgJiYgIm9sIiAhPT0gZC5uYW1lID8gYy53cmFwKEIobmV3IFVkKCJ1bCIsIDEpKSkgOiBkLmluc2VydChjLCBkLmZpcnN0Q2hpbGQsICEwKSA6IGQuYXBwZW5kKGMpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0obCkpLCBiICYmICgiYm9keSIgPT09IGsubmFtZSB8fCB1LmlzUm9vdENvbnRlbnQpICYmIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGZ1bmN0aW9uIGUoZSkgewogICAgICAgICAgICBlICYmICgodCA9IGUuZmlyc3RDaGlsZCkgJiYgMyA9PT0gdC50eXBlICYmICh0LnZhbHVlID0gdC52YWx1ZS5yZXBsYWNlKEMsICIiKSksICh0ID0gZS5sYXN0Q2hpbGQpICYmIDMgPT09IHQudHlwZSAmJiAodC52YWx1ZSA9IHQudmFsdWUucmVwbGFjZSh4LCAiIikpKTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgdCA9IGsuZmlyc3RDaGlsZCwKICAgICAgICAgICAgICBuID0gbnVsbDsKCiAgICAgICAgICBpZiAoQS5pc1ZhbGlkQ2hpbGQoay5uYW1lLCBiLnRvTG93ZXJDYXNlKCkpKSB7CiAgICAgICAgICAgIGZvciAoOyB0OykgewogICAgICAgICAgICAgIHZhciByID0gdC5uZXh0OwogICAgICAgICAgICAgIDMgPT09IHQudHlwZSB8fCAxID09PSB0LnR5cGUgJiYgInAiICE9PSB0Lm5hbWUgJiYgIW1bdC5uYW1lXSAmJiAhdC5hdHRyKCJkYXRhLW1jZS10eXBlIikgPyAobiB8fCAoKG4gPSBkKGIsIDEpKS5hdHRyKF8uZm9yY2VkX3Jvb3RfYmxvY2tfYXR0cnMpLCBrLmluc2VydChuLCB0KSksIG4uYXBwZW5kKHQpKSA6IChlKG4pLCBuID0gbnVsbCksIHQgPSByOwogICAgICAgICAgICB9CgogICAgICAgICAgICBlKG4pOwogICAgICAgICAgfQogICAgICAgIH0oKSwgIXUuaW52YWxpZCkgewogICAgICAgICAgZm9yIChhIGluIFQpIHsKICAgICAgICAgICAgaWYgKE5lKFQsIGEpKSB7CiAgICAgICAgICAgICAgZm9yIChzID0gUlthXSwgbyA9ICh0ID0gVFthXSkubGVuZ3RoOyBvLS07KSB7CiAgICAgICAgICAgICAgICB0W29dLnBhcmVudCB8fCB0LnNwbGljZShvLCAxKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGZvciAobiA9IDAsIHIgPSBzLmxlbmd0aDsgbiA8IHI7IG4rKykgewogICAgICAgICAgICAgICAgc1tuXSh0LCBhLCB1KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBmb3IgKG4gPSAwLCByID0gRC5sZW5ndGg7IG4gPCByOyBuKyspIHsKICAgICAgICAgICAgaWYgKChzID0gRFtuXSkubmFtZSBpbiBPKSB7CiAgICAgICAgICAgICAgZm9yIChvID0gKHQgPSBPW3MubmFtZV0pLmxlbmd0aDsgby0tOykgewogICAgICAgICAgICAgICAgdFtvXS5wYXJlbnQgfHwgdC5zcGxpY2UobywgMSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBmb3IgKG8gPSAwLCBpID0gcy5jYWxsYmFja3MubGVuZ3RoOyBvIDwgaTsgbysrKSB7CiAgICAgICAgICAgICAgICBzLmNhbGxiYWNrc1tvXSh0LCBzLm5hbWUsIHUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGs7CiAgICAgIH0KICAgIH07CiAgICByZXR1cm4gcWgoZSwgXyksIF8uaW5saW5lX3N0eWxlcyAmJiBJaChlLCBfKSwgZTsKICB9CgogIGZ1bmN0aW9uIFdoKGUsIHQsIG4pIHsKICAgIC0xID09PSBFdC5pbkFycmF5KHQsIG4pICYmIChlLmFkZEF0dHJpYnV0ZUZpbHRlcihuLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICBmb3IgKHZhciBuID0gZS5sZW5ndGg7IG4tLTspIHsKICAgICAgICBlW25dLmF0dHIodCwgbnVsbCk7CiAgICAgIH0KICAgIH0pLCB0LnB1c2gobikpOwogIH0KCiAgZnVuY3Rpb24gS2goTCwgSSkgewogICAgdmFyIGUgPSBbImRhdGEtbWNlLXNlbGVjdGVkIl0sCiAgICAgICAgTSA9IEkgJiYgSS5kb20gPyBJLmRvbSA6IEphLkRPTSwKICAgICAgICBGID0gSSAmJiBJLnNjaGVtYSA/IEkuc2NoZW1hIDogdG8oTCk7CiAgICBMLmVudGl0eV9lbmNvZGluZyA9IEwuZW50aXR5X2VuY29kaW5nIHx8ICJuYW1lZCIsIEwucmVtb3ZlX3RyYWlsaW5nX2JycyA9ICEoInJlbW92ZV90cmFpbGluZ19icnMiIGluIEwpIHx8IEwucmVtb3ZlX3RyYWlsaW5nX2JyczsKICAgIHZhciB0LAogICAgICAgIFUgPSAkaChMLCBGKSwKICAgICAgICBzID0gTCwKICAgICAgICBjID0gTTsKICAgIHJldHVybiAodCA9IFUpLmFkZEF0dHJpYnV0ZUZpbHRlcigiZGF0YS1tY2UtdGFiaW5kZXgiLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICBmb3IgKHZhciBuID0gZS5sZW5ndGg7IG4tLTspIHsKICAgICAgICB2YXIgciA9IGVbbl07CiAgICAgICAgci5hdHRyKCJ0YWJpbmRleCIsIHIuYXR0cigiZGF0YS1tY2UtdGFiaW5kZXgiKSksIHIuYXR0cih0LCBudWxsKTsKICAgICAgfQogICAgfSksIHQuYWRkQXR0cmlidXRlRmlsdGVyKCJzcmMsaHJlZixzdHlsZSIsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIGZvciAodmFyIG4gPSAiZGF0YS1tY2UtIiArIHQsIHIgPSBzLnVybF9jb252ZXJ0ZXIsIG8gPSBzLnVybF9jb252ZXJ0ZXJfc2NvcGUsIGkgPSBlLmxlbmd0aDsgaS0tOykgewogICAgICAgIHZhciBhID0gZVtpXSwKICAgICAgICAgICAgdSA9IGEuYXR0cihuKTsKICAgICAgICB2b2lkIDAgIT09IHUgPyAoYS5hdHRyKHQsIDAgPCB1Lmxlbmd0aCA/IHUgOiBudWxsKSwgYS5hdHRyKG4sIG51bGwpKSA6ICh1ID0gYS5hdHRyKHQpLCAic3R5bGUiID09PSB0ID8gdSA9IGMuc2VyaWFsaXplU3R5bGUoYy5wYXJzZVN0eWxlKHUpLCBhLm5hbWUpIDogciAmJiAodSA9IHIuY2FsbChvLCB1LCB0LCBhLm5hbWUpKSwgYS5hdHRyKHQsIDAgPCB1Lmxlbmd0aCA/IHUgOiBudWxsKSk7CiAgICAgIH0KICAgIH0pLCB0LmFkZEF0dHJpYnV0ZUZpbHRlcigiY2xhc3MiLCBmdW5jdGlvbiAoZSkgewogICAgICBmb3IgKHZhciB0ID0gZS5sZW5ndGg7IHQtLTspIHsKICAgICAgICB2YXIgbiwKICAgICAgICAgICAgciA9IGVbdF07CiAgICAgICAgci5hdHRyKCJjbGFzcyIpICYmIChuID0gci5hdHRyKCJjbGFzcyIpLnJlcGxhY2UoLyg/Ol58XHMpbWNlLWl0ZW0tXHcrKD8hXFMpL2csICIiKSwgci5hdHRyKCJjbGFzcyIsIDAgPCBuLmxlbmd0aCA/IG4gOiBudWxsKSk7CiAgICAgIH0KICAgIH0pLCB0LmFkZEF0dHJpYnV0ZUZpbHRlcigiZGF0YS1tY2UtdHlwZSIsIGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICAgIGZvciAodmFyIHIgPSBlLmxlbmd0aDsgci0tOykgewogICAgICAgIHZhciBvID0gZVtyXTsKICAgICAgICAiYm9va21hcmsiICE9PSBvLmF0dHIoImRhdGEtbWNlLXR5cGUiKSB8fCBuLmNsZWFudXAgfHwgKHZlLmZyb20oby5maXJzdENoaWxkKS5leGlzdHMoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiAheG8oZS52YWx1ZSk7CiAgICAgICAgfSkgPyBvLnVud3JhcCgpIDogby5yZW1vdmUoKSk7CiAgICAgIH0KICAgIH0pLCB0LmFkZE5vZGVGaWx0ZXIoIm5vc2NyaXB0IiwgZnVuY3Rpb24gKGUpIHsKICAgICAgZm9yICh2YXIgdCA9IGUubGVuZ3RoOyB0LS07KSB7CiAgICAgICAgdmFyIG4gPSBlW3RdLmZpcnN0Q2hpbGQ7CiAgICAgICAgbiAmJiAobi52YWx1ZSA9IEdvLmRlY29kZShuLnZhbHVlKSk7CiAgICAgIH0KICAgIH0pLCB0LmFkZE5vZGVGaWx0ZXIoInNjcmlwdCxzdHlsZSIsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIGZvciAodmFyIG4gPSBmdW5jdGlvbiBuKGUpIHsKICAgICAgICByZXR1cm4gZS5yZXBsYWNlKC8oPCEtLVxbQ0RBVEFcW3xcXVxdLS0+KS9nLCAiXG4iKS5yZXBsYWNlKC9eW1xyXG5dKnxbXHJcbl0qJC9nLCAiIikucmVwbGFjZSgvXlxzKigoPCEtLSk/KFxzKlwvXC8pP1xzKjwhXFtDREFUQVxbfCg8IS0tXHMqKT9cL1wqXHMqPCFcW0NEQVRBXFtccypcKlwvfChcL1wvKT9ccyo8IS0tfFwvXCpccyo8IS0tXHMqXCpcLylccypbXHJcbl0qL2dpLCAiIikucmVwbGFjZSgvXHMqKFwvXCpccypcXVxdPlxzKlwqXC8oLS0+KT98XHMqXC9cL1xzKlxdXF0+KC0tPik/fFwvXC9ccyooLS0+KT98XF1cXT58XC9cKlxzKi0tPlxzKlwqXC98XHMqLS0+XHMqKVxzKiQvZywgIiIpOwogICAgICB9LCByID0gZS5sZW5ndGg7IHItLTspIHsKICAgICAgICB2YXIgbywKICAgICAgICAgICAgaSA9IGVbcl0sCiAgICAgICAgICAgIGEgPSBpLmZpcnN0Q2hpbGQgPyBpLmZpcnN0Q2hpbGQudmFsdWUgOiAiIjsKICAgICAgICAic2NyaXB0IiA9PT0gdCA/ICgobyA9IGkuYXR0cigidHlwZSIpKSAmJiBpLmF0dHIoInR5cGUiLCAibWNlLW5vL3R5cGUiID09PSBvID8gbnVsbCA6IG8ucmVwbGFjZSgvXm1jZVwtLywgIiIpKSwgInhodG1sIiA9PT0gcy5lbGVtZW50X2Zvcm1hdCAmJiAwIDwgYS5sZW5ndGggJiYgKGkuZmlyc3RDaGlsZC52YWx1ZSA9ICIvLyA8IVtDREFUQVtcbiIgKyBuKGEpICsgIlxuLy8gXV0+IikpIDogInhodG1sIiA9PT0gcy5lbGVtZW50X2Zvcm1hdCAmJiAwIDwgYS5sZW5ndGggJiYgKGkuZmlyc3RDaGlsZC52YWx1ZSA9ICJceDNjIS0tXG4iICsgbihhKSArICJcbi0tXHgzZSIpOwogICAgICB9CiAgICB9KSwgdC5hZGROb2RlRmlsdGVyKCIjY29tbWVudCIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGZvciAodmFyIHQgPSBlLmxlbmd0aDsgdC0tOykgewogICAgICAgIHZhciBuID0gZVt0XTsKICAgICAgICBzLnByZXNlcnZlX2NkYXRhICYmIDAgPT09IG4udmFsdWUuaW5kZXhPZigiW0NEQVRBWyIpID8gKG4ubmFtZSA9ICIjY2RhdGEiLCBuLnR5cGUgPSA0LCBuLnZhbHVlID0gYy5kZWNvZGUobi52YWx1ZS5yZXBsYWNlKC9eXFtDREFUQVxbfFxdXF0kL2csICIiKSkpIDogMCA9PT0gbi52YWx1ZS5pbmRleE9mKCJtY2U6cHJvdGVjdGVkICIpICYmIChuLm5hbWUgPSAiI3RleHQiLCBuLnR5cGUgPSAzLCBuLnJhdyA9ICEwLCBuLnZhbHVlID0gdW5lc2NhcGUobi52YWx1ZSkuc3Vic3RyKDE0KSk7CiAgICAgIH0KICAgIH0pLCB0LmFkZE5vZGVGaWx0ZXIoInhtbDpuYW1lc3BhY2UsaW5wdXQiLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICBmb3IgKHZhciBuID0gZS5sZW5ndGg7IG4tLTspIHsKICAgICAgICB2YXIgciA9IGVbbl07CiAgICAgICAgNyA9PT0gci50eXBlID8gci5yZW1vdmUoKSA6IDEgPT09IHIudHlwZSAmJiAoImlucHV0IiAhPT0gdCB8fCByLmF0dHIoInR5cGUiKSB8fCByLmF0dHIoInR5cGUiLCAidGV4dCIpKTsKICAgICAgfQogICAgfSksIHQuYWRkQXR0cmlidXRlRmlsdGVyKCJkYXRhLW1jZS10eXBlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgWShlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICJmb3JtYXQtY2FyZXQiID09PSBlLmF0dHIoImRhdGEtbWNlLXR5cGUiKSAmJiAoZS5pc0VtcHR5KHQuc2NoZW1hLmdldE5vbkVtcHR5RWxlbWVudHMoKSkgPyBlLnJlbW92ZSgpIDogZS51bndyYXAoKSk7CiAgICAgIH0pOwogICAgfSksIHQuYWRkQXR0cmlidXRlRmlsdGVyKCJkYXRhLW1jZS1zcmMsZGF0YS1tY2UtaHJlZixkYXRhLW1jZS1zdHlsZSxkYXRhLW1jZS1zZWxlY3RlZCxkYXRhLW1jZS1leHBhbmRvLGRhdGEtbWNlLXR5cGUsZGF0YS1tY2UtcmVzaXplLGRhdGEtbWNlLXBsYWNlaG9sZGVyIiwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgZm9yICh2YXIgbiA9IGUubGVuZ3RoOyBuLS07KSB7CiAgICAgICAgZVtuXS5hdHRyKHQsIG51bGwpOwogICAgICB9CiAgICB9KSwgewogICAgICBzY2hlbWE6IEYsCiAgICAgIGFkZE5vZGVGaWx0ZXI6IFUuYWRkTm9kZUZpbHRlciwKICAgICAgYWRkQXR0cmlidXRlRmlsdGVyOiBVLmFkZEF0dHJpYnV0ZUZpbHRlciwKICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbiBzZXJpYWxpemUoZSwgdCkgewogICAgICAgIHZhciBuLAogICAgICAgICAgICByLAogICAgICAgICAgICBvLAogICAgICAgICAgICBpLAogICAgICAgICAgICBhLAogICAgICAgICAgICB1LAogICAgICAgICAgICBzLAogICAgICAgICAgICBjLAogICAgICAgICAgICBsLAogICAgICAgICAgICBmLAogICAgICAgICAgICBkLAogICAgICAgICAgICBtLAogICAgICAgICAgICBnLAogICAgICAgICAgICBwLAogICAgICAgICAgICBoLAogICAgICAgICAgICB2LAogICAgICAgICAgICBiLAogICAgICAgICAgICB5LAogICAgICAgICAgICBDLAogICAgICAgICAgICB4LAogICAgICAgICAgICB3LAogICAgICAgICAgICBTLAogICAgICAgICAgICBFLAogICAgICAgICAgICBOLAogICAgICAgICAgICBrLAogICAgICAgICAgICBfLAogICAgICAgICAgICBBLAogICAgICAgICAgICBSLAogICAgICAgICAgICBELAogICAgICAgICAgICBUID0gX2UyKHsKICAgICAgICAgIGZvcm1hdDogImh0bWwiCiAgICAgICAgfSwgdCA9IHZvaWQgMCA9PT0gdCA/IHt9IDogdCksCiAgICAgICAgICAgIE8gPSAobiA9IChtID0gZSwgRSA9IGcgPSBULCAoZCA9IEkpICYmIGQuaGFzRXZlbnRMaXN0ZW5lcnMoIlByZVByb2Nlc3MiKSAmJiAhRS5ub19ldmVudHMgPyAoaCA9IGcsIHggPSAocCA9IGQpLmRvbSwgdyA9IG0uY2xvbmVOb2RlKCEwKSwgKFMgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbikuY3JlYXRlSFRNTERvY3VtZW50ICYmIChiID0gUy5jcmVhdGVIVE1MRG9jdW1lbnQoIiIpLCBFdC5lYWNoKCJCT0RZIiA9PT0gdy5ub2RlTmFtZSA/IHcuY2hpbGROb2RlcyA6IFt3XSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGIuYm9keS5hcHBlbmRDaGlsZChiLmltcG9ydE5vZGUoZSwgITApKTsKICAgICAgICB9KSwgdyA9ICJCT0RZIiAhPT0gdy5ub2RlTmFtZSA/IGIuYm9keS5maXJzdENoaWxkIDogYi5ib2R5LCB2ID0geC5kb2MsIHguZG9jID0gYiksIHkgPSBwLCBDID0gX2UyKF9lMih7fSwgaCksIHsKICAgICAgICAgIG5vZGU6IHcKICAgICAgICB9KSwgeS5maXJlKCJQcmVQcm9jZXNzIiwgQyksIHYgJiYgKHguZG9jID0gdiksIHcpIDogbSksIG8gPSB3bygociA9IFQpLmdldElubmVyID8gbi5pbm5lckhUTUwgOiBNLmdldE91dGVySFRNTChuKSksIHIuc2VsZWN0aW9uIHx8IHZvKE50LmZyb21Eb20obikpID8gbyA6IEV0LnRyaW0obykpLAogICAgICAgICAgICBCID0gKGkgPSBVLCBhID0gTywgcyA9ICh1ID0gVCkuc2VsZWN0aW9uID8gX2UyKHsKICAgICAgICAgIGZvcmNlZF9yb290X2Jsb2NrOiAhMQogICAgICAgIH0sIHUpIDogdSwgYyA9IGkucGFyc2UoYSwgcyksICFQKGYgPSBjLmxhc3RDaGlsZCkgfHwgUChsID0gZi5wcmV2KSAmJiAoZi5yZW1vdmUoKSwgbC5yZW1vdmUoKSksIGMpOwoKICAgICAgICBmdW5jdGlvbiBQKGUpIHsKICAgICAgICAgIHJldHVybiBlICYmICJiciIgPT09IGUubmFtZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAidHJlZSIgPT09IFQuZm9ybWF0ID8gQiA6IChOID0gSSwgayA9IFQsIF8gPSBCLCBEID0gbm0oTCwgRikuc2VyaWFsaXplKF8pLCBrLm5vX2V2ZW50cyB8fCAhTiA/IEQgOiAoQSA9IE4sIFIgPSBfZTIoX2UyKHt9LCBrKSwgewogICAgICAgICAgY29udGVudDogRAogICAgICAgIH0pLCBBLmZpcmUoIlBvc3RQcm9jZXNzIiwgUikuY29udGVudCkpOwogICAgICB9LAogICAgICBhZGRSdWxlczogRi5hZGRWYWxpZEVsZW1lbnRzLAogICAgICBzZXRSdWxlczogRi5zZXRWYWxpZEVsZW1lbnRzLAogICAgICBhZGRUZW1wQXR0cjogQShXaCwgVSwgZSksCiAgICAgIGdldFRlbXBBdHRyczogSihlKSwKICAgICAgZ2V0Tm9kZUZpbHRlcnM6IFUuZ2V0Tm9kZUZpbHRlcnMsCiAgICAgIGdldEF0dHJpYnV0ZUZpbHRlcnM6IFUuZ2V0QXR0cmlidXRlRmlsdGVycwogICAgfTsKICB9CgogIGZ1bmN0aW9uIFhoKGUsIHQpIHsKICAgIHZhciBuID0gS2goZSwgdCk7CiAgICByZXR1cm4gewogICAgICBzY2hlbWE6IG4uc2NoZW1hLAogICAgICBhZGROb2RlRmlsdGVyOiBuLmFkZE5vZGVGaWx0ZXIsCiAgICAgIGFkZEF0dHJpYnV0ZUZpbHRlcjogbi5hZGRBdHRyaWJ1dGVGaWx0ZXIsCiAgICAgIHNlcmlhbGl6ZTogbi5zZXJpYWxpemUsCiAgICAgIGFkZFJ1bGVzOiBuLmFkZFJ1bGVzLAogICAgICBzZXRSdWxlczogbi5zZXRSdWxlcywKICAgICAgYWRkVGVtcEF0dHI6IG4uYWRkVGVtcEF0dHIsCiAgICAgIGdldFRlbXBBdHRyczogbi5nZXRUZW1wQXR0cnMsCiAgICAgIGdldE5vZGVGaWx0ZXJzOiBuLmdldE5vZGVGaWx0ZXJzLAogICAgICBnZXRBdHRyaWJ1dGVGaWx0ZXJzOiBuLmdldEF0dHJpYnV0ZUZpbHRlcnMKICAgIH07CiAgfQoKICBmdW5jdGlvbiBZaChlLCB0LCBuKSB7CiAgICByZXR1cm4gciA9IG4gPSB2b2lkIDAgPT09IG4gPyB7fSA6IG4sIHBoKGUpLmVkaXRvci5zZXRDb250ZW50KHQsIHIpOwogICAgdmFyIHI7CiAgfQoKICBmdW5jdGlvbiBHaChlKSB7CiAgICByZXR1cm4gdmUuZnJvbShlKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBlLmRlc3Ryb3koKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gSmgoZSwgdCkgewogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYSwKICAgICAgICB1LAogICAgICAgIHMsCiAgICAgICAgYyA9IChuID0gZSwgciA9IFUoYnYsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBOZShuLCBlKTsKICAgIH0pLCAhMSAhPT0gKG8gPSBuLmZvcmNlZF9yb290X2Jsb2NrKSAmJiAiIiAhPT0gbyB8fCByLnB1c2goImZvcmNlZF9yb290X2Jsb2NrIChmYWxzZSBvbmx5KSIpLCBXKHIpKSwKICAgICAgICBsID0gKHMgPSBFdC5tYWtlTWFwKHQucGx1Z2lucywgIiAiKSwgVyhBZShBZShbXSwgVSh5diwgZyksICEwKSwgSChDdiwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGcoZSkgPyBbZSArICIgKG1vdmluZyB0byBwcmVtaXVtKSJdIDogW107CiAgICB9KSwgITApKSksCiAgICAgICAgZiA9IDAgPCBsLmxlbmd0aCwKICAgICAgICBkID0gMCA8IGMubGVuZ3RoLAogICAgICAgIG0gPSAibW9iaWxlIiA9PT0gdC50aGVtZTsKCiAgICBmdW5jdGlvbiBnKGUpIHsKICAgICAgcmV0dXJuIE5lKHMsIGUpOwogICAgfQoKICAgIChmIHx8IGQgfHwgbSkgJiYgKGkgPSBtID8gIlxuXG5UaGVtZXM6XG4tIG1vYmlsZSIgOiAiIiwgYSA9IGYgPyAiXG5cblBsdWdpbnM6XG4tICIgKyBsLmpvaW4oIlxuLSAiKSA6ICIiLCB1ID0gZCA/ICJcblxuU2V0dGluZ3M6XG4tICIgKyBjLmpvaW4oIlxuLSAiKSA6ICIiLCBjb25zb2xlLndhcm4oIlRoZSBmb2xsb3dpbmcgZGVwcmVjYXRlZCBmZWF0dXJlcyBhcmUgY3VycmVudGx5IGVuYWJsZWQsIHRoZXNlIHdpbGwgYmUgcmVtb3ZlZCBpbiBUaW55TUNFIDYuMC4gU2VlIGh0dHBzOi8vd3d3LnRpbnkuY2xvdWQvZG9jcy9yZWxlYXNlLW5vdGVzLzYuMC11cGNvbWluZy1jaGFuZ2VzLyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4iICsgaSArIGEgKyB1KSk7CiAgfQoKICBmdW5jdGlvbiBRaChlKSB7CiAgICB2YXIgdCA9IFMoZSkgPyBlLmpvaW4oIiAiKSA6IGU7CiAgICByZXR1cm4gVShUKFgodCkgPyB0LnNwbGl0KCIgIikgOiBbXSwgSmUpLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gMCA8IGUubGVuZ3RoOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBaaChlLCB0KSB7CiAgICByZXR1cm4gTmUoZS5zZWN0aW9ucygpLCB0KTsKICB9CgogIGZ1bmN0aW9uIGV2KGUsIHQpIHsKICAgIHJldHVybiB1ZShlLCAidG9vbGJhcl9tb2RlIikub3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB1ZShlLCAidG9vbGJhcl9kcmF3ZXIiKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gITEgPT09IGUgPyAid3JhcCIgOiBlOwogICAgICB9KTsKICAgIH0pLmdldE9yKHQpOwogIH0KCiAgZnVuY3Rpb24gdHYoZSwgdCwgbiwgcikgewogICAgdmFyIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgcywKICAgICAgICBjLAogICAgICAgIGwsCiAgICAgICAgZiwKICAgICAgICBkID0gUWgobi5mb3JjZWRfcGx1Z2lucyksCiAgICAgICAgbSA9IFFoKHIucGx1Z2lucyksCiAgICAgICAgZyA9IFpoKG8gPSB0LCAibW9iaWxlIikgPyBvLnNlY3Rpb25zKCkubW9iaWxlIDoge30sCiAgICAgICAgcCA9IGcucGx1Z2lucyA/IFFoKGcucGx1Z2lucykgOiBtLAogICAgICAgIGggPSAoaSA9ICh1ID0gdCwgcyA9IG0sIGMgPSBwLCAoYSA9IGUpICYmICgwLCBmID0gKGwgPSB1KS5zZWN0aW9ucygpLCBaaChsLCAibW9iaWxlIikgJiYgIm1vYmlsZSIgPT09IGYubW9iaWxlLnRoZW1lKSA/IFUoYywgQShELCBOdikpIDogYSAmJiBaaCh1LCAibW9iaWxlIikgPyBjIDogcyksIFtdLmNvbmNhdChRaChkKSkuY29uY2F0KFFoKGkpKSk7CiAgICBpZiAoeHQuYnJvd3Nlci5pc0lFKCkgJiYgRChoLCAicnRjIikpIHRocm93IG5ldyBFcnJvcigiUlRDIHBsdWdpbiBpcyBub3Qgc3VwcG9ydGVkIG9uIElFIDExLiIpOwogICAgcmV0dXJuIEV0LmV4dGVuZChyLCB7CiAgICAgIHBsdWdpbnM6IGguam9pbigiICIpCiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIG52KGUsIHQsIG4sIHIsIG8pIHsKICAgIHZhciBpLAogICAgICAgIGEsCiAgICAgICAgdSwKICAgICAgICBzLAogICAgICAgIGMsCiAgICAgICAgbCwKICAgICAgICBmLAogICAgICAgIGQsCiAgICAgICAgbSA9IGUgPyB7CiAgICAgIG1vYmlsZTogKGkgPSB0LCBhID0gewogICAgICAgIHJlc2l6ZTogITEsCiAgICAgICAgdG9vbGJhcl9tb2RlOiBldihvLm1vYmlsZSB8fCB7fSwgInNjcm9sbGluZyIpLAogICAgICAgIHRvb2xiYXJfc3RpY2t5OiAhMQogICAgICB9LCBfZTIoX2UyKF9lMih7fSwga3YpLCBhKSwgaSA/IHsKICAgICAgICBtZW51YmFyOiAhMQogICAgICB9IDoge30pKQogICAgfSA6IHt9LAogICAgICAgIGcgPSAoYyA9IFsibW9iaWxlIl0sIGllKHZ2KG0sIG8pLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICByZXR1cm4gRChjLCB0KTsKICAgIH0sIG9lKGwgPSB7fSksIG9lKGYgPSB7fSkpLCB7CiAgICAgIHNlY3Rpb25zOiBKKChkID0gewogICAgICAgIHQ6IGwsCiAgICAgICAgZjogZgogICAgICB9KS50KSwKICAgICAgc2V0dGluZ3M6IEooZC5mKQogICAgfSksCiAgICAgICAgcCA9IEV0LmV4dGVuZChuLCByLCBnLnNldHRpbmdzKCksIGUgJiYgWmgoZywgIm1vYmlsZSIpID8gZnVuY3Rpb24gKGUpIHsKICAgICAgdm9pZCAwID09PSBlICYmIChlID0ge30pOwogICAgICB2YXIgdCA9IHVlKGcuc2VjdGlvbnMoKSwgIm1vYmlsZSIpLmdldE9yKHt9KTsKICAgICAgcmV0dXJuIEV0LmV4dGVuZCh7fSwgZSwgdCk7CiAgICB9KCkgOiB7fSwgewogICAgICB2YWxpZGF0ZTogITAsCiAgICAgIGV4dGVybmFsX3BsdWdpbnM6ICh1ID0gciwgcyA9IGcuc2V0dGluZ3MoKS5leHRlcm5hbF9wbHVnaW5zIHx8IHt9LCB1ICYmIHUuZXh0ZXJuYWxfcGx1Z2lucyA/IEV0LmV4dGVuZCh7fSwgdS5leHRlcm5hbF9wbHVnaW5zLCBzKSA6IHMpCiAgICB9KTsKICAgIHJldHVybiB0dihlLCBnLCByLCBwKTsKICB9CgogIGZ1bmN0aW9uIHJ2KGUsIHQsIG4pIHsKICAgIHJldHVybiB2ZS5mcm9tKHQuc2V0dGluZ3Nbbl0pLmZpbHRlcihlKTsKICB9CgogIGZ1bmN0aW9uIG92KGUsIHQpIHsKICAgIHJldHVybiB0LmRvbVtlXTsKICB9CgogIGZ1bmN0aW9uIGl2KGUsIHQpIHsKICAgIHJldHVybiBwYXJzZUludCh4bih0LCBlKSwgMTApOwogIH0KCiAgZnVuY3Rpb24gYXYoZSwgdCwgbikgewogICAgdmFyIHIsCiAgICAgICAgbywKICAgICAgICBpLAogICAgICAgIGEsCiAgICAgICAgdSwKICAgICAgICBzLAogICAgICAgIGMgPSBOdC5mcm9tRG9tKGUuZ2V0Qm9keSgpKSwKICAgICAgICBsID0gZS5pbmxpbmUgPyBjIDogTnQuZnJvbURvbShEdChjKS5kb20uZG9jdW1lbnRFbGVtZW50KSwKICAgICAgICBmID0gKHIgPSBlLmlubGluZSwgaSA9IHQsIGEgPSBuLCB1ID0gKG8gPSBsKS5kb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHsKICAgICAgeDogaSAtIChyID8gdS5sZWZ0ICsgby5kb20uY2xpZW50TGVmdCArIFR2KG8pIDogMCksCiAgICAgIHk6IGEgLSAociA/IHUudG9wICsgby5kb20uY2xpZW50VG9wICsgRHYobykgOiAwKQogICAgfSksCiAgICAgICAgZCA9IGYueCwKICAgICAgICBtID0gZi55LAogICAgICAgIGcgPSBBdihzID0gbCksCiAgICAgICAgcCA9IFJ2KHMpOwogICAgcmV0dXJuIDAgPD0gZCAmJiAwIDw9IG0gJiYgZCA8PSBnICYmIG0gPD0gcDsKICB9CgogIGZ1bmN0aW9uIHV2KG8pIHsKICAgIGZ1bmN0aW9uIGkoKSB7CiAgICAgIHZhciBlID0gby50aGVtZTsKICAgICAgcmV0dXJuIGUgJiYgZS5nZXROb3RpZmljYXRpb25NYW5hZ2VySW1wbCA/IGUuZ2V0Tm90aWZpY2F0aW9uTWFuYWdlckltcGwoKSA6IHsKICAgICAgICBvcGVuOiB0LAogICAgICAgIGNsb3NlOiB0LAogICAgICAgIHJlcG9zaXRpb246IHQsCiAgICAgICAgZ2V0QXJnczogdAogICAgICB9OwoKICAgICAgZnVuY3Rpb24gdCgpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlRoZW1lIGRpZCBub3QgcHJvdmlkZSBhIE5vdGlmaWNhdGlvbk1hbmFnZXIgaW1wbGVtZW50YXRpb24uIik7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhKCkgewogICAgICByZXR1cm4gdmUuZnJvbShjWzBdKTsKICAgIH0KCiAgICBmdW5jdGlvbiB1KCkgewogICAgICAwIDwgYy5sZW5ndGggJiYgaSgpLnJlcG9zaXRpb24oYyk7CiAgICB9CgogICAgZnVuY3Rpb24gcyh0KSB7CiAgICAgIHooYywgZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gZSA9PT0gdDsKICAgICAgfSkuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIGMuc3BsaWNlKGUsIDEpOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiB0KG4sIGUpIHsKICAgICAgaWYgKHZvaWQgMCA9PT0gZSAmJiAoZSA9ICEwKSwgIW8ucmVtb3ZlZCAmJiAociA9ICh0ID0gbykuaW5saW5lID8gdC5nZXRCb2R5KCkgOiB0LmdldENvbnRlbnRBcmVhQ29udGFpbmVyKCksIHZlLmZyb20ocikubWFwKE50LmZyb21Eb20pLm1hcChJbikuZ2V0T3IoITEpKSkgcmV0dXJuIGUgJiYgby5maXJlKCJCZWZvcmVPcGVuTm90aWZpY2F0aW9uIiwgewogICAgICAgIG5vdGlmaWNhdGlvbjogbgogICAgICB9KSwgTShjLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiAhKCh0ID0gaSgpLmdldEFyZ3MoZSkpLnR5cGUgIT09IG4udHlwZSB8fCB0LnRleHQgIT09IG4udGV4dCB8fCB0LnByb2dyZXNzQmFyIHx8IHQudGltZW91dCB8fCBuLnByb2dyZXNzQmFyIHx8IG4udGltZW91dCk7CiAgICAgICAgdmFyIHQ7CiAgICAgIH0pLmdldE9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICAgIG8uZWRpdG9yTWFuYWdlci5zZXRBY3RpdmUobyk7CiAgICAgICAgdmFyIGUgPSBpKCkub3BlbihuLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBzKGUpLCB1KCksIGEoKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIG8uZm9jdXMoKTsKICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiBOdC5mcm9tRG9tKGUuZ2V0RWwoKSkuZG9tLmZvY3VzKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gYy5wdXNoKGUpLCB1KCksIG8uZmlyZSgiT3Blbk5vdGlmaWNhdGlvbiIsIHsKICAgICAgICAgIG5vdGlmaWNhdGlvbjogX2UyKHt9LCBlKQogICAgICAgIH0pLCBlOwogICAgICB9KTsKICAgICAgdmFyIHQsIHI7CiAgICB9CgogICAgdmFyIG4sCiAgICAgICAgYyA9IFtdLAogICAgICAgIGUgPSBKKGMpOwogICAgcmV0dXJuIChuID0gbykub24oIlNraW5Mb2FkZWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBlID0gbi5nZXRQYXJhbSgic2VydmljZV9tZXNzYWdlIik7CiAgICAgIGUgJiYgdCh7CiAgICAgICAgdGV4dDogZSwKICAgICAgICB0eXBlOiAid2FybmluZyIsCiAgICAgICAgdGltZW91dDogMAogICAgICB9LCAhMSksIHUoKTsKICAgIH0pLCBuLm9uKCJzaG93IFJlc2l6ZUVkaXRvciBSZXNpemVXaW5kb3cgTm9kZUNoYW5nZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3IucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHUpOwogICAgfSksIG4ub24oInJlbW92ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgWShjLnNsaWNlKCksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaSgpLmNsb3NlKGUpOwogICAgICB9KTsKICAgIH0pLCB7CiAgICAgIG9wZW46IHQsCiAgICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHsKICAgICAgICBhKCkuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgaSgpLmNsb3NlKGUpLCBzKGUpLCB1KCk7CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGdldE5vdGlmaWNhdGlvbnM6IGUKICAgIH07CiAgfQoKICB2YXIgc3YsCiAgICAgIGN2LAogICAgICBsdiA9IDAsCiAgICAgIGZ2ID0gZnVuY3Rpb24gZnYoZSwgdCkgewogICAgcmV0dXJuIGUgJiYgZS5maXJzdENoaWxkICYmIGUuZmlyc3RDaGlsZCA9PT0gZS5sYXN0Q2hpbGQgJiYgZS5maXJzdENoaWxkLm5hbWUgPT09IHQ7CiAgfSwKICAgICAgZHYgPSBFdC5tYWtlTWFwLAogICAgICBtdiA9IEV0LmVhY2gsCiAgICAgIGd2ID0gRXQuZXhwbG9kZSwKICAgICAgcHYgPSBFdC5leHRlbmQsCiAgICAgIGh2ID0gSmEuRE9NLAogICAgICB2diA9IChzdiA9IGZ1bmN0aW9uIHN2KGUsIHQpIHsKICAgIHJldHVybiBoKGUpICYmIGgodCkgPyB2dihlLCB0KSA6IHQ7CiAgfSwgZnVuY3Rpb24gKCkgewogICAgZm9yICh2YXIgZSA9IFtdLCB0ID0gMDsgdCA8IGFyZ3VtZW50cy5sZW5ndGg7IHQrKykgewogICAgICBlW3RdID0gYXJndW1lbnRzW3RdOwogICAgfQoKICAgIGlmICgwID09PSBlLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCJDYW4ndCBtZXJnZSB6ZXJvIG9iamVjdHMiKTsKCiAgICBmb3IgKHZhciBuID0ge30sIHIgPSAwOyByIDwgZS5sZW5ndGg7IHIrKykgewogICAgICB2YXIgbywKICAgICAgICAgIGkgPSBlW3JdOwoKICAgICAgZm9yIChvIGluIGkpIHsKICAgICAgICBOZShpLCBvKSAmJiAobltvXSA9IHN2KG5bb10sIGlbb10pKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBuOwogIH0pLAogICAgICBidiA9ICJhdXRvcmVzaXplX29uX2luaXQsY29udGVudF9lZGl0YWJsZV9zdGF0ZSxjb252ZXJ0X2ZvbnRzX3RvX3NwYW5zLGlubGluZV9zdHlsZXMscGFkZF9lbXB0eV93aXRoX2JyLGJsb2NrX2VsZW1lbnRzLGJvb2xlYW5fYXR0cmlidXRlcyxlZGl0b3JfZGVzZWxlY3RvcixlZGl0b3Jfc2VsZWN0b3IsZWxlbWVudHMsZmlsZV9icm93c2VyX2NhbGxiYWNrX3R5cGVzLGZpbGVwaWNrZXJfdmFsaWRhdG9yX2hhbmRsZXIsZm9yY2VfaGV4X3N0eWxlX2NvbG9ycyxmb3JjZV9wX25ld2xpbmVzLGdlY2tvX3NwZWxsY2hlY2ssaW1hZ2VzX2RhdGFpbWdfZmlsdGVyLG1lZGlhX3NjcmlwdHMsbW9kZSxtb3ZlX2NhcmV0X2JlZm9yZV9vbl9lbnRlcl9lbGVtZW50cyxub25fZW1wdHlfZWxlbWVudHMsc2VsZl9jbG9zaW5nX2VsZW1lbnRzLHNob3J0X2VuZGVkX2VsZW1lbnRzLHNwZWNpYWwsc3BlbGxjaGVja2VyX3NlbGVjdF9sYW5ndWFnZXMsc3BlbGxjaGVja2VyX3doaXRlbGlzdCx0YWJfZm9jdXMsdGFibGVfcmVzcG9uc2l2ZV93aWR0aCx0ZXh0X2Jsb2NrX2VsZW1lbnRzLHRleHRfaW5saW5lX2VsZW1lbnRzLHRvb2xiYXJfZHJhd2VyLHR5cGVzLHZhbGlkYXRlLHdoaXRlc3BhY2VfZWxlbWVudHMscGFzdGVfd29yZF92YWxpZF9lbGVtZW50cyxwYXN0ZV9yZXRhaW5fc3R5bGVfcHJvcGVydGllcyxwYXN0ZV9jb252ZXJ0X3dvcmRfZmFrZV9saXN0cyIuc3BsaXQoIiwiKSwKICAgICAgeXYgPSAiYmJjb2RlLGNvbG9ycGlja2VyLGNvbnRleHRtZW51LGZ1bGxwYWdlLGxlZ2FjeW91dHB1dCxzcGVsbGNoZWNrZXIsdGV4dGNvbG9yIi5zcGxpdCgiLCIpLAogICAgICBDdiA9ICJpbWFnZXRvb2xzLHRvYyIuc3BsaXQoIiwiKSwKICAgICAgeHYgPSBkdCgpLmRldmljZVR5cGUsCiAgICAgIHd2ID0geHYuaXNUb3VjaCgpLAogICAgICBTdiA9IHh2LmlzUGhvbmUoKSwKICAgICAgRXYgPSB4di5pc1RhYmxldCgpLAogICAgICBOdiA9IFsibGlzdHMiLCAiYXV0b2xpbmsiLCAiYXV0b3NhdmUiXSwKICAgICAga3YgPSB7CiAgICB0YWJsZV9ncmlkOiAhMSwKICAgIG9iamVjdF9yZXNpemluZzogITEsCiAgICByZXNpemU6ICExCiAgfSwKICAgICAgX3YgPSAoY3YgPSB7fSwgewogICAgYWRkOiBmdW5jdGlvbiBhZGQoZSwgdCkgewogICAgICBjdltlXSA9IHQ7CiAgICB9LAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoZSkgewogICAgICByZXR1cm4gY3ZbZV0gfHwgewogICAgICAgIGljb25zOiB7fQogICAgICB9OwogICAgfSwKICAgIGhhczogZnVuY3Rpb24gaGFzKGUpIHsKICAgICAgcmV0dXJuIE5lKGN2LCBlKTsKICAgIH0KICB9KSwKICAgICAgQXYgPSBBKG92LCAiY2xpZW50V2lkdGgiKSwKICAgICAgUnYgPSBBKG92LCAiY2xpZW50SGVpZ2h0IiksCiAgICAgIER2ID0gQShpdiwgIm1hcmdpbi10b3AiKSwKICAgICAgVHYgPSBBKGl2LCAibWFyZ2luLWxlZnQiKSwKICAgICAgT3YgPSBzdS5QbHVnaW5NYW5hZ2VyLAogICAgICBCdiA9IHN1LlRoZW1lTWFuYWdlcjsKCiAgZnVuY3Rpb24gUHYocikgewogICAgZnVuY3Rpb24gbygpIHsKICAgICAgdmFyIGUgPSByLnRoZW1lOwogICAgICByZXR1cm4gZSAmJiBlLmdldFdpbmRvd01hbmFnZXJJbXBsID8gZS5nZXRXaW5kb3dNYW5hZ2VySW1wbCgpIDogewogICAgICAgIG9wZW46IHQsCiAgICAgICAgb3BlblVybDogdCwKICAgICAgICBhbGVydDogdCwKICAgICAgICBjb25maXJtOiB0LAogICAgICAgIGNsb3NlOiB0LAogICAgICAgIGdldFBhcmFtczogdCwKICAgICAgICBzZXRQYXJhbXM6IHQKICAgICAgfTsKCiAgICAgIGZ1bmN0aW9uIHQoKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJUaGVtZSBkaWQgbm90IHByb3ZpZGUgYSBXaW5kb3dNYW5hZ2VyIGltcGxlbWVudGF0aW9uLiIpOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaShuLCByKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgZm9yICh2YXIgZSA9IFtdLCB0ID0gMDsgdCA8IGFyZ3VtZW50cy5sZW5ndGg7IHQrKykgewogICAgICAgICAgZVt0XSA9IGFyZ3VtZW50c1t0XTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByID8gci5hcHBseShuLCBlKSA6IHZvaWQgMDsKICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBuKHQpIHsKICAgICAgci5maXJlKCJDbG9zZVdpbmRvdyIsIHsKICAgICAgICBkaWFsb2c6IHQKICAgICAgfSksIDAgPT09ICh1ID0gVSh1LCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlICE9PSB0OwogICAgICB9KSkubGVuZ3RoICYmIHIuZm9jdXMoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhKGUpIHsKICAgICAgci5lZGl0b3JNYW5hZ2VyLnNldEFjdGl2ZShyKSwgY2Qocik7CiAgICAgIHZhciB0LAogICAgICAgICAgbiA9IGUoKTsKICAgICAgcmV0dXJuIHQgPSBuLCB1LnB1c2godCksIHIuZmlyZSgiT3BlbldpbmRvdyIsIHsKICAgICAgICBkaWFsb2c6IHQKICAgICAgfSksIG47CiAgICB9CgogICAgdmFyIHUgPSBbXTsKICAgIHJldHVybiByLm9uKCJyZW1vdmUiLCBmdW5jdGlvbiAoKSB7CiAgICAgIFkodSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICBvKCkuY2xvc2UoZSk7CiAgICAgIH0pOwogICAgfSksIHsKICAgICAgb3BlbjogZnVuY3Rpb24gb3BlbihlLCB0KSB7CiAgICAgICAgcmV0dXJuIGEoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIG8oKS5vcGVuKGUsIHQsIG4pOwogICAgICAgIH0pOwogICAgICB9LAogICAgICBvcGVuVXJsOiBmdW5jdGlvbiBvcGVuVXJsKGUpIHsKICAgICAgICByZXR1cm4gYShmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gbygpLm9wZW5VcmwoZSwgbik7CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGFsZXJ0OiBmdW5jdGlvbiBhbGVydChlLCB0LCBuKSB7CiAgICAgICAgdmFyIHIgPSBvKCk7CiAgICAgICAgci5hbGVydChlLCBpKG4gfHwgciwgdCkpOwogICAgICB9LAogICAgICBjb25maXJtOiBmdW5jdGlvbiBjb25maXJtKGUsIHQsIG4pIHsKICAgICAgICB2YXIgciA9IG8oKTsKICAgICAgICByLmNvbmZpcm0oZSwgaShuIHx8IHIsIHQpKTsKICAgICAgfSwKICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkgewogICAgICAgIHZlLmZyb20odVt1Lmxlbmd0aCAtIDFdKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBvKCkuY2xvc2UoZSksIG4oZSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBMdihlLCB0KSB7CiAgICBlLm5vdGlmaWNhdGlvbk1hbmFnZXIub3Blbih7CiAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgIHRleHQ6IHQKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gSXYoZSwgdCkgewogICAgZS5fc2tpbkxvYWRlZCA/IEx2KGUsIHQpIDogZS5vbigiU2tpbkxvYWRlZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgTHYoZSwgdCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIE12KGUsIHQsIG4pIHsKICAgIHZmKGUsIHQsIHsKICAgICAgbWVzc2FnZTogbgogICAgfSksIGNvbnNvbGUuZXJyb3Iobik7CiAgfQoKICBmdW5jdGlvbiBGdihlLCB0LCBuKSB7CiAgICByZXR1cm4gbiA/ICJGYWlsZWQgdG8gbG9hZCAiICsgZSArICI6ICIgKyBuICsgIiBmcm9tIHVybCAiICsgdCA6ICJGYWlsZWQgdG8gbG9hZCAiICsgZSArICIgdXJsOiAiICsgdDsKICB9CgogIGZ1bmN0aW9uIFV2KGUsIHQsIG4pIHsKICAgIE12KGUsICJQbHVnaW5Mb2FkRXJyb3IiLCBGdigicGx1Z2luIiwgdCwgbikpOwogIH0KCiAgZnVuY3Rpb24genYoZSkgewogICAgdmFyIHQsIG47CiAgICBlLmNvbnRlbnRDU1MgPSBlLmNvbnRlbnRDU1MuY29uY2F0KGN5KGUsIChuID0gKHQgPSBlKS5nZXRQYXJhbSgiY29udGVudF9jc3MiKSwgWChuKSA/IFQobi5zcGxpdCgiLCIpLCBKZSkgOiBTKG4pID8gbiA6ICExID09PSBuIHx8IHQuaW5saW5lID8gW10gOiBbImRlZmF1bHQiXSkpLCBjeShlLCBEcyhlKSkpOwogIH0KCiAgZnVuY3Rpb24gSHYoKSB7CiAgICBmdW5jdGlvbiBuKGUsIHQpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBzdGF0dXM6IGUsCiAgICAgICAgcmVzdWx0VXJpOiB0CiAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gdChlKSB7CiAgICAgIHJldHVybiBlIGluIHI7CiAgICB9CgogICAgdmFyIHIgPSB7fTsKICAgIHJldHVybiB7CiAgICAgIGhhc0Jsb2JVcmk6IHQsCiAgICAgIGdldFJlc3VsdFVyaTogZnVuY3Rpb24gZ2V0UmVzdWx0VXJpKGUpIHsKICAgICAgICB2YXIgdCA9IHJbZV07CiAgICAgICAgcmV0dXJuIHQgPyB0LnJlc3VsdFVyaSA6IG51bGw7CiAgICAgIH0sCiAgICAgIGlzUGVuZGluZzogZnVuY3Rpb24gaXNQZW5kaW5nKGUpIHsKICAgICAgICByZXR1cm4gISF0KGUpICYmIDEgPT09IHJbZV0uc3RhdHVzOwogICAgICB9LAogICAgICBpc1VwbG9hZGVkOiBmdW5jdGlvbiBpc1VwbG9hZGVkKGUpIHsKICAgICAgICByZXR1cm4gISF0KGUpICYmIDIgPT09IHJbZV0uc3RhdHVzOwogICAgICB9LAogICAgICBtYXJrUGVuZGluZzogZnVuY3Rpb24gbWFya1BlbmRpbmcoZSkgewogICAgICAgIHJbZV0gPSBuKDEsIG51bGwpOwogICAgICB9LAogICAgICBtYXJrVXBsb2FkZWQ6IGZ1bmN0aW9uIG1hcmtVcGxvYWRlZChlLCB0KSB7CiAgICAgICAgcltlXSA9IG4oMiwgdCk7CiAgICAgIH0sCiAgICAgIHJlbW92ZUZhaWxlZDogZnVuY3Rpb24gcmVtb3ZlRmFpbGVkKGUpIHsKICAgICAgICBkZWxldGUgcltlXTsKICAgICAgfSwKICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgICByID0ge307CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBqdihlKSB7CiAgICByZXR1cm4gZSArIGx5KysgKyAoInMiICsgbmV3IERhdGUoKS5nZXRUaW1lKCkudG9TdHJpbmcoMzYpICsgdCgpICsgdCgpICsgdCgpKTsKCiAgICBmdW5jdGlvbiB0KCkgewogICAgICByZXR1cm4gTWF0aC5yb3VuZCg0Mjk0OTY3Mjk1ICogTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMzYpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gVnYoKSB7CiAgICBmdW5jdGlvbiBlKGUpIHsKICAgICAgcmV0dXJuIE0obiwgZSkuZ2V0T3JVbmRlZmluZWQoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpKGUpIHsKICAgICAgaWYgKCFlLmJsb2IgfHwgIWUuYmFzZTY0KSB0aHJvdyBuZXcgRXJyb3IoImJsb2IgYW5kIGJhc2U2NCByZXByZXNlbnRhdGlvbnMgb2YgdGhlIGltYWdlIGFyZSByZXF1aXJlZCBmb3IgQmxvYkluZm8gdG8gYmUgY3JlYXRlZCIpOwogICAgICB2YXIgdCA9IGUuaWQgfHwganYoImJsb2JpZCIpLAogICAgICAgICAgbiA9IGUubmFtZSB8fCB0LAogICAgICAgICAgciA9IGUuYmxvYjsKICAgICAgcmV0dXJuIHsKICAgICAgICBpZDogSih0KSwKICAgICAgICBuYW1lOiBKKG4pLAogICAgICAgIGZpbGVuYW1lOiBKKGUuZmlsZW5hbWUgfHwgbiArICIuIiArICh7CiAgICAgICAgICAiaW1hZ2UvanBlZyI6ICJqcGciLAogICAgICAgICAgImltYWdlL2pwZyI6ICJqcGciLAogICAgICAgICAgImltYWdlL2dpZiI6ICJnaWYiLAogICAgICAgICAgImltYWdlL3BuZyI6ICJwbmciLAogICAgICAgICAgImltYWdlL2FwbmciOiAiYXBuZyIsCiAgICAgICAgICAiaW1hZ2UvYXZpZiI6ICJhdmlmIiwKICAgICAgICAgICJpbWFnZS9zdmcreG1sIjogInN2ZyIsCiAgICAgICAgICAiaW1hZ2Uvd2VicCI6ICJ3ZWJwIiwKICAgICAgICAgICJpbWFnZS9ibXAiOiAiYm1wIiwKICAgICAgICAgICJpbWFnZS90aWZmIjogInRpZmYiCiAgICAgICAgfVtyLnR5cGUudG9Mb3dlckNhc2UoKV0gfHwgImRhdCIpKSwKICAgICAgICBibG9iOiBKKHIpLAogICAgICAgIGJhc2U2NDogSihlLmJhc2U2NCksCiAgICAgICAgYmxvYlVyaTogSihlLmJsb2JVcmkgfHwgVVJMLmNyZWF0ZU9iamVjdFVSTChyKSksCiAgICAgICAgdXJpOiBKKGUudXJpKQogICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIHQodCkgewogICAgICByZXR1cm4gZShmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlLmlkKCkgPT09IHQ7CiAgICAgIH0pOwogICAgfQoKICAgIHZhciBuID0gW107CiAgICByZXR1cm4gewogICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShlLCB0LCBuLCByLCBvKSB7CiAgICAgICAgaWYgKFgoZSkpIHJldHVybiBpKHsKICAgICAgICAgIGlkOiBlLAogICAgICAgICAgbmFtZTogciwKICAgICAgICAgIGZpbGVuYW1lOiBvLAogICAgICAgICAgYmxvYjogdCwKICAgICAgICAgIGJhc2U2NDogbgogICAgICAgIH0pOwogICAgICAgIGlmIChoKGUpKSByZXR1cm4gaShlKTsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVua25vd24gaW5wdXQgdHlwZSIpOwogICAgICB9LAogICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChlKSB7CiAgICAgICAgdChlLmlkKCkpIHx8IG4ucHVzaChlKTsKICAgICAgfSwKICAgICAgZ2V0OiB0LAogICAgICBnZXRCeVVyaTogZnVuY3Rpb24gZ2V0QnlVcmkodCkgewogICAgICAgIHJldHVybiBlKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gZS5ibG9iVXJpKCkgPT09IHQ7CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGdldEJ5RGF0YTogZnVuY3Rpb24gZ2V0QnlEYXRhKHQsIG4pIHsKICAgICAgICByZXR1cm4gZShmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIGUuYmFzZTY0KCkgPT09IHQgJiYgZS5ibG9iKCkudHlwZSA9PT0gbjsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgZmluZEZpcnN0OiBlLAogICAgICByZW1vdmVCeVVyaTogZnVuY3Rpb24gcmVtb3ZlQnlVcmkodCkgewogICAgICAgIG4gPSBVKG4sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gZS5ibG9iVXJpKCkgIT09IHQgfHwgdm9pZCBVUkwucmV2b2tlT2JqZWN0VVJMKGUuYmxvYlVyaSgpKTsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgICBZKG4sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGUuYmxvYlVyaSgpKTsKICAgICAgICB9KSwgbiA9IFtdOwogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gcXYodSwgcykgewogICAgZnVuY3Rpb24gbyhlLCByLCBvLCB0KSB7CiAgICAgIHZhciBpID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgIGkub3BlbigiUE9TVCIsIHMudXJsKSwgaS53aXRoQ3JlZGVudGlhbHMgPSBzLmNyZWRlbnRpYWxzLCBpLnVwbG9hZC5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICB0KGUubG9hZGVkIC8gZS50b3RhbCAqIDEwMCk7CiAgICAgIH0sIGkub25lcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBvKCJJbWFnZSB1cGxvYWQgZmFpbGVkIGR1ZSB0byBhIFhIUiBUcmFuc3BvcnQgZXJyb3IuIENvZGU6ICIgKyBpLnN0YXR1cyk7CiAgICAgIH0sIGkub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBlLCB0LCBuOwogICAgICAgIGkuc3RhdHVzIDwgMjAwIHx8IDMwMCA8PSBpLnN0YXR1cyA/IG8oIkhUVFAgRXJyb3I6ICIgKyBpLnN0YXR1cykgOiAoZSA9IEpTT04ucGFyc2UoaS5yZXNwb25zZVRleHQpKSAmJiAic3RyaW5nIiA9PSB0eXBlb2YgZS5sb2NhdGlvbiA/IHIoKHQgPSBzLmJhc2VQYXRoLCBuID0gZS5sb2NhdGlvbiwgdCA/IHQucmVwbGFjZSgvXC8kLywgIiIpICsgIi8iICsgbi5yZXBsYWNlKC9eXC8vLCAiIikgOiBuKSkgOiBvKCJJbnZhbGlkIEpTT046ICIgKyBpLnJlc3BvbnNlVGV4dCk7CiAgICAgIH07CiAgICAgIHZhciBuID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgIG4uYXBwZW5kKCJmaWxlIiwgZS5ibG9iKCksIGUuZmlsZW5hbWUoKSksIGkuc2VuZChuKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjKGUsIHQpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB1cmw6IHQsCiAgICAgICAgYmxvYkluZm86IGUsCiAgICAgICAgc3RhdHVzOiAhMAogICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIGwoZSwgdCwgbikgewogICAgICByZXR1cm4gewogICAgICAgIHVybDogIiIsCiAgICAgICAgYmxvYkluZm86IGUsCiAgICAgICAgc3RhdHVzOiAhMSwKICAgICAgICBlcnJvcjogewogICAgICAgICAgbWVzc2FnZTogdCwKICAgICAgICAgIG9wdGlvbnM6IG4KICAgICAgICB9CiAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gZihlLCB0KSB7CiAgICAgIEV0LmVhY2goZFtlXSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICBlKHQpOwogICAgICB9KSwgZGVsZXRlIGRbZV07CiAgICB9CgogICAgdmFyIGQgPSB7fTsKICAgIHJldHVybiAhMSA9PT0geShzLmhhbmRsZXIpICYmIChzLmhhbmRsZXIgPSBvKSwgewogICAgICB1cGxvYWQ6IGZ1bmN0aW9uIHVwbG9hZChlLCB0KSB7CiAgICAgICAgcmV0dXJuIHMudXJsIHx8IHMuaGFuZGxlciAhPT0gbyA/IChuID0gZSwgciA9IHQsIG4gPSBFdC5ncmVwKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gIXUuaXNVcGxvYWRlZChlLmJsb2JVcmkoKSk7CiAgICAgICAgfSksIGtyLmFsbChFdC5tYXAobiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiB1LmlzUGVuZGluZyhlLmJsb2JVcmkoKSkgPyAobiA9IGUuYmxvYlVyaSgpLCBuZXcga3IoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZFtuXSA9IGRbbl0gfHwgW10sIGRbbl0ucHVzaChlKTsKICAgICAgICAgIH0pKSA6IChpID0gZSwgdCA9IHMuaGFuZGxlciwgYSA9IHIsIHUubWFya1BlbmRpbmcoaS5ibG9iVXJpKCkpLCBuZXcga3IoZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgdmFyIG47CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHZhciBvID0gZnVuY3Rpb24gbygpIHsKICAgICAgICAgICAgICAgIG4gJiYgbi5jbG9zZSgpOwogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIHQoaSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIG8oKSwgdS5tYXJrVXBsb2FkZWQoaS5ibG9iVXJpKCksIGUpLCBmKGkuYmxvYlVyaSgpLCBjKGksIGUpKSwgcihjKGksIGUpKTsKICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgICAgdmFyIG4gPSB0IHx8IHt9OwogICAgICAgICAgICAgICAgbygpLCB1LnJlbW92ZUZhaWxlZChpLmJsb2JVcmkoKSksIGYoaS5ibG9iVXJpKCksIGwoaSwgZSwgbikpLCByKGwoaSwgZSwgbikpOwogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgICB0IDwgMCB8fCAxMDAgPCB0IHx8IHZlLmZyb20obikub3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB2ZS5mcm9tKGEpLm1hcChDKTsKICAgICAgICAgICAgICAgIH0pLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgKG4gPSBlKS5wcm9ncmVzc0Jhci52YWx1ZSh0KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgcihsKGksIGUubWVzc2FnZSwge30pKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkpOwogICAgICAgICAgdmFyIGksIHQsIGEsIG47CiAgICAgICAgfSkpKSA6IG5ldyBrcihmdW5jdGlvbiAoZSkgewogICAgICAgICAgZShbXSk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIG4sIHI7CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiAkdihlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gZS5ub3RpZmljYXRpb25NYW5hZ2VyLm9wZW4oewogICAgICAgIHRleHQ6IGUudHJhbnNsYXRlKCJJbWFnZSB1cGxvYWRpbmcuLi4iKSwKICAgICAgICB0eXBlOiAiaW5mbyIsCiAgICAgICAgdGltZW91dDogLTEsCiAgICAgICAgcHJvZ3Jlc3NCYXI6ICEwCiAgICAgIH0pOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIFd2KGUsIHQpIHsKICAgIHJldHVybiBxdih0LCB7CiAgICAgIHVybDogZS5nZXRQYXJhbSgiaW1hZ2VzX3VwbG9hZF91cmwiLCAiIiwgInN0cmluZyIpLAogICAgICBiYXNlUGF0aDogZS5nZXRQYXJhbSgiaW1hZ2VzX3VwbG9hZF9iYXNlX3BhdGgiLCAiIiwgInN0cmluZyIpLAogICAgICBjcmVkZW50aWFsczogZS5nZXRQYXJhbSgiaW1hZ2VzX3VwbG9hZF9jcmVkZW50aWFscyIsICExLCAiYm9vbGVhbiIpLAogICAgICBoYW5kbGVyOiBlLmdldFBhcmFtKCJpbWFnZXNfdXBsb2FkX2hhbmRsZXIiLCBudWxsLCAiZnVuY3Rpb24iKQogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBLdihsKSB7CiAgICBmdW5jdGlvbiB0KHQpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGwuc2VsZWN0aW9uID8gdChlKSA6IFtdOwogICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIHIoZSwgdCwgbikgewogICAgICBmb3IgKHZhciByID0gMDsgLTEgIT09IChyID0gZS5pbmRleE9mKHQsIHIpKSAmJiAoZSA9IGUuc3Vic3RyaW5nKDAsIHIpICsgbiArIGUuc3Vic3RyKHIgKyB0Lmxlbmd0aCksIHIgKz0gbi5sZW5ndGggLSB0Lmxlbmd0aCArIDEpLCAtMSAhPT0gcjspIHsKICAgICAgICA7CiAgICAgIH0KCiAgICAgIHJldHVybiBlOwogICAgfQoKICAgIGZ1bmN0aW9uIG8oZSwgdCwgbikgewogICAgICByZXR1cm4gZSA9IHIoZSwgJ3NyYz0iJyArIHQgKyAnIicsICdzcmM9IicgKyBuICsgJyInICsgKG4gPT09IHh0LnRyYW5zcGFyZW50U3JjID8gJyBkYXRhLW1jZS1wbGFjZWhvbGRlcj0iMSInIDogIiIpKSwgcihlLCAnZGF0YS1tY2Utc3JjPSInICsgdCArICciJywgJ2RhdGEtbWNlLXNyYz0iJyArIG4gKyAnIicpOwogICAgfQoKICAgIGZ1bmN0aW9uIGYodCwgbikgewogICAgICBZKGwudW5kb01hbmFnZXIuZGF0YSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAiZnJhZ21lbnRlZCIgPT09IGUudHlwZSA/IGUuZnJhZ21lbnRzID0gVChlLmZyYWdtZW50cywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBvKGUsIHQsIG4pOwogICAgICAgIH0pIDogZS5jb250ZW50ID0gbyhlLmNvbnRlbnQsIHQsIG4pOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBuKG4pIHsKICAgICAgcmV0dXJuIHUgPSB1IHx8IFd2KGwsIGcpLCB2KCkudGhlbih0KGZ1bmN0aW9uIChjKSB7CiAgICAgICAgdmFyIGUgPSBUKGMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gZS5ibG9iSW5mbzsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gdS51cGxvYWQoZSwgJHYobCkpLnRoZW4odChmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHMgPSBbXSwKICAgICAgICAgICAgICB0ID0gVChlLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICB2YXIgbiwKICAgICAgICAgICAgICAgIHIsCiAgICAgICAgICAgICAgICBvLAogICAgICAgICAgICAgICAgaSwKICAgICAgICAgICAgICAgIGEgPSBjW3RdLmJsb2JJbmZvLAogICAgICAgICAgICAgICAgdSA9IGNbdF0uaW1hZ2U7CiAgICAgICAgICAgIHJldHVybiBlLnN0YXR1cyAmJiBsLmdldFBhcmFtKCJpbWFnZXNfcmVwbGFjZV9ibG9iX3VyaXMiLCAhMCwgImJvb2xlYW4iKSA/IChtLnJlbW92ZUJ5VXJpKHUuc3JjKSwgbWgobCkgfHwgKHIgPSB1LCBvID0gZS51cmwsIGkgPSBsLmNvbnZlcnRVUkwobywgInNyYyIpLCBmKHIuc3JjLCBvKSwgbC4kKHIpLmF0dHIoewogICAgICAgICAgICAgIHNyYzogbC5nZXRQYXJhbSgiaW1hZ2VzX3JldXNlX2ZpbGVuYW1lIiwgITEsICJib29sZWFuIikgPyBvICsgKC0xID09PSBvLmluZGV4T2YoIj8iKSA/ICI/IiA6ICImIikgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSA6IG8sCiAgICAgICAgICAgICAgImRhdGEtbWNlLXNyYyI6IGkKICAgICAgICAgICAgfSkpKSA6IGUuZXJyb3IgJiYgKGUuZXJyb3Iub3B0aW9ucy5yZW1vdmUgJiYgKGYodS5nZXRBdHRyaWJ1dGUoInNyYyIpLCB4dC50cmFuc3BhcmVudFNyYyksIHMucHVzaCh1KSksIG4gPSBlLmVycm9yLm1lc3NhZ2UsIEl2KGwsIHV1LnRyYW5zbGF0ZShbIkZhaWxlZCB0byB1cGxvYWQgaW1hZ2U6IHswfSIsIG5dKSkpLCB7CiAgICAgICAgICAgICAgZWxlbWVudDogdSwKICAgICAgICAgICAgICBzdGF0dXM6IGUuc3RhdHVzLAogICAgICAgICAgICAgIHVwbG9hZFVyaTogZS51cmwsCiAgICAgICAgICAgICAgYmxvYkluZm86IGEKICAgICAgICAgICAgfTsKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIDAgPCB0Lmxlbmd0aCAmJiBoLmZpcmVJZkNoYW5nZWQoKSwgMCA8IHMubGVuZ3RoICYmIChtaChsKSA/IGNvbnNvbGUuZXJyb3IoIlJlbW92aW5nIGltYWdlcyBvbiBmYWlsZWQgdXBsb2FkcyBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQgZm9yIFJUQyIpIDogbC51bmRvTWFuYWdlci50cmFuc2FjdChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIFkocywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBsLmRvbS5yZW1vdmUoZSksIG0ucmVtb3ZlQnlVcmkoZS5zcmMpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pKSwgbiAmJiBuKHQpLCB0OwogICAgICAgIH0pKTsKICAgICAgfSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGUoZSkgewogICAgICBpZiAoTnMobCkpIHJldHVybiBuKGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGkodCkgewogICAgICByZXR1cm4gITEgIT09IGoocCwgZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gZSh0KTsKICAgICAgfSkgJiYgKDAgIT09IHQuZ2V0QXR0cmlidXRlKCJzcmMiKS5pbmRleE9mKCJkYXRhOiIpIHx8IGwuZ2V0UGFyYW0oImltYWdlc19kYXRhaW1nX2ZpbHRlciIsIHcsICJmdW5jdGlvbiIpKHQpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhKGUpIHsKICAgICAgcmV0dXJuIGUucmVwbGFjZSgvc3JjPSIoYmxvYjpbXiJdKykiL2csIGZ1bmN0aW9uIChlLCBuKSB7CiAgICAgICAgdmFyIHQgPSBnLmdldFJlc3VsdFVyaShuKTsKICAgICAgICBpZiAodCkgcmV0dXJuICdzcmM9IicgKyB0ICsgJyInOwogICAgICAgIHZhciByID0gKHIgPSBtLmdldEJ5VXJpKG4pKSB8fCBMKGwuZWRpdG9yTWFuYWdlci5nZXQoKSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgIHJldHVybiBlIHx8IHQuZWRpdG9yVXBsb2FkICYmIHQuZWRpdG9yVXBsb2FkLmJsb2JDYWNoZS5nZXRCeVVyaShuKTsKICAgICAgICB9LCBudWxsKTsKICAgICAgICByZXR1cm4gciA/ICdzcmM9ImRhdGE6JyArIHIuYmxvYigpLnR5cGUgKyAiO2Jhc2U2NCwiICsgci5iYXNlNjQoKSArICciJyA6IGU7CiAgICAgIH0pOwogICAgfQoKICAgIHZhciB1LAogICAgICAgIHMsCiAgICAgICAgYywKICAgICAgICBkLAogICAgICAgIG0gPSBWdigpLAogICAgICAgIGcgPSBIdigpLAogICAgICAgIHAgPSBbXSwKICAgICAgICBoID0gKGQgPSBydShudWxsKSwgKGMgPSBsKS5vbigiY2hhbmdlIEFkZFVuZG8iLCBmdW5jdGlvbiAoZSkgewogICAgICBkLnNldChfZTIoe30sIGUubGV2ZWwpKTsKICAgIH0pLCB7CiAgICAgIGZpcmVJZkNoYW5nZWQ6IGZ1bmN0aW9uIGZpcmVJZkNoYW5nZWQoKSB7CiAgICAgICAgdmFyIHQgPSBjLnVuZG9NYW5hZ2VyLmRhdGE7CiAgICAgICAgWih0KS5maWx0ZXIoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiAhc2goZC5nZXQoKSwgZSk7CiAgICAgICAgfSkuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgYy5zZXREaXJ0eSghMCksIGMuZmlyZSgiY2hhbmdlIiwgewogICAgICAgICAgICBsZXZlbDogZSwKICAgICAgICAgICAgbGFzdExldmVsOiBHKHQsIHQubGVuZ3RoIC0gMikuZ2V0T3JOdWxsKCkKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9KSwKICAgICAgICB2ID0gZnVuY3Rpb24gdigpIHsKICAgICAgcmV0dXJuIChzID0gcyB8fCBIaChnLCBtKSkuZmluZEFsbChsLmdldEJvZHkoKSwgaSkudGhlbih0KGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGUgPSBVKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gInN0cmluZyIgIT0gdHlwZW9mIGUgfHwgdm9pZCBJdihsLCBlKTsKICAgICAgICB9KSwgbWgobCkgfHwgWShlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgZihlLmltYWdlLnNyYywgZS5ibG9iSW5mby5ibG9iVXJpKCkpLCBlLmltYWdlLnNyYyA9IGUuYmxvYkluZm8uYmxvYlVyaSgpLCBlLmltYWdlLnJlbW92ZUF0dHJpYnV0ZSgiZGF0YS1tY2Utc3JjIik7CiAgICAgICAgfSksIGU7CiAgICAgIH0pKTsKICAgIH07CgogICAgcmV0dXJuIGwub24oIlNldENvbnRlbnQiLCBmdW5jdGlvbiAoKSB7CiAgICAgIChOcyhsKSA/IGUgOiB2KSgpOwogICAgfSksIGwub24oIlJhd1NhdmVDb250ZW50IiwgZnVuY3Rpb24gKGUpIHsKICAgICAgZS5jb250ZW50ID0gYShlLmNvbnRlbnQpOwogICAgfSksIGwub24oIkdldENvbnRlbnQiLCBmdW5jdGlvbiAoZSkgewogICAgICBlLnNvdXJjZV92aWV3IHx8ICJyYXciID09PSBlLmZvcm1hdCB8fCAidHJlZSIgPT09IGUuZm9ybWF0IHx8IChlLmNvbnRlbnQgPSBhKGUuY29udGVudCkpOwogICAgfSksIGwub24oIlBvc3RSZW5kZXIiLCBmdW5jdGlvbiAoKSB7CiAgICAgIGwucGFyc2VyLmFkZE5vZGVGaWx0ZXIoImltZyIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgWShlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQsCiAgICAgICAgICAgICAgbiA9IGUuYXR0cigic3JjIik7CiAgICAgICAgICBtLmdldEJ5VXJpKG4pIHx8ICh0ID0gZy5nZXRSZXN1bHRVcmkobikpICYmIGUuYXR0cigic3JjIiwgdCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSksIHsKICAgICAgYmxvYkNhY2hlOiBtLAogICAgICBhZGRGaWx0ZXI6IGZ1bmN0aW9uIGFkZEZpbHRlcihlKSB7CiAgICAgICAgcC5wdXNoKGUpOwogICAgICB9LAogICAgICB1cGxvYWRJbWFnZXM6IG4sCiAgICAgIHVwbG9hZEltYWdlc0F1dG86IGUsCiAgICAgIHNjYW5Gb3JJbWFnZXM6IHYsCiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgICAgbS5kZXN0cm95KCksIGcuZGVzdHJveSgpLCBzID0gdSA9IG51bGw7CiAgICAgIH0KICAgIH07CiAgfQoKICBmdW5jdGlvbiBYdihlLCB0KSB7CiAgICBmdW5jdGlvbiBtKGUpIHsKICAgICAgbyA9ICJzdHJpbmciID09IHR5cGVvZiBlID8gewogICAgICAgIG5hbWU6IGUsCiAgICAgICAgY2xhc3NlczogW10sCiAgICAgICAgYXR0cnM6IHt9CiAgICAgIH0gOiBlOwogICAgICB2YXIgdCwKICAgICAgICAgIG4gPSBkeS5jcmVhdGUoby5uYW1lKSwKICAgICAgICAgIHIgPSBuOwogICAgICByZXR1cm4gKHQgPSBvKS5jbGFzc2VzLmxlbmd0aCAmJiBkeS5hZGRDbGFzcyhyLCB0LmNsYXNzZXMuam9pbigiICIpKSwgZHkuc2V0QXR0cmlicyhyLCB0LmF0dHJzKSwgbjsKICAgIH0KCiAgICB2YXIgbiwKICAgICAgICBvLAogICAgICAgIHIsCiAgICAgICAgZyA9IHQgJiYgdC5zY2hlbWEgfHwgdG8oe30pLAogICAgICAgIHAgPSBmdW5jdGlvbiBwKG4sIGUsIHQpIHsKICAgICAgdmFyIHIsCiAgICAgICAgICBvLAogICAgICAgICAgaSwKICAgICAgICAgIGEsCiAgICAgICAgICB1LAogICAgICAgICAgcywKICAgICAgICAgIGMsCiAgICAgICAgICBsID0gMCA8IGUubGVuZ3RoICYmIGVbMF0sCiAgICAgICAgICBmID0gbCAmJiBsLm5hbWUsCiAgICAgICAgICBkID0gKGEgPSBmLCB1ID0gInN0cmluZyIgIT0gdHlwZW9mIChpID0gbikgPyBpLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgOiBpLCAhKCEoYyA9IChzID0gZy5nZXRFbGVtZW50UnVsZSh1KSkgJiYgcy5wYXJlbnRzUmVxdWlyZWQpIHx8ICFjLmxlbmd0aCkgJiYgKGEgJiYgLTEgIT09IEV0LmluQXJyYXkoYywgYSkgPyBhIDogY1swXSkpOwogICAgICBpZiAoZCkgZiA9PT0gZCA/IChvID0gZVswXSwgZSA9IGUuc2xpY2UoMSkpIDogbyA9IGQ7ZWxzZSBpZiAobCkgbyA9IGVbMF0sIGUgPSBlLnNsaWNlKDEpO2Vsc2UgaWYgKCF0KSByZXR1cm4gbjsKICAgICAgcmV0dXJuIG8gJiYgKHIgPSBtKG8pKS5hcHBlbmRDaGlsZChuKSwgdCAmJiAociB8fCAociA9IGR5LmNyZWF0ZSgiZGl2IikpLmFwcGVuZENoaWxkKG4pLCBFdC5lYWNoKHQsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIHQgPSBtKGUpOwogICAgICAgIHIuaW5zZXJ0QmVmb3JlKHQsIG4pOwogICAgICB9KSksIHAociwgZSwgbyAmJiBvLnNpYmxpbmdzKTsKICAgIH07CgogICAgcmV0dXJuIGUgJiYgZS5sZW5ndGggPyAobiA9IG0obyA9IGVbMF0pLCAociA9IGR5LmNyZWF0ZSgiZGl2IikpLmFwcGVuZENoaWxkKHAobiwgZS5zbGljZSgxKSwgby5zaWJsaW5ncykpLCByKSA6ICIiOwogIH0KCiAgZnVuY3Rpb24gWXYoZSkgewogICAgdmFyIHQsCiAgICAgICAgYSA9IHsKICAgICAgY2xhc3NlczogW10sCiAgICAgIGF0dHJzOiB7fQogICAgfTsKICAgIHJldHVybiAiKiIgIT09IChlID0gYS5zZWxlY3RvciA9IEV0LnRyaW0oZSkpICYmICh0ID0gZS5yZXBsYWNlKC8oPzooWyNcLl18Ojo/KShbXHdcLV0rKXwoXFspKFteXF1dKylcXT8pL2csIGZ1bmN0aW9uIChlLCB0LCBuLCByLCBvKSB7CiAgICAgIHN3aXRjaCAodCkgewogICAgICAgIGNhc2UgIiMiOgogICAgICAgICAgYS5hdHRycy5pZCA9IG47CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAiLiI6CiAgICAgICAgICBhLmNsYXNzZXMucHVzaChuKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICI6IjoKICAgICAgICAgIC0xICE9PSBFdC5pbkFycmF5KCJjaGVja2VkIGRpc2FibGVkIGVuYWJsZWQgcmVhZC1vbmx5IHJlcXVpcmVkIi5zcGxpdCgiICIpLCBuKSAmJiAoYS5hdHRyc1tuXSA9IG4pOwogICAgICB9CgogICAgICB2YXIgaTsKICAgICAgcmV0dXJuICJbIiAhPT0gciB8fCAoaSA9IG8ubWF0Y2goLyhbXHdcLV0rKSg/Olw9XCIoW15cIl0rKSk/LykpICYmIChhLmF0dHJzW2lbMV1dID0gaVsyXSksICIiOwogICAgfSkpLCBhLm5hbWUgPSB0IHx8ICJkaXYiLCBhOwogIH0KCiAgZnVuY3Rpb24gR3YobiwgZSkgewogICAgdmFyIHIsCiAgICAgICAgdCwKICAgICAgICBvID0gIiIsCiAgICAgICAgaSA9ICh0ID0gbi5nZXRQYXJhbSgicHJldmlld19zdHlsZXMiLCAiZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtd2VpZ2h0IGZvbnQtc3R5bGUgdGV4dC1kZWNvcmF0aW9uIHRleHQtdHJhbnNmb3JtIGNvbG9yIGJhY2tncm91bmQtY29sb3IgYm9yZGVyIGJvcmRlci1yYWRpdXMgb3V0bGluZSB0ZXh0LXNoYWRvdyIpLCBYKHQpID8gdCA6ICIiKTsKICAgIGlmICgiIiA9PT0gaSkgcmV0dXJuICIiOwoKICAgIGZ1bmN0aW9uIGEoZSkgewogICAgICByZXR1cm4gZS5yZXBsYWNlKC8lKFx3KykvZywgIiIpOwogICAgfQoKICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgZSkgewogICAgICBpZiAoIShlID0gbi5mb3JtYXR0ZXIuZ2V0KGUpKSkgcmV0dXJuOwogICAgICBlID0gZVswXTsKICAgIH0KCiAgICBpZiAoInByZXZpZXciIGluIGUpIHsKICAgICAgdmFyIHUgPSB1ZShlLCAicHJldmlldyIpOwogICAgICBpZiAoZm4odSwgITEpKSByZXR1cm4gIiI7CiAgICAgIGkgPSB1LmdldE9yKGkpOwogICAgfQoKICAgIHZhciBzLAogICAgICAgIGMgPSBlLmJsb2NrIHx8IGUuaW5saW5lIHx8ICJzcGFuIiwKICAgICAgICBsID0gKHMgPSBlLnNlbGVjdG9yKSAmJiAic3RyaW5nIiA9PSB0eXBlb2YgcyA/IChzID0gKHMgPSBzLnNwbGl0KC9ccyosXHMqLylbMF0pLnJlcGxhY2UoL1xzKih+XCt8fnxcK3w+KVxzKi9nLCAiJDEiKSwgRXQubWFwKHMuc3BsaXQoLyg/Oj58XHMrKD8hW15cW1xdXStcXSkpLyksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gRXQubWFwKGUuc3BsaXQoLyg/On5cK3x+fFwrKS8pLCBZdiksCiAgICAgICAgICBuID0gdC5wb3AoKTsKICAgICAgcmV0dXJuIHQubGVuZ3RoICYmIChuLnNpYmxpbmdzID0gdCksIG47CiAgICB9KS5yZXZlcnNlKCkpIDogW10sCiAgICAgICAgZiA9IGwubGVuZ3RoID8gKGxbMF0ubmFtZSB8fCAobFswXS5uYW1lID0gYyksIGMgPSBlLnNlbGVjdG9yLCBYdihsLCBuKSkgOiBYdihbY10sIG4pLAogICAgICAgIGQgPSBkeS5zZWxlY3QoYywgZilbMF0gfHwgZi5maXJzdENoaWxkOwogICAgcmV0dXJuIGZ5KGUuc3R5bGVzLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiA9IGEoZSk7CiAgICAgIG4gJiYgZHkuc2V0U3R5bGUoZCwgdCwgbik7CiAgICB9KSwgZnkoZS5hdHRyaWJ1dGVzLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiA9IGEoZSk7CiAgICAgIG4gJiYgZHkuc2V0QXR0cmliKGQsIHQsIG4pOwogICAgfSksIGZ5KGUuY2xhc3NlcywgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBhKGUpOwogICAgICBkeS5oYXNDbGFzcyhkLCB0KSB8fCBkeS5hZGRDbGFzcyhkLCB0KTsKICAgIH0pLCBuLmZpcmUoIlByZXZpZXdGb3JtYXRzIiksIGR5LnNldFN0eWxlcyhmLCB7CiAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICBsZWZ0OiAtNjU1MzUKICAgIH0pLCBuLmdldEJvZHkoKS5hcHBlbmRDaGlsZChmKSwgciA9IGR5LmdldFN0eWxlKG4uZ2V0Qm9keSgpLCAiZm9udFNpemUiLCAhMCksIHIgPSAvcHgkLy50ZXN0KHIpID8gcGFyc2VJbnQociwgMTApIDogMCwgZnkoaS5zcGxpdCgiICIpLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCA9IGR5LmdldFN0eWxlKGQsIGUsICEwKTsKCiAgICAgIGlmICghKCJiYWNrZ3JvdW5kLWNvbG9yIiA9PT0gZSAmJiAvdHJhbnNwYXJlbnR8cmdiYVxzKlwoW14pXSssXHMqMFwpLy50ZXN0KHQpICYmICh0ID0gZHkuZ2V0U3R5bGUobi5nZXRCb2R5KCksIGUsICEwKSwgIiNmZmZmZmYiID09PSBkeS50b0hleCh0KS50b0xvd2VyQ2FzZSgpKSB8fCAiY29sb3IiID09PSBlICYmICIjMDAwMDAwIiA9PT0gZHkudG9IZXgodCkudG9Mb3dlckNhc2UoKSkpIHsKICAgICAgICBpZiAoImZvbnQtc2l6ZSIgPT09IGUgJiYgL2VtfCUkLy50ZXN0KHQpKSB7CiAgICAgICAgICBpZiAoMCA9PT0gcikgcmV0dXJuOwogICAgICAgICAgdCA9IHBhcnNlRmxvYXQodCkgLyAoLyUkLy50ZXN0KHQpID8gMTAwIDogMSkgKiByICsgInB4IjsKICAgICAgICB9CgogICAgICAgICJib3JkZXIiID09PSBlICYmIHQgJiYgKG8gKz0gInBhZGRpbmc6MCAycHg7IiksIG8gKz0gZSArICI6IiArIHQgKyAiOyI7CiAgICAgIH0KICAgIH0pLCBuLmZpcmUoIkFmdGVyUHJldmlld0Zvcm1hdHMiKSwgZHkucmVtb3ZlKGYpLCBvOwogIH0KCiAgZnVuY3Rpb24gSnYoYykgewogICAgdmFyIGUsCiAgICAgICAgciwKICAgICAgICB0LAogICAgICAgIG4sCiAgICAgICAgX28yLAogICAgICAgIGksCiAgICAgICAgYSA9IChuID0ge30sIChfbzIgPSBmdW5jdGlvbiBvKGUsIHQpIHsKICAgICAgZSAmJiAoWChlKSA/IChZKHQgPSAhUyh0KSA/IFt0XSA6IHQsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgYihlLmRlZXApICYmIChlLmRlZXAgPSAhZmwoZSkpLCBiKGUuc3BsaXQpICYmIChlLnNwbGl0ID0gIWZsKGUpIHx8IGRsKGUpKSwgYihlLnJlbW92ZSkgJiYgZmwoZSkgJiYgIWRsKGUpICYmIChlLnJlbW92ZSA9ICJub25lIiksIGZsKGUpICYmIGRsKGUpICYmIChlLm1peGVkID0gITAsIGUuYmxvY2tfZXhwYW5kID0gITApLCBYKGUuY2xhc3NlcykgJiYgKGUuY2xhc3NlcyA9IGUuY2xhc3Nlcy5zcGxpdCgvXHMrLykpOwogICAgICB9KSwgbltlXSA9IHQpIDogbmUoZSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICBfbzIodCwgZSk7CiAgICAgIH0pKTsKICAgIH0pKChyID0gKGUgPSBjKS5kb20sIHQgPSB7CiAgICAgIHZhbGlnbnRvcDogW3sKICAgICAgICBzZWxlY3RvcjogInRkLHRoIiwKICAgICAgICBzdHlsZXM6IHsKICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICJ0b3AiCiAgICAgICAgfQogICAgICB9XSwKICAgICAgdmFsaWdubWlkZGxlOiBbewogICAgICAgIHNlbGVjdG9yOiAidGQsdGgiLAogICAgICAgIHN0eWxlczogewogICAgICAgICAgdmVydGljYWxBbGlnbjogIm1pZGRsZSIKICAgICAgICB9CiAgICAgIH1dLAogICAgICB2YWxpZ25ib3R0b206IFt7CiAgICAgICAgc2VsZWN0b3I6ICJ0ZCx0aCIsCiAgICAgICAgc3R5bGVzOiB7CiAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAiYm90dG9tIgogICAgICAgIH0KICAgICAgfV0sCiAgICAgIGFsaWdubGVmdDogW3sKICAgICAgICBzZWxlY3RvcjogImZpZ3VyZS5pbWFnZSIsCiAgICAgICAgY29sbGFwc2VkOiAhMSwKICAgICAgICBjbGFzc2VzOiAiYWxpZ24tbGVmdCIsCiAgICAgICAgY2VGYWxzZU92ZXJyaWRlOiAhMCwKICAgICAgICBwcmV2aWV3OiAiZm9udC1mYW1pbHkgZm9udC1zaXplIgogICAgICB9LCB7CiAgICAgICAgc2VsZWN0b3I6ICJmaWd1cmUscCxoMSxoMixoMyxoNCxoNSxoNix0ZCx0aCx0cixkaXYsdWwsb2wsbGkiLAogICAgICAgIHN0eWxlczogewogICAgICAgICAgdGV4dEFsaWduOiAibGVmdCIKICAgICAgICB9LAogICAgICAgIGluaGVyaXQ6ICExLAogICAgICAgIHByZXZpZXc6ICExLAogICAgICAgIGRlZmF1bHRCbG9jazogImRpdiIKICAgICAgfSwgewogICAgICAgIHNlbGVjdG9yOiAiaW1nLHRhYmxlLGF1ZGlvLHZpZGVvIiwKICAgICAgICBjb2xsYXBzZWQ6ICExLAogICAgICAgIHN0eWxlczogewogICAgICAgICAgZmxvYXQ6ICJsZWZ0IgogICAgICAgIH0sCiAgICAgICAgcHJldmlldzogImZvbnQtZmFtaWx5IGZvbnQtc2l6ZSIKICAgICAgfV0sCiAgICAgIGFsaWduY2VudGVyOiBbewogICAgICAgIHNlbGVjdG9yOiAiZmlndXJlLHAsaDEsaDIsaDMsaDQsaDUsaDYsdGQsdGgsdHIsZGl2LHVsLG9sLGxpIiwKICAgICAgICBzdHlsZXM6IHsKICAgICAgICAgIHRleHRBbGlnbjogImNlbnRlciIKICAgICAgICB9LAogICAgICAgIGluaGVyaXQ6ICExLAogICAgICAgIHByZXZpZXc6ICJmb250LWZhbWlseSBmb250LXNpemUiLAogICAgICAgIGRlZmF1bHRCbG9jazogImRpdiIKICAgICAgfSwgewogICAgICAgIHNlbGVjdG9yOiAiZmlndXJlLmltYWdlIiwKICAgICAgICBjb2xsYXBzZWQ6ICExLAogICAgICAgIGNsYXNzZXM6ICJhbGlnbi1jZW50ZXIiLAogICAgICAgIGNlRmFsc2VPdmVycmlkZTogITAsCiAgICAgICAgcHJldmlldzogImZvbnQtZmFtaWx5IGZvbnQtc2l6ZSIKICAgICAgfSwgewogICAgICAgIHNlbGVjdG9yOiAiaW1nLGF1ZGlvLHZpZGVvIiwKICAgICAgICBjb2xsYXBzZWQ6ICExLAogICAgICAgIHN0eWxlczogewogICAgICAgICAgZGlzcGxheTogImJsb2NrIiwKICAgICAgICAgIG1hcmdpbkxlZnQ6ICJhdXRvIiwKICAgICAgICAgIG1hcmdpblJpZ2h0OiAiYXV0byIKICAgICAgICB9LAogICAgICAgIHByZXZpZXc6ICExCiAgICAgIH0sIHsKICAgICAgICBzZWxlY3RvcjogInRhYmxlIiwKICAgICAgICBjb2xsYXBzZWQ6ICExLAogICAgICAgIHN0eWxlczogewogICAgICAgICAgbWFyZ2luTGVmdDogImF1dG8iLAogICAgICAgICAgbWFyZ2luUmlnaHQ6ICJhdXRvIgogICAgICAgIH0sCiAgICAgICAgcHJldmlldzogImZvbnQtZmFtaWx5IGZvbnQtc2l6ZSIKICAgICAgfV0sCiAgICAgIGFsaWducmlnaHQ6IFt7CiAgICAgICAgc2VsZWN0b3I6ICJmaWd1cmUuaW1hZ2UiLAogICAgICAgIGNvbGxhcHNlZDogITEsCiAgICAgICAgY2xhc3NlczogImFsaWduLXJpZ2h0IiwKICAgICAgICBjZUZhbHNlT3ZlcnJpZGU6ICEwLAogICAgICAgIHByZXZpZXc6ICJmb250LWZhbWlseSBmb250LXNpemUiCiAgICAgIH0sIHsKICAgICAgICBzZWxlY3RvcjogImZpZ3VyZSxwLGgxLGgyLGgzLGg0LGg1LGg2LHRkLHRoLHRyLGRpdix1bCxvbCxsaSIsCiAgICAgICAgc3R5bGVzOiB7CiAgICAgICAgICB0ZXh0QWxpZ246ICJyaWdodCIKICAgICAgICB9LAogICAgICAgIGluaGVyaXQ6ICExLAogICAgICAgIHByZXZpZXc6ICJmb250LWZhbWlseSBmb250LXNpemUiLAogICAgICAgIGRlZmF1bHRCbG9jazogImRpdiIKICAgICAgfSwgewogICAgICAgIHNlbGVjdG9yOiAiaW1nLHRhYmxlLGF1ZGlvLHZpZGVvIiwKICAgICAgICBjb2xsYXBzZWQ6ICExLAogICAgICAgIHN0eWxlczogewogICAgICAgICAgZmxvYXQ6ICJyaWdodCIKICAgICAgICB9LAogICAgICAgIHByZXZpZXc6ICJmb250LWZhbWlseSBmb250LXNpemUiCiAgICAgIH1dLAogICAgICBhbGlnbmp1c3RpZnk6IFt7CiAgICAgICAgc2VsZWN0b3I6ICJmaWd1cmUscCxoMSxoMixoMyxoNCxoNSxoNix0ZCx0aCx0cixkaXYsdWwsb2wsbGkiLAogICAgICAgIHN0eWxlczogewogICAgICAgICAgdGV4dEFsaWduOiAianVzdGlmeSIKICAgICAgICB9LAogICAgICAgIGluaGVyaXQ6ICExLAogICAgICAgIGRlZmF1bHRCbG9jazogImRpdiIsCiAgICAgICAgcHJldmlldzogImZvbnQtZmFtaWx5IGZvbnQtc2l6ZSIKICAgICAgfV0sCiAgICAgIGJvbGQ6IFt7CiAgICAgICAgaW5saW5lOiAic3Ryb25nIiwKICAgICAgICByZW1vdmU6ICJhbGwiLAogICAgICAgIHByZXNlcnZlX2F0dHJpYnV0ZXM6IFsiY2xhc3MiLCAic3R5bGUiXQogICAgICB9LCB7CiAgICAgICAgaW5saW5lOiAic3BhbiIsCiAgICAgICAgc3R5bGVzOiB7CiAgICAgICAgICBmb250V2VpZ2h0OiAiYm9sZCIKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICBpbmxpbmU6ICJiIiwKICAgICAgICByZW1vdmU6ICJhbGwiLAogICAgICAgIHByZXNlcnZlX2F0dHJpYnV0ZXM6IFsiY2xhc3MiLCAic3R5bGUiXQogICAgICB9XSwKICAgICAgaXRhbGljOiBbewogICAgICAgIGlubGluZTogImVtIiwKICAgICAgICByZW1vdmU6ICJhbGwiLAogICAgICAgIHByZXNlcnZlX2F0dHJpYnV0ZXM6IFsiY2xhc3MiLCAic3R5bGUiXQogICAgICB9LCB7CiAgICAgICAgaW5saW5lOiAic3BhbiIsCiAgICAgICAgc3R5bGVzOiB7CiAgICAgICAgICBmb250U3R5bGU6ICJpdGFsaWMiCiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgaW5saW5lOiAiaSIsCiAgICAgICAgcmVtb3ZlOiAiYWxsIiwKICAgICAgICBwcmVzZXJ2ZV9hdHRyaWJ1dGVzOiBbImNsYXNzIiwgInN0eWxlIl0KICAgICAgfV0sCiAgICAgIHVuZGVybGluZTogW3sKICAgICAgICBpbmxpbmU6ICJzcGFuIiwKICAgICAgICBzdHlsZXM6IHsKICAgICAgICAgIHRleHREZWNvcmF0aW9uOiAidW5kZXJsaW5lIgogICAgICAgIH0sCiAgICAgICAgZXhhY3Q6ICEwCiAgICAgIH0sIHsKICAgICAgICBpbmxpbmU6ICJ1IiwKICAgICAgICByZW1vdmU6ICJhbGwiLAogICAgICAgIHByZXNlcnZlX2F0dHJpYnV0ZXM6IFsiY2xhc3MiLCAic3R5bGUiXQogICAgICB9XSwKICAgICAgc3RyaWtldGhyb3VnaDogW3sKICAgICAgICBpbmxpbmU6ICJzcGFuIiwKICAgICAgICBzdHlsZXM6IHsKICAgICAgICAgIHRleHREZWNvcmF0aW9uOiAibGluZS10aHJvdWdoIgogICAgICAgIH0sCiAgICAgICAgZXhhY3Q6ICEwCiAgICAgIH0sIHsKICAgICAgICBpbmxpbmU6ICJzdHJpa2UiLAogICAgICAgIHJlbW92ZTogImFsbCIsCiAgICAgICAgcHJlc2VydmVfYXR0cmlidXRlczogWyJjbGFzcyIsICJzdHlsZSJdCiAgICAgIH0sIHsKICAgICAgICBpbmxpbmU6ICJzIiwKICAgICAgICByZW1vdmU6ICJhbGwiLAogICAgICAgIHByZXNlcnZlX2F0dHJpYnV0ZXM6IFsiY2xhc3MiLCAic3R5bGUiXQogICAgICB9XSwKICAgICAgZm9yZWNvbG9yOiB7CiAgICAgICAgaW5saW5lOiAic3BhbiIsCiAgICAgICAgc3R5bGVzOiB7CiAgICAgICAgICBjb2xvcjogIiV2YWx1ZSIKICAgICAgICB9LAogICAgICAgIGxpbmtzOiAhMCwKICAgICAgICByZW1vdmVfc2ltaWxhcjogITAsCiAgICAgICAgY2xlYXJfY2hpbGRfc3R5bGVzOiAhMAogICAgICB9LAogICAgICBoaWxpdGVjb2xvcjogewogICAgICAgIGlubGluZTogInNwYW4iLAogICAgICAgIHN0eWxlczogewogICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAiJXZhbHVlIgogICAgICAgIH0sCiAgICAgICAgbGlua3M6ICEwLAogICAgICAgIHJlbW92ZV9zaW1pbGFyOiAhMCwKICAgICAgICBjbGVhcl9jaGlsZF9zdHlsZXM6ICEwCiAgICAgIH0sCiAgICAgIGZvbnRuYW1lOiB7CiAgICAgICAgaW5saW5lOiAic3BhbiIsCiAgICAgICAgdG9nZ2xlOiAhMSwKICAgICAgICBzdHlsZXM6IHsKICAgICAgICAgIGZvbnRGYW1pbHk6ICIldmFsdWUiCiAgICAgICAgfSwKICAgICAgICBjbGVhcl9jaGlsZF9zdHlsZXM6ICEwCiAgICAgIH0sCiAgICAgIGZvbnRzaXplOiB7CiAgICAgICAgaW5saW5lOiAic3BhbiIsCiAgICAgICAgdG9nZ2xlOiAhMSwKICAgICAgICBzdHlsZXM6IHsKICAgICAgICAgIGZvbnRTaXplOiAiJXZhbHVlIgogICAgICAgIH0sCiAgICAgICAgY2xlYXJfY2hpbGRfc3R5bGVzOiAhMAogICAgICB9LAogICAgICBsaW5laGVpZ2h0OiB7CiAgICAgICAgc2VsZWN0b3I6ICJoMSxoMixoMyxoNCxoNSxoNixwLGxpLHRkLHRoLGRpdiIsCiAgICAgICAgZGVmYXVsdEJsb2NrOiAicCIsCiAgICAgICAgc3R5bGVzOiB7CiAgICAgICAgICBsaW5lSGVpZ2h0OiAiJXZhbHVlIgogICAgICAgIH0KICAgICAgfSwKICAgICAgZm9udHNpemVfY2xhc3M6IHsKICAgICAgICBpbmxpbmU6ICJzcGFuIiwKICAgICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgICBjbGFzczogIiV2YWx1ZSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGJsb2NrcXVvdGU6IHsKICAgICAgICBibG9jazogImJsb2NrcXVvdGUiLAogICAgICAgIHdyYXBwZXI6ICEwLAogICAgICAgIHJlbW92ZTogImFsbCIKICAgICAgfSwKICAgICAgc3Vic2NyaXB0OiB7CiAgICAgICAgaW5saW5lOiAic3ViIgogICAgICB9LAogICAgICBzdXBlcnNjcmlwdDogewogICAgICAgIGlubGluZTogInN1cCIKICAgICAgfSwKICAgICAgY29kZTogewogICAgICAgIGlubGluZTogImNvZGUiCiAgICAgIH0sCiAgICAgIGxpbms6IHsKICAgICAgICBpbmxpbmU6ICJhIiwKICAgICAgICBzZWxlY3RvcjogImEiLAogICAgICAgIHJlbW92ZTogImFsbCIsCiAgICAgICAgc3BsaXQ6ICEwLAogICAgICAgIGRlZXA6ICEwLAogICAgICAgIG9ubWF0Y2g6IGZ1bmN0aW9uIG9ubWF0Y2goZSwgdCwgbikgewogICAgICAgICAgcmV0dXJuIHpuKGUpICYmIGUuaGFzQXR0cmlidXRlKCJocmVmIik7CiAgICAgICAgfSwKICAgICAgICBvbmZvcm1hdDogZnVuY3Rpb24gb25mb3JtYXQobiwgZSwgdCkgewogICAgICAgICAgRXQuZWFjaCh0LCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICByLnNldEF0dHJpYihuLCB0LCBlKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbGFuZzogewogICAgICAgIGlubGluZTogInNwYW4iLAogICAgICAgIGNsZWFyX2NoaWxkX3N0eWxlczogITAsCiAgICAgICAgcmVtb3ZlX3NpbWlsYXI6ICEwLAogICAgICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICAgIGxhbmc6ICIldmFsdWUiLAogICAgICAgICAgImRhdGEtbWNlLWxhbmciOiBmdW5jdGlvbiBkYXRhTWNlTGFuZyhlKSB7CiAgICAgICAgICAgIHZhciB0OwogICAgICAgICAgICByZXR1cm4gbnVsbCAhPT0gKHQgPSBudWxsID09IGUgPyB2b2lkIDAgOiBlLmN1c3RvbVZhbHVlKSAmJiB2b2lkIDAgIT09IHQgPyB0IDogbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHJlbW92ZWZvcm1hdDogW3sKICAgICAgICBzZWxlY3RvcjogImIsc3Ryb25nLGVtLGksZm9udCx1LHN0cmlrZSxzLHN1YixzdXAsZGZuLGNvZGUsc2FtcCxrYmQsdmFyLGNpdGUsbWFyayxxLGRlbCxpbnMsc21hbGwiLAogICAgICAgIHJlbW92ZTogImFsbCIsCiAgICAgICAgc3BsaXQ6ICEwLAogICAgICAgIGV4cGFuZDogITEsCiAgICAgICAgYmxvY2tfZXhwYW5kOiAhMCwKICAgICAgICBkZWVwOiAhMAogICAgICB9LCB7CiAgICAgICAgc2VsZWN0b3I6ICJzcGFuIiwKICAgICAgICBhdHRyaWJ1dGVzOiBbInN0eWxlIiwgImNsYXNzIl0sCiAgICAgICAgcmVtb3ZlOiAiZW1wdHkiLAogICAgICAgIHNwbGl0OiAhMCwKICAgICAgICBleHBhbmQ6ICExLAogICAgICAgIGRlZXA6ICEwCiAgICAgIH0sIHsKICAgICAgICBzZWxlY3RvcjogIioiLAogICAgICAgIGF0dHJpYnV0ZXM6IFsic3R5bGUiLCAiY2xhc3MiXSwKICAgICAgICBzcGxpdDogITEsCiAgICAgICAgZXhwYW5kOiAhMSwKICAgICAgICBkZWVwOiAhMAogICAgICB9XQogICAgfSwgRXQuZWFjaCgicCBoMSBoMiBoMyBoNCBoNSBoNiBkaXYgYWRkcmVzcyBwcmUgZHQgZGQgc2FtcCIuc3BsaXQoL1xzLyksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHRbZV0gPSB7CiAgICAgICAgYmxvY2s6IGUsCiAgICAgICAgcmVtb3ZlOiAiYWxsIgogICAgICB9OwogICAgfSksIHQpKSwgX28yKGUuZ2V0UGFyYW0oImZvcm1hdHMiKSksIHsKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoZSkgewogICAgICAgIHJldHVybiBWKGUpID8gbltlXSA6IG47CiAgICAgIH0sCiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGUpIHsKICAgICAgICByZXR1cm4gTmUobiwgZSk7CiAgICAgIH0sCiAgICAgIHJlZ2lzdGVyOiBfbzIsCiAgICAgIHVucmVnaXN0ZXI6IGZ1bmN0aW9uIHVucmVnaXN0ZXIoZSkgewogICAgICAgIHJldHVybiBlICYmIG5bZV0gJiYgZGVsZXRlIG5bZV0sIG47CiAgICAgIH0KICAgIH0pLAogICAgICAgIGwgPSBydShudWxsKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgZS5hZGRTaG9ydGN1dCgibWV0YStiIiwgIiIsICJCb2xkIiksIGUuYWRkU2hvcnRjdXQoIm1ldGEraSIsICIiLCAiSXRhbGljIiksIGUuYWRkU2hvcnRjdXQoIm1ldGErdSIsICIiLCAiVW5kZXJsaW5lIik7CgogICAgICBmb3IgKHZhciB0ID0gMTsgdCA8PSA2OyB0KyspIHsKICAgICAgICBlLmFkZFNob3J0Y3V0KCJhY2Nlc3MrIiArIHQsICIiLCBbIkZvcm1hdEJsb2NrIiwgITEsICJoIiArIHRdKTsKICAgICAgfQoKICAgICAgZS5hZGRTaG9ydGN1dCgiYWNjZXNzKzciLCAiIiwgWyJGb3JtYXRCbG9jayIsICExLCAicCJdKSwgZS5hZGRTaG9ydGN1dCgiYWNjZXNzKzgiLCAiIiwgWyJGb3JtYXRCbG9jayIsICExLCAiZGl2Il0pLCBlLmFkZFNob3J0Y3V0KCJhY2Nlc3MrOSIsICIiLCBbIkZvcm1hdEJsb2NrIiwgITEsICJhZGRyZXNzIl0pOwogICAgfShjKSwgKGkgPSBjKS5vbigibW91c2V1cCBrZXlkb3duIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBpLAogICAgICAgICAgbiA9IGUua2V5Q29kZSwKICAgICAgICAgIHIgPSB0LnNlbGVjdGlvbiwKICAgICAgICAgIG8gPSB0LmdldEJvZHkoKTsKICAgICAgRmcodCwgbnVsbCwgITEpLCA4ICE9PSBuICYmIDQ2ICE9PSBuIHx8ICFyLmlzQ29sbGFwc2VkKCkgfHwgci5nZXRTdGFydCgpLmlubmVySFRNTCAhPT0gdnAgfHwgRmcodCwgSGMobywgci5nZXRTdGFydCgpKSksIDM3ICE9PSBuICYmIDM5ICE9PSBuIHx8IEZnKHQsIEhjKG8sIHIuZ2V0U3RhcnQoKSkpOwogICAgfSksIHsKICAgICAgZ2V0OiBhLmdldCwKICAgICAgaGFzOiBhLmhhcywKICAgICAgcmVnaXN0ZXI6IGEucmVnaXN0ZXIsCiAgICAgIHVucmVnaXN0ZXI6IGEudW5yZWdpc3RlciwKICAgICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KGUsIHQsIG4pIHsKICAgICAgICB2YXIgciA9IGUsCiAgICAgICAgICAgIG8gPSB0LAogICAgICAgICAgICBpID0gbjsKICAgICAgICBoaChjKS5mb3JtYXR0ZXIuYXBwbHkociwgbywgaSk7CiAgICAgIH0sCiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGUsIHQsIG4sIHIpIHsKICAgICAgICB2YXIgbyA9IGUsCiAgICAgICAgICAgIGkgPSB0LAogICAgICAgICAgICBhID0gbiwKICAgICAgICAgICAgdSA9IHI7CiAgICAgICAgaGgoYykuZm9ybWF0dGVyLnJlbW92ZShvLCBpLCBhLCB1KTsKICAgICAgfSwKICAgICAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoZSwgdCwgbikgewogICAgICAgIHZhciByID0gZSwKICAgICAgICAgICAgbyA9IHQsCiAgICAgICAgICAgIGkgPSBuOwogICAgICAgIGhoKGMpLmZvcm1hdHRlci50b2dnbGUociwgbywgaSk7CiAgICAgIH0sCiAgICAgIG1hdGNoOiBmdW5jdGlvbiBtYXRjaChlLCB0LCBuLCByKSB7CiAgICAgICAgcmV0dXJuIG8gPSBlLCBpID0gdCwgYSA9IG4sIHUgPSByLCBoaChjKS5mb3JtYXR0ZXIubWF0Y2gobywgaSwgYSwgdSk7CiAgICAgICAgdmFyIG8sIGksIGEsIHU7CiAgICAgIH0sCiAgICAgIGNsb3Nlc3Q6IGZ1bmN0aW9uIGNsb3Nlc3QoZSkgewogICAgICAgIHJldHVybiB0ID0gZSwgaGgoYykuZm9ybWF0dGVyLmNsb3Nlc3QodCk7CiAgICAgICAgdmFyIHQ7CiAgICAgIH0sCiAgICAgIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChlLCB0KSB7CiAgICAgICAgcmV0dXJuIG4gPSBlLCByID0gdCwgaGgoYykuZm9ybWF0dGVyLm1hdGNoQWxsKG4sIHIpOwogICAgICAgIHZhciBuLCByOwogICAgICB9LAogICAgICBtYXRjaE5vZGU6IGZ1bmN0aW9uIG1hdGNoTm9kZShlLCB0LCBuLCByKSB7CiAgICAgICAgcmV0dXJuIG8gPSBlLCBpID0gdCwgYSA9IG4sIHUgPSByLCBoaChjKS5mb3JtYXR0ZXIubWF0Y2hOb2RlKG8sIGksIGEsIHUpOwogICAgICAgIHZhciBvLCBpLCBhLCB1OwogICAgICB9LAogICAgICBjYW5BcHBseTogZnVuY3Rpb24gY2FuQXBwbHkoZSkgewogICAgICAgIHJldHVybiB0ID0gZSwgaGgoYykuZm9ybWF0dGVyLmNhbkFwcGx5KHQpOwogICAgICAgIHZhciB0OwogICAgICB9LAogICAgICBmb3JtYXRDaGFuZ2VkOiBmdW5jdGlvbiBmb3JtYXRDaGFuZ2VkKGUsIHQsIG4sIHIpIHsKICAgICAgICByZXR1cm4gbyA9IGwsIGkgPSBlLCBhID0gdCwgdSA9IG4sIHMgPSByLCBoaChjKS5mb3JtYXR0ZXIuZm9ybWF0Q2hhbmdlZChvLCBpLCBhLCB1LCBzKTsKICAgICAgICB2YXIgbywgaSwgYSwgdSwgczsKICAgICAgfSwKICAgICAgZ2V0Q3NzVGV4dDogQShHdiwgYykKICAgIH07CiAgfQoKICBmdW5jdGlvbiBRdihlKSB7CiAgICBzd2l0Y2ggKGUudG9Mb3dlckNhc2UoKSkgewogICAgICBjYXNlICJ1bmRvIjoKICAgICAgY2FzZSAicmVkbyI6CiAgICAgIGNhc2UgIm1jZXJlcGFpbnQiOgogICAgICBjYXNlICJtY2Vmb2N1cyI6CiAgICAgICAgcmV0dXJuIDE7CgogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybjsKICAgIH0KICB9CgogIGZ1bmN0aW9uIFp2KHMpIHsKICAgIHZhciBlLAogICAgICAgIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYyA9IGN1KCksCiAgICAgICAgbCA9IHJ1KDApLAogICAgICAgIGYgPSBydSgwKSwKICAgICAgICBkID0gewogICAgICBkYXRhOiBbXSwKICAgICAgdHlwaW5nOiAhMSwKICAgICAgYmVmb3JlQ2hhbmdlOiBmdW5jdGlvbiBiZWZvcmVDaGFuZ2UoKSB7CiAgICAgICAgdmFyIGUgPSBsLAogICAgICAgICAgICB0ID0gYzsKICAgICAgICBoaChzKS51bmRvTWFuYWdlci5iZWZvcmVDaGFuZ2UoZSwgdCk7CiAgICAgIH0sCiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKGUsIHQpIHsKICAgICAgICByZXR1cm4gbiA9IGQsIHIgPSBmLCBvID0gbCwgaSA9IGMsIGEgPSBlLCB1ID0gdCwgaGgocykudW5kb01hbmFnZXIuYWRkKG4sIHIsIG8sIGksIGEsIHUpOwogICAgICAgIHZhciBuLCByLCBvLCBpLCBhLCB1OwogICAgICB9LAogICAgICB1bmRvOiBmdW5jdGlvbiB1bmRvKCkgewogICAgICAgIHJldHVybiBlID0gZCwgdCA9IGwsIG4gPSBmLCBoaChzKS51bmRvTWFuYWdlci51bmRvKGUsIHQsIG4pOwogICAgICAgIHZhciBlLCB0LCBuOwogICAgICB9LAogICAgICByZWRvOiBmdW5jdGlvbiByZWRvKCkgewogICAgICAgIHJldHVybiBlID0gZiwgdCA9IGQuZGF0YSwgaGgocykudW5kb01hbmFnZXIucmVkbyhlLCB0KTsKICAgICAgICB2YXIgZSwgdDsKICAgICAgfSwKICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkgewogICAgICAgIHZhciBlID0gZCwKICAgICAgICAgICAgdCA9IGY7CiAgICAgICAgaGgocykudW5kb01hbmFnZXIuY2xlYXIoZSwgdCk7CiAgICAgIH0sCiAgICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHsKICAgICAgICB2YXIgZSA9IGQ7CiAgICAgICAgaGgocykudW5kb01hbmFnZXIucmVzZXQoZSk7CiAgICAgIH0sCiAgICAgIGhhc1VuZG86IGZ1bmN0aW9uIGhhc1VuZG8oKSB7CiAgICAgICAgcmV0dXJuIGUgPSBkLCB0ID0gZiwgaGgocykudW5kb01hbmFnZXIuaGFzVW5kbyhlLCB0KTsKICAgICAgICB2YXIgZSwgdDsKICAgICAgfSwKICAgICAgaGFzUmVkbzogZnVuY3Rpb24gaGFzUmVkbygpIHsKICAgICAgICByZXR1cm4gZSA9IGQsIHQgPSBmLCBoaChzKS51bmRvTWFuYWdlci5oYXNSZWRvKGUsIHQpOwogICAgICAgIHZhciBlLCB0OwogICAgICB9LAogICAgICB0cmFuc2FjdDogZnVuY3Rpb24gdHJhbnNhY3QoZSkgewogICAgICAgIHJldHVybiB0ID0gZCwgbiA9IGwsIHIgPSBlLCBoaChzKS51bmRvTWFuYWdlci50cmFuc2FjdCh0LCBuLCByKTsKICAgICAgICB2YXIgdCwgbiwgcjsKICAgICAgfSwKICAgICAgaWdub3JlOiBmdW5jdGlvbiBpZ25vcmUoZSkgewogICAgICAgIHZhciB0ID0gbCwKICAgICAgICAgICAgbiA9IGU7CiAgICAgICAgaGgocykudW5kb01hbmFnZXIuaWdub3JlKHQsIG4pOwogICAgICB9LAogICAgICBleHRyYTogZnVuY3Rpb24gZXh0cmEoZSwgdCkgewogICAgICAgIHZhciBuID0gZCwKICAgICAgICAgICAgciA9IGYsCiAgICAgICAgICAgIG8gPSBlLAogICAgICAgICAgICBpID0gdDsKICAgICAgICBoaChzKS51bmRvTWFuYWdlci5leHRyYShuLCByLCBvLCBpKTsKICAgICAgfQogICAgfTsKICAgIHJldHVybiBtaChzKSB8fCAociA9IGQsIG8gPSBsLCBpID0gcnUoITEpLCAobiA9IHMpLm9uKCJpbml0IiwgZnVuY3Rpb24gKCkgewogICAgICByLmFkZCgpOwogICAgfSksIG4ub24oIkJlZm9yZUV4ZWNDb21tYW5kIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgUXYoZS5jb21tYW5kKSB8fCAoZmgociwgbyksIHIuYmVmb3JlQ2hhbmdlKCkpOwogICAgfSksIG4ub24oIkV4ZWNDb21tYW5kIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgUXYoZS5jb21tYW5kKSB8fCBhKGUpOwogICAgfSksIG4ub24oIk9iamVjdFJlc2l6ZVN0YXJ0IGN1dCIsIGZ1bmN0aW9uICgpIHsKICAgICAgci5iZWZvcmVDaGFuZ2UoKTsKICAgIH0pLCBuLm9uKCJTYXZlQ29udGVudCBPYmplY3RSZXNpemVkIGJsdXIiLCBhKSwgbi5vbigiZHJhZ2VuZCIsIGEpLCBuLm9uKCJrZXl1cCIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gZS5rZXlDb2RlOwogICAgICBlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICgoMzMgPD0gdCAmJiB0IDw9IDM2IHx8IDM3IDw9IHQgJiYgdCA8PSA0MCB8fCA0NSA9PT0gdCB8fCBlLmN0cmxLZXkpICYmIChhKCksIG4ubm9kZUNoYW5nZWQoKSksIDQ2ICE9PSB0ICYmIDggIT09IHQgfHwgbi5ub2RlQ2hhbmdlZCgpLCBpLmdldCgpICYmIHIudHlwaW5nICYmICExID09PSBzaChvaChuKSwgci5kYXRhWzBdKSAmJiAoITEgPT09IG4uaXNEaXJ0eSgpICYmIChuLnNldERpcnR5KCEwKSwgbi5maXJlKCJjaGFuZ2UiLCB7CiAgICAgICAgbGV2ZWw6IHIuZGF0YVswXSwKICAgICAgICBsYXN0TGV2ZWw6IG51bGwKICAgICAgfSkpLCBuLmZpcmUoIlR5cGluZ1VuZG8iKSwgaS5zZXQoITEpLCBuLm5vZGVDaGFuZ2VkKCkpKTsKICAgIH0pLCBuLm9uKCJrZXlkb3duIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsCiAgICAgICAgICBuID0gZS5rZXlDb2RlOwogICAgICBlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICgzMyA8PSBuICYmIG4gPD0gMzYgfHwgMzcgPD0gbiAmJiBuIDw9IDQwIHx8IDQ1ID09PSBuID8gci50eXBpbmcgJiYgYShlKSA6ICh0ID0gZS5jdHJsS2V5ICYmICFlLmFsdEtleSB8fCBlLm1ldGFLZXksICEobiA8IDE2IHx8IDIwIDwgbikgfHwgMjI0ID09PSBuIHx8IDkxID09PSBuIHx8IHIudHlwaW5nIHx8IHQgfHwgKHIuYmVmb3JlQ2hhbmdlKCksIGxoKHIsICEwLCBvKSwgci5hZGQoe30sIGUpLCBpLnNldCghMCkpKSk7CiAgICB9KSwgbi5vbigibW91c2Vkb3duIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgci50eXBpbmcgJiYgYShlKTsKICAgIH0pLCBuLm9uKCJpbnB1dCIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGUuaW5wdXRUeXBlICYmICgiaW5zZXJ0UmVwbGFjZW1lbnRUZXh0IiA9PT0gZS5pbnB1dFR5cGUgfHwgImluc2VydFRleHQiID09PSBlLmlucHV0VHlwZSAmJiBudWxsID09PSBlLmRhdGEgfHwgImluc2VydEZyb21QYXN0ZSIgPT09IGUuaW5wdXRUeXBlIHx8ICJpbnNlcnRGcm9tRHJvcCIgPT09IGUuaW5wdXRUeXBlKSAmJiBhKGUpOwogICAgfSksIG4ub24oIkFkZFVuZG8gVW5kbyBSZWRvIENsZWFyVW5kb3MiLCBmdW5jdGlvbiAoZSkgewogICAgICBlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IG4ubm9kZUNoYW5nZWQoKTsKICAgIH0pKSwgKGUgPSBzKS5hZGRTaG9ydGN1dCgibWV0YSt6IiwgIiIsICJVbmRvIiksIGUuYWRkU2hvcnRjdXQoIm1ldGEreSxtZXRhK3NoaWZ0K3oiLCAiIiwgIlJlZG8iKSwgZDsKCiAgICBmdW5jdGlvbiBhKGUpIHsKICAgICAgbGgociwgITEsIG8pLCByLmFkZCh7fSwgZSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBlYihlKSB7CiAgICByZXR1cm4gImtleWRvd24iID09PSBlLnR5cGUgfHwgImtleXVwIiA9PT0gZS50eXBlOwogIH0KCiAgZnVuY3Rpb24gdGIoZSkgewogICAgdmFyIHQgPSBlLmtleUNvZGU7CiAgICByZXR1cm4gdCA9PT0gQmYuQkFDS1NQQUNFIHx8IHQgPT09IEJmLkRFTEVURTsKICB9CgogIGZ1bmN0aW9uIG5iKGUsIHQpIHsKICAgIHJldHVybiB6ZShOdC5mcm9tRG9tKHQpLCBlLmdldFBhcmFtKCJpbmxpbmVfYm91bmRhcmllc19zZWxlY3RvciIsICJhW2hyZWZdLGNvZGUsLm1jZS1hbm5vdGF0aW9uIiwgInN0cmluZyIpKTsKICB9CgogIGZ1bmN0aW9uIHJiKGUsIHQsIG4pIHsKICAgIHZhciByLAogICAgICAgIG8sCiAgICAgICAgaSA9IChyID0gZSwgbyA9IHQsIFUoSmEuRE9NLmdldFBhcmVudHMobi5jb250YWluZXIoKSwgIioiLCBvKSwgcikpOwogICAgcmV0dXJuIHZlLmZyb20oaVtpLmxlbmd0aCAtIDFdKTsKICB9CgogIGZ1bmN0aW9uIG9iKGUsIHQpIHsKICAgIGlmICghdCkgcmV0dXJuIHQ7CiAgICB2YXIgbiA9IHQuY29udGFpbmVyKCksCiAgICAgICAgciA9IHQub2Zmc2V0KCk7CiAgICByZXR1cm4gZSA/IExyKG4pID8gam4obi5uZXh0U2libGluZykgPyBhcyhuLm5leHRTaWJsaW5nLCAwKSA6IGFzLmFmdGVyKG4pIDogRnIodCkgPyBhcyhuLCByICsgMSkgOiB0IDogTHIobikgPyBqbihuLnByZXZpb3VzU2libGluZykgPyBhcyhuLnByZXZpb3VzU2libGluZywgbi5wcmV2aW91c1NpYmxpbmcuZGF0YS5sZW5ndGgpIDogYXMuYmVmb3JlKG4pIDogVXIodCkgPyBhcyhuLCByIC0gMSkgOiB0OwogIH0KCiAgZnVuY3Rpb24gaWIoZSkgewogICAgcmV0dXJuIGZvKGUpIHx8IGdvKGUpOwogIH0KCiAgZnVuY3Rpb24gYWIoZSwgdCkgewogICAgcmV0dXJuIFZlKGUsIHQpID8gcHIodCwgaWIsIChuID0gZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGplKG4sIE50LmZyb21Eb20oZS5kb20ucGFyZW50Tm9kZSkpOwogICAgfSkpIDogdmUubm9uZSgpOwogICAgdmFyIG47CiAgfQoKICBmdW5jdGlvbiB1YihlKSB7CiAgICB2YXIgdCwgbiwgcjsKICAgIGUuZG9tLmlzRW1wdHkoZS5nZXRCb2R5KCkpICYmIChlLnNldENvbnRlbnQoIiIpLCByID0gKG4gPSAodCA9IGUpLmdldEJvZHkoKSkuZmlyc3RDaGlsZCAmJiB0LmRvbS5pc0Jsb2NrKG4uZmlyc3RDaGlsZCkgPyBuLmZpcnN0Q2hpbGQgOiBuLCB0LnNlbGVjdGlvbi5zZXRDdXJzb3JMb2NhdGlvbihyLCAwKSk7CiAgfQoKICBmdW5jdGlvbiBzYihlLCB0KSB7CiAgICByZXR1cm4gewogICAgICBmcm9tOiBlLAogICAgICB0bzogdAogICAgfTsKICB9CgogIGZ1bmN0aW9uIGNiKGUsIHQpIHsKICAgIHJldHVybiBhYihOdC5mcm9tRG9tKGUpLCBOdC5mcm9tRG9tKHQuY29udGFpbmVyKCkpKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBibG9jazogZSwKICAgICAgICBwb3NpdGlvbjogdAogICAgICB9OwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBsYihlKSB7CiAgICB2YXIgdCwKICAgICAgICBuID0geih0ID0gRG4oZSksIGxvKS5mb2xkKEoodCksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB0LnNsaWNlKDAsIGUpOwogICAgfSk7CiAgICByZXR1cm4gWShuLCBMbiksIG47CiAgfQoKICBmdW5jdGlvbiBmYihlLCB0KSB7CiAgICByZXR1cm4gTShobSh0LCBlKS5yZXZlcnNlKCksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBXcihlKTsKICAgIH0pLmVhY2goTG4pOwogIH0KCiAgZnVuY3Rpb24gZGIoZSwgdCwgbiwgcikgewogICAgaWYgKFdyKG4pKSByZXR1cm4gbW0obiksIGVmKG4uZG9tKTsKICAgIDAgPT09IFUoTHQociksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiAhV3IoZSk7CiAgICB9KS5sZW5ndGggJiYgV3IodCkgJiYgcXQociwgTnQuZnJvbVRhZygiYnIiKSk7CiAgICB2YXIgbyA9IFpsKG4uZG9tLCBhcy5iZWZvcmUoci5kb20pKTsKICAgIHJldHVybiBZKGxiKHQpLCBmdW5jdGlvbiAoZSkgewogICAgICBxdChyLCBlKTsKICAgIH0pLCBmYihlLCB0KSwgbzsKICB9CgogIGZ1bmN0aW9uIG1iKGUsIHQsIG4pIHsKICAgIGlmIChXcihuKSkgcmV0dXJuIExuKG4pLCBXcih0KSAmJiBtbSh0KSwgZWYodC5kb20pOwogICAgdmFyIHIgPSB0ZihuLmRvbSk7CiAgICByZXR1cm4gWShsYih0KSwgZnVuY3Rpb24gKGUpIHsKICAgICAgUG4obiwgZSk7CiAgICB9KSwgZmIoZSwgdCksIHI7CiAgfQoKICBmdW5jdGlvbiBnYihlLCB0KSB7CiAgICBVYyhlLCB0LmRvbSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBlLmdldE5vZGUoKTsKICAgIH0pLm1hcChOdC5mcm9tRG9tKS5maWx0ZXIoQnIpLmVhY2goTG4pOwogIH0KCiAgZnVuY3Rpb24gcGIoZSwgdCwgbikgewogICAgcmV0dXJuIGdiKCEwLCB0KSwgZ2IoITEsIG4pLCAoVmUobyA9IG4sIHIgPSB0KSA/IChpID0gaG0ociwgbyksIHZlLmZyb20oaVtpLmxlbmd0aCAtIDFdKSkgOiB2ZS5ub25lKCkpLmZvbGQoQShtYiwgZSwgdCwgbiksIEEoZGIsIGUsIHQsIG4pKTsKICAgIHZhciByLCBvLCBpOwogIH0KCiAgZnVuY3Rpb24gaGIoZSwgdCwgbiwgcikgewogICAgcmV0dXJuIHQgPyBwYihlLCByLCBuKSA6IHBiKGUsIG4sIHIpOwogIH0KCiAgZnVuY3Rpb24gdmIodCwgbikgewogICAgdmFyIGUsCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYSwKICAgICAgICB1LAogICAgICAgIHMsCiAgICAgICAgYyA9IE50LmZyb21Eb20odC5nZXRCb2R5KCkpLAogICAgICAgIGwgPSAoZSA9IGMuZG9tLCByID0gbiwgKChvID0gdC5zZWxlY3Rpb24uZ2V0Um5nKCkpLmNvbGxhcHNlZCA/IChhID0gciwgdSA9IGNiKGkgPSBlLCBhcy5mcm9tUmFuZ2VTdGFydChvKSksIHMgPSB1LmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIEdsKGEsIGksIGUucG9zaXRpb24pLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gY2IoaSwgZSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gdCA9IGksIG4gPSBhLCBXbigociA9IGUpLnBvc2l0aW9uLmdldE5vZGUoKSkgJiYgITEgPT09IFdyKHIuYmxvY2spID8gVWMoITEsIHIuYmxvY2suZG9tKS5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiBlLmlzRXF1YWwoci5wb3NpdGlvbikgPyBHbChuLCB0LCBlKS5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKHQsIGUpOwogICAgICAgICAgICB9KSA6IHZlLnNvbWUocik7CiAgICAgICAgICB9KS5nZXRPcihyKSA6IHI7CiAgICAgICAgICB2YXIgdCwgbiwgcjsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgZG4odSwgcywgc2IpLmZpbHRlcihmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gITEgPT09IGplKGUuZnJvbS5ibG9jaywgZS50by5ibG9jaykgJiYgT3QoKG4gPSBlKS5mcm9tLmJsb2NrKS5iaW5kKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgcmV0dXJuIE90KG4udG8uYmxvY2spLmZpbHRlcihmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIGplKHQsIGUpOwogICAgICAgIH0pOwogICAgICB9KS5pc1NvbWUoKSAmJiAhMSA9PT0gWW4oKHQgPSBlKS5mcm9tLmJsb2NrLmRvbSkgJiYgITEgPT09IFluKHQudG8uYmxvY2suZG9tKTsKICAgICAgdmFyIHQsIG47CiAgICB9KSkgOiB2ZS5ub25lKCkpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGhiKGMsIG4sIGUuZnJvbS5ibG9jaywgZS50by5ibG9jayk7CiAgICB9KSk7CiAgICByZXR1cm4gbC5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIHQuc2VsZWN0aW9uLnNldFJuZyhlLnRvUmFuZ2UoKSk7CiAgICB9KSwgbC5pc1NvbWUoKTsKICB9CgogIGZ1bmN0aW9uIGJiKGUsIHQpIHsKICAgIHZhciBuID0gTnQuZnJvbURvbSh0KSwKICAgICAgICByID0gQShqZSwgZSk7CiAgICByZXR1cm4gZ3IobiwgaG8sIHIpLmlzU29tZSgpOwogIH0KCiAgZnVuY3Rpb24geWIoZSkgewogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIHQsCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgcywKICAgICAgICBjLAogICAgICAgIGwsCiAgICAgICAgZiA9IE50LmZyb21Eb20oZS5nZXRCb2R5KCkpLAogICAgICAgIGQgPSBlLnNlbGVjdGlvbi5nZXRSbmcoKTsKICAgIHJldHVybiBhID0gZCwgYyA9IFpsKChpID0gZikuZG9tLCBhcy5mcm9tUmFuZ2VTdGFydChhKSkuaXNOb25lKCksIGwgPSBRbChpLmRvbSwgYXMuZnJvbVJhbmdlRW5kKGEpKS5pc05vbmUoKSwgIWJiKHUgPSBpLCAocyA9IGEpLnN0YXJ0Q29udGFpbmVyKSAmJiAhYmIodSwgcy5lbmRDb250YWluZXIpICYmIGMgJiYgbCA/ICgodCA9IGUpLnNldENvbnRlbnQoIiIpLCB0LnNlbGVjdGlvbi5zZXRDdXJzb3JMb2NhdGlvbigpLCAhMCkgOiAobiA9IGYsIHIgPSBlLnNlbGVjdGlvbiwgbyA9IHIuZ2V0Um5nKCksIGRuKGFiKG4sIE50LmZyb21Eb20oby5zdGFydENvbnRhaW5lcikpLCBhYihuLCBOdC5mcm9tRG9tKG8uZW5kQ29udGFpbmVyKSksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHJldHVybiAhMSA9PT0gamUoZSwgdCkgJiYgKG8uZGVsZXRlQ29udGVudHMoKSwgaGIobiwgITAsIGUsIHQpLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICByLnNldFJuZyhlLnRvUmFuZ2UoKSk7CiAgICAgIH0pLCAhMCk7CiAgICB9KS5nZXRPcighMSkpOwogIH0KCiAgZnVuY3Rpb24gQ2IoZSwgdCkgewogICAgcmV0dXJuICFlLnNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpICYmIHliKGUpOwogIH0KCiAgZnVuY3Rpb24geGIoZSwgdCwgbiwgciwgbykgewogICAgcmV0dXJuIHZlLmZyb20odC5fc2VsZWN0aW9uT3ZlcnJpZGVzLnNob3dDYXJldChlLCBuLCByLCBvKSk7CiAgfQoKICBmdW5jdGlvbiB3YihlLCB0KSB7CiAgICB2YXIgbiwgcjsKICAgIHJldHVybiBlLmZpcmUoIkJlZm9yZU9iamVjdFNlbGVjdGVkIiwgewogICAgICB0YXJnZXQ6IHQKICAgIH0pLmlzRGVmYXVsdFByZXZlbnRlZCgpID8gdmUubm9uZSgpIDogdmUuc29tZSgoKHIgPSAobiA9IHQpLm93bmVyRG9jdW1lbnQuY3JlYXRlUmFuZ2UoKSkuc2VsZWN0Tm9kZShuKSwgcikpOwogIH0KCiAgZnVuY3Rpb24gU2IoZSwgdCwgbikgewogICAgdmFyIHIgPSBacygxLCBlLmdldEJvZHkoKSwgdCksCiAgICAgICAgbyA9IGFzLmZyb21SYW5nZVN0YXJ0KHIpLAogICAgICAgIGkgPSBvLmdldE5vZGUoKTsKICAgIGlmICh3YyhpKSkgcmV0dXJuIHhiKDEsIGUsIGksICFvLmlzQXRFbmQoKSwgITEpOwogICAgdmFyIGEgPSBvLmdldE5vZGUoITApOwogICAgaWYgKHdjKGEpKSByZXR1cm4geGIoMSwgZSwgYSwgITEsICExKTsKICAgIHZhciB1ID0gZS5kb20uZ2V0UGFyZW50KG8uZ2V0Tm9kZSgpLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4geXkoZSkgfHwgYnkoZSk7CiAgICB9KTsKICAgIHJldHVybiB3Yyh1KSA/IHhiKDEsIGUsIHUsICExLCBuKSA6IHZlLm5vbmUoKTsKICB9CgogIGZ1bmN0aW9uIEViKGUsIHQsIG4pIHsKICAgIHJldHVybiB0LmNvbGxhcHNlZCA/IFNiKGUsIHQsIG4pLmdldE9yKHQpIDogdDsKICB9CgogIGZ1bmN0aW9uIE5iKGUpIHsKICAgIHJldHVybiBlcChlKSB8fCBHZyhlKTsKICB9CgogIGZ1bmN0aW9uIGtiKGUpIHsKICAgIHJldHVybiB0cChlKSB8fCBKZyhlKTsKICB9CgogIGZ1bmN0aW9uIF9iKG4sIHIsIGUsIHQsIG8sIGkpIHsKICAgIHZhciBhLCB1OwogICAgcmV0dXJuIHhiKHQsIG4sIGkuZ2V0Tm9kZSghbyksIG8sICEwKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0OwogICAgICByLmNvbGxhcHNlZCA/ICh0ID0gci5jbG9uZVJhbmdlKCksIG8gPyB0LnNldEVuZChlLnN0YXJ0Q29udGFpbmVyLCBlLnN0YXJ0T2Zmc2V0KSA6IHQuc2V0U3RhcnQoZS5lbmRDb250YWluZXIsIGUuZW5kT2Zmc2V0KSwgdC5kZWxldGVDb250ZW50cygpKSA6IHIuZGVsZXRlQ29udGVudHMoKSwgbi5zZWxlY3Rpb24uc2V0Um5nKGUpOwogICAgfSksIGEgPSBuLmRvbSwgam4odSA9IGUpICYmIDAgPT09IHUuZGF0YS5sZW5ndGggJiYgYS5yZW1vdmUodSksICEwOwogIH0KCiAgZnVuY3Rpb24gQWIoZSwgdCkgewogICAgdmFyIG4gPSBlLnNlbGVjdGlvbi5nZXRSbmcoKTsKICAgIGlmICgham4obi5jb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHJldHVybiAhMTsKICAgIHZhciByID0gdCA/IGljLkZvcndhcmRzIDogaWMuQmFja3dhcmRzLAogICAgICAgIG8gPSBQYyhlLmdldEJvZHkoKSksCiAgICAgICAgaSA9IEEocmMsIHQgPyBvLm5leHQgOiBvLnByZXYpLAogICAgICAgIGEgPSB0ID8gTmIgOiBrYiwKICAgICAgICB1ID0gdGMociwgZS5nZXRCb2R5KCksIG4pLAogICAgICAgIHMgPSBvYih0LCBpKHUpKTsKICAgIGlmICghcyB8fCAhb2ModSwgcykpIHJldHVybiAhMTsKICAgIGlmIChhKHMpKSByZXR1cm4gX2IoZSwgbiwgdS5nZXROb2RlKCksIHIsIHQsIHMpOwogICAgdmFyIGMgPSBpKHMpOwogICAgcmV0dXJuICEhKGMgJiYgYShjKSAmJiBvYyhzLCBjKSkgJiYgX2IoZSwgbiwgdS5nZXROb2RlKCksIHIsIHQsIGMpOwogIH0KCiAgZnVuY3Rpb24gUmIobCwgZiwgZCkgewogICAgcmV0dXJuIEdsKGYsIGwsIGQpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHMgPSBlLmdldE5vZGUoKSwgaG8oTnQuZnJvbURvbShzKSkgfHwgZ28oTnQuZnJvbURvbShzKSkgfHwgKG8gPSBsLCB1ID0gZSwgZWMoIShpID0gZiksIGEgPSBkKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gZWMoaSwgdSkuZm9sZChSLCBjKTsKICAgICAgfSwgYykpID8gdmUubm9uZSgpIDogZiAmJiBZbihlLmdldE5vZGUoKSkgfHwgITEgPT09IGYgJiYgWW4oZS5nZXROb2RlKCEwKSkgPyAodCA9IGwsIG4gPSBkLCByID0gZS5nZXROb2RlKCExID09PSBmKSwgYWIoTnQuZnJvbURvbSh0KSwgTnQuZnJvbURvbShuLmdldE5vZGUoKSkpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBXcihlKSA/IEN5LnJlbW92ZShlLmRvbSkgOiBDeS5tb3ZlVG9FbGVtZW50KHIpOwogICAgICB9KS5vclRodW5rKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdmUuc29tZShDeS5tb3ZlVG9FbGVtZW50KHIpKTsKICAgICAgfSkpIDogZiAmJiB0cChkKSB8fCAhMSA9PT0gZiAmJiBlcChkKSA/IHZlLnNvbWUoQ3kubW92ZVRvUG9zaXRpb24oZSkpIDogdmUubm9uZSgpOwogICAgICB2YXIgdCwgbiwgciwgbywgaSwgYSwgdSwgczsKCiAgICAgIGZ1bmN0aW9uIGMoZSkgewogICAgICAgIHJldHVybiBPcihOdC5mcm9tRG9tKGUpKSAmJiAhWXMoYSwgdSwgbyk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gRGIoZSwgdCkgewogICAgcmV0dXJuIHZlLmZyb20ocGYoZS5nZXRCb2R5KCksIHQpKTsKICB9CgogIGZ1bmN0aW9uIFRiKG0sIGcpIHsKICAgIHZhciBlID0gbS5zZWxlY3Rpb24uZ2V0Tm9kZSgpOwogICAgcmV0dXJuIERiKG0sIGUpLmZpbHRlcihZbikuZm9sZChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBzID0gbS5nZXRCb2R5KCksIGwgPSBacygoYyA9IGcpID8gMSA6IC0xLCBzLCBtLnNlbGVjdGlvbi5nZXRSbmcoKSksIGYgPSBhcy5mcm9tUmFuZ2VTdGFydChsKSwgZCA9IE50LmZyb21Eb20ocyksICghMSA9PT0gYyAmJiB0cChmKSA/IHZlLnNvbWUoQ3kucmVtb3ZlKGYuZ2V0Tm9kZSghMCkpKSA6IGMgJiYgZXAoZikgPyB2ZS5zb21lKEN5LnJlbW92ZShmLmdldE5vZGUoKSkpIDogITEgPT09IGMgJiYgZXAoZikgJiYgRW0oZCwgZikgPyBhcChkLCBmKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gQ3kucmVtb3ZlKGUuZ2V0Tm9kZSgpKTsKICAgICAgfSkgOiBjICYmIHRwKGYpICYmIFNtKGQsIGYpID8gdXAoZCwgZikubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIEN5LnJlbW92ZShlLmdldE5vZGUoKSk7CiAgICAgIH0pIDogKHIgPSBzLCBlID0gYywgYSA9IChvID0gZikuZ2V0Tm9kZSghMSA9PT0gKGkgPSBlKSksIHUgPSBpID8gImFmdGVyIiA6ICJiZWZvcmUiLCB6bihhKSAmJiBhLmdldEF0dHJpYnV0ZSgiZGF0YS1tY2UtY2FyZXQiKSA9PT0gdSA/IChuID0gby5nZXROb2RlKCExID09PSAodCA9IGUpKSwgKHQgJiYgWW4obi5uZXh0U2libGluZykgPyB2ZS5zb21lKEN5Lm1vdmVUb0VsZW1lbnQobi5uZXh0U2libGluZykpIDogITEgPT09IHQgJiYgWW4obi5wcmV2aW91c1NpYmxpbmcpID8gdmUuc29tZShDeS5tb3ZlVG9FbGVtZW50KG4ucHJldmlvdXNTaWJsaW5nKSkgOiB2ZS5ub25lKCkpLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBSYihyLCBlLCBvKTsKICAgICAgfSwgdmUuc29tZSkpIDogUmIociwgZSwgbykuYmluZChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiB0ID0gciwgbiA9IG8sIGUuZm9sZChmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIHZlLnNvbWUoQ3kucmVtb3ZlKGUpKTsKICAgICAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIHZlLnNvbWUoQ3kubW92ZVRvRWxlbWVudChlKSk7CiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBZcyhuLCBlLCB0KSA/IHZlLm5vbmUoKSA6IHZlLnNvbWUoQ3kubW92ZVRvUG9zaXRpb24oZSkpOwogICAgICAgIH0pOwogICAgICAgIHZhciB0LCBuOwogICAgICB9KSkpLmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlLmZvbGQoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBvLl9zZWxlY3Rpb25PdmVycmlkZXMuaGlkZUZha2VDYXJldCgpLCBZbShvLCBpLCBOdC5mcm9tRG9tKGUpKSwgITA7CiAgICAgICAgfSwgKHIgPSBpID0gZywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0ID0gciA/IGFzLmJlZm9yZShlKSA6IGFzLmFmdGVyKGUpOwogICAgICAgICAgcmV0dXJuIG4uc2VsZWN0aW9uLnNldFJuZyh0LnRvUmFuZ2UoKSksICEwOwogICAgICAgIH0pLCAodCA9IG4gPSBvID0gbSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiB0LnNlbGVjdGlvbi5zZXRSbmcoZS50b1JhbmdlKCkpLCAhMDsKICAgICAgICB9KSk7CiAgICAgICAgdmFyIHQsIG4sIHIsIG8sIGk7CiAgICAgIH0pOwogICAgICB2YXIgciwgZSwgbywgdCwgbiwgaSwgYSwgdSwgcywgYywgbCwgZiwgZDsKICAgIH0sIHcpOwogIH0KCiAgZnVuY3Rpb24gT2IoZSwgdCkgewogICAgdmFyIG4gPSBlLnNlbGVjdGlvbi5nZXROb2RlKCk7CiAgICByZXR1cm4gISghWW4obikgfHwgR24obikpICYmIERiKGUsIG4ucGFyZW50Tm9kZSkuZmlsdGVyKFluKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFkoaHUoTnQuZnJvbURvbShlLmdldEJvZHkoKSksICIubWNlLW9mZnNjcmVlbi1zZWxlY3Rpb24iKSwgTG4pLCBZbShlLCB0LCBOdC5mcm9tRG9tKGUuc2VsZWN0aW9uLmdldE5vZGUoKSkpLCB1YihlKSwgITA7CiAgICB9LCB3KTsKICB9CgogIGZ1bmN0aW9uIEJiKGUpIHsKICAgIHZhciB0LAogICAgICAgIG4gPSBlLmRvbSwKICAgICAgICByID0gZS5zZWxlY3Rpb24sCiAgICAgICAgbyA9IHBmKGUuZ2V0Qm9keSgpLCByLmdldE5vZGUoKSk7CiAgICByZXR1cm4gWG4obykgJiYgbi5pc0Jsb2NrKG8pICYmIG4uaXNFbXB0eShvKSAmJiAodCA9IG4uY3JlYXRlKCJiciIsIHsKICAgICAgImRhdGEtbWNlLWJvZ3VzIjogIjEiCiAgICB9KSwgbi5zZXRIVE1MKG8sICIiKSwgby5hcHBlbmRDaGlsZCh0KSwgci5zZXRSbmcoYXMuYmVmb3JlKHQpLnRvUmFuZ2UoKSkpLCAhMDsKICB9CgogIGZ1bmN0aW9uIFBiKGUsIHQpIHsKICAgIHJldHVybiAoZS5zZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSA/IFRiIDogT2IpKGUsIHQpOwogIH0KCiAgZnVuY3Rpb24gTGIoZSwgdCkgewogICAgcmV0dXJuICEhZS5zZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSAmJiAobiA9IGUsIHIgPSB0LCBvID0gYXMuZnJvbVJhbmdlU3RhcnQobi5zZWxlY3Rpb24uZ2V0Um5nKCkpLCBHbChyLCBuLmdldEJvZHkoKSwgbykuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiAociA/IFhnIDogWWcpKGUpOwogICAgfSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gdmUuZnJvbShHcyhyID8gMCA6IC0xLCBlKSk7CiAgICB9KS5leGlzdHMoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIG4uc2VsZWN0aW9uLnNlbGVjdChlKSwgITA7CiAgICB9KSk7CiAgICB2YXIgbiwgciwgbzsKICB9CgogIGZ1bmN0aW9uIEliKGUpIHsKICAgIHJldHVybiB4eShlKSAmJiBlLmRhdGFbMF0gPT09IENvOwogIH0KCiAgZnVuY3Rpb24gTWIoZSkgewogICAgcmV0dXJuIHh5KGUpICYmIGUuZGF0YVtlLmRhdGEubGVuZ3RoIC0gMV0gPT09IENvOwogIH0KCiAgZnVuY3Rpb24gRmIoZSkgewogICAgcmV0dXJuIGUub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShDbyk7CiAgfQoKICBmdW5jdGlvbiBVYihlLCB0KSB7CiAgICByZXR1cm4gKGUgPyBmdW5jdGlvbiAoZSkgewogICAgICBpZiAoeHkoZS5wcmV2aW91c1NpYmxpbmcpKSByZXR1cm4gTWIoZS5wcmV2aW91c1NpYmxpbmcpIHx8IGUucHJldmlvdXNTaWJsaW5nLmFwcGVuZERhdGEoQ28pLCBlLnByZXZpb3VzU2libGluZzsKICAgICAgaWYgKHh5KGUpKSByZXR1cm4gSWIoZSkgfHwgZS5pbnNlcnREYXRhKDAsIENvKSwgZTsKICAgICAgdmFyIHQgPSBGYihlKTsKICAgICAgcmV0dXJuIGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCwgZSksIHQ7CiAgICB9IDogZnVuY3Rpb24gKGUpIHsKICAgICAgaWYgKHh5KGUubmV4dFNpYmxpbmcpKSByZXR1cm4gSWIoZS5uZXh0U2libGluZykgfHwgZS5uZXh0U2libGluZy5pbnNlcnREYXRhKDAsIENvKSwgZS5uZXh0U2libGluZzsKICAgICAgaWYgKHh5KGUpKSByZXR1cm4gTWIoZSkgfHwgZS5hcHBlbmREYXRhKENvKSwgZTsKICAgICAgdmFyIHQgPSBGYihlKTsKICAgICAgcmV0dXJuIGUubmV4dFNpYmxpbmcgPyBlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsIGUubmV4dFNpYmxpbmcpIDogZS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHQpLCB0OwogICAgfSkodCk7CiAgfQoKICBmdW5jdGlvbiB6YihlLCB0KSB7CiAgICByZXR1cm4gam4oZS5jb250YWluZXIoKSkgPyBVYih0LCBlLmNvbnRhaW5lcigpKSA6IFViKHQsIGUuZ2V0Tm9kZSgpKTsKICB9CgogIGZ1bmN0aW9uIEhiKGUsIHQpIHsKICAgIHZhciBuID0gdC5nZXQoKTsKICAgIHJldHVybiBuICYmIGUuY29udGFpbmVyKCkgPT09IG4gJiYgTHIobik7CiAgfQoKICBmdW5jdGlvbiBqYihuLCBlKSB7CiAgICByZXR1cm4gZS5mb2xkKGZ1bmN0aW9uIChlKSB7CiAgICAgIHZjKG4uZ2V0KCkpOwogICAgICB2YXIgdCA9IHd5KGUpOwogICAgICByZXR1cm4gbi5zZXQodCksIHZlLnNvbWUoYXModCwgdC5sZW5ndGggLSAxKSk7CiAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gZWYoZSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKEhiKGUsIG4pKSByZXR1cm4gYXMobi5nZXQoKSwgMSk7CiAgICAgICAgdmMobi5nZXQoKSk7CiAgICAgICAgdmFyIHQgPSB6YihlLCAhMCk7CiAgICAgICAgcmV0dXJuIG4uc2V0KHQpLCBhcyh0LCAxKTsKICAgICAgfSk7CiAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gdGYoZSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKEhiKGUsIG4pKSByZXR1cm4gYXMobi5nZXQoKSwgbi5nZXQoKS5sZW5ndGggLSAxKTsKICAgICAgICB2YyhuLmdldCgpKTsKICAgICAgICB2YXIgdCA9IHpiKGUsICExKTsKICAgICAgICByZXR1cm4gbi5zZXQodCksIGFzKHQsIHQubGVuZ3RoIC0gMSk7CiAgICAgIH0pOwogICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmMobi5nZXQoKSk7CiAgICAgIHZhciB0ID0gU3koZSk7CiAgICAgIHJldHVybiBuLnNldCh0KSwgdmUuc29tZShhcyh0LCAxKSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIFZiKGUsIHQpIHsKICAgIGZvciAodmFyIG4gPSAwOyBuIDwgZS5sZW5ndGg7IG4rKykgewogICAgICB2YXIgciA9IGVbbl0uYXBwbHkobnVsbCwgdCk7CiAgICAgIGlmIChyLmlzU29tZSgpKSByZXR1cm4gcjsKICAgIH0KCiAgICByZXR1cm4gdmUubm9uZSgpOwogIH0KCiAgZnVuY3Rpb24gcWIoZSwgdCkgewogICAgcmV0dXJuIFhzKHQsIGUpIHx8IGU7CiAgfQoKICBmdW5jdGlvbiAkYihlLCB0LCBuKSB7CiAgICB2YXIgciA9IGh5KG4pLAogICAgICAgIG8gPSBxYih0LCByLmNvbnRhaW5lcigpKTsKICAgIHJldHVybiByYihlLCBvLCByKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFFsKG8sIHIpLmJpbmQoQShyYiwgZSwgbykpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBFeS5iZWZvcmUoZSk7CiAgICAgIH0pOwogICAgfSwgdmUubm9uZSk7CiAgfQoKICBmdW5jdGlvbiBXYihlLCB0KSB7CiAgICByZXR1cm4gbnVsbCA9PT0gSGMoZSwgdCk7CiAgfQoKICBmdW5jdGlvbiBLYihlLCB0LCBuKSB7CiAgICByZXR1cm4gcmIoZSwgdCwgbikuZmlsdGVyKEEoV2IsIHQpKTsKICB9CgogIGZ1bmN0aW9uIFhiKGUsIHQsIG4pIHsKICAgIHZhciByID0gdnkobik7CiAgICByZXR1cm4gS2IoZSwgdCwgcikuYmluZChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gWmwoZSwgcikuaXNOb25lKCkgPyB2ZS5zb21lKEV5LnN0YXJ0KGUpKSA6IHZlLm5vbmUoKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gWWIoZSwgdCwgbikgewogICAgdmFyIHIgPSBoeShuKTsKICAgIHJldHVybiBLYihlLCB0LCByKS5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBRbChlLCByKS5pc05vbmUoKSA/IHZlLnNvbWUoRXkuZW5kKGUpKSA6IHZlLm5vbmUoKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gR2IoZSwgdCwgbikgewogICAgdmFyIHIgPSB2eShuKSwKICAgICAgICBvID0gcWIodCwgci5jb250YWluZXIoKSk7CiAgICByZXR1cm4gcmIoZSwgbywgcikuZm9sZChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBabChvLCByKS5iaW5kKEEocmIsIGUsIG8pKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gRXkuYWZ0ZXIoZSk7CiAgICAgIH0pOwogICAgfSwgdmUubm9uZSk7CiAgfQoKICBmdW5jdGlvbiBKYihlKSB7CiAgICByZXR1cm4gITEgPT09ICh0ID0gTnkoZSksICJydGwiID09PSBKYS5ET00uZ2V0U3R5bGUodCwgImRpcmVjdGlvbiIsICEwKSB8fCAobiA9IHQudGV4dENvbnRlbnQsIHB5LnRlc3QobikpKTsKICAgIHZhciB0LCBuOwogIH0KCiAgZnVuY3Rpb24gUWIoZSwgdCwgbikgewogICAgcmV0dXJuIFZiKFskYiwgWGIsIFliLCBHYl0sIFtlLCB0LCBuXSkuZmlsdGVyKEpiKTsKICB9CgogIGZ1bmN0aW9uIFpiKGUpIHsKICAgIHJldHVybiBlLmZvbGQoSigiYmVmb3JlIiksIEooInN0YXJ0IiksIEooImVuZCIpLCBKKCJhZnRlciIpKTsKICB9CgogIGZ1bmN0aW9uIGV5KGUpIHsKICAgIHJldHVybiBlLmZvbGQoRXkuYmVmb3JlLCBFeS5iZWZvcmUsIEV5LmFmdGVyLCBFeS5hZnRlcik7CiAgfQoKICBmdW5jdGlvbiB0eShlKSB7CiAgICByZXR1cm4gZS5mb2xkKEV5LnN0YXJ0LCBFeS5zdGFydCwgRXkuZW5kLCBFeS5lbmQpOwogIH0KCiAgZnVuY3Rpb24gbnkoYSwgZSwgdSwgdCwgbiwgcykgewogICAgcmV0dXJuIGRuKHJiKGUsIHUsIHQpLCByYihlLCB1LCBuKSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgcmV0dXJuIGUgIT09IHQgJiYgKHIgPSB0LCBvID0gWHMoZSwgbiA9IHUpLCBpID0gWHMociwgbiksIG8gJiYgbyA9PT0gaSkgPyBFeS5hZnRlcihhID8gZSA6IHQpIDogczsKICAgICAgdmFyIG4sIHIsIG8sIGk7CiAgICB9KS5nZXRPcihzKTsKICB9CgogIGZ1bmN0aW9uIHJ5KGUsIHIpIHsKICAgIHJldHVybiBlLmZvbGQodywgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIG4gPSByLCAhKFpiKHQgPSBlKSA9PT0gWmIobikgJiYgTnkodCkgPT09IE55KG4pKTsKICAgICAgdmFyIHQsIG47CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIG95KGUsIHQpIHsKICAgIHJldHVybiBlID8gdC5mb2xkKGkodmUuc29tZSwgRXkuc3RhcnQpLCB2ZS5ub25lLCBpKHZlLnNvbWUsIEV5LmFmdGVyKSwgdmUubm9uZSkgOiB0LmZvbGQodmUubm9uZSwgaSh2ZS5zb21lLCBFeS5iZWZvcmUpLCB2ZS5ub25lLCBpKHZlLnNvbWUsIEV5LmVuZCkpOwogIH0KCiAgZnVuY3Rpb24gaXkoZSwgYSwgdSwgcykgewogICAgdmFyIHQgPSBvYihlLCBzKSwKICAgICAgICBjID0gUWIoYSwgdSwgdCk7CiAgICByZXR1cm4gUWIoYSwgdSwgdCkuYmluZChBKG95LCBlKSkub3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBuID0gYSwgciA9IHUsIG8gPSBjLCBpID0gb2IodCA9IGUsIHMpLCBHbCh0LCByLCBpKS5tYXAoQShvYiwgdCkpLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBvLm1hcChleSk7CiAgICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIFFiKG4sIHIsIGUpLm1hcChBKG55LCB0LCBuLCByLCBpLCBlKSkuZmlsdGVyKEEocnksIG8pKTsKICAgICAgfSkuZmlsdGVyKEpiKTsKICAgICAgdmFyIHQsIG4sIHIsIG8sIGk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGF5KGUpIHsKICAgIGZvciAodmFyIHQgPSBbXSwgbiA9IDE7IG4gPCBhcmd1bWVudHMubGVuZ3RoOyBuKyspIHsKICAgICAgdFtuIC0gMV0gPSBhcmd1bWVudHNbbl07CiAgICB9CgogICAgdmFyIHIgPSB3aW5kb3cuY29uc29sZTsKICAgIHIgJiYgKHIuZXJyb3IgfHwgci5sb2cpLmFwcGx5KHIsIEFlKFtlXSwgdCwgITEpKTsKICB9CgogIHZhciB1eSwKICAgICAgc3ksCiAgICAgIGN5ID0gZnVuY3Rpb24gY3kodCwgZSkgewogICAgdmFyIG4gPSB0LmVkaXRvck1hbmFnZXIuYmFzZVVSTCArICIvc2tpbnMvY29udGVudCIsCiAgICAgICAgciA9ICJjb250ZW50IiArIHQuZWRpdG9yTWFuYWdlci5zdWZmaXggKyAiLmNzcyIsCiAgICAgICAgbyA9ICEwID09PSB0LmlubGluZTsKICAgIHJldHVybiBUKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiAvXlthLXowLTlcLV0rJC9pLnRlc3QoZSkgJiYgIW8gPyBuICsgIi8iICsgZSArICIvIiArIHIgOiB0LmRvY3VtZW50QmFzZVVSSS50b0Fic29sdXRlKGUpOwogICAgfSk7CiAgfSwKICAgICAgbHkgPSAwLAogICAgICBmeSA9IEV0LmVhY2gsCiAgICAgIGR5ID0gSmEuRE9NLAogICAgICBteSA9IFs5LCAyNywgQmYuSE9NRSwgQmYuRU5ELCAxOSwgMjAsIDQ0LCAxNDQsIDE0NSwgMzMsIDM0LCA0NSwgMTYsIDE3LCAxOCwgOTEsIDkyLCA5MywgQmYuRE9XTiwgQmYuVVAsIEJmLkxFRlQsIEJmLlJJR0hUXS5jb25jYXQoeHQuYnJvd3Nlci5pc0ZpcmVmb3goKSA/IFsyMjRdIDogW10pLAogICAgICBneSA9ICJkYXRhLW1jZS1wbGFjZWhvbGRlciIsCiAgICAgIHB5ID0gL1tcdTA1OTEtXHUwN0ZGXHVGQjFELVx1RkRGRlx1RkU3MC1cdUZFRkNdLywKICAgICAgaHkgPSBBKG9iLCAhMCksCiAgICAgIHZ5ID0gQShvYiwgITEpLAogICAgICBieSA9IFhuLAogICAgICB5eSA9IFluLAogICAgICBDeSA9IG9yKFt7CiAgICByZW1vdmU6IFsiZWxlbWVudCJdCiAgfSwgewogICAgbW92ZVRvRWxlbWVudDogWyJlbGVtZW50Il0KICB9LCB7CiAgICBtb3ZlVG9Qb3NpdGlvbjogWyJwb3NpdGlvbiJdCiAgfV0pLAogICAgICB4eSA9IGpuLAogICAgICB3eSA9IEEoVWIsICEwKSwKICAgICAgU3kgPSBBKFViLCAhMSksCiAgICAgIEV5ID0gb3IoW3sKICAgIGJlZm9yZTogWyJlbGVtZW50Il0KICB9LCB7CiAgICBzdGFydDogWyJlbGVtZW50Il0KICB9LCB7CiAgICBlbmQ6IFsiZWxlbWVudCJdCiAgfSwgewogICAgYWZ0ZXI6IFsiZWxlbWVudCJdCiAgfV0pLAogICAgICBOeSA9IGZ1bmN0aW9uIE55KGUpIHsKICAgIHJldHVybiBlLmZvbGQodSwgdSwgdSwgdSk7CiAgfTsKCiAgZnVuY3Rpb24ga3koZSwgdCwgbikgewogICAgdmFyIHIgPSBlID8gMSA6IC0xOwogICAgcmV0dXJuIHQuc2V0Um5nKGFzKG4uY29udGFpbmVyKCksIG4ub2Zmc2V0KCkgKyByKS50b1JhbmdlKCkpLCB0LmdldFNlbCgpLm1vZGlmeSgibW92ZSIsIGUgPyAiZm9yd2FyZCIgOiAiYmFja3dhcmQiLCAid29yZCIpLCAhMDsKICB9CgogIGZ1bmN0aW9uIF95KGUsIHQpIHsKICAgIHJldHVybiBlID09PSBpYy5CYWNrd2FyZHMgPyBxKHQpIDogdDsKICB9CgogIGZ1bmN0aW9uIEF5KGUsIHQsIG4sIHIpIHsKICAgIGZvciAodmFyIG8sIGksIGEsIHUsIHMgPSBQYyhuKSwgYyA9IHIsIGwgPSBbXTsgYzspIHsKICAgICAgdmFyIGYgPSAoYSA9IHMsIHUgPSBjLCB0ID09PSBpYy5Gb3J3YXJkcyA/IGEubmV4dCh1KSA6IGEucHJldih1KSk7CiAgICAgIGlmICghZikgYnJlYWs7CiAgICAgIGlmIChXbihmLmdldE5vZGUoITEpKSkgcmV0dXJuIHQgPT09IGljLkZvcndhcmRzID8gewogICAgICAgIHBvc2l0aW9uczogX3kodCwgbCkuY29uY2F0KFtmXSksCiAgICAgICAgYnJlYWtUeXBlOiB1eS5CciwKICAgICAgICBicmVha0F0OiB2ZS5zb21lKGYpCiAgICAgIH0gOiB7CiAgICAgICAgcG9zaXRpb25zOiBfeSh0LCBsKSwKICAgICAgICBicmVha1R5cGU6IHV5LkJyLAogICAgICAgIGJyZWFrQXQ6IHZlLnNvbWUoZikKICAgICAgfTsKCiAgICAgIGlmIChmLmlzVmlzaWJsZSgpKSB7CiAgICAgICAgaWYgKGUoYywgZikpIHsKICAgICAgICAgIHZhciBkID0gKG8gPSBjLCBXbigoaSA9IGYpLmdldE5vZGUodCA9PT0gaWMuRm9yd2FyZHMpKSA/IHV5LkJyIDogITEgPT09IFlzKG8sIGkpID8gdXkuQmxvY2sgOiB1eS5XcmFwKTsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHBvc2l0aW9uczogX3kodCwgbCksCiAgICAgICAgICAgIGJyZWFrVHlwZTogZCwKICAgICAgICAgICAgYnJlYWtBdDogdmUuc29tZShmKQogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGwucHVzaChmKSwgYyA9IGY7CiAgICAgIH0gZWxzZSBjID0gZjsKICAgIH0KCiAgICByZXR1cm4gewogICAgICBwb3NpdGlvbnM6IF95KHQsIGwpLAogICAgICBicmVha1R5cGU6IHV5LkVvbCwKICAgICAgYnJlYWtBdDogdmUubm9uZSgpCiAgICB9OwogIH0KCiAgZnVuY3Rpb24gUnkobiwgciwgbywgZSkgewogICAgcmV0dXJuIHIobywgZSkuYnJlYWtBdC5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSByKG8sIGUpLnBvc2l0aW9uczsKICAgICAgcmV0dXJuIG4gPT09IGljLkJhY2t3YXJkcyA/IHQuY29uY2F0KGUpIDogW2VdLmNvbmNhdCh0KTsKICAgIH0pLmdldE9yKFtdKTsKICB9CgogIGZ1bmN0aW9uIER5KGUsIGkpIHsKICAgIHJldHVybiBMKGUsIGZ1bmN0aW9uIChlLCBvKSB7CiAgICAgIHJldHVybiBlLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB2ZS5zb21lKG8pOwogICAgICB9LCBmdW5jdGlvbiAocikgewogICAgICAgIHJldHVybiBkbihRKHIuZ2V0Q2xpZW50UmVjdHMoKSksIFEoby5nZXRDbGllbnRSZWN0cygpKSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgIHZhciBuID0gTWF0aC5hYnMoaSAtIGUubGVmdCk7CiAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoaSAtIHQubGVmdCkgPD0gbiA/IG8gOiByOwogICAgICAgIH0pLm9yKGUpOwogICAgICB9KTsKICAgIH0sIHZlLm5vbmUoKSk7CiAgfQoKICBmdW5jdGlvbiBUeSh0LCBlKSB7CiAgICByZXR1cm4gUShlLmdldENsaWVudFJlY3RzKCkpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIER5KHQsIGUubGVmdCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIE95KG4pIHsKICAgIGZ1bmN0aW9uIGUoZSkgewogICAgICByZXR1cm4gVChlLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0ga3UoZSk7CiAgICAgICAgcmV0dXJuIHQubm9kZSA9IG4sIHQ7CiAgICAgIH0pOwogICAgfQoKICAgIGlmICh6bihuKSkgcmV0dXJuIGUobi5nZXRDbGllbnRSZWN0cygpKTsKCiAgICBpZiAoam4obikpIHsKICAgICAgdmFyIHQgPSBuLm93bmVyRG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTsKICAgICAgcmV0dXJuIHQuc2V0U3RhcnQobiwgMCksIHQuc2V0RW5kKG4sIG4uZGF0YS5sZW5ndGgpLCBlKHQuZ2V0Q2xpZW50UmVjdHMoKSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBCeShlKSB7CiAgICByZXR1cm4gSChlLCBPeSk7CiAgfQoKICBBKGl5LCAhMSksIEEoaXksICEwKSwgKHN5ID0gdXkgPSB7fSlbc3kuQnIgPSAwXSA9ICJCciIsIHN5W3N5LkJsb2NrID0gMV0gPSAiQmxvY2siLCBzeVtzeS5XcmFwID0gMl0gPSAiV3JhcCIsIHN5W3N5LkVvbCA9IDNdID0gIkVvbCI7CiAgdmFyIFB5LAogICAgICBMeSwKICAgICAgSXkgPSBBKEF5LCBhcy5pc0Fib3ZlLCAtMSksCiAgICAgIE15ID0gQShBeSwgYXMuaXNCZWxvdywgMSksCiAgICAgIEZ5ID0gQShSeSwgLTEsIEl5KSwKICAgICAgVXkgPSBBKFJ5LCAxLCBNeSk7CgogIGZ1bmN0aW9uIHp5KG8sIGksIGEsIGUsIHUsIHQpIHsKICAgIGZ1bmN0aW9uIG4oZSkgewogICAgICB2YXIgdCA9IEJ5KFtlXSk7CiAgICAgIC0xID09PSBvICYmICh0ID0gdC5yZXZlcnNlKCkpOwoKICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgbisrKSB7CiAgICAgICAgdmFyIHIgPSB0W25dOwoKICAgICAgICBpZiAoIWEociwgbCkpIHsKICAgICAgICAgIGlmICgwIDwgYy5sZW5ndGggJiYgaShyLCBwZShjKSkgJiYgcysrLCByLmxpbmUgPSBzLCB1KHIpKSByZXR1cm4gITA7CiAgICAgICAgICBjLnB1c2gocik7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgdmFyIHMgPSAwLAogICAgICAgIGMgPSBbXSwKICAgICAgICBsID0gcGUodC5nZXRDbGllbnRSZWN0cygpKTsKICAgIGlmICghbCkgcmV0dXJuIGM7CiAgICB2YXIgciA9IHQuZ2V0Tm9kZSgpOwogICAgcmV0dXJuIG4ociksIGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7CiAgICAgIGZvciAoOyByID0gS3MociwgZSwgVnIsIHQpOykgewogICAgICAgIGlmIChuKHIpKSByZXR1cm47CiAgICAgIH0KICAgIH0obywgZSwgbiwgciksIGM7CiAgfQoKICBmdW5jdGlvbiBIeSh0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGUubGluZSA+IHQ7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gankodCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBlLmxpbmUgPT09IHQ7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gVnkoZSwgdCkgewogICAgcmV0dXJuIE1hdGguYWJzKGUubGVmdCAtIHQpOwogIH0KCiAgZnVuY3Rpb24gcXkoZSwgdCkgewogICAgcmV0dXJuIE1hdGguYWJzKGUucmlnaHQgLSB0KTsKICB9CgogIGZ1bmN0aW9uICR5KGUsIHQpIHsKICAgIHJldHVybiBlID49IHQubGVmdCAmJiBlIDw9IHQucmlnaHQ7CiAgfQoKICBmdW5jdGlvbiBXeShlLCB0KSB7CiAgICByZXR1cm4gZSA+PSB0LnRvcCAmJiBlIDw9IHQuYm90dG9tOwogIH0KCiAgZnVuY3Rpb24gS3koZSwgbywgaSkgewogICAgcmV0dXJuIHZvaWQgMCA9PT0gaSAmJiAoaSA9IHcpLCBtZShlLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICBpZiAoJHkobywgdCkpIHJldHVybiBpKHQpID8gdCA6IGU7CiAgICAgIGlmICgkeShvLCBlKSkgcmV0dXJuIGkoZSkgPyBlIDogdDsKICAgICAgdmFyIG4gPSBNYXRoLm1pbihWeShlLCBvKSwgcXkoZSwgbykpLAogICAgICAgICAgciA9IE1hdGgubWluKFZ5KHQsIG8pLCBxeSh0LCBvKSk7CiAgICAgIHJldHVybiByID09PSBuICYmIHNlKHQsICJub2RlIikgJiYgTUModC5ub2RlKSB8fCByIDwgbiA/IHQgOiBlOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBYeShlLCB0LCBuLCByLCBvKSB7CiAgICB2YXIgaSA9IEZDKHIsIGUsIFZyLCB0LCAhbyk7CgogICAgZG8gewogICAgICBpZiAoIWkgfHwgbihpKSkgcmV0dXJuOwogICAgfSB3aGlsZSAoaSA9IEZDKGksIGUsIFZyLCB0KSk7CiAgfQoKICBmdW5jdGlvbiBZeShlLCB0LCBuKSB7CiAgICBmdW5jdGlvbiByKGUpIHsKICAgICAgcmV0dXJuICFjbihlLm5vZGUpICYmICFKbihlLm5vZGUpOwogICAgfQoKICAgIHZhciBvLAogICAgICAgIGksCiAgICAgICAgYSwKICAgICAgICB1ID0gQnkoVSh4ZShlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCIqIikpLCAkcykpLAogICAgICAgIHMgPSBVKHUsIEEoV3ksIG4pKTsKICAgIGlmICgoYSA9IEt5KHMsIHQsIHIpKSAmJiAoYSA9IEt5KGZ1bmN0aW9uIChlLCByLCB0KSB7CiAgICAgIGZ1bmN0aW9uIG4odCwgZSkgewogICAgICAgIHZhciBuID0gVShCeShbZV0pLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuICF0KGUsIHIpOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBvID0gby5jb25jYXQobiksIDAgPT09IG4ubGVuZ3RoOwogICAgICB9CgogICAgICB2b2lkIDAgPT09IHQgJiYgKHQgPSAhMCk7CiAgICAgIHZhciBvID0gW107CiAgICAgIHJldHVybiBvLnB1c2gociksIFh5KFB5LlVwLCBlLCBBKG4sIFJ1KSwgci5ub2RlLCB0KSwgWHkoUHkuRG93biwgZSwgQShuLCBEdSksIHIubm9kZSwgdCksIG87CiAgICB9KGUsIGEsIHIoYSkpLCB0LCByKSkgJiYgJHMoYS5ub2RlKSkgcmV0dXJuIHsKICAgICAgbm9kZTogKG8gPSBhKS5ub2RlLAogICAgICBiZWZvcmU6IFZ5KG8sIGkgPSB0KSA8IHF5KG8sIGkpCiAgICB9OwogICAgcmV0dXJuIG51bGw7CiAgfQoKICBmdW5jdGlvbiBHeShlLCB0KSB7CiAgICBlLnNlbGVjdGlvbi5zZXRSbmcodCksIFpmKGUsIGUuc2VsZWN0aW9uLmdldFJuZygpKTsKICB9CgogIGZ1bmN0aW9uIEp5KGUsIHQsIG4pIHsKICAgIHJldHVybiB2ZS5zb21lKEViKGUsIHQsIG4pKTsKICB9CgogIGZ1bmN0aW9uIFF5KGUsIHQsIG4sIHIsIG8sIGkpIHsKICAgIHZhciBhID0gdCA9PT0gaWMuRm9yd2FyZHMsCiAgICAgICAgdSA9IFBjKGUuZ2V0Qm9keSgpKSwKICAgICAgICBzID0gQShyYywgYSA/IHUubmV4dCA6IHUucHJldiksCiAgICAgICAgYyA9IGEgPyByIDogbzsKCiAgICBpZiAoIW4uY29sbGFwc2VkKSB7CiAgICAgIHZhciBsID0gT3Uobik7CiAgICAgIGlmIChpKGwpKSByZXR1cm4geGIodCwgZSwgbCwgdCA9PT0gaWMuQmFja3dhcmRzLCAhMSk7CiAgICB9CgogICAgdmFyIGYgPSB0Yyh0LCBlLmdldEJvZHkoKSwgbik7CiAgICBpZiAoYyhmKSkgcmV0dXJuIHdiKGUsIGYuZ2V0Tm9kZSghYSkpOwogICAgdmFyIGQgPSBvYihhLCBzKGYpKSwKICAgICAgICBtID0gSHIobik7CiAgICBpZiAoIWQpIHJldHVybiBtID8gdmUuc29tZShuKSA6IHZlLm5vbmUoKTsKICAgIGlmIChjKGQpKSByZXR1cm4geGIodCwgZSwgZC5nZXROb2RlKCFhKSwgYSwgITEpOwogICAgdmFyIGcgPSBzKGQpOwogICAgcmV0dXJuIGcgJiYgYyhnKSAmJiBvYyhkLCBnKSA/IHhiKHQsIGUsIGcuZ2V0Tm9kZSghYSksIGEsICExKSA6IG0gPyBKeShlLCBkLnRvUmFuZ2UoKSwgITEpIDogdmUubm9uZSgpOwogIH0KCiAgZnVuY3Rpb24gWnkodCwgZSwgbiwgciwgbywgaSkgewogICAgdmFyIGEgPSB0YyhlLCB0LmdldEJvZHkoKSwgbiksCiAgICAgICAgdSA9IHBlKGEuZ2V0Q2xpZW50UmVjdHMoKSksCiAgICAgICAgcyA9IGUgPT09IFB5LkRvd247CiAgICBpZiAoIXUpIHJldHVybiB2ZS5ub25lKCk7CiAgICB2YXIgYywKICAgICAgICBsID0gVSgocyA/IElDIDogTEMpKHQuZ2V0Qm9keSgpLCBIeSgxKSwgYSksIGp5KDEpKSwKICAgICAgICBmID0gdS5sZWZ0LAogICAgICAgIGQgPSBLeShsLCBmKTsKCiAgICBpZiAoZCAmJiBpKGQubm9kZSkpIHsKICAgICAgdmFyIG0gPSBNYXRoLmFicyhmIC0gZC5sZWZ0KSwKICAgICAgICAgIGcgPSBNYXRoLmFicyhmIC0gZC5yaWdodCk7CiAgICAgIHJldHVybiB4YihlLCB0LCBkLm5vZGUsIG0gPCBnLCAhMSk7CiAgICB9CgogICAgaWYgKGMgPSByKGEpID8gYS5nZXROb2RlKCkgOiBvKGEpID8gYS5nZXROb2RlKCEwKSA6IE91KG4pKSB7CiAgICAgIHZhciBwID0gZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsKICAgICAgICBmdW5jdGlvbiBvKGUpIHsKICAgICAgICAgIHJldHVybiBwZShlLmdldENsaWVudFJlY3RzKCkpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGksCiAgICAgICAgICAgIGEsCiAgICAgICAgICAgIHUsCiAgICAgICAgICAgIHMgPSBQYyh0KSwKICAgICAgICAgICAgYyA9IFtdLAogICAgICAgICAgICBsID0gMCwKICAgICAgICAgICAgZiA9IDEgPT09IGUgPyAoaSA9IHMubmV4dCwgYSA9IER1LCB1ID0gUnUsIGFzLmFmdGVyKHIpKSA6IChpID0gcy5wcmV2LCBhID0gUnUsIHUgPSBEdSwgYXMuYmVmb3JlKHIpKSwKICAgICAgICAgICAgZCA9IG8oZik7CgogICAgICAgIGRvIHsKICAgICAgICAgIGlmIChmLmlzVmlzaWJsZSgpKSB7CiAgICAgICAgICAgIHZhciBtID0gbyhmKTsKCiAgICAgICAgICAgIGlmICghdShtLCBkKSkgewogICAgICAgICAgICAgIDAgPCBjLmxlbmd0aCAmJiBhKG0sIHBlKGMpKSAmJiBsKys7CiAgICAgICAgICAgICAgdmFyIGcgPSBrdShtKTsKICAgICAgICAgICAgICBpZiAoZy5wb3NpdGlvbiA9IGYsIGcubGluZSA9IGwsIG4oZykpIHJldHVybiBjOwogICAgICAgICAgICAgIGMucHVzaChnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gd2hpbGUgKGYgPSBpKGYpKTsKCiAgICAgICAgcmV0dXJuIGM7CiAgICAgIH0oZSwgdC5nZXRCb2R5KCksIEh5KDEpLCBjKSwKICAgICAgICAgIGggPSBLeShVKHAsIGp5KDEpKSwgZik7CgogICAgICBpZiAoaCkgcmV0dXJuIEp5KHQsIGgucG9zaXRpb24udG9SYW5nZSgpLCAhMSk7CiAgICAgIGlmIChoID0gcGUoVShwLCBqeSgwKSkpKSByZXR1cm4gSnkodCwgaC5wb3NpdGlvbi50b1JhbmdlKCksICExKTsKICAgIH0KCiAgICByZXR1cm4gMCA9PT0gbC5sZW5ndGggPyBVQyh0LCBzKS5maWx0ZXIocyA/IG8gOiByKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIEViKHQsIGUudG9SYW5nZSgpLCAhMSk7CiAgICB9KSA6IHZlLm5vbmUoKTsKICB9CgogIGZ1bmN0aW9uIGUwKHQsIGUsIG4pIHsKICAgIHJldHVybiBVQyh0LCBlKS5maWx0ZXIobikuZXhpc3RzKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB0LnNlbGVjdGlvbi5zZXRSbmcoZS50b1JhbmdlKCkpLCAhMDsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gdDAoZSwgdCkgewogICAgdmFyIG4gPSBlLmRvbS5jcmVhdGVSbmcoKTsKICAgIG4uc2V0U3RhcnQodC5jb250YWluZXIoKSwgdC5vZmZzZXQoKSksIG4uc2V0RW5kKHQuY29udGFpbmVyKCksIHQub2Zmc2V0KCkpLCBlLnNlbGVjdGlvbi5zZXRSbmcobik7CiAgfQoKICBmdW5jdGlvbiBuMChlLCB0KSB7CiAgICBlID8gdC5zZXRBdHRyaWJ1dGUoImRhdGEtbWNlLXNlbGVjdGVkIiwgImlubGluZS1ib3VuZGFyeSIpIDogdC5yZW1vdmVBdHRyaWJ1dGUoImRhdGEtbWNlLXNlbGVjdGVkIik7CiAgfQoKICBmdW5jdGlvbiByMCh0LCBlLCBuKSB7CiAgICByZXR1cm4gamIoZSwgbikubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB0MCh0LCBlKSwgbjsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gbzAoZSwgdCwgbikgewogICAgcmV0dXJuICEhUHMoZSkgJiYgKG8gPSB0LCBpID0gbiwgYSA9IChyID0gZSkuZ2V0Qm9keSgpLCB1ID0gYXMuZnJvbVJhbmdlU3RhcnQoci5zZWxlY3Rpb24uZ2V0Um5nKCkpLCBpeShpLCBBKG5iLCByKSwgYSwgdSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gcjAociwgbywgZSk7CiAgICB9KS5pc1NvbWUoKSk7CiAgICB2YXIgciwgbywgaSwgYSwgdTsKICB9CgogIGZ1bmN0aW9uIGkwKGUsIHQsIG4pIHsKICAgIHJldHVybiAhIVBzKHQpICYmIChyID0gZSwgaSA9IChvID0gdCkuc2VsZWN0aW9uLmdldFJuZygpLCBhID0gciA/IGFzLmZyb21SYW5nZUVuZChpKSA6IGFzLmZyb21SYW5nZVN0YXJ0KGkpLCAhIXkoby5zZWxlY3Rpb24uZ2V0U2VsKCkubW9kaWZ5KSAmJiAociAmJiBGcihhKSA/IGt5KCEwLCBvLnNlbGVjdGlvbiwgYSkgOiAhKHIgfHwgIVVyKGEpKSAmJiBreSghMSwgby5zZWxlY3Rpb24sIGEpKSk7CiAgICB2YXIgciwgbywgaSwgYTsKICB9CgogIGZ1bmN0aW9uIGEwKGcpIHsKICAgIHZhciBwID0gcnUobnVsbCksCiAgICAgICAgaCA9IEEobmIsIGcpOwogICAgcmV0dXJuIGcub24oIk5vZGVDaGFuZ2UiLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgbiwgciwgbywgdCwgaSwgYSwgdSwgcywgYywgbCwgZiwgZCwgbTsKICAgICAgIVBzKGcpIHx8IHh0LmJyb3dzZXIuaXNJRSgpICYmIGUuaW5pdGlhbCB8fCAoaSA9IGgsIGEgPSBnLmRvbSwgdSA9IGUucGFyZW50cywgWSgkKHMgPSBVKFQoaHUoTnQuZnJvbURvbShhLmdldFJvb3QoKSksICcqW2RhdGEtbWNlLXNlbGVjdGVkPSJpbmxpbmUtYm91bmRhcnkiXScpLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlLmRvbTsKICAgICAgfSksIGkpLCBjID0gVSh1LCBpKSksIEEobjAsICExKSksIFkoJChjLCBzKSwgQShuMCwgITApKSwgZiA9IHAsIChsID0gZykuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgJiYgITAgIT09IGwuY29tcG9zaW5nICYmIGYuZ2V0KCkgJiYgKGQgPSBhcy5mcm9tUmFuZ2VTdGFydChsLnNlbGVjdGlvbi5nZXRSbmcoKSksIGFzLmlzVGV4dFBvc2l0aW9uKGQpICYmICExID09PSAoRnIobSA9IGQpIHx8IFVyKG0pKSAmJiAodDAobCwgSHMoZi5nZXQoKSwgZCkpLCBmLnNldChudWxsKSkpLCBuID0gaCwgciA9IGcsIG8gPSBwLCB0ID0gZS5wYXJlbnRzLCByLnNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpICYmIFkoVSh0LCBuKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdCA9IGFzLmZyb21SYW5nZVN0YXJ0KHIuc2VsZWN0aW9uLmdldFJuZygpKTsKICAgICAgICBRYihuLCByLmdldEJvZHkoKSwgdCkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIHIwKHIsIG8sIGUpOwogICAgICAgIH0pOwogICAgICB9KSk7CiAgICB9KSwgcDsKICB9CgogIGZ1bmN0aW9uIHUwKG4sIHQsIHIpIHsKICAgIGlmIChQcyhuKSkgewogICAgICB2YXIgZSA9IFVDKG4sIHQpLmdldE9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBlID0gbi5zZWxlY3Rpb24uZ2V0Um5nKCk7CiAgICAgICAgcmV0dXJuIHQgPyBhcy5mcm9tUmFuZ2VFbmQoZSkgOiBhcy5mcm9tUmFuZ2VTdGFydChlKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBRYihBKG5iLCBuKSwgbi5nZXRCb2R5KCksIGUpLmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gZXkoZSk7CiAgICAgICAgcmV0dXJuIGpiKHIsIHQpLmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIHQwKG4sIGUpLCAhMDsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuICExOwogIH0KCiAgZnVuY3Rpb24gczAodCwgbikgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBqYihuLCBlKS5leGlzdHMoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gdDAodCwgZSksICEwOwogICAgICB9KTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBjMChyLCBvLCBpLCBhKSB7CiAgICB2YXIgdSA9IHIuZ2V0Qm9keSgpLAogICAgICAgIHMgPSBBKG5iLCByKTsKICAgIHIudW5kb01hbmFnZXIuaWdub3JlKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGUsIHQsIG47CiAgICAgIHIuc2VsZWN0aW9uLnNldFJuZygoZSA9IGksIHQgPSBhLCAobiA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCkpLnNldFN0YXJ0KGUuY29udGFpbmVyKCksIGUub2Zmc2V0KCkpLCBuLnNldEVuZCh0LmNvbnRhaW5lcigpLCB0Lm9mZnNldCgpKSwgbikpLCByLmV4ZWNDb21tYW5kKCJEZWxldGUiKSwgUWIocywgdSwgYXMuZnJvbVJhbmdlU3RhcnQoci5zZWxlY3Rpb24uZ2V0Um5nKCkpKS5tYXAodHkpLm1hcChzMChyLCBvKSk7CiAgICB9KSwgci5ub2RlQ2hhbmdlZCgpOwogIH0KCiAgZnVuY3Rpb24gbDAoZSwgdCwgbikgewogICAgaWYgKGUuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgJiYgUHMoZSkpIHsKICAgICAgdmFyIHIgPSBhcy5mcm9tUmFuZ2VTdGFydChlLnNlbGVjdGlvbi5nZXRSbmcoKSk7CiAgICAgIHJldHVybiBvID0gdCwgYSA9IG4sIHUgPSByLCBzID0gKGkgPSBlKS5nZXRCb2R5KCksIGMgPSBYcyh1LmNvbnRhaW5lcigpLCBzKSB8fCBzLCBsID0gQShuYiwgaSksIChmID0gUWIobCwgYywgdSkpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gYSA/IGUuZm9sZChKKHZlLnNvbWUodHkoZSkpKSwgdmUubm9uZSwgSih2ZS5zb21lKGV5KGUpKSksIHZlLm5vbmUpIDogZS5mb2xkKHZlLm5vbmUsIEoodmUuc29tZShleShlKSkpLCB2ZS5ub25lLCBKKHZlLnNvbWUodHkoZSkpKSk7CiAgICAgIH0pLm1hcChzMChpLCBvKSkuZ2V0T3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHQgPSBGYyhhLCBjLCB1KSwKICAgICAgICAgICAgZSA9IHQuYmluZChmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIFFiKGwsIGMsIGUpOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBkbihmLCBlLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gcmIobCwgYywgdSkuZXhpc3RzKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiAhIWRuKGVmKG8gPSBlKSwgdGYobyksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgICAgdmFyIG4gPSBvYighMCwgZSksCiAgICAgICAgICAgICAgICAgIHIgPSBvYighMSwgdCk7CiAgICAgICAgICAgICAgcmV0dXJuIFFsKG8sIG4pLmZvcmFsbChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGUuaXNFcXVhbChyKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSkuZ2V0T3IoITApICYmIChZbShpLCBhLCBOdC5mcm9tRG9tKGUpKSwgITApOwogICAgICAgICAgICB2YXIgbzsKICAgICAgICAgIH0pOwogICAgICAgIH0pLm9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIGUuYmluZChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gdC5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gYSA/IGMwKGksIG8sIHUsIGUpIDogYzAoaSwgbywgZSwgdSksICEwOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pLmdldE9yKCExKTsKICAgICAgfSk7CiAgICB9CgogICAgdmFyIGksIG8sIGEsIHUsIHMsIGMsIGwsIGY7CiAgICByZXR1cm4gITE7CiAgfQoKICBmdW5jdGlvbiBmMChlKSB7CiAgICByZXR1cm4gMSA9PT0genQoZSk7CiAgfQoKICBmdW5jdGlvbiBkMChnLCBwKSB7CiAgICB2YXIgdCwKICAgICAgICBlID0gTnQuZnJvbURvbShnLmdldEJvZHkoKSksCiAgICAgICAgbiA9IE50LmZyb21Eb20oZy5zZWxlY3Rpb24uZ2V0U3RhcnQoKSksCiAgICAgICAgaCA9IFUoeih0ID0gaG0obiwgZSksIGxvKS5mb2xkKEoodCksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB0LnNsaWNlKDAsIGUpOwogICAgfSksIGYwKTsKICAgIHJldHVybiBaKGgpLmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCwKICAgICAgICAgIG4sCiAgICAgICAgICByLAogICAgICAgICAgbywKICAgICAgICAgIGksCiAgICAgICAgICBhLAogICAgICAgICAgdSwKICAgICAgICAgIHMsCiAgICAgICAgICBjLAogICAgICAgICAgbCA9IGFzLmZyb21SYW5nZVN0YXJ0KGcuc2VsZWN0aW9uLmdldFJuZygpKSwKICAgICAgICAgIGYgPSBwLAogICAgICAgICAgZCA9IGwsCiAgICAgICAgICBtID0gZS5kb207CiAgICAgIHJldHVybiAhKCFkbihlZihtKSwgdGYobSksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgdmFyIG4gPSBvYighMCwgZSksCiAgICAgICAgICAgIHIgPSBvYighMSwgdCksCiAgICAgICAgICAgIG8gPSBvYighMSwgZCk7CiAgICAgICAgcmV0dXJuIGYgPyBRbChtLCBvKS5leGlzdHMoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlLmlzRXF1YWwocikgJiYgZC5pc0VxdWFsKG4pOwogICAgICAgIH0pIDogWmwobSwgbykuZXhpc3RzKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gZS5pc0VxdWFsKG4pICYmIGQuaXNFcXVhbChyKTsKICAgICAgICB9KTsKICAgICAgfSkuZ2V0T3IoITApIHx8IHpjKCh0ID0gZSkuZG9tKSAmJiBQZyh0LmRvbSkgfHwgKG4gPSBwLCBvID0gZSwgMCA9PT0gKGMgPSBUKFUoaCwgQShWZywgciA9IGcpKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gZS5kb207CiAgICAgIH0pKS5sZW5ndGggPyBZbShyLCBuLCBvKSA6IChhID0gby5kb20sIHMgPSB6ZyhjLCAodSA9IElnKCExKSkuZG9tKSwgcXQoTnQuZnJvbURvbShhKSwgdSksIExuKE50LmZyb21Eb20oYSkpLCBpID0gYXMocywgMCksIHIuc2VsZWN0aW9uLnNldFJuZyhpLnRvUmFuZ2UoKSkpLCAwKSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIG0wKGUsIHQpIHsKICAgIHJldHVybiAhIWUuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgJiYgZDAoZSwgdCk7CiAgfQoKICBmdW5jdGlvbiBnMChlLCB0LCBuKSB7CiAgICByZXR1cm4gZS5fc2VsZWN0aW9uT3ZlcnJpZGVzLmhpZGVGYWtlQ2FyZXQoKSwgWW0oZSwgdCwgTnQuZnJvbURvbShuKSksICEwOwogIH0KCiAgZnVuY3Rpb24gcDAoZSwgdCkgewogICAgcmV0dXJuIGUuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgPyAoaSA9IGUsIHUgPSAoYSA9IHQpID8gR2cgOiBKZywgcyA9IGEgPyBpYy5Gb3J3YXJkcyA6IGljLkJhY2t3YXJkcywgYyA9IHRjKHMsIGkuZ2V0Qm9keSgpLCBpLnNlbGVjdGlvbi5nZXRSbmcoKSksIHUoYykgPyBnMChpLCBhLCBjLmdldE5vZGUoIWEpKSA6IHZlLmZyb20ob2IoYSwgYykpLmZpbHRlcihmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gdShlKSAmJiBvYyhjLCBlKTsKICAgIH0pLmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gZzAoaSwgYSwgZS5nZXROb2RlKCFhKSk7CiAgICB9KSkgOiAociA9IHQsIG8gPSAobiA9IGUpLnNlbGVjdGlvbi5nZXROb2RlKCksICEhSm4obykgJiYgZzAobiwgciwgbykpOwogICAgdmFyIG4sIHIsIG8sIGksIGEsIHUsIHMsIGM7CiAgfQoKICBmdW5jdGlvbiBoMChlKSB7CiAgICB2YXIgdCA9IHBhcnNlSW50KGUsIDEwKTsKICAgIHJldHVybiBpc05hTih0KSA/IDAgOiB0OwogIH0KCiAgZnVuY3Rpb24gdjAoZSwgdCkgewogICAgcmV0dXJuIChlIHx8ICJ0YWJsZSIgPT09IGt0KHQpID8gIm1hcmdpbiIgOiAicGFkZGluZyIpICsgKCJydGwiID09PSB4bih0LCAiZGlyZWN0aW9uIikgPyAiLXJpZ2h0IiA6ICItbGVmdCIpOwogIH0KCiAgZnVuY3Rpb24gYjAoZSkgewogICAgdmFyIG4sCiAgICAgICAgdCA9IGpDKGUpOwogICAgcmV0dXJuICFlLm1vZGUuaXNSZWFkT25seSgpICYmICgxIDwgdC5sZW5ndGggfHwgKG4gPSBlLCBqKHQsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gd24oZSwgdjAoUnMobiksIGUpKS5tYXAoaDApLmdldE9yKDApOwogICAgICByZXR1cm4gImZhbHNlIiAhPT0gbi5kb20uZ2V0Q29udGVudEVkaXRhYmxlKGUuZG9tKSAmJiAwIDwgdDsKICAgIH0pKSk7CiAgfQoKICBmdW5jdGlvbiB5MChlKSB7CiAgICByZXR1cm4gbW8oZSkgfHwgZ28oZSk7CiAgfQoKICBmdW5jdGlvbiBDMChlLCBzKSB7CiAgICB2YXIgYyA9IGUuZG9tLAogICAgICAgIHQgPSBlLnNlbGVjdGlvbiwKICAgICAgICBuID0gZS5mb3JtYXR0ZXIsCiAgICAgICAgciA9IGUuZ2V0UGFyYW0oImluZGVudGF0aW9uIiwgIjQwcHgiLCAic3RyaW5nIiksCiAgICAgICAgbCA9IC9bYS16JV0rJC9pLmV4ZWMocilbMF0sCiAgICAgICAgZiA9IHBhcnNlSW50KHIsIDEwKSwKICAgICAgICBkID0gUnMoZSksCiAgICAgICAgbyA9IFNzKGUpOwogICAgZS5xdWVyeUNvbW1hbmRTdGF0ZSgiSW5zZXJ0VW5vcmRlcmVkTGlzdCIpIHx8IGUucXVlcnlDb21tYW5kU3RhdGUoIkluc2VydE9yZGVyZWRMaXN0IikgfHwgIiIgIT09IG8gfHwgYy5nZXRQYXJlbnQodC5nZXROb2RlKCksIGMuaXNCbG9jaykgfHwgbi5hcHBseSgiZGl2IiksIFkoakMoZSksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0LAogICAgICAgICAgbiA9IGMsCiAgICAgICAgICByID0gcywKICAgICAgICAgIG8gPSBmLAogICAgICAgICAgaSA9IGwsCiAgICAgICAgICBhID0gZS5kb20sCiAgICAgICAgICB1ID0gdjAoZCwgTnQuZnJvbURvbShhKSk7CiAgICAgICJvdXRkZW50IiA9PT0gciA/ICh0ID0gTWF0aC5tYXgoMCwgaDAoYS5zdHlsZVt1XSkgLSBvKSwgbi5zZXRTdHlsZShhLCB1LCB0ID8gdCArIGkgOiAiIikpIDogKHQgPSBoMChhLnN0eWxlW3VdKSArIG8gKyBpLCBuLnNldFN0eWxlKGEsIHUsIHQpKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24geDAoZSwgdCkgewogICAgaWYgKGUuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgJiYgYjAoZSkpIHsKICAgICAgdmFyIG4gPSBlLmRvbSwKICAgICAgICAgIHIgPSBlLnNlbGVjdGlvbi5nZXRSbmcoKSwKICAgICAgICAgIG8gPSBhcy5mcm9tUmFuZ2VTdGFydChyKSwKICAgICAgICAgIGkgPSBuLmdldFBhcmVudChyLnN0YXJ0Q29udGFpbmVyLCBuLmlzQmxvY2spOwogICAgICBpZiAobnVsbCAhPT0gaSAmJiBucChOdC5mcm9tRG9tKGkpLCBvKSkgcmV0dXJuIEMwKGUsICJvdXRkZW50IiksICEwOwogICAgfQoKICAgIHJldHVybiAhMTsKICB9CgogIGZ1bmN0aW9uIHcwKGUsIHQpIHsKICAgIGUuZ2V0RG9jKCkuZXhlY0NvbW1hbmQodCwgITEsIG51bGwpOwogIH0KCiAgZnVuY3Rpb24gUzAoZSkgewogICAgcmV0dXJuIHZvaWQgMCA9PT0gZS50b3VjaGVzIHx8IDEgIT09IGUudG91Y2hlcy5sZW5ndGggPyB2ZS5ub25lKCkgOiB2ZS5zb21lKGUudG91Y2hlc1swXSk7CiAgfQoKICBmdW5jdGlvbiBFMChlLCB0KSB7CiAgICByZXR1cm4gTmUoZSwgdC5ub2RlTmFtZSk7CiAgfQoKICBmdW5jdGlvbiBOMChlKSB7CiAgICB2YXIgdCwKICAgICAgICBuLAogICAgICAgIHIsCiAgICAgICAgbyA9IGUuZG9tLAogICAgICAgIGkgPSBlLnNlbGVjdGlvbiwKICAgICAgICBhID0gZS5zY2hlbWEsCiAgICAgICAgdSA9IGEuZ2V0QmxvY2tFbGVtZW50cygpLAogICAgICAgIHMgPSBpLmdldFN0YXJ0KCksCiAgICAgICAgYyA9IGUuZ2V0Qm9keSgpLAogICAgICAgIGwgPSBTcyhlKTsKCiAgICBpZiAocyAmJiB6bihzKSAmJiBsKSB7CiAgICAgIHZhciBmID0gYy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwoKICAgICAgaWYgKGEuaXNWYWxpZENoaWxkKGYsIGwudG9Mb3dlckNhc2UoKSkgJiYgKGQgPSB1LCBtID0gYywgZyA9IHMsICFGKHBtKE50LmZyb21Eb20oZyksIE50LmZyb21Eb20obSkpLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBFMChkLCBlLmRvbSk7CiAgICAgIH0pKSkgewogICAgICAgIGZvciAodmFyIGQsIG0sIGcsIHAsIGgsIHYgPSBpLmdldFJuZygpLCBiID0gdi5zdGFydENvbnRhaW5lciwgeSA9IHYuc3RhcnRPZmZzZXQsIEMgPSB2LmVuZENvbnRhaW5lciwgeCA9IHYuZW5kT2Zmc2V0LCB3ID0gdmQoZSksIHMgPSBjLmZpcnN0Q2hpbGQ7IHM7KSB7CiAgICAgICAgICBwID0gdSwgam4oaCA9IHMpIHx8IHpuKGgpICYmICFFMChwLCBoKSAmJiAhWWMoaCkgPyBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICBpZiAoam4odCkpIHsKICAgICAgICAgICAgICBpZiAoMCA9PT0gdC5ub2RlVmFsdWUubGVuZ3RoKSByZXR1cm4gMTsKICAgICAgICAgICAgICBpZiAoL15ccyskLy50ZXN0KHQubm9kZVZhbHVlKSAmJiAoIXQubmV4dFNpYmxpbmcgfHwgRTAoZSwgdC5uZXh0U2libGluZykpKSByZXR1cm4gMTsKICAgICAgICAgICAgfQogICAgICAgICAgfSh1LCBzKSA/IChzID0gKG4gPSBzKS5uZXh0U2libGluZywgby5yZW1vdmUobikpIDogKHQgfHwgKHQgPSBvLmNyZWF0ZShsLCBFcyhlKSksIHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCwgcyksIHIgPSAhMCksIHMgPSAobiA9IHMpLm5leHRTaWJsaW5nLCB0LmFwcGVuZENoaWxkKG4pKSA6ICh0ID0gbnVsbCwgcyA9IHMubmV4dFNpYmxpbmcpOwogICAgICAgIH0KCiAgICAgICAgciAmJiB3ICYmICh2LnNldFN0YXJ0KGIsIHkpLCB2LnNldEVuZChDLCB4KSwgaS5zZXRSbmcodiksIGUubm9kZUNoYW5nZWQoKSk7CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIGswKGUsIHQpIHsKICAgIHQuaGFzQXR0cmlidXRlKCJkYXRhLW1jZS1jYXJldCIpICYmICh6cih0KSwgZS5zZWxlY3Rpb24uc2V0Um5nKGUuc2VsZWN0aW9uLmdldFJuZygpKSwgZS5zZWxlY3Rpb24uc2Nyb2xsSW50b1ZpZXcodCkpOwogIH0KCiAgZnVuY3Rpb24gXzAoZSwgdCkgewogICAgdmFyIG4gPSB2cihOdC5mcm9tRG9tKGUuZ2V0Qm9keSgpKSwgIipbZGF0YS1tY2UtY2FyZXRdIikubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBlLmRvbTsKICAgIH0pLmdldE9yTnVsbCgpOwogICAgaWYgKG4pIHJldHVybiAiY29tcG9zaXRpb25zdGFydCIgPT09IHQudHlwZSA/ICh0LnByZXZlbnREZWZhdWx0KCksIHQuc3RvcFByb3BhZ2F0aW9uKCksIHZvaWQgazAoZSwgbikpIDogdm9pZCAoTXIobikgJiYgKGswKGUsIG4pLCBlLnVuZG9NYW5hZ2VyLmFkZCgpKSk7CiAgfQoKICBmdW5jdGlvbiBBMChlLCB0LCBuKSB7CiAgICB2YXIgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYSA9IFBjKGUuZ2V0Qm9keSgpKSwKICAgICAgICB1ID0gQShyYywgMSA9PT0gdCA/IGEubmV4dCA6IGEucHJldik7CiAgICAhbi5jb2xsYXBzZWQgfHwgIiIgPT09IFNzKGUpIHx8IChyID0gZS5kb20uZ2V0UGFyZW50KG4uc3RhcnRDb250YWluZXIsICJQUkUiKSkgJiYgKHUoYXMuZnJvbVJhbmdlU3RhcnQobikpIHx8IChpID0gZS5kb20uY3JlYXRlKFNzKGUpKSwgKCF4dC5pZSB8fCAxMSA8PSB4dC5pZSkgJiYgKGkuaW5uZXJIVE1MID0gJzxiciBkYXRhLW1jZS1ib2d1cz0iMSI+JyksIG8gPSBpLCAxID09PSB0ID8gZS4kKHIpLmFmdGVyKG8pIDogZS4kKHIpLmJlZm9yZShvKSwgZS5zZWxlY3Rpb24uc2VsZWN0KG8sICEwKSwgZS5zZWxlY3Rpb24uY29sbGFwc2UoKSkpOwogIH0KCiAgZnVuY3Rpb24gUjAodCwgZSkgewogICAgcmV0dXJuIG4gPSB0LCByID0gZSA/IGljLkZvcndhcmRzIDogaWMuQmFja3dhcmRzLCBvID0gbi5zZWxlY3Rpb24uZ2V0Um5nKCksIFF5KG4sIHIsIG8sIGVwLCB0cCwgVkMpLm9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gQTAobiwgciwgbyksIHZlLm5vbmUoKTsKICAgIH0pLmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gR3kodCwgZSksICEwOwogICAgfSk7CiAgICB2YXIgbiwgciwgbzsKICB9CgogIGZ1bmN0aW9uIEQwKHQsIGUpIHsKICAgIHJldHVybiByID0gZSA/IDEgOiAtMSwgbyA9IChuID0gdCkuc2VsZWN0aW9uLmdldFJuZygpLCBaeShuLCByLCBvLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gZXAoZSkgfHwgUWcoZSk7CiAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gdHAoZSkgfHwgWmcoZSk7CiAgICB9LCBWQykub3JUaHVuayhmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBBMChuLCByLCBvKSwgdmUubm9uZSgpOwogICAgfSkuZXhpc3RzKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBHeSh0LCBlKSwgITA7CiAgICB9KTsKICAgIHZhciBuLCByLCBvOwogIH0KCiAgZnVuY3Rpb24gVDAoZSwgdCkgewogICAgcmV0dXJuIGUwKGUsIHQsIHQgPyB0cCA6IGVwKTsKICB9CgogIGZ1bmN0aW9uIE8wKGUpIHsKICAgIHJldHVybiBEKFsiZmlnY2FwdGlvbiJdLCBrdChlKSk7CiAgfQoKICBmdW5jdGlvbiBCMChlKSB7CiAgICB2YXIgdCA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7CiAgICByZXR1cm4gdC5zZXRTdGFydEJlZm9yZShlLmRvbSksIHQuc2V0RW5kQmVmb3JlKGUuZG9tKSwgdDsKICB9CgogIGZ1bmN0aW9uIFAwKGUsIHQsIG4pIHsKICAgIChuID8gUG4gOiBXdCkoZSwgdCk7CiAgfQoKICBmdW5jdGlvbiBMMChoLCB2KSB7CiAgICB2YXIgYiA9IE50LmZyb21Eb20oaC5nZXRCb2R5KCkpLAogICAgICAgIHkgPSBhcy5mcm9tUmFuZ2VTdGFydChoLnNlbGVjdGlvbi5nZXRSbmcoKSksCiAgICAgICAgQyA9IFNzKGgpLAogICAgICAgIHggPSBFcyhoKSwKICAgICAgICBlID0geSwKICAgICAgICB0ID0gQShqZSwgYik7CiAgICByZXR1cm4gcHIoTnQuZnJvbURvbShlLmNvbnRhaW5lcigpKSwgbG8sIHQpLmZpbHRlcihPMCkuZXhpc3RzKGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKGQgPSBiLCBtID0geSwgdiA/IChwID0gZC5kb20sIE15KHAsIG0pLmJyZWFrQXQuaXNOb25lKCkpIDogKGcgPSBkLmRvbSwgSXkoZywgbSkuYnJlYWtBdC5pc05vbmUoKSkpIHsKICAgICAgICB2YXIgZSA9ICh0ID0gYiwgciA9IHgsIG8gPSB2LCAiIiA9PT0gKG4gPSBDKSA/IChsID0gbywgUDAodCwgZiA9IE50LmZyb21UYWcoImJyIiksIGwpLCBCMChmKSkgOiAoaSA9IHQsIGEgPSBvLCB1ID0gciwgcyA9IE50LmZyb21UYWcobiksIGMgPSBOdC5mcm9tVGFnKCJiciIpLCBobihzLCB1KSwgUG4ocywgYyksIFAwKGksIHMsIGEpLCBCMChjKSkpOwogICAgICAgIHJldHVybiBoLnNlbGVjdGlvbi5zZXRSbmcoZSksICEwOwogICAgICB9CgogICAgICB2YXIgdCwgbiwgciwgbywgaSwgYSwgdSwgcywgYywgbCwgZiwgZCwgbSwgZywgcDsKICAgICAgcmV0dXJuICExOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBJMChlLCB0KSB7CiAgICByZXR1cm4gISFlLnNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpICYmIEwwKGUsIHQpOwogIH0KCiAgZnVuY3Rpb24gTTAoZSkgewogICAgZm9yICh2YXIgdCA9IFtdLCBuID0gMTsgbiA8IGFyZ3VtZW50cy5sZW5ndGg7IG4rKykgewogICAgICB0W24gLSAxXSA9IGFyZ3VtZW50c1tuXTsKICAgIH0KCiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gZS5hcHBseShudWxsLCB0KTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBGMChlLCB0KSB7CiAgICByZXR1cm4gTSgobiA9IHQsIEgoVChlLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gX2UyKHsKICAgICAgICBzaGlmdEtleTogITEsCiAgICAgICAgYWx0S2V5OiAhMSwKICAgICAgICBjdHJsS2V5OiAhMSwKICAgICAgICBtZXRhS2V5OiAhMSwKICAgICAgICBrZXlDb2RlOiAwLAogICAgICAgIGFjdGlvbjogdGUKICAgICAgfSwgZSk7CiAgICB9KSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIG4ua2V5Q29kZSA9PT0gZS5rZXlDb2RlICYmIG4uc2hpZnRLZXkgPT09IGUuc2hpZnRLZXkgJiYgbi5hbHRLZXkgPT09IGUuYWx0S2V5ICYmIG4uY3RybEtleSA9PT0gZS5jdHJsS2V5ICYmIG4ubWV0YUtleSA9PT0gZS5tZXRhS2V5ID8gW2VdIDogW107CiAgICB9KSksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBlLmFjdGlvbigpOwogICAgfSk7CiAgICB2YXIgbjsKICB9CgogIGZ1bmN0aW9uIFUwKHQsIGUpIHsKICAgIHZhciBuID0gZSA/IGljLkZvcndhcmRzIDogaWMuQmFja3dhcmRzLAogICAgICAgIHIgPSB0LnNlbGVjdGlvbi5nZXRSbmcoKTsKICAgIHJldHVybiBReSh0LCBuLCByLCBHZywgSmcsIEpuKS5leGlzdHMoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIEd5KHQsIGUpLCAhMDsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gejAodCwgZSkgewogICAgdmFyIG4gPSBlID8gMSA6IC0xLAogICAgICAgIHIgPSB0LnNlbGVjdGlvbi5nZXRSbmcoKTsKICAgIHJldHVybiBaeSh0LCBuLCByLCBHZywgSmcsIEpuKS5leGlzdHMoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIEd5KHQsIGUpLCAhMDsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gSDAoZSwgdCkgewogICAgcmV0dXJuIGUwKGUsIHQsIHQgPyBKZyA6IEdnKTsKICB9CgogIGZ1bmN0aW9uIGowKGUsIHQsIG4sIHIsIG8pIHsKICAgIHZhciBpLAogICAgICAgIGEgPSBodShOdC5mcm9tRG9tKG4pLCAidGQsdGgsY2FwdGlvbiIpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gZS5kb207CiAgICB9KSwKICAgICAgICB1ID0gVSgoaSA9IGUsIEgoYSwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsCiAgICAgICAgICBuID0gewogICAgICAgIGxlZnQ6ICh0ID0ga3UoZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkpLmxlZnQgLSAtMSwKICAgICAgICB0b3A6IHQudG9wIC0gLTEsCiAgICAgICAgcmlnaHQ6IHQucmlnaHQgKyAtMiwKICAgICAgICBib3R0b206IHQuYm90dG9tICsgLTIsCiAgICAgICAgd2lkdGg6IHQud2lkdGggKyAtMSwKICAgICAgICBoZWlnaHQ6IHQuaGVpZ2h0ICsgLTEKICAgICAgfTsKICAgICAgcmV0dXJuIFt7CiAgICAgICAgeDogbi5sZWZ0LAogICAgICAgIHk6IGkobiksCiAgICAgICAgY2VsbDogZQogICAgICB9LCB7CiAgICAgICAgeDogbi5yaWdodCwKICAgICAgICB5OiBpKG4pLAogICAgICAgIGNlbGw6IGUKICAgICAgfV07CiAgICB9KSksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB0KGUsIG8pOwogICAgfSksCiAgICAgICAgcyA9IHIsCiAgICAgICAgYyA9IG87CiAgICByZXR1cm4gTCh1LCBmdW5jdGlvbiAoZSwgcikgewogICAgICByZXR1cm4gZS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdmUuc29tZShyKTsKICAgICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdCA9IE1hdGguc3FydChNYXRoLmFicyhlLnggLSBzKSArIE1hdGguYWJzKGUueSAtIGMpKSwKICAgICAgICAgICAgbiA9IE1hdGguc3FydChNYXRoLmFicyhyLnggLSBzKSArIE1hdGguYWJzKHIueSAtIGMpKTsKICAgICAgICByZXR1cm4gdmUuc29tZShuIDwgdCA/IHIgOiBlKTsKICAgICAgfSk7CiAgICB9LCB2ZS5ub25lKCkpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gZS5jZWxsOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBWMChlLCB0LCBuKSB7CiAgICB2YXIgciwKICAgICAgICBvLAogICAgICAgIGkgPSBlKHQsIG4pOwogICAgcmV0dXJuIGkuYnJlYWtUeXBlID09PSB1eS5XcmFwICYmIDAgPT09IGkucG9zaXRpb25zLmxlbmd0aCB8fCAhV24obi5nZXROb2RlKCkpICYmIGkuYnJlYWtUeXBlID09PSB1eS5CciAmJiAxID09PSBpLnBvc2l0aW9ucy5sZW5ndGggPyAociA9IGUsIG8gPSB0LCAhaS5icmVha0F0LmV4aXN0cyhmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gcihvLCBlKS5icmVha0F0LmlzU29tZSgpOwogICAgfSkpIDogaS5icmVha0F0LmlzTm9uZSgpOwogIH0KCiAgZnVuY3Rpb24gcTAodCwgZSwgbiwgcikgewogICAgdmFyIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUgPSB0LnNlbGVjdGlvbi5nZXRSbmcoKSwKICAgICAgICBzID0gZSA/IDEgOiAtMTsKICAgIHJldHVybiAhKCFxcygpIHx8IChvID0gZSwgaSA9IG4sIGEgPSBhcy5mcm9tUmFuZ2VTdGFydCh1KSwgIVVjKCFvLCBpKS5leGlzdHMoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGUuaXNFcXVhbChhKTsKICAgIH0pKSB8fCAoeGIocywgdCwgbiwgIWUsICExKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIEd5KHQsIGUpOwogICAgfSksIDApKTsKICB9CgogIGZ1bmN0aW9uICQwKHUsIHMsIGMpIHsKICAgIHZhciBlLAogICAgICAgIHQsCiAgICAgICAgbiA9IChlID0gISFzLCB0ID0gYy5nZXROb2RlKGUpLCB6bih0KSAmJiAiVEFCTEUiID09PSB0Lm5vZGVOYW1lID8gdmUuc29tZSh0KSA6IHZlLm5vbmUoKSksCiAgICAgICAgciA9ICExID09PSBzOwogICAgbi5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIEd5KHUsIGMudG9SYW5nZSgpKTsKICAgIH0sIGZ1bmN0aW9uIChhKSB7CiAgICAgIHJldHVybiBVYyhyLCB1LmdldEJvZHkoKSkuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGUuaXNFcXVhbChjKTsKICAgICAgfSkuZm9sZChmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIEd5KHUsIGMudG9SYW5nZSgpKTsKICAgICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgbiwKICAgICAgICAgICAgciwKICAgICAgICAgICAgbyA9IHMsCiAgICAgICAgICAgIGkgPSBhLAogICAgICAgICAgICB0ID0gYzsKICAgICAgICAociA9IFNzKG4gPSB1KSkgPyBuLnVuZG9NYW5hZ2VyLnRyYW5zYWN0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBlID0gTnQuZnJvbVRhZyhyKTsKICAgICAgICAgIGhuKGUsIEVzKG4pKSwgUG4oZSwgTnQuZnJvbVRhZygiYnIiKSksIChvID8gJHQgOiBxdCkoTnQuZnJvbURvbShpKSwgZSk7CiAgICAgICAgICB2YXIgdCA9IG4uZG9tLmNyZWF0ZVJuZygpOwogICAgICAgICAgdC5zZXRTdGFydChlLmRvbSwgMCksIHQuc2V0RW5kKGUuZG9tLCAwKSwgR3kobiwgdCk7CiAgICAgICAgfSkgOiBHeShuLCB0LnRvUmFuZ2UoKSk7CiAgICAgIH0pOwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBXMChlLCB0LCBuLCByKSB7CiAgICB2YXIgbywKICAgICAgICBpLAogICAgICAgIGEsCiAgICAgICAgdSwKICAgICAgICBzLAogICAgICAgIGMsCiAgICAgICAgbCwKICAgICAgICBmLAogICAgICAgIGQsCiAgICAgICAgbSwKICAgICAgICBnID0gZS5zZWxlY3Rpb24uZ2V0Um5nKCksCiAgICAgICAgcCA9IGFzLmZyb21SYW5nZVN0YXJ0KGcpLAogICAgICAgIGggPSBlLmdldEJvZHkoKTsKICAgIGlmICh0IHx8ICFXQyhyLCBwKSkgcmV0dXJuICEoIXQgfHwgIUtDKHIsIHApKSAmJiAobyA9IGgsIGQgPSBpID0gbiwgJDAoZSwgdCwgdiA9IFooKG0gPSBhID0gcCkuZ2V0Q2xpZW50UmVjdHMoKSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gJEMoZCwgZS5sZWZ0LCBlLnRvcCk7CiAgICB9KS5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBUeShlZih0ID0gZSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIFtlXS5jb25jYXQoTXkodCwgZSkucG9zaXRpb25zKTsKICAgICAgfSkuZ2V0T3IoW10pLCBtKTsKICAgICAgdmFyIHQ7CiAgICB9KS5vclRodW5rKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFEoYS5nZXRDbGllbnRSZWN0cygpKS5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIER5KFV5KG8sIGFzLmFmdGVyKGkpKSwgZS5sZWZ0KTsKICAgICAgfSk7CiAgICB9KS5nZXRPcihhcy5hZnRlcihpKSkpLCAhMCk7CiAgICB2YXIgdiA9ICh1ID0gaCwgbCA9IHMgPSBuLCBRKChmID0gYyA9IHApLmdldENsaWVudFJlY3RzKCkpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHFDKGwsIGUubGVmdCwgZS50b3ApOwogICAgfSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gVHkodGYodCA9IGUpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBJeSh0LCBlKS5wb3NpdGlvbnMuY29uY2F0KGUpOwogICAgICB9KS5nZXRPcihbXSksIGYpOwogICAgICB2YXIgdDsKICAgIH0pLm9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gUShjLmdldENsaWVudFJlY3RzKCkpLmJpbmQoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gRHkoRnkodSwgYXMuYmVmb3JlKHMpKSwgZS5sZWZ0KTsKICAgICAgfSk7CiAgICB9KS5nZXRPcihhcy5iZWZvcmUocykpKTsKICAgIHJldHVybiAkMChlLCB0LCB2KSwgITA7CiAgfQoKICBmdW5jdGlvbiBLMChuLCByLCBvKSB7CiAgICByZXR1cm4gdmUuZnJvbShuLmRvbS5nZXRQYXJlbnQobi5zZWxlY3Rpb24uZ2V0Tm9kZSgpLCAidGQsdGgiKSkuYmluZChmdW5jdGlvbiAodCkgewogICAgICByZXR1cm4gdmUuZnJvbShuLmRvbS5nZXRQYXJlbnQodCwgInRhYmxlIikpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBvKG4sIHIsIGUsIHQpOwogICAgICB9KTsKICAgIH0pLmdldE9yKCExKTsKICB9CgogIGZ1bmN0aW9uIFgwKGUsIHQpIHsKICAgIHJldHVybiBLMChlLCB0LCBxMCk7CiAgfQoKICBmdW5jdGlvbiBZMChlLCB0KSB7CiAgICByZXR1cm4gSzAoZSwgdCwgVzApOwogIH0KCiAgZnVuY3Rpb24gRzAoZSwgdCkgewogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvID0gdCwKICAgICAgICBpID0gZS5kb20sCiAgICAgICAgYSA9IGUuc2NoZW1hLmdldE1vdmVDYXJldEJlZm9yZU9uRW50ZXJFbGVtZW50cygpOwoKICAgIGlmICh0KSB7CiAgICAgICEvXihMSXxEVHxERCkkLy50ZXN0KHQubm9kZU5hbWUpIHx8IChyID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICBmb3IgKDsgZTspIHsKICAgICAgICAgIGlmICgxID09PSBlLm5vZGVUeXBlIHx8IDMgPT09IGUubm9kZVR5cGUgJiYgZS5kYXRhICYmIC9bXHJcblxzXS8udGVzdChlLmRhdGEpKSByZXR1cm4gZTsKICAgICAgICAgIGUgPSBlLm5leHRTaWJsaW5nOwogICAgICAgIH0KICAgICAgfSh0LmZpcnN0Q2hpbGQpKSAmJiAvXihVTHxPTHxETCkkLy50ZXN0KHIubm9kZU5hbWUpICYmIHQuaW5zZXJ0QmVmb3JlKGkuZG9jLmNyZWF0ZVRleHROb2RlKHlvKSwgdC5maXJzdENoaWxkKTsKICAgICAgdmFyIHUgPSBpLmNyZWF0ZVJuZygpOwoKICAgICAgaWYgKHQubm9ybWFsaXplKCksIHQuaGFzQ2hpbGROb2RlcygpKSB7CiAgICAgICAgZm9yICh2YXIgcyA9IG5ldyBScih0LCB0KTsgbiA9IHMuY3VycmVudCgpOykgewogICAgICAgICAgaWYgKGpuKG4pKSB7CiAgICAgICAgICAgIHUuc2V0U3RhcnQobiwgMCksIHUuc2V0RW5kKG4sIDApOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoYVtuLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSB7CiAgICAgICAgICAgIHUuc2V0U3RhcnRCZWZvcmUobiksIHUuc2V0RW5kQmVmb3JlKG4pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICBvID0gbiwgbiA9IHMubmV4dCgpOwogICAgICAgIH0KCiAgICAgICAgbiB8fCAodS5zZXRTdGFydChvLCAwKSwgdS5zZXRFbmQobywgMCkpOwogICAgICB9IGVsc2UgV24odCkgPyB0Lm5leHRTaWJsaW5nICYmIGkuaXNCbG9jayh0Lm5leHRTaWJsaW5nKSA/ICh1LnNldFN0YXJ0QmVmb3JlKHQpLCB1LnNldEVuZEJlZm9yZSh0KSkgOiAodS5zZXRTdGFydEFmdGVyKHQpLCB1LnNldEVuZEFmdGVyKHQpKSA6ICh1LnNldFN0YXJ0KHQsIDApLCB1LnNldEVuZCh0LCAwKSk7CgogICAgICBlLnNlbGVjdGlvbi5zZXRSbmcodSksIFpmKGUsIHUpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gSjAoZSkgewogICAgcmV0dXJuIHZlLmZyb20oZS5kb20uZ2V0UGFyZW50KGUuc2VsZWN0aW9uLmdldFN0YXJ0KCEwKSwgZS5kb20uaXNCbG9jaykpOwogIH0KCiAgZnVuY3Rpb24gUTAoZSwgdCkgewogICAgcmV0dXJuIGUgJiYgZS5wYXJlbnROb2RlICYmIGUucGFyZW50Tm9kZS5ub2RlTmFtZSA9PT0gdDsKICB9CgogIGZ1bmN0aW9uIFowKGUpIHsKICAgIHJldHVybiBlICYmIC9eKE9MfFVMfExJKSQvLnRlc3QoZS5ub2RlTmFtZSk7CiAgfQoKICBmdW5jdGlvbiBlQyhlKSB7CiAgICB2YXIgdCA9IGUucGFyZW50Tm9kZTsKICAgIHJldHVybiAvXihMSXxEVHxERCkkLy50ZXN0KHQubm9kZU5hbWUpID8gdCA6IGU7CiAgfQoKICBmdW5jdGlvbiB0QyhlLCB0LCBuKSB7CiAgICBmb3IgKHZhciByID0gZVtuID8gImZpcnN0Q2hpbGQiIDogImxhc3RDaGlsZCJdOyByICYmICF6bihyKTspIHsKICAgICAgciA9IHJbbiA/ICJuZXh0U2libGluZyIgOiAicHJldmlvdXNTaWJsaW5nIl07CiAgICB9CgogICAgcmV0dXJuIHIgPT09IHQ7CiAgfQoKICBmdW5jdGlvbiBuQyhlKSB7CiAgICBlLmlubmVySFRNTCA9ICc8YnIgZGF0YS1tY2UtYm9ndXM9IjEiPic7CiAgfQoKICBmdW5jdGlvbiByQyhlLCB0KSB7CiAgICByZXR1cm4gZS5ub2RlTmFtZSA9PT0gdCB8fCBlLnByZXZpb3VzU2libGluZyAmJiBlLnByZXZpb3VzU2libGluZy5ub2RlTmFtZSA9PT0gdDsKICB9CgogIGZ1bmN0aW9uIG9DKGUsIHQpIHsKICAgIHJldHVybiB0ICYmIGUuaXNCbG9jayh0KSAmJiAhL14oVER8VEh8Q0FQVElPTnxGT1JNKSQvLnRlc3QodC5ub2RlTmFtZSkgJiYgIS9eKGZpeGVkfGFic29sdXRlKS9pLnRlc3QodC5zdHlsZS5wb3NpdGlvbikgJiYgInRydWUiICE9PSBlLmdldENvbnRlbnRFZGl0YWJsZSh0KTsKICB9CgogIGZ1bmN0aW9uIGlDKGUsIHQsIG4pIHsKICAgIHJldHVybiAhMSA9PT0gam4odCkgPyBuIDogZSA/IDEgPT09IG4gJiYgdC5kYXRhLmNoYXJBdChuIC0gMSkgPT09IENvID8gMCA6IG4gOiBuID09PSB0LmRhdGEubGVuZ3RoIC0gMSAmJiB0LmRhdGEuY2hhckF0KG4pID09PSBDbyA/IHQuZGF0YS5sZW5ndGggOiBuOwogIH0KCiAgZnVuY3Rpb24gYUMoZSwgdCkgewogICAgZm9yICh2YXIgbiwgciA9IGUuZ2V0Um9vdCgpLCBvID0gdDsgbyAhPT0gciAmJiAiZmFsc2UiICE9PSBlLmdldENvbnRlbnRFZGl0YWJsZShvKTspIHsKICAgICAgInRydWUiID09PSBlLmdldENvbnRlbnRFZGl0YWJsZShvKSAmJiAobiA9IG8pLCBvID0gby5wYXJlbnROb2RlOwogICAgfQoKICAgIHJldHVybiBvICE9PSByID8gbiA6IHI7CiAgfQoKICBmdW5jdGlvbiB1QyhlLCB0KSB7CiAgICB2YXIgbiA9IFNzKGUpOwogICAgbiAmJiBuLnRvTG93ZXJDYXNlKCkgPT09IHQudGFnTmFtZS50b0xvd2VyQ2FzZSgpICYmIGZ1bmN0aW9uIChlLCBvLCB0KSB7CiAgICAgIHZhciBpID0gZS5kb207CiAgICAgIHZlLmZyb20odC5zdHlsZSkubWFwKGkucGFyc2VTdHlsZSkuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gU24oTnQuZnJvbURvbShvKSksCiAgICAgICAgICAgIG4gPSBfZTIoX2UyKHt9LCB0KSwgZSk7CgogICAgICAgIGkuc2V0U3R5bGVzKG8sIG4pOwogICAgICB9KSwgZG4odmUuZnJvbSh0LmNsYXNzKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gZS5zcGxpdCgvXHMrLyk7CiAgICAgIH0pLCB2ZS5mcm9tKG8uY2xhc3NOYW1lKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gVShlLnNwbGl0KC9ccysvKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiAiIiAhPT0gZTsKICAgICAgICB9KTsKICAgICAgfSksIGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgICAgdmFyIG4gPSBVKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gIUQodCwgZSk7CiAgICAgICAgfSksCiAgICAgICAgICAgIHIgPSBBZShBZShbXSwgdCwgITApLCBuLCAhMCk7CiAgICAgICAgaS5zZXRBdHRyaWIobywgImNsYXNzIiwgci5qb2luKCIgIikpOwogICAgICB9KTsKICAgICAgdmFyIG4gPSBbInN0eWxlIiwgImNsYXNzIl0sCiAgICAgICAgICByID0gYWUodCwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICByZXR1cm4gIUQobiwgdCk7CiAgICAgIH0pOwogICAgICBpLnNldEF0dHJpYnMobywgcik7CiAgICB9KGUsIHQsIEVzKGUpKTsKICB9CgogIGZ1bmN0aW9uIHNDKGEsIGUpIHsKICAgIGZ1bmN0aW9uIHQoZSkgewogICAgICB2YXIgdCwKICAgICAgICAgIG4gPSBtLAogICAgICAgICAgciA9IGwuZ2V0VGV4dElubGluZUVsZW1lbnRzKCksCiAgICAgICAgICBvID0gZSB8fCAiVEFCTEUiID09PSBDIHx8ICJIUiIgPT09IEMgPyBjLmNyZWF0ZShlIHx8IHApIDogYi5jbG9uZU5vZGUoITEpLAogICAgICAgICAgaSA9IG87CiAgICAgIGlmICghMSA9PT0gYS5nZXRQYXJhbSgia2VlcF9zdHlsZXMiLCAhMCkpIGMuc2V0QXR0cmliKG8sICJzdHlsZSIsIG51bGwpLCBjLnNldEF0dHJpYihvLCAiY2xhc3MiLCBudWxsKTtlbHNlIGZvciAoOyByW24ubm9kZU5hbWVdICYmICh6YyhuKSB8fCBZYyhuKSB8fCAodCA9IG4uY2xvbmVOb2RlKCExKSwgYy5zZXRBdHRyaWIodCwgImlkIiwgIiIpLCBvLmhhc0NoaWxkTm9kZXMoKSA/IHQuYXBwZW5kQ2hpbGQoby5maXJzdENoaWxkKSA6IGkgPSB0LCBvLmFwcGVuZENoaWxkKHQpKSksIChuID0gbi5wYXJlbnROb2RlKSAmJiBuICE9PSBGOykgewogICAgICAgIDsKICAgICAgfQogICAgICByZXR1cm4gdUMoYSwgbyksIG5DKGkpLCBvOwogICAgfQoKICAgIGZ1bmN0aW9uIG4oZSkgewogICAgICB2YXIgdCwKICAgICAgICAgIG4sCiAgICAgICAgICByID0gaUMoZSwgbSwgZyk7CgogICAgICBpZiAoIWpuKG0pIHx8ICEoZSA/IDAgPCByIDogciA8IG0ubm9kZVZhbHVlLmxlbmd0aCkpIHsKICAgICAgICBpZiAobS5wYXJlbnROb2RlID09PSBiICYmIHMgJiYgIWUpIHJldHVybiAxOwogICAgICAgIGlmIChlICYmIHpuKG0pICYmIG0gPT09IGIuZmlyc3RDaGlsZCkgcmV0dXJuIDE7CiAgICAgICAgaWYgKHJDKG0sICJUQUJMRSIpIHx8IHJDKG0sICJIUiIpKSByZXR1cm4gcyAmJiAhZSB8fCAhcyAmJiBlOwogICAgICAgIHZhciBvID0gbmV3IFJyKG0sIGIpOwoKICAgICAgICBmb3IgKGpuKG0pICYmIChlICYmIDAgPT09IHIgPyBvLnByZXYoKSA6IGUgfHwgciAhPT0gbS5ub2RlVmFsdWUubGVuZ3RoIHx8IG8ubmV4dCgpKTsgdCA9IG8uY3VycmVudCgpOykgewogICAgICAgICAgaWYgKHpuKHQpKSB7CiAgICAgICAgICAgIGlmICghdC5nZXRBdHRyaWJ1dGUoImRhdGEtbWNlLWJvZ3VzIikgJiYgKG4gPSB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIGZbbl0gJiYgImJyIiAhPT0gbikpIHJldHVybjsKICAgICAgICAgIH0gZWxzZSBpZiAoam4odCkgJiYgIXFyKHQubm9kZVZhbHVlKSkgcmV0dXJuOwoKICAgICAgICAgIGUgPyBvLnByZXYoKSA6IG8ubmV4dCgpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIDE7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByKCkgewogICAgICB1ID0gL14oSFsxLTZdfFBSRXxGSUdVUkUpJC8udGVzdChDKSAmJiAiSEdST1VQIiAhPT0geCA/IHQocCkgOiB0KCksIGEuZ2V0UGFyYW0oImVuZF9jb250YWluZXJfb25fZW1wdHlfYmxvY2siLCAhMSkgJiYgb0MoYywgeSkgJiYgYy5pc0VtcHR5KGIpID8gdSA9IGMuc3BsaXQoeSwgYikgOiBjLmluc2VydEFmdGVyKHUsIGIpLCBHMChhLCB1KTsKICAgIH0KCiAgICB2YXIgbywKICAgICAgICB1LAogICAgICAgIGksCiAgICAgICAgcywKICAgICAgICBjID0gYS5kb20sCiAgICAgICAgbCA9IGEuc2NoZW1hLAogICAgICAgIGYgPSBsLmdldE5vbkVtcHR5RWxlbWVudHMoKSwKICAgICAgICBkID0gYS5zZWxlY3Rpb24uZ2V0Um5nKCk7CiAgICBSZihjLCBkKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgIGQuc2V0U3RhcnQoZS5zdGFydENvbnRhaW5lciwgZS5zdGFydE9mZnNldCksIGQuc2V0RW5kKGUuZW5kQ29udGFpbmVyLCBlLmVuZE9mZnNldCk7CiAgICB9KTsKICAgIHZhciBtID0gZC5zdGFydENvbnRhaW5lciwKICAgICAgICBnID0gZC5zdGFydE9mZnNldCwKICAgICAgICBwID0gU3MoYSksCiAgICAgICAgaCA9ICEoIWUgfHwgIWUuc2hpZnRLZXkpLAogICAgICAgIHYgPSAhKCFlIHx8ICFlLmN0cmxLZXkpOwogICAgem4obSkgJiYgbS5oYXNDaGlsZE5vZGVzKCkgJiYgKHMgPSBnID4gbS5jaGlsZE5vZGVzLmxlbmd0aCAtIDEsIG0gPSBtLmNoaWxkTm9kZXNbTWF0aC5taW4oZywgbS5jaGlsZE5vZGVzLmxlbmd0aCAtIDEpXSB8fCBtLCBnID0gcyAmJiBqbihtKSA/IG0ubm9kZVZhbHVlLmxlbmd0aCA6IDApOwoKICAgIHZhciBiLAogICAgICAgIHksCiAgICAgICAgQywKICAgICAgICB4LAogICAgICAgIHcsCiAgICAgICAgUywKICAgICAgICBwLAogICAgICAgIEUsCiAgICAgICAgTiwKICAgICAgICBrLAogICAgICAgIF8sCiAgICAgICAgQSwKICAgICAgICBSLAogICAgICAgIEQsCiAgICAgICAgVCwKICAgICAgICBPLAogICAgICAgIEIsCiAgICAgICAgUCwKICAgICAgICBMLAogICAgICAgIEksCiAgICAgICAgTSwKICAgICAgICBGID0gYUMoYywgbSk7CgogICAgRiAmJiAoKHAgJiYgIWggfHwgIXAgJiYgaCkgJiYgKG0gPSBmdW5jdGlvbiAoZSwgdCwgbiwgcikgewogICAgICB2YXIgbywKICAgICAgICAgIGksCiAgICAgICAgICBhLAogICAgICAgICAgdSwKICAgICAgICAgIHMsCiAgICAgICAgICBjLAogICAgICAgICAgbCA9IHAgfHwgIlAiLAogICAgICAgICAgZiA9IGUuZG9tLAogICAgICAgICAgZCA9IGFDKGYsIG4pLAogICAgICAgICAgbSA9IGYuZ2V0UGFyZW50KG4sIGYuaXNCbG9jayk7CgogICAgICBpZiAoIW0gfHwgIW9DKGYsIG0pKSB7CiAgICAgICAgaWYgKHMgPSAoKG0gPSBtIHx8IGQpID09PSBlLmdldEJvZHkoKSB8fCAoYyA9IG0pICYmIC9eKFREfFRIfENBUFRJT04pJC8udGVzdChjLm5vZGVOYW1lKSA/IG0gOiBtLnBhcmVudE5vZGUpLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksICFtLmhhc0NoaWxkTm9kZXMoKSkgcmV0dXJuIHVDKGUsIG8gPSBmLmNyZWF0ZShsKSksIG0uYXBwZW5kQ2hpbGQobyksIHQuc2V0U3RhcnQobywgMCksIHQuc2V0RW5kKG8sIDApLCBvOwoKICAgICAgICBmb3IgKGEgPSBuOyBhLnBhcmVudE5vZGUgIT09IG07KSB7CiAgICAgICAgICBhID0gYS5wYXJlbnROb2RlOwogICAgICAgIH0KCiAgICAgICAgZm9yICg7IGEgJiYgIWYuaXNCbG9jayhhKTspIHsKICAgICAgICAgIGEgPSAoaSA9IGEpLnByZXZpb3VzU2libGluZzsKICAgICAgICB9CgogICAgICAgIGlmIChpICYmIGUuc2NoZW1hLmlzVmFsaWRDaGlsZChzLCBsLnRvTG93ZXJDYXNlKCkpKSB7CiAgICAgICAgICBmb3IgKHVDKGUsIG8gPSBmLmNyZWF0ZShsKSksIGkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobywgaSksIGEgPSBpOyBhICYmICFmLmlzQmxvY2soYSk7KSB7CiAgICAgICAgICAgIHUgPSBhLm5leHRTaWJsaW5nLCBvLmFwcGVuZENoaWxkKGEpLCBhID0gdTsKICAgICAgICAgIH0KCiAgICAgICAgICB0LnNldFN0YXJ0KG4sIHIpLCB0LnNldEVuZChuLCByKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBuOwogICAgfShhLCBkLCBtLCBnKSksIHkgPSAoYiA9IGMuZ2V0UGFyZW50KG0sIGMuaXNCbG9jaykpID8gYy5nZXRQYXJlbnQoYi5wYXJlbnROb2RlLCBjLmlzQmxvY2spIDogbnVsbCwgQyA9IGIgPyBiLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgOiAiIiwgIkxJIiAhPT0gKHggPSB5ID8geS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpIDogIiIpIHx8IHYgfHwgKHkgPSAoYiA9IHkpLnBhcmVudE5vZGUsIEMgPSB4KSwgL14oTEl8RFR8REQpJC8udGVzdChDKSAmJiBjLmlzRW1wdHkoYikgPyAoTiA9IHQsIGsgPSB5LCBfID0gYiwgQSA9IHAsIEkgPSAoRSA9IGEpLmRvbSwgTSA9IEUuc2VsZWN0aW9uLmdldFJuZygpLCBrICE9PSBFLmdldEJvZHkoKSAmJiAoRCA9IChBID0gWjAoUiA9IGspICYmIFowKFIucGFyZW50Tm9kZSkgPyAiTEkiIDogQSkgPyBOKEEpIDogSS5jcmVhdGUoIkJSIiksIHRDKGssIF8sICEwKSAmJiB0QyhrLCBfLCAhMSkgPyBRMChrLCAiTEkiKSA/IChUID0gZUMoayksIEkuaW5zZXJ0QWZ0ZXIoRCwgVCksIChudWxsID09PSAoTCA9IChQID0gaykucGFyZW50Tm9kZSkgfHwgdm9pZCAwID09PSBMID8gdm9pZCAwIDogTC5maXJzdENoaWxkKSA9PT0gUCA/IEkucmVtb3ZlKFQpIDogSS5yZW1vdmUoaykpIDogSS5yZXBsYWNlKEQsIGspIDogKHRDKGssIF8sICEwKSA/IFEwKGssICJMSSIpID8gKEkuaW5zZXJ0QWZ0ZXIoRCwgZUMoaykpLCBELmFwcGVuZENoaWxkKEkuZG9jLmNyZWF0ZVRleHROb2RlKCIgIikpLCBELmFwcGVuZENoaWxkKGspKSA6IGsucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoRCwgaykgOiB0QyhrLCBfLCAhMSkgPyBJLmluc2VydEFmdGVyKEQsIGVDKGspKSA6IChrID0gZUMoayksIChPID0gTS5jbG9uZVJhbmdlKCkpLnNldFN0YXJ0QWZ0ZXIoXyksIE8uc2V0RW5kQWZ0ZXIoayksIEIgPSBPLmV4dHJhY3RDb250ZW50cygpLCAiTEkiID09PSBBICYmIEIuZmlyc3RDaGlsZCAmJiAiTEkiID09PSBCLmZpcnN0Q2hpbGQubm9kZU5hbWUgPyAoRCA9IEIuZmlyc3RDaGlsZCwgSS5pbnNlcnRBZnRlcihCLCBrKSkgOiAoSS5pbnNlcnRBZnRlcihCLCBrKSwgSS5pbnNlcnRBZnRlcihELCBrKSkpLCBJLnJlbW92ZShfKSksIEcwKEUsIEQpKSkgOiBwICYmIGIgPT09IGEuZ2V0Qm9keSgpIHx8IChwID0gcCB8fCAiUCIsIFByKGIpID8gKHUgPSB6cihiKSwgYy5pc0VtcHR5KGIpICYmIG5DKGIpLCB1QyhhLCB1KSwgRzAoYSwgdSkpIDogbigpID8gcigpIDogbighMCkgPyAodSA9IGIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCgpLCBiKSwgRzAoYSwgckMoYiwgIkhSIikgPyB1IDogYikpIDogKChTID0gKHcgPSBkKS5jbG9uZVJhbmdlKCkpLnNldFN0YXJ0KHcuc3RhcnRDb250YWluZXIsIGlDKCEwLCB3LnN0YXJ0Q29udGFpbmVyLCB3LnN0YXJ0T2Zmc2V0KSksIFMuc2V0RW5kKHcuZW5kQ29udGFpbmVyLCBpQyghMSwgdy5lbmRDb250YWluZXIsIHcuZW5kT2Zmc2V0KSksIChvID0gUy5jbG9uZVJhbmdlKCkpLnNldEVuZEFmdGVyKGIpLCBpID0gby5leHRyYWN0Q29udGVudHMoKSwgWShIdShOdC5mcm9tRG9tKGkpLCBfbiksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gZS5kb207CiAgICAgIHQubm9kZVZhbHVlID0gd28odC5ub2RlVmFsdWUpOwogICAgfSksIGZ1bmN0aW9uIChlKSB7CiAgICAgIGZvciAoOyBqbihlKSAmJiAoZS5ub2RlVmFsdWUgPSBlLm5vZGVWYWx1ZS5yZXBsYWNlKC9eW1xyXG5dKy8sICIiKSksIGUgPSBlLmZpcnN0Q2hpbGQ7KSB7CiAgICAgICAgOwogICAgICB9CiAgICB9KGkpLCB1ID0gaS5maXJzdENoaWxkLCBjLmluc2VydEFmdGVyKGksIGIpLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiwKICAgICAgICAgIHIsCiAgICAgICAgICBvID0gdSwKICAgICAgICAgIGkgPSBbXTsKCiAgICAgIGlmIChvKSB7CiAgICAgICAgZm9yICg7IG8gPSBvLmZpcnN0Q2hpbGQ7KSB7CiAgICAgICAgICBpZiAoZS5pc0Jsb2NrKG8pKSByZXR1cm47CiAgICAgICAgICB6bihvKSAmJiAhdFtvLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldICYmIGkucHVzaChvKTsKICAgICAgICB9CgogICAgICAgIGZvciAobiA9IGkubGVuZ3RoOyBuLS07KSB7CiAgICAgICAgICAhKG8gPSBpW25dKS5oYXNDaGlsZE5vZGVzKCkgfHwgby5maXJzdENoaWxkID09PSBvLmxhc3RDaGlsZCAmJiAiIiA9PT0gby5maXJzdENoaWxkLm5vZGVWYWx1ZSA/IGUucmVtb3ZlKG8pIDogKHIgPSBvKSAmJiAiQSIgPT09IHIubm9kZU5hbWUgJiYgZS5pc0VtcHR5KHIpICYmIGUucmVtb3ZlKG8pOwogICAgICAgIH0KICAgICAgfQogICAgfShjLCBmKSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgdC5ub3JtYWxpemUoKTsKICAgICAgdmFyIG4gPSB0Lmxhc3RDaGlsZDsKICAgICAgbiAmJiAhL14obGVmdHxyaWdodCkkL2dpLnRlc3QoZS5nZXRTdHlsZShuLCAiZmxvYXQiLCAhMCkpIHx8IGUuYWRkKHQsICJiciIpOwogICAgfShjLCBiKSwgYy5pc0VtcHR5KGIpICYmIG5DKGIpLCB1Lm5vcm1hbGl6ZSgpLCBjLmlzRW1wdHkodSkgPyAoYy5yZW1vdmUodSksIHIoKSkgOiAodUMoYSwgdSksIEcwKGEsIHUpKSksIGMuc2V0QXR0cmliKHUsICJpZCIsICIiKSwgYS5maXJlKCJOZXdCbG9jayIsIHsKICAgICAgbmV3QmxvY2s6IHUKICAgIH0pKSk7CiAgfQoKICBmdW5jdGlvbiBjQyhlLCB0LCBuKSB7CiAgICB2YXIgciA9IGUuZG9tLmNyZWF0ZVJuZygpOwogICAgbiA/IChyLnNldFN0YXJ0QmVmb3JlKHQpLCByLnNldEVuZEJlZm9yZSh0KSkgOiAoci5zZXRTdGFydEFmdGVyKHQpLCByLnNldEVuZEFmdGVyKHQpKSwgZS5zZWxlY3Rpb24uc2V0Um5nKHIpLCBaZihlLCByKTsKICB9CgogIGZ1bmN0aW9uIGxDKGUsIHQpIHsKICAgIHZhciBuID0gTnQuZnJvbVRhZygiYnIiKTsKICAgIHF0KE50LmZyb21Eb20odCksIG4pLCBlLnVuZG9NYW5hZ2VyLmFkZCgpOwogIH0KCiAgZnVuY3Rpb24gZkMoZSwgdCkgewogICAgWEMoZS5nZXRCb2R5KCksIHQpIHx8ICR0KE50LmZyb21Eb20odCksIE50LmZyb21UYWcoImJyIikpOwogICAgdmFyIG4gPSBOdC5mcm9tVGFnKCJiciIpOwogICAgJHQoTnQuZnJvbURvbSh0KSwgbiksIGNDKGUsIG4uZG9tLCAhMSksIGUudW5kb01hbmFnZXIuYWRkKCk7CiAgfQoKICBmdW5jdGlvbiBkQyhlKSB7CiAgICByZXR1cm4gZSAmJiAiQSIgPT09IGUubm9kZU5hbWUgJiYgImhyZWYiIGluIGU7CiAgfQoKICBmdW5jdGlvbiBtQyhlKSB7CiAgICByZXR1cm4gZS5mb2xkKFIsIGRDLCBkQywgUik7CiAgfQoKICBmdW5jdGlvbiBnQyhlLCB0KSB7CiAgICB0LmZvbGQodGUsIEEobEMsIGUpLCBBKGZDLCBlKSwgdGUpOwogIH0KCiAgZnVuY3Rpb24gcEMoZSwgdCkgewogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGkgPSAociA9IEEobmIsIG4gPSBlKSwgbyA9IGFzLmZyb21SYW5nZVN0YXJ0KG4uc2VsZWN0aW9uLmdldFJuZygpKSwgUWIociwgbi5nZXRCb2R5KCksIG8pLmZpbHRlcihtQykpOwogICAgaS5pc1NvbWUoKSA/IGkuZWFjaChBKGdDLCBlKSkgOiBmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiwKICAgICAgICAgIHIsCiAgICAgICAgICBvID0gZS5zZWxlY3Rpb24sCiAgICAgICAgICBpID0gZS5kb20sCiAgICAgICAgICBhID0gby5nZXRSbmcoKTsKICAgICAgUmYoaSwgYSkuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIGEuc2V0U3RhcnQoZS5zdGFydENvbnRhaW5lciwgZS5zdGFydE9mZnNldCksIGEuc2V0RW5kKGUuZW5kQ29udGFpbmVyLCBlLmVuZE9mZnNldCk7CiAgICAgIH0pOwogICAgICB2YXIgdSwKICAgICAgICAgIHMgPSBhLnN0YXJ0T2Zmc2V0LAogICAgICAgICAgYyA9IGEuc3RhcnRDb250YWluZXI7CiAgICAgIDEgPT09IGMubm9kZVR5cGUgJiYgYy5oYXNDaGlsZE5vZGVzKCkgJiYgKHUgPSBzID4gYy5jaGlsZE5vZGVzLmxlbmd0aCAtIDEsIGMgPSBjLmNoaWxkTm9kZXNbTWF0aC5taW4ocywgYy5jaGlsZE5vZGVzLmxlbmd0aCAtIDEpXSB8fCBjLCBzID0gdSAmJiAzID09PSBjLm5vZGVUeXBlID8gYy5ub2RlVmFsdWUubGVuZ3RoIDogMCk7CiAgICAgIHZhciBsID0gaS5nZXRQYXJlbnQoYywgaS5pc0Jsb2NrKSwKICAgICAgICAgIGYgPSBsID8gaS5nZXRQYXJlbnQobC5wYXJlbnROb2RlLCBpLmlzQmxvY2spIDogbnVsbCwKICAgICAgICAgIGQgPSBmID8gZi5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpIDogIiIsCiAgICAgICAgICBtID0gISghdCB8fCAhdC5jdHJsS2V5KTsKICAgICAgIkxJIiAhPT0gZCB8fCBtIHx8IChsID0gZiksIGMgJiYgMyA9PT0gYy5ub2RlVHlwZSAmJiBzID49IGMubm9kZVZhbHVlLmxlbmd0aCAmJiAhZnVuY3Rpb24gKGUpIHsKICAgICAgICBmb3IgKHZhciB0LCBuID0gbmV3IFJyKGMsIGwpLCByID0gZS5nZXROb25FbXB0eUVsZW1lbnRzKCk7IHQgPSBuLm5leHQoKTspIHsKICAgICAgICAgIGlmIChyW3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0gfHwgMCA8IHQubGVuZ3RoKSByZXR1cm4gMTsKICAgICAgICB9CiAgICAgIH0oZS5zY2hlbWEpICYmIChuID0gaS5jcmVhdGUoImJyIiksIGEuaW5zZXJ0Tm9kZShuKSwgYS5zZXRTdGFydEFmdGVyKG4pLCBhLnNldEVuZEFmdGVyKG4pLCByID0gITApLCBuID0gaS5jcmVhdGUoImJyIiksIHNzKGksIGEsIG4pLCBjQyhlLCBuLCByKSwgZS51bmRvTWFuYWdlci5hZGQoKTsKICAgIH0oZSwgdCk7CiAgfQoKICBmdW5jdGlvbiBoQyhlLCB0KSB7CiAgICByZXR1cm4gSjAoZSkuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiAwIDwgdC5sZW5ndGggJiYgemUoTnQuZnJvbURvbShlKSwgdCk7CiAgICB9KS5pc1NvbWUoKTsKICB9CgogIGZ1bmN0aW9uIHZDKGUsIHQpIHsKICAgIHJldHVybiBoQyhlLCBlLmdldFBhcmFtKCJub19uZXdsaW5lX3NlbGVjdG9yIiwgIiIpKTsKICB9CgogIGZ1bmN0aW9uIGJDKG4pIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZSwgdCkgewogICAgICByZXR1cm4gIiIgPT09IFNzKGUpID09PSBuOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIHlDKG4pIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZSwgdCkgewogICAgICByZXR1cm4gSjAoZSkuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGdvKE50LmZyb21Eb20oZSkpOwogICAgICB9KS5pc1NvbWUoKSA9PT0gbjsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBDQyhuLCByKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgcmV0dXJuIEowKGUpLmZvbGQoSigiIiksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGUubm9kZU5hbWUudG9VcHBlckNhc2UoKTsKICAgICAgfSkgPT09IG4udG9VcHBlckNhc2UoKSA9PT0gcjsKICAgIH07CiAgfQoKICBmdW5jdGlvbiB4QyhlKSB7CiAgICByZXR1cm4gQ0MoInByZSIsIGUpOwogIH0KCiAgZnVuY3Rpb24gd0MobikgewogICAgcmV0dXJuIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIHJldHVybiBlLmdldFBhcmFtKCJicl9pbl9wcmUiLCAhMCkgPT09IG47CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gU0MoZSwgdCkgewogICAgcmV0dXJuIGhDKGUsIGUuZ2V0UGFyYW0oImJyX25ld2xpbmVfc2VsZWN0b3IiLCAiLm1jZS10b2MgaDIsZmlnY2FwdGlvbixjYXB0aW9uIikpOwogIH0KCiAgZnVuY3Rpb24gRUMoZSwgdCkgewogICAgcmV0dXJuIHQ7CiAgfQoKICBmdW5jdGlvbiBOQyhlKSB7CiAgICB2YXIgdCA9IFNzKGUpLAogICAgICAgIG4gPSBmdW5jdGlvbiAoZSwgdCkgewogICAgICBmb3IgKHZhciBuLCByID0gZS5nZXRSb290KCksIG8gPSB0OyBvICE9PSByICYmICJmYWxzZSIgIT09IGUuZ2V0Q29udGVudEVkaXRhYmxlKG8pOykgewogICAgICAgICJ0cnVlIiA9PT0gZS5nZXRDb250ZW50RWRpdGFibGUobykgJiYgKG4gPSBvKSwgbyA9IG8ucGFyZW50Tm9kZTsKICAgICAgfQoKICAgICAgcmV0dXJuIG8gIT09IHIgPyBuIDogcjsKICAgIH0oZS5kb20sIGUuc2VsZWN0aW9uLmdldFN0YXJ0KCkpOwoKICAgIHJldHVybiBuICYmIGUuc2NoZW1hLmlzVmFsaWRDaGlsZChuLm5vZGVOYW1lLCB0IHx8ICJQIik7CiAgfQoKICBmdW5jdGlvbiBrQyhlLCB0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKG4sIHIpIHsKICAgICAgcmV0dXJuIEwoZSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICByZXR1cm4gZSAmJiB0KG4sIHIpOwogICAgICB9LCAhMCkgPyB2ZS5zb21lKHQpIDogdmUubm9uZSgpOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIF9DKGUsIHQpIHsKICAgIHZhciBuLCByOwogICAgbiA9IGUsIHIgPSB0LCBWYihba0MoW3ZDXSwgWUMubm9uZSgpKSwga0MoW0NDKCJzdW1tYXJ5IiwgITApXSwgWUMuYnIoKSksIGtDKFt4QyghMCksIHdDKCExKSwgRUNdLCBZQy5icigpKSwga0MoW3hDKCEwKSwgd0MoITEpXSwgWUMuYmxvY2soKSksIGtDKFt4QyghMCksIHdDKCEwKSwgRUNdLCBZQy5ibG9jaygpKSwga0MoW3hDKCEwKSwgd0MoITApXSwgWUMuYnIoKSksIGtDKFt5QyghMCksIEVDXSwgWUMuYnIoKSksIGtDKFt5QyghMCldLCBZQy5ibG9jaygpKSwga0MoW2JDKCEwKSwgRUMsIE5DXSwgWUMuYmxvY2soKSksIGtDKFtiQyghMCldLCBZQy5icigpKSwga0MoW1NDXSwgWUMuYnIoKSksIGtDKFtiQyghMSksIEVDXSwgWUMuYnIoKSksIGtDKFtOQ10sIFlDLmJsb2NrKCkpXSwgW24sICEoIXIgfHwgIXIuc2hpZnRLZXkpXSkuZ2V0T3IoWUMubm9uZSgpKS5mb2xkKGZ1bmN0aW9uICgpIHsKICAgICAgcEMoZSwgdCk7CiAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgIHNDKGUsIHQpOwogICAgfSwgdGUpOwogIH0KCiAgZnVuY3Rpb24gQUMoZSkgewogICAgcmV0dXJuIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CiAgfQoKICBmdW5jdGlvbiBSQyhlKSB7CiAgICByZXR1cm4gZS5rZXlDb2RlID09PSBCZi5QQUdFX1VQIHx8IGUua2V5Q29kZSA9PT0gQmYuUEFHRV9ET1dOOwogIH0KCiAgZnVuY3Rpb24gREMoZSwgdCwgbikgewogICAgbiAmJiAhZS5nZXQoKSA/IHQub24oIk5vZGVDaGFuZ2UiLCBBQywgITApIDogIW4gJiYgZS5nZXQoKSAmJiB0Lm9mZigiTm9kZUNoYW5nZSIsIEFDKSwgZS5zZXQobik7CiAgfQoKICBmdW5jdGlvbiBUQyhuLCByKSB7CiAgICB2YXIgZSA9IHIuY29udGFpbmVyKCksCiAgICAgICAgdCA9IHIub2Zmc2V0KCk7CiAgICByZXR1cm4gam4oZSkgPyAoZS5pbnNlcnREYXRhKHQsIG4pLCB2ZS5zb21lKGFzKGUsIHQgKyBuLmxlbmd0aCkpKSA6IG5jKHIpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCA9IE50LmZyb21UZXh0KG4pOwogICAgICByZXR1cm4gKHIuaXNBdEVuZCgpID8gJHQgOiBxdCkoZSwgdCksIGFzKHQuZG9tLCBuLmxlbmd0aCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIE9DKGksIGEpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gciA9IGksICghUm0obyA9IGUpICYmIChuID0gbywgWmwoKHQgPSByKS5kb20sIG4pLmlzTm9uZSgpIHx8IFFsKHQuZG9tLCBuKS5pc05vbmUoKSB8fCBucCh0LCBuKSB8fCBycCh0LCBuKSB8fCBFbSh0LCBuKSB8fCBTbSh0LCBuKSB8fCBfbShyLCBvKSB8fCBBbShyLCBvKSkgPyBRQyA6IFpDKShhKTsKICAgICAgdmFyIHQsIG4sIHIsIG87CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gQkMoZSkgewogICAgdmFyIHQsCiAgICAgICAgbiwKICAgICAgICByID0gYXMuZnJvbVJhbmdlU3RhcnQoZS5zZWxlY3Rpb24uZ2V0Um5nKCkpLAogICAgICAgIG8gPSBOdC5mcm9tRG9tKGUuZ2V0Qm9keSgpKTsKCiAgICBpZiAoZS5zZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkgewogICAgICB2YXIgaSA9IEEobmIsIGUpLAogICAgICAgICAgYSA9IGFzLmZyb21SYW5nZVN0YXJ0KGUuc2VsZWN0aW9uLmdldFJuZygpKTsKICAgICAgcmV0dXJuIFFiKGksIGUuZ2V0Qm9keSgpLCBhKS5iaW5kKChuID0gbywgZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gZS5mb2xkKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gWmwobi5kb20sIGFzLmJlZm9yZShlKSk7CiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlZihlKTsKICAgICAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIHRmKGUpOwogICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gUWwobi5kb20sIGFzLmFmdGVyKGUpKTsKICAgICAgICB9KTsKICAgICAgfSkpLmJpbmQoT0MobywgcikpLmV4aXN0cygodCA9IGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIHQuc2VsZWN0aW9uLnNldFJuZyhlLnRvUmFuZ2UoKSksIHQubm9kZUNoYW5nZWQoKSwgITA7CiAgICAgIH0pKTsKICAgIH0KCiAgICByZXR1cm4gITE7CiAgfQoKICBmdW5jdGlvbiBQQyhlKSB7CiAgICB2YXIgbywKICAgICAgICBpLAogICAgICAgIGEsCiAgICAgICAgdSwKICAgICAgICBzLAogICAgICAgIHQsCiAgICAgICAgbiwKICAgICAgICByLAogICAgICAgIGMsCiAgICAgICAgbCwKICAgICAgICBmLAogICAgICAgIGQsCiAgICAgICAgbSwKICAgICAgICBnLAogICAgICAgIHAgPSBhMChlKTsKICAgIHJldHVybiBlLm9uKCJrZXl1cCBjb21wb3NpdGlvbnN0YXJ0IiwgQShfMCwgZSkpLCBnID0gcCwgKG0gPSBlKS5vbigia2V5ZG93biIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0LCBuLCByLCBvOwogICAgICAhMSA9PT0gZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSAmJiAodCA9IG0sIG4gPSBnLCByID0gZSwgbyA9IGR0KCkub3MsIEYwKFt7CiAgICAgICAga2V5Q29kZTogQmYuUklHSFQsCiAgICAgICAgYWN0aW9uOiBNMChSMCwgdCwgITApCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5MRUZULAogICAgICAgIGFjdGlvbjogTTAoUjAsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuVVAsCiAgICAgICAgYWN0aW9uOiBNMChEMCwgdCwgITEpCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5ET1dOLAogICAgICAgIGFjdGlvbjogTTAoRDAsIHQsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuUklHSFQsCiAgICAgICAgYWN0aW9uOiBNMChYMCwgdCwgITApCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5MRUZULAogICAgICAgIGFjdGlvbjogTTAoWDAsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuVVAsCiAgICAgICAgYWN0aW9uOiBNMChZMCwgdCwgITEpCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5ET1dOLAogICAgICAgIGFjdGlvbjogTTAoWTAsIHQsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuUklHSFQsCiAgICAgICAgYWN0aW9uOiBNMChVMCwgdCwgITApCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5MRUZULAogICAgICAgIGFjdGlvbjogTTAoVTAsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuVVAsCiAgICAgICAgYWN0aW9uOiBNMCh6MCwgdCwgITEpCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5ET1dOLAogICAgICAgIGFjdGlvbjogTTAoejAsIHQsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuUklHSFQsCiAgICAgICAgYWN0aW9uOiBNMChvMCwgdCwgbiwgITApCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5MRUZULAogICAgICAgIGFjdGlvbjogTTAobzAsIHQsIG4sICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuUklHSFQsCiAgICAgICAgY3RybEtleTogIW8uaXNPU1goKSwKICAgICAgICBhbHRLZXk6IG8uaXNPU1goKSwKICAgICAgICBhY3Rpb246IE0wKHpDLCB0LCBuKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuTEVGVCwKICAgICAgICBjdHJsS2V5OiAhby5pc09TWCgpLAogICAgICAgIGFsdEtleTogby5pc09TWCgpLAogICAgICAgIGFjdGlvbjogTTAoSEMsIHQsIG4pCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5VUCwKICAgICAgICBhY3Rpb246IE0wKEkwLCB0LCAhMSkKICAgICAgfSwgewogICAgICAgIGtleUNvZGU6IEJmLkRPV04sCiAgICAgICAgYWN0aW9uOiBNMChJMCwgdCwgITApCiAgICAgIH1dLCByKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgci5wcmV2ZW50RGVmYXVsdCgpOwogICAgICB9KSk7CiAgICB9KSwgZCA9IHAsIChmID0gZSkub24oImtleWRvd24iLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCwgbiwgcjsKICAgICAgITEgPT09IGUuaXNEZWZhdWx0UHJldmVudGVkKCkgJiYgKG4gPSBkLCByID0gZSwgRjAoW3sKICAgICAgICBrZXlDb2RlOiBCZi5CQUNLU1BBQ0UsCiAgICAgICAgYWN0aW9uOiBNMCh4MCwgdCA9IGYsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuQkFDS1NQQUNFLAogICAgICAgIGFjdGlvbjogTTAoUGIsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuREVMRVRFLAogICAgICAgIGFjdGlvbjogTTAoUGIsIHQsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuQkFDS1NQQUNFLAogICAgICAgIGFjdGlvbjogTTAoQWIsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuREVMRVRFLAogICAgICAgIGFjdGlvbjogTTAoQWIsIHQsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuQkFDS1NQQUNFLAogICAgICAgIGFjdGlvbjogTTAobDAsIHQsIG4sICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuREVMRVRFLAogICAgICAgIGFjdGlvbjogTTAobDAsIHQsIG4sICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuQkFDS1NQQUNFLAogICAgICAgIGFjdGlvbjogTTAoaGcsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuREVMRVRFLAogICAgICAgIGFjdGlvbjogTTAoaGcsIHQsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuQkFDS1NQQUNFLAogICAgICAgIGFjdGlvbjogTTAoTGIsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuREVMRVRFLAogICAgICAgIGFjdGlvbjogTTAoTGIsIHQsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuQkFDS1NQQUNFLAogICAgICAgIGFjdGlvbjogTTAocDAsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuREVMRVRFLAogICAgICAgIGFjdGlvbjogTTAocDAsIHQsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuQkFDS1NQQUNFLAogICAgICAgIGFjdGlvbjogTTAoQ2IsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuREVMRVRFLAogICAgICAgIGFjdGlvbjogTTAoQ2IsIHQsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuQkFDS1NQQUNFLAogICAgICAgIGFjdGlvbjogTTAodmIsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuREVMRVRFLAogICAgICAgIGFjdGlvbjogTTAodmIsIHQsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuQkFDS1NQQUNFLAogICAgICAgIGFjdGlvbjogTTAobTAsIHQsICExKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuREVMRVRFLAogICAgICAgIGFjdGlvbjogTTAobTAsIHQsICEwKQogICAgICB9XSwgcikuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIHIucHJldmVudERlZmF1bHQoKTsKICAgICAgfSkpOwogICAgfSksIGYub24oImtleXVwIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsIG47CiAgICAgICExID09PSBlLmlzRGVmYXVsdFByZXZlbnRlZCgpICYmIChuID0gZSwgRjAoW3sKICAgICAgICBrZXlDb2RlOiBCZi5CQUNLU1BBQ0UsCiAgICAgICAgYWN0aW9uOiBNMChCYiwgdCA9IGYpCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5ERUxFVEUsCiAgICAgICAgYWN0aW9uOiBNMChCYiwgdCkKICAgICAgfV0sIG4pKTsKICAgIH0pLCAobCA9IGUpLm9uKCJrZXlkb3duIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsIG4sIHI7CiAgICAgIGUua2V5Q29kZSA9PT0gQmYuRU5URVIgJiYgKHQgPSBsLCAobiA9IGUpLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IChuLnByZXZlbnREZWZhdWx0KCksIChyID0gdC51bmRvTWFuYWdlcikudHlwaW5nICYmIChyLnR5cGluZyA9ICExLCByLmFkZCgpKSwgdC51bmRvTWFuYWdlci50cmFuc2FjdChmdW5jdGlvbiAoKSB7CiAgICAgICAgITEgPT09IHQuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgJiYgdC5leGVjQ29tbWFuZCgiRGVsZXRlIiksIF9DKHQsIG4pOwogICAgICB9KSkpOwogICAgfSksIChjID0gZSkub24oImtleWRvd24iLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdDsKICAgICAgITEgPT09IGUuaXNEZWZhdWx0UHJldmVudGVkKCkgJiYgKHQgPSBlLCBGMChbewogICAgICAgIGtleUNvZGU6IEJmLlNQQUNFQkFSLAogICAgICAgIGFjdGlvbjogTTAoQkMsIGMpCiAgICAgIH1dLCB0KS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICB9KSk7CiAgICB9KSwgbiA9IHQgPSBlLCByID0gbHUoZnVuY3Rpb24gKCkgewogICAgICBuLmNvbXBvc2luZyB8fCBJbShuKTsKICAgIH0sIDApLCBHQy5pc0lFKCkgJiYgKG4ub24oImtleXByZXNzIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgci50aHJvdHRsZSgpOwogICAgfSksIG4ub24oInJlbW92ZSIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHIuY2FuY2VsKCk7CiAgICB9KSksIHQub24oImlucHV0IiwgZnVuY3Rpb24gKGUpIHsKICAgICAgITEgPT09IGUuaXNDb21wb3NpbmcgJiYgSW0odCk7CiAgICB9KSwgcyA9IHAsICh1ID0gZSkub24oImtleWRvd24iLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCwgbiwgcjsKICAgICAgITEgPT09IGUuaXNEZWZhdWx0UHJldmVudGVkKCkgJiYgKG4gPSBzLCByID0gZSwgRjAoW3sKICAgICAgICBrZXlDb2RlOiBCZi5FTkQsCiAgICAgICAgYWN0aW9uOiBNMChUMCwgdCA9IHUsICEwKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuSE9NRSwKICAgICAgICBhY3Rpb246IE0wKFQwLCB0LCAhMSkKICAgICAgfSwgewogICAgICAgIGtleUNvZGU6IEJmLkVORCwKICAgICAgICBhY3Rpb246IE0wKEgwLCB0LCAhMCkKICAgICAgfSwgewogICAgICAgIGtleUNvZGU6IEJmLkhPTUUsCiAgICAgICAgYWN0aW9uOiBNMChIMCwgdCwgITEpCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5FTkQsCiAgICAgICAgYWN0aW9uOiBNMCh1MCwgdCwgITAsIG4pCiAgICAgIH0sIHsKICAgICAgICBrZXlDb2RlOiBCZi5IT01FLAogICAgICAgIGFjdGlvbjogTTAodTAsIHQsICExLCBuKQogICAgICB9XSwgcikuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIHIucHJldmVudERlZmF1bHQoKTsKICAgICAgfSkpOwogICAgfSksIG8gPSBlLCBpID0gcCwgSkMub3MuaXNPU1goKSB8fCAoYSA9IHJ1KCExKSwgby5vbigia2V5ZG93biIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIFJDKGUpICYmIERDKGEsIG8sICEwKTsKICAgIH0pLCBvLm9uKCJrZXl1cCIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0LCBuLCByOwogICAgICAhMSA9PT0gZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSAmJiAociA9IGUsIEYwKFt7CiAgICAgICAga2V5Q29kZTogQmYuUEFHRV9VUCwKICAgICAgICBhY3Rpb246IE0wKHUwLCB0ID0gbywgITEsIG4gPSBpKQogICAgICB9LCB7CiAgICAgICAga2V5Q29kZTogQmYuUEFHRV9ET1dOLAogICAgICAgIGFjdGlvbjogTTAodTAsIHQsICEwLCBuKQogICAgICB9XSwgcikpLCBSQyhlKSAmJiBhLmdldCgpICYmIChEQyhhLCBvLCAhMSksIG8ubm9kZUNoYW5nZWQoKSk7CiAgICB9KSksIHA7CiAgfQoKICAoTHkgPSBQeSA9IFB5IHx8IHt9KVtMeS5VcCA9IC0xXSA9ICJVcCIsIEx5W0x5LkRvd24gPSAxXSA9ICJEb3duIjsKCiAgdmFyIExDID0gQSh6eSwgUHkuVXAsIFJ1LCBEdSksCiAgICAgIElDID0gQSh6eSwgUHkuRG93biwgRHUsIFJ1KSwKICAgICAgTUMgPSBZbiwKICAgICAgRkMgPSBLcywKICAgICAgVUMgPSBmdW5jdGlvbiBVQyhlLCB0KSB7CiAgICB2YXIgbiA9IGUuc2VsZWN0aW9uLmdldFJuZygpLAogICAgICAgIHIgPSBlLmdldEJvZHkoKTsKCiAgICBpZiAodCkgewogICAgICB2YXIgbyA9IGFzLmZyb21SYW5nZUVuZChuKSwKICAgICAgICAgIGkgPSBNeShyLCBvKTsKICAgICAgcmV0dXJuIFooaS5wb3NpdGlvbnMpOwogICAgfQoKICAgIHJldHVybiBvID0gYXMuZnJvbVJhbmdlU3RhcnQobiksIFEoKGkgPSBJeShyLCBvKSkucG9zaXRpb25zKTsKICB9LAogICAgICB6QyA9IEEoaTAsICEwKSwKICAgICAgSEMgPSBBKGkwLCAhMSksCiAgICAgIGpDID0gZnVuY3Rpb24gakMoZSkgewogICAgcmV0dXJuIFUoVChlLnNlbGVjdGlvbi5nZXRTZWxlY3RlZEJsb2NrcygpLCBOdC5mcm9tRG9tKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuICF5MChlKSAmJiAhT3QoZSkuZXhpc3RzKHkwKSAmJiBwcihlLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBYbihlLmRvbSkgfHwgWW4oZS5kb20pOwogICAgICB9KS5leGlzdHMoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gWG4oZS5kb20pOwogICAgICB9KTsKICAgIH0pOwogIH0sCiAgICAgIFZDID0gWW4sCiAgICAgIHFDID0gQShqMCwgZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiBlLmJvdHRvbTsKICB9LCBmdW5jdGlvbiAoZSwgdCkgewogICAgcmV0dXJuIGUueSA8IHQ7CiAgfSksCiAgICAgICRDID0gQShqMCwgZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiBlLnRvcDsKICB9LCBmdW5jdGlvbiAoZSwgdCkgewogICAgcmV0dXJuIGUueSA+IHQ7CiAgfSksCiAgICAgIFdDID0gQShWMCwgSXkpLAogICAgICBLQyA9IEEoVjAsIE15KSwKICAgICAgWEMgPSBmdW5jdGlvbiBYQyhlLCB0KSB7CiAgICByZXR1cm4gbiA9IGFzLmFmdGVyKHQpLCAhIVduKG4uZ2V0Tm9kZSgpKSB8fCBRbChlLCBhcy5hZnRlcih0KSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiBXbihlLmdldE5vZGUoKSk7CiAgICB9KS5nZXRPcighMSk7CiAgICB2YXIgbjsKICB9LAogICAgICBZQyA9IG9yKFt7CiAgICBicjogW10KICB9LCB7CiAgICBibG9jazogW10KICB9LCB7CiAgICBub25lOiBbXQogIH1dKSwKICAgICAgR0MgPSBkdCgpLmJyb3dzZXIsCiAgICAgIEpDID0gZHQoKSwKICAgICAgUUMgPSBBKFRDLCB5byksCiAgICAgIFpDID0gQShUQywgIiAiKSwKICAgICAgZTEgPSAodDEucHJvdG90eXBlLm5vZGVDaGFuZ2VkID0gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0LAogICAgICAgIG4sCiAgICAgICAgciwKICAgICAgICBvID0gdGhpcy5lZGl0b3Iuc2VsZWN0aW9uOwogICAgdGhpcy5lZGl0b3IuaW5pdGlhbGl6ZWQgJiYgbyAmJiAhdGhpcy5lZGl0b3IuZ2V0UGFyYW0oImRpc2FibGVfbm9kZWNoYW5nZSIpICYmICF0aGlzLmVkaXRvci5tb2RlLmlzUmVhZE9ubHkoKSAmJiAociA9IHRoaXMuZWRpdG9yLmdldEJvZHkoKSwgKHQgPSBvLmdldFN0YXJ0KCEwKSB8fCByKS5vd25lckRvY3VtZW50ID09PSB0aGlzLmVkaXRvci5nZXREb2MoKSAmJiB0aGlzLmVkaXRvci5kb20uaXNDaGlsZE9mKHQsIHIpIHx8ICh0ID0gciksIG4gPSBbXSwgdGhpcy5lZGl0b3IuZG9tLmdldFBhcmVudCh0LCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gZSA9PT0gciB8fCB2b2lkIG4ucHVzaChlKTsKICAgIH0pLCAoZSA9IGUgfHwge30pLmVsZW1lbnQgPSB0LCBlLnBhcmVudHMgPSBuLCB0aGlzLmVkaXRvci5maXJlKCJOb2RlQ2hhbmdlIiwgZSkpOwogIH0sIHQxLnByb3RvdHlwZS5pc1NhbWVFbGVtZW50UGF0aCA9IGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgdCwKICAgICAgICBuID0gdGhpcy5lZGl0b3IuJChlKS5wYXJlbnRzVW50aWwodGhpcy5lZGl0b3IuZ2V0Qm9keSgpKS5hZGQoZSk7CgogICAgaWYgKG4ubGVuZ3RoID09PSB0aGlzLmxhc3RQYXRoLmxlbmd0aCkgewogICAgICBmb3IgKHQgPSBuLmxlbmd0aDsgMCA8PSB0ICYmIG5bdF0gPT09IHRoaXMubGFzdFBhdGhbdF07IHQtLSkgewogICAgICAgIDsKICAgICAgfQoKICAgICAgaWYgKC0xID09PSB0KSByZXR1cm4gdGhpcy5sYXN0UGF0aCA9IG4sICEwOwogICAgfQoKICAgIHJldHVybiB0aGlzLmxhc3RQYXRoID0gbiwgITE7CiAgfSwgdDEpOwoKICBmdW5jdGlvbiB0MShyKSB7CiAgICB2YXIgbzsKICAgIHRoaXMubGFzdFBhdGggPSBbXSwgdGhpcy5lZGl0b3IgPSByOwogICAgdmFyIHQgPSB0aGlzOwogICAgIm9uc2VsZWN0aW9uY2hhbmdlIiBpbiByLmdldERvYygpIHx8IHIub24oIk5vZGVDaGFuZ2UgY2xpY2sgbW91c2V1cCBrZXl1cCBmb2N1cyIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gci5zZWxlY3Rpb24uZ2V0Um5nKCksCiAgICAgICAgICBuID0gewogICAgICAgIHN0YXJ0Q29udGFpbmVyOiB0LnN0YXJ0Q29udGFpbmVyLAogICAgICAgIHN0YXJ0T2Zmc2V0OiB0LnN0YXJ0T2Zmc2V0LAogICAgICAgIGVuZENvbnRhaW5lcjogdC5lbmRDb250YWluZXIsCiAgICAgICAgZW5kT2Zmc2V0OiB0LmVuZE9mZnNldAogICAgICB9OwogICAgICAibm9kZWNoYW5nZSIgIT09IGUudHlwZSAmJiBTZihuLCBvKSB8fCByLmZpcmUoIlNlbGVjdGlvbkNoYW5nZSIpLCBvID0gbjsKICAgIH0pLCByLm9uKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uICgpIHsKICAgICAgci5maXJlKCJTZWxlY3Rpb25DaGFuZ2UiKTsKICAgIH0pLCByLm9uKCJTZWxlY3Rpb25DaGFuZ2UiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBlID0gci5zZWxlY3Rpb24uZ2V0U3RhcnQoITApOwogICAgICAhZSB8fCAheHQucmFuZ2UgJiYgci5zZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSB8fCBUbChyKSAmJiAhdC5pc1NhbWVFbGVtZW50UGF0aChlKSAmJiByLmRvbS5pc0NoaWxkT2YoZSwgci5nZXRCb2R5KCkpICYmIHIubm9kZUNoYW5nZWQoewogICAgICAgIHNlbGVjdGlvbkNoYW5nZTogITAKICAgICAgfSk7CiAgICB9KSwgci5vbigibW91c2V1cCIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICFlLmlzRGVmYXVsdFByZXZlbnRlZCgpICYmIFRsKHIpICYmICgiSU1HIiA9PT0gci5zZWxlY3Rpb24uZ2V0Tm9kZSgpLm5vZGVOYW1lID8gX3Iuc2V0RWRpdG9yVGltZW91dChyLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgci5ub2RlQ2hhbmdlZCgpOwogICAgICB9KSA6IHIubm9kZUNoYW5nZWQoKSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIG4xKGUpIHsKICAgIHJldHVybiB6bihlKSAmJiBmbyhOdC5mcm9tRG9tKGUpKTsKICB9CgogIGZ1bmN0aW9uIHIxKGUpIHsKICAgIHZhciB0ID0gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwKICAgICAgICBuID0gZS5vd25lckRvY3VtZW50LAogICAgICAgIHIgPSBuLmRvY3VtZW50RWxlbWVudCwKICAgICAgICBvID0gbi5kZWZhdWx0VmlldzsKICAgIHJldHVybiB7CiAgICAgIHRvcDogdC50b3AgKyBvLnBhZ2VZT2Zmc2V0IC0gci5jbGllbnRUb3AsCiAgICAgIGxlZnQ6IHQubGVmdCArIG8ucGFnZVhPZmZzZXQgLSByLmNsaWVudExlZnQKICAgIH07CiAgfQoKICBmdW5jdGlvbiBvMShlKSB7CiAgICBlICYmIGUucGFyZW50Tm9kZSAmJiBlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7CiAgfQoKICBmdW5jdGlvbiBpMShlLCBTKSB7CiAgICB2YXIgRSA9IF9yLnRocm90dGxlKGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIFMuX3NlbGVjdGlvbk92ZXJyaWRlcy5oaWRlRmFrZUNhcmV0KCksIFMuc2VsZWN0aW9uLnBsYWNlQ2FyZXRBdChlLCB0KTsKICAgIH0sIDApOwoKICAgIHJldHVybiBTLm9uKCJyZW1vdmUiLCBFLnN0b3ApLCBmdW5jdGlvbiAodykgewogICAgICByZXR1cm4gZS5vbihmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0LAogICAgICAgICAgICBuLAogICAgICAgICAgICByLAogICAgICAgICAgICBvLAogICAgICAgICAgICBpLAogICAgICAgICAgICBhLAogICAgICAgICAgICB1LAogICAgICAgICAgICBzLAogICAgICAgICAgICBjLAogICAgICAgICAgICBsLAogICAgICAgICAgICBmLAogICAgICAgICAgICBkLAogICAgICAgICAgICBtLAogICAgICAgICAgICBnLAogICAgICAgICAgICBwLAogICAgICAgICAgICBoLAogICAgICAgICAgICB2LAogICAgICAgICAgICBiLAogICAgICAgICAgICB5LAogICAgICAgICAgICBDLAogICAgICAgICAgICB4ID0gTWF0aC5tYXgoTWF0aC5hYnMody5zY3JlZW5YIC0gZS5zY3JlZW5YKSwgTWF0aC5hYnMody5zY3JlZW5ZIC0gZS5zY3JlZW5ZKSk7CgogICAgICAgIGlmICghZS5kcmFnZ2luZyAmJiAxMCA8IHgpIHsKICAgICAgICAgIGlmIChTLmZpcmUoImRyYWdzdGFydCIsIHsKICAgICAgICAgICAgdGFyZ2V0OiBlLmVsZW1lbnQKICAgICAgICAgIH0pLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm47CiAgICAgICAgICBlLmRyYWdnaW5nID0gITAsIFMuZm9jdXMoKTsKICAgICAgICB9CgogICAgICAgIGUuZHJhZ2dpbmcgJiYgKGQgPSBlLCB0ID0gewogICAgICAgICAgcGFnZVg6IChwID0gdywgaCA9IChnID0gUykuaW5saW5lID8gcjEoZy5nZXRCb2R5KCkpIDogewogICAgICAgICAgICBsZWZ0OiAwLAogICAgICAgICAgICB0b3A6IDAKICAgICAgICAgIH0sIEMgPSAoeSA9IGcpLmdldEJvZHkoKSwgdiA9IHkuaW5saW5lID8gewogICAgICAgICAgICBsZWZ0OiBDLnNjcm9sbExlZnQsCiAgICAgICAgICAgIHRvcDogQy5zY3JvbGxUb3AKICAgICAgICAgIH0gOiB7CiAgICAgICAgICAgIGxlZnQ6IDAsCiAgICAgICAgICAgIHRvcDogMAogICAgICAgICAgfSwgKG0gPSB7CiAgICAgICAgICAgIHBhZ2VYOiAoYiA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgICAgaWYgKHQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgPT09IGUuZ2V0RG9jKCkpIHJldHVybiB7CiAgICAgICAgICAgICAgICBsZWZ0OiB0LnBhZ2VYLAogICAgICAgICAgICAgICAgdG9wOiB0LnBhZ2VZCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB2YXIgbiwKICAgICAgICAgICAgICAgICAgciwKICAgICAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICAgICAgaSwKICAgICAgICAgICAgICAgICAgYSwKICAgICAgICAgICAgICAgICAgdSA9IHIxKGUuZ2V0Q29udGVudEFyZWFDb250YWluZXIoKSksCiAgICAgICAgICAgICAgICAgIHMgPSAociA9IChuID0gZSkuZ2V0Qm9keSgpLCBvID0gbi5nZXREb2MoKS5kb2N1bWVudEVsZW1lbnQsIGkgPSB7CiAgICAgICAgICAgICAgICBsZWZ0OiByLnNjcm9sbExlZnQsCiAgICAgICAgICAgICAgICB0b3A6IHIuc2Nyb2xsVG9wCiAgICAgICAgICAgICAgfSwgYSA9IHsKICAgICAgICAgICAgICAgIGxlZnQ6IHIuc2Nyb2xsTGVmdCB8fCBvLnNjcm9sbExlZnQsCiAgICAgICAgICAgICAgICB0b3A6IHIuc2Nyb2xsVG9wIHx8IG8uc2Nyb2xsVG9wCiAgICAgICAgICAgICAgfSwgbi5pbmxpbmUgPyBpIDogYSk7CiAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGxlZnQ6IHQucGFnZVggLSB1LmxlZnQgKyBzLmxlZnQsCiAgICAgICAgICAgICAgICB0b3A6IHQucGFnZVkgLSB1LnRvcCArIHMudG9wCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfShnLCBwKSkubGVmdCAtIGgubGVmdCArIHYubGVmdCwKICAgICAgICAgICAgcGFnZVk6IGIudG9wIC0gaC50b3AgKyB2LnRvcAogICAgICAgICAgfSkucGFnZVggLSBkLnJlbFgpLAogICAgICAgICAgcGFnZVk6IG0ucGFnZVkgKyA1CiAgICAgICAgfSwgbCA9IGUuZ2hvc3QsIGYgPSBTLmdldEJvZHkoKSwgbC5wYXJlbnROb2RlICE9PSBmICYmIGYuYXBwZW5kQ2hpbGQobCksIG4gPSBlLmdob3N0LCBvID0gZS53aWR0aCwgaSA9IGUuaGVpZ2h0LCBhID0gZS5tYXhYLCB1ID0gZS5tYXhZLCBjID0gcyA9IDAsIG4uc3R5bGUubGVmdCA9IChyID0gdCkucGFnZVggKyAicHgiLCBuLnN0eWxlLnRvcCA9IHIucGFnZVkgKyAicHgiLCB1IDwgci5wYWdlWSArIGkgJiYgKGMgPSByLnBhZ2VZICsgaSAtIHUpLCBuLnN0eWxlLndpZHRoID0gbyAtIChzID0gYSA8IHIucGFnZVggKyBvID8gci5wYWdlWCArIG8gLSBhIDogcykgKyAicHgiLCBuLnN0eWxlLmhlaWdodCA9IGkgLSBjICsgInB4IiwgRSh3LmNsaWVudFgsIHcuY2xpZW50WSkpOwogICAgICB9KTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBhMShlKSB7CiAgICBmdW5jdGlvbiB0KGUpIHsKICAgICAgdmFyIHQsIG4sIHIsIG8sIGksIGE7CiAgICAgIDAgPT09IGUuYnV0dG9uICYmICh0ID0gTShjLmRvbS5nZXRQYXJlbnRzKGUudGFyZ2V0KSwgZnVuY3Rpb24gKCkgewogICAgICAgIGZvciAodmFyIG4gPSBbXSwgZSA9IDA7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHsKICAgICAgICAgIG5bZV0gPSBhcmd1bWVudHNbZV07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgbi5sZW5ndGg7IHQrKykgewogICAgICAgICAgICBpZiAoblt0XShlKSkgcmV0dXJuICEwOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiAhMTsKICAgICAgICB9OwogICAgICB9KEQxLCBUMSkpLmdldE9yKG51bGwpLCBpID0gYy5nZXRCb2R5KCksIEQxKGEgPSB0KSAmJiBhICE9PSBpICYmIChuID0gYy5kb20uZ2V0UG9zKHQpLCByID0gYy5nZXRCb2R5KCksIG8gPSBjLmdldERvYygpLmRvY3VtZW50RWxlbWVudCwgdS5zZXQoewogICAgICAgIGVsZW1lbnQ6IHQsCiAgICAgICAgZHJhZ2dpbmc6ICExLAogICAgICAgIHNjcmVlblg6IGUuc2NyZWVuWCwKICAgICAgICBzY3JlZW5ZOiBlLnNjcmVlblksCiAgICAgICAgbWF4WDogKGMuaW5saW5lID8gci5zY3JvbGxXaWR0aCA6IG8ub2Zmc2V0V2lkdGgpIC0gMiwKICAgICAgICBtYXhZOiAoYy5pbmxpbmUgPyByLnNjcm9sbEhlaWdodCA6IG8ub2Zmc2V0SGVpZ2h0KSAtIDIsCiAgICAgICAgcmVsWDogZS5wYWdlWCAtIG4ueCwKICAgICAgICByZWxZOiBlLnBhZ2VZIC0gbi55LAogICAgICAgIHdpZHRoOiB0Lm9mZnNldFdpZHRoLAogICAgICAgIGhlaWdodDogdC5vZmZzZXRIZWlnaHQsCiAgICAgICAgZ2hvc3Q6IGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICAgICAgICB2YXIgciA9IGMuZG9tLAogICAgICAgICAgICAgIG8gPSBlLmNsb25lTm9kZSghMCk7CiAgICAgICAgICByLnNldFN0eWxlcyhvLCB7CiAgICAgICAgICAgIHdpZHRoOiB0LAogICAgICAgICAgICBoZWlnaHQ6IG4KICAgICAgICAgIH0pLCByLnNldEF0dHJpYihvLCAiZGF0YS1tY2Utc2VsZWN0ZWQiLCBudWxsKTsKICAgICAgICAgIHZhciBpID0gci5jcmVhdGUoImRpdiIsIHsKICAgICAgICAgICAgY2xhc3M6ICJtY2UtZHJhZy1jb250YWluZXIiLAogICAgICAgICAgICAiZGF0YS1tY2UtYm9ndXMiOiAiYWxsIiwKICAgICAgICAgICAgdW5zZWxlY3RhYmxlOiAib24iLAogICAgICAgICAgICBjb250ZW50ZWRpdGFibGU6ICJmYWxzZSIKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIHIuc2V0U3R5bGVzKGksIHsKICAgICAgICAgICAgcG9zaXRpb246ICJhYnNvbHV0ZSIsCiAgICAgICAgICAgIG9wYWNpdHk6IC41LAogICAgICAgICAgICBvdmVyZmxvdzogImhpZGRlbiIsCiAgICAgICAgICAgIGJvcmRlcjogMCwKICAgICAgICAgICAgcGFkZGluZzogMCwKICAgICAgICAgICAgbWFyZ2luOiAwLAogICAgICAgICAgICB3aWR0aDogdCwKICAgICAgICAgICAgaGVpZ2h0OiBuCiAgICAgICAgICB9KSwgci5zZXRTdHlsZXMobywgewogICAgICAgICAgICBtYXJnaW46IDAsCiAgICAgICAgICAgIGJveFNpemluZzogImJvcmRlci1ib3giCiAgICAgICAgICB9KSwgaS5hcHBlbmRDaGlsZChvKSwgaTsKICAgICAgICB9KHQsIHQub2Zmc2V0V2lkdGgsIHQub2Zmc2V0SGVpZ2h0KQogICAgICB9KSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIG4odSkgewogICAgICBpLm9uKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIHQsIG4sIHIsIG8sIGksIGE7CiAgICAgICAgZS5kcmFnZ2luZyAmJiAoKG8gPSAzID09PSAoYSA9IChyID0gcykuc2VsZWN0aW9uLmdldFNlbCgpLmdldFJhbmdlQXQoMCkuc3RhcnRDb250YWluZXIpLm5vZGVUeXBlID8gYS5wYXJlbnROb2RlIDogYSkgPT09IChpID0gZS5lbGVtZW50KSB8fCByLmRvbS5pc0NoaWxkT2YobywgaSkgfHwgRDEobykgfHwgKChuID0gZS5lbGVtZW50LmNsb25lTm9kZSghMCkpLnJlbW92ZUF0dHJpYnV0ZSgiZGF0YS1tY2Utc2VsZWN0ZWQiKSwgdCA9IG4sIHMuZmlyZSgiZHJvcCIsIHsKICAgICAgICAgIGNsaWVudFg6IHUuY2xpZW50WCwKICAgICAgICAgIGNsaWVudFk6IHUuY2xpZW50WQogICAgICAgIH0pLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IHMudW5kb01hbmFnZXIudHJhbnNhY3QoZnVuY3Rpb24gKCkgewogICAgICAgICAgbzEoZS5lbGVtZW50KSwgcy5pbnNlcnRDb250ZW50KHMuZG9tLmdldE91dGVySFRNTCh0KSksIHMuX3NlbGVjdGlvbk92ZXJyaWRlcy5oaWRlRmFrZUNhcmV0KCk7CiAgICAgICAgfSkpLCBzLmZpcmUoImRyYWdlbmQiKSk7CiAgICAgIH0pLCBPMShpKTsKICAgIH0KCiAgICB2YXIgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgcywKICAgICAgICB1LAogICAgICAgIGMsCiAgICAgICAgYSA9IGN1KCksCiAgICAgICAgbCA9IEphLkRPTSwKICAgICAgICBmID0gZG9jdW1lbnQsCiAgICAgICAgZCA9IGkxKHUgPSBhLCBjID0gZSksCiAgICAgICAgbSA9IChyID0gaSA9IGEsIGZ1bmN0aW9uICgpIHsKICAgICAgci5vbihmdW5jdGlvbiAoZSkgewogICAgICAgIGUuZHJhZ2dpbmcgJiYgby5maXJlKCJkcmFnZW5kIik7CiAgICAgIH0pLCBPMShyKTsKICAgIH0pOwogICAgKG8gPSBzID0gZSkub24oIm1vdXNlZG93biIsIHQpLCBlLm9uKCJtb3VzZW1vdmUiLCBkKSwgZS5vbigibW91c2V1cCIsIG4pLCBsLmJpbmQoZiwgIm1vdXNlbW92ZSIsIGQpLCBsLmJpbmQoZiwgIm1vdXNldXAiLCBtKSwgZS5vbigicmVtb3ZlIiwgZnVuY3Rpb24gKCkgewogICAgICBsLnVuYmluZChmLCAibW91c2Vtb3ZlIiwgZCksIGwudW5iaW5kKGYsICJtb3VzZXVwIiwgbSk7CiAgICB9KSwgZS5vbigia2V5ZG93biIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGUua2V5Q29kZSA9PT0gQmYuRVNDICYmIG0oKTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gdTEoZSkgewogICAgdmFyIG4sIGk7CgogICAgZnVuY3Rpb24gYShlKSB7CiAgICAgIHZhciB0OwogICAgICBlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICh0ID0gZS5kYXRhVHJhbnNmZXIpICYmIChEKHQudHlwZXMsICJGaWxlcyIpIHx8IDAgPCB0LmZpbGVzLmxlbmd0aCkgJiYgKGUucHJldmVudERlZmF1bHQoKSwgImRyb3AiID09PSBlLnR5cGUgJiYgSXYoaSwgIkRyb3BwZWQgZmlsZSB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQiKSk7CiAgICB9CgogICAgZnVuY3Rpb24gdShlKSB7CiAgICAgIGRkKGksIGUudGFyZ2V0KSAmJiBhKGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIHQoKSB7CiAgICAgIHZhciB0ID0gSmEuRE9NLAogICAgICAgICAgbiA9IGkuZG9tLAogICAgICAgICAgciA9IGRvY3VtZW50LAogICAgICAgICAgbyA9IGkuaW5saW5lID8gaS5nZXRCb2R5KCkgOiBpLmdldERvYygpLAogICAgICAgICAgZSA9IFsiZHJvcCIsICJkcmFnb3ZlciJdOwogICAgICBZKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdC5iaW5kKHIsIGUsIHUpLCBuLmJpbmQobywgZSwgYSk7CiAgICAgIH0pLCBpLm9uKCJyZW1vdmUiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgWShlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdC51bmJpbmQociwgZSwgdSksIG4udW5iaW5kKG8sIGUsIGEpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICBhMShlKSwgKG4gPSBlKS5vbigiZHJvcCIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gdm9pZCAwICE9PSBlLmNsaWVudFggPyBuLmdldERvYygpLmVsZW1lbnRGcm9tUG9pbnQoZS5jbGllbnRYLCBlLmNsaWVudFkpIDogbnVsbDsKICAgICAgIUQxKHQpICYmICJmYWxzZSIgIT09IG4uZG9tLmdldENvbnRlbnRFZGl0YWJsZVBhcmVudCh0KSB8fCBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB9KSwgZS5nZXRQYXJhbSgiYmxvY2tfdW5zdXBwb3J0ZWRfZHJvcCIsICEwLCAiYm9vbGVhbiIpICYmIChpID0gZSkub24oImluaXQiLCBmdW5jdGlvbiAoKSB7CiAgICAgIF9yLnNldEVkaXRvclRpbWVvdXQoaSwgdCwgMCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIHMxKGUsIHQpIHsKICAgIHJldHVybiBwZihlLmdldEJvZHkoKSwgdCk7CiAgfQoKICBmdW5jdGlvbiBjMShsKSB7CiAgICBmdW5jdGlvbiBmKGUpIHsKICAgICAgcmV0dXJuIGUgIT09IHggJiYgKFAxKGUpIHx8IEpuKGUpKSAmJiB5LmlzQ2hpbGRPZihlLCB4KTsKICAgIH0KCiAgICBmdW5jdGlvbiBjKGUpIHsKICAgICAgcmV0dXJuIGVwKGUpIHx8IHRwKGUpIHx8IEdnKGUpIHx8IEpnKGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGQoZSkgewogICAgICBlICYmIGIuc2V0Um5nKGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIG0oZSwgdCwgbiwgcikgewogICAgICByZXR1cm4gdm9pZCAwID09PSByICYmIChyID0gITApLCBsLmZpcmUoIlNob3dDYXJldCIsIHsKICAgICAgICB0YXJnZXQ6IHQsCiAgICAgICAgZGlyZWN0aW9uOiBlLAogICAgICAgIGJlZm9yZTogbgogICAgICB9KS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSA/IG51bGwgOiAociAmJiBiLnNjcm9sbEludG9WaWV3KHQsIC0xID09PSBlKSwgaS5zaG93KG4sIHQpKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0KGUpIHsKICAgICAgcmV0dXJuIElyKGUpIHx8IE5vKGUpIHx8IGtvKGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIGcoZSkgewogICAgICByZXR1cm4gdChlLnN0YXJ0Q29udGFpbmVyKSB8fCB0KGUuZW5kQ29udGFpbmVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBwKGUsIHQpIHsKICAgICAgaWYgKCFlKSByZXR1cm4gbnVsbDsKCiAgICAgIGlmIChlLmNvbGxhcHNlZCkgewogICAgICAgIGlmICghZyhlKSkgewogICAgICAgICAgdmFyIG4gPSB0ID8gMSA6IC0xLAogICAgICAgICAgICAgIHIgPSB0YyhuLCB4LCBlKSwKICAgICAgICAgICAgICBvID0gci5nZXROb2RlKCF0KTsKICAgICAgICAgIGlmICgkcyhvKSkgcmV0dXJuIG0obiwgbywgISF0ICYmICFyLmlzQXRFbmQoKSwgITEpOwogICAgICAgICAgdmFyIGkgPSByLmdldE5vZGUodCk7CiAgICAgICAgICBpZiAoJHMoaSkpIHJldHVybiBtKG4sIGksICF0ICYmICFyLmlzQXRFbmQoKSwgITEpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBhID0gZS5zdGFydENvbnRhaW5lciwKICAgICAgICAgIHUgPSBlLnN0YXJ0T2Zmc2V0LAogICAgICAgICAgcyA9IGUuZW5kT2Zmc2V0OwogICAgICBpZiAoMyA9PT0gYS5ub2RlVHlwZSAmJiAwID09PSB1ICYmIFAxKGEucGFyZW50Tm9kZSkgJiYgKGEgPSBhLnBhcmVudE5vZGUsIHUgPSB5Lm5vZGVJbmRleChhKSwgYSA9IGEucGFyZW50Tm9kZSksIDEgIT09IGEubm9kZVR5cGUpIHJldHVybiBudWxsOwoKICAgICAgaWYgKHMgPT09IHUgKyAxICYmIGEgPT09IGUuZW5kQ29udGFpbmVyKSB7CiAgICAgICAgdmFyIGMgPSBhLmNoaWxkTm9kZXNbdV07CiAgICAgICAgaWYgKGYoYykpIHJldHVybiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQgPSBlLmNsb25lTm9kZSghMCksCiAgICAgICAgICAgICAgbiA9IGwuZmlyZSgiT2JqZWN0U2VsZWN0ZWQiLCB7CiAgICAgICAgICAgIHRhcmdldDogZSwKICAgICAgICAgICAgdGFyZ2V0Q2xvbmU6IHQKICAgICAgICAgIH0pOwogICAgICAgICAgaWYgKG4uaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybiBudWxsOwoKICAgICAgICAgIHZhciByID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgICAgICAgICAgdmFyIHIgPSBsLiQsCiAgICAgICAgICAgICAgICBvID0gdnIoTnQuZnJvbURvbShsLmdldEJvZHkoKSksICIjIiArIHcpLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHJldHVybiByKFtdKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gcihbZS5kb21dKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIDAgPT09IG8ubGVuZ3RoICYmIChvID0gcignPGRpdiBkYXRhLW1jZS1ib2d1cz0iYWxsIiBjbGFzcz0ibWNlLW9mZnNjcmVlbi1zZWxlY3Rpb24iPjwvZGl2PicpLmF0dHIoImlkIiwgdykpLmFwcGVuZFRvKGwuZ2V0Qm9keSgpKTsKICAgICAgICAgICAgdmFyIGkgPSB5LmNyZWF0ZVJuZygpOwogICAgICAgICAgICB0ID09PSBuICYmIHh0LmllID8gKG8uZW1wdHkoKS5hcHBlbmQoJzxwIHN0eWxlPSJmb250LXNpemU6IDAiIGRhdGEtbWNlLWJvZ3VzPSJhbGwiPlx4YTA8L3A+JykuYXBwZW5kKHQpLCBpLnNldFN0YXJ0QWZ0ZXIob1swXS5maXJzdENoaWxkLmZpcnN0Q2hpbGQpLCBpLnNldEVuZEFmdGVyKHQpKSA6IChvLmVtcHR5KCkuYXBwZW5kKHlvKS5hcHBlbmQodCkuYXBwZW5kKHlvKSwgaS5zZXRTdGFydChvWzBdLmZpcnN0Q2hpbGQsIDEpLCBpLnNldEVuZChvWzBdLmxhc3RDaGlsZCwgMCkpLCBvLmNzcyh7CiAgICAgICAgICAgICAgdG9wOiB5LmdldFBvcyhlLCBsLmdldEJvZHkoKSkueQogICAgICAgICAgICB9KSwgb1swXS5mb2N1cygpOwogICAgICAgICAgICB2YXIgYSA9IGIuZ2V0U2VsKCk7CiAgICAgICAgICAgIHJldHVybiBhLnJlbW92ZUFsbFJhbmdlcygpLCBhLmFkZFJhbmdlKGkpLCBpOwogICAgICAgICAgfShlLCBuLnRhcmdldENsb25lLCB0KSwKICAgICAgICAgICAgICBvID0gTnQuZnJvbURvbShlKTsKCiAgICAgICAgICByZXR1cm4gWShodShOdC5mcm9tRG9tKGwuZ2V0Qm9keSgpKSwgIipbZGF0YS1tY2Utc2VsZWN0ZWRdIiksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGplKG8sIGUpIHx8IHluKGUsIFMpOwogICAgICAgICAgfSksIHkuZ2V0QXR0cmliKGUsIFMpIHx8IGUuc2V0QXR0cmlidXRlKFMsICIxIiksIHYgPSBlLCBFKCksIHI7CiAgICAgICAgfShjKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgZnVuY3Rpb24gaCgpIHsKICAgICAgdiAmJiB2LnJlbW92ZUF0dHJpYnV0ZShTKSwgdnIoTnQuZnJvbURvbShsLmdldEJvZHkoKSksICIjIiArIHcpLmVhY2goTG4pLCB2ID0gbnVsbDsKICAgIH0KCiAgICB2YXIgdiwKICAgICAgICBuLAogICAgICAgIGUsCiAgICAgICAgbywKICAgICAgICBiID0gbC5zZWxlY3Rpb24sCiAgICAgICAgeSA9IGwuZG9tLAogICAgICAgIEMgPSB5LmlzQmxvY2ssCiAgICAgICAgeCA9IGwuZ2V0Qm9keSgpLAogICAgICAgIGkgPSBWcyhsLCB4LCBDLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB2ZChsKTsKICAgIH0pLAogICAgICAgIHcgPSAic2VsLSIgKyB5LnVuaXF1ZUlkKCksCiAgICAgICAgUyA9ICJkYXRhLW1jZS1zZWxlY3RlZCIsCiAgICAgICAgciA9IGIuZ2V0Um5nLAogICAgICAgIEUgPSBmdW5jdGlvbiBFKCkgewogICAgICBpLmhpZGUoKTsKICAgIH07CgogICAgcmV0dXJuIHh0LmNlRmFsc2UgJiYgIW1oKGwpICYmIChsLm9uKCJtb3VzZXVwIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSByKCk7CiAgICAgIHQuY29sbGFwc2VkICYmIGF2KGwsIGUuY2xpZW50WCwgZS5jbGllbnRZKSAmJiBTYihsLCB0LCAhMSkuZWFjaChkKTsKICAgIH0pLCBsLm9uKCJjbGljayIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gczEobCwgZS50YXJnZXQpOwogICAgICB0ICYmIChQMSh0KSAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCBsLmZvY3VzKCkpLCBCMSh0KSAmJiB5LmlzQ2hpbGRPZih0LCBiLmdldE5vZGUoKSkgJiYgaCgpKTsKICAgIH0pLCBsLm9uKCJibHVyIE5ld0Jsb2NrIiwgaCksIGwub24oIlJlc2l6ZVdpbmRvdyBGdWxsc2NyZWVuU3RhdGVDaGFuZ2VkIiwgaS5yZXBvc2l0aW9uKSwgbC5vbigidGFwIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBlLnRhcmdldCwKICAgICAgICAgIG4gPSBzMShsLCB0KTsKICAgICAgUDEobikgPyAoZS5wcmV2ZW50RGVmYXVsdCgpLCB3YihsLCBuKS5lYWNoKHApKSA6IGYodCkgJiYgd2IobCwgdCkuZWFjaChwKTsKICAgIH0sICEwKSwgbC5vbigibW91c2Vkb3duIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsCiAgICAgICAgICBuLAogICAgICAgICAgciwKICAgICAgICAgIG8sCiAgICAgICAgICBpLAogICAgICAgICAgYSwKICAgICAgICAgIHUsCiAgICAgICAgICBzID0gZS50YXJnZXQ7CiAgICAgIHMgIT09IHggJiYgIkhUTUwiICE9PSBzLm5vZGVOYW1lICYmICF5LmlzQ2hpbGRPZihzLCB4KSB8fCAhMSA9PT0gYXYobCwgZS5jbGllbnRYLCBlLmNsaWVudFkpIHx8ICgodCA9IHMxKGwsIHMpKSA/IFAxKHQpID8gKGUucHJldmVudERlZmF1bHQoKSwgd2IobCwgdCkuZWFjaChwKSkgOiAoaCgpLCBCMSh0KSAmJiBlLnNoaWZ0S2V5IHx8IGhmKGUuY2xpZW50WCwgZS5jbGllbnRZLCBiLmdldFJuZygpKSB8fCAoRSgpLCBiLnBsYWNlQ2FyZXRBdChlLmNsaWVudFgsIGUuY2xpZW50WSkpKSA6IGYocykgPyB3YihsLCBzKS5lYWNoKHApIDogITEgPT09ICRzKHMpICYmIChoKCksIEUoKSwgKG4gPSBZeSh4LCBlLmNsaWVudFgsIGUuY2xpZW50WSkpICYmIChyID0gcywgbyA9IG4ubm9kZSwgYSA9IHkuZ2V0UGFyZW50KHIsIEMpLCB1ID0geS5nZXRQYXJlbnQobywgQyksICFLKGEpICYmIChyICE9PSB1ICYmIHkuaXNDaGlsZE9mKGEsIHUpICYmICExID09PSBQMShzMShsLCBhKSkgfHwgIXkuaXNDaGlsZE9mKHUsIGEpICYmIChpID0gdSwgeS5nZXRQYXJlbnQoYSwgQykgIT09IHkuZ2V0UGFyZW50KGksIEMpKSAmJiBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gZS5maXJzdENoaWxkOwoKICAgICAgICBpZiAoIUsodCkpIHsKICAgICAgICAgIHZhciBuID0gYXMuYmVmb3JlKHQpOwogICAgICAgICAgaWYgKFduKG4uZ2V0Tm9kZSgpKSAmJiAxID09PSBlLmNoaWxkTm9kZXMubGVuZ3RoKSByZXR1cm4gIWMobik7CiAgICAgICAgICB2YXIgciA9IFBjKGUpLm5leHQobik7CiAgICAgICAgICByZXR1cm4gciAmJiAhYyhyKTsKICAgICAgICB9CiAgICAgIH0oYSkpIHx8IChlLnByZXZlbnREZWZhdWx0KCksIGQobSgxLCBuLm5vZGUsIG4uYmVmb3JlLCAhMSkpLCBsLmdldEJvZHkoKS5mb2N1cygpKSkpKTsKICAgIH0pLCBsLm9uKCJrZXlwcmVzcyIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIEJmLm1vZGlmaWVyUHJlc3NlZChlKSB8fCBQMShiLmdldE5vZGUoKSkgJiYgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgfSksIGwub24oIkdldFNlbGVjdGlvblJhbmdlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBlLnJhbmdlOwogICAgICB2ICYmICh2LnBhcmVudE5vZGUgPyAoKHQgPSB0LmNsb25lUmFuZ2UoKSkuc2VsZWN0Tm9kZSh2KSwgZS5yYW5nZSA9IHQpIDogdiA9IG51bGwpOwogICAgfSksIGwub24oIlNldFNlbGVjdGlvblJhbmdlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsIG4sIHIsIG8sIGksIGEsIHU7CiAgICAgIGUucmFuZ2UgPSAodCA9IGUucmFuZ2UsIG4gPSBsLnNjaGVtYS5nZXRTaG9ydEVuZGVkRWxlbWVudHMoKSwgciA9IHkuY3JlYXRlUm5nKCksIG8gPSB0LnN0YXJ0Q29udGFpbmVyLCBpID0gdC5zdGFydE9mZnNldCwgYSA9IHQuZW5kQ29udGFpbmVyLCB1ID0gdC5lbmRPZmZzZXQsIE5lKG4sIG8ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgPyAwID09PSBpID8gci5zZXRTdGFydEJlZm9yZShvKSA6IHIuc2V0U3RhcnRBZnRlcihvKSA6IHIuc2V0U3RhcnQobywgaSksIE5lKG4sIGEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgPyAwID09PSB1ID8gci5zZXRFbmRCZWZvcmUoYSkgOiByLnNldEVuZEFmdGVyKGEpIDogci5zZXRFbmQoYSwgdSksIHIpOwogICAgICB2YXIgcyA9IHAoZS5yYW5nZSwgZS5mb3J3YXJkKTsKICAgICAgcyAmJiAoZS5yYW5nZSA9IHMpOwogICAgfSksIGwub24oIkFmdGVyU2V0U2VsZWN0aW9uUmFuZ2UiLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCA9IGUucmFuZ2UsCiAgICAgICAgICBuID0gdC5zdGFydENvbnRhaW5lci5wYXJlbnROb2RlOwogICAgICBnKHQpIHx8ICJtY2VwYXN0ZWJpbiIgPT09IG4uaWQgfHwgRSgpLCB5Lmhhc0NsYXNzKG4sICJtY2Utb2Zmc2NyZWVuLXNlbGVjdGlvbiIpIHx8IGgoKTsKICAgIH0pLCBsLm9uKCJjb3B5IiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsCiAgICAgICAgICBuLAogICAgICAgICAgciA9IGUuY2xpcGJvYXJkRGF0YTsKICAgICAgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhZS5jbGlwYm9hcmREYXRhIHx8IHh0LmllIHx8ICh0ID0gKG4gPSB5LmdldCh3KSkgJiYgbi5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpWzBdKSAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCByLmNsZWFyRGF0YSgpLCByLnNldERhdGEoInRleHQvaHRtbCIsIHQub3V0ZXJIVE1MKSwgci5zZXREYXRhKCJ0ZXh0L3BsYWluIiwgdC5vdXRlclRleHQgfHwgdC5pbm5lclRleHQpKTsKICAgIH0pLCB1MShsKSwgZSA9IGx1KGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGUsIHQ7CiAgICAgIG4ucmVtb3ZlZCB8fCAhbi5nZXRCb2R5KCkuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgfHwgKGUgPSBuLnNlbGVjdGlvbi5nZXRSbmcoKSkuY29sbGFwc2VkICYmICh0ID0gRWIobiwgZSwgITEpLCBuLnNlbGVjdGlvbi5zZXRSbmcodCkpOwogICAgfSwgMCksIChuID0gbCkub24oImZvY3VzIiwgZnVuY3Rpb24gKCkgewogICAgICBlLnRocm90dGxlKCk7CiAgICB9KSwgbi5vbigiYmx1ciIsIGZ1bmN0aW9uICgpIHsKICAgICAgZS5jYW5jZWwoKTsKICAgIH0pLCAobyA9IGwpLm9uKCJpbml0IiwgZnVuY3Rpb24gKCkgewogICAgICBvLm9uKCJmb2N1c2luIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdCwKICAgICAgICAgICAgbiwKICAgICAgICAgICAgciA9IGUudGFyZ2V0OwogICAgICAgIEpuKHIpICYmICh0ID0gcGYoby5nZXRCb2R5KCksIHIpLCBuID0gWW4odCkgPyB0IDogciwgby5zZWxlY3Rpb24uZ2V0Tm9kZSgpICE9PSBuICYmIHdiKG8sIG4pLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBvLnNlbGVjdGlvbi5zZXRSbmcoZSk7CiAgICAgICAgfSkpOwogICAgICB9KTsKICAgIH0pKSwgewogICAgICBzaG93Q2FyZXQ6IG0sCiAgICAgIHNob3dCbG9ja0NhcmV0Q29udGFpbmVyOiBmdW5jdGlvbiBzaG93QmxvY2tDYXJldENvbnRhaW5lcihlKSB7CiAgICAgICAgZS5oYXNBdHRyaWJ1dGUoImRhdGEtbWNlLWNhcmV0IikgJiYgKHpyKGUpLCBkKHIoKSksIGIuc2Nyb2xsSW50b1ZpZXcoZSkpOwogICAgICB9LAogICAgICBoaWRlRmFrZUNhcmV0OiBFLAogICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICAgIGkuZGVzdHJveSgpLCB2ID0gbnVsbDsKICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIGwxKGEpIHsKICAgIGZ1bmN0aW9uIGUoZSwgdCkgewogICAgICB0cnkgewogICAgICAgIGEuZ2V0RG9jKCkuZXhlY0NvbW1hbmQoZSwgITEsIHQpOwogICAgICB9IGNhdGNoIChlKSB7fQogICAgfQoKICAgIGZ1bmN0aW9uIHUoZSkgewogICAgICByZXR1cm4gZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0KCkgewogICAgICBhLnNob3J0Y3V0cy5hZGQoIm1ldGErYSIsIG51bGwsICJTZWxlY3RBbGwiKTsKICAgIH0KCiAgICBmdW5jdGlvbiBuKCkgewogICAgICBhLmlubGluZSB8fCBiLmJpbmQoYS5nZXREb2MoKSwgIm1vdXNlZG93biBtb3VzZXVwIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdDsKICAgICAgICBlLnRhcmdldCA9PT0gYS5nZXREb2MoKS5kb2N1bWVudEVsZW1lbnQgJiYgKHQgPSB5LmdldFJuZygpLCBhLmdldEJvZHkoKS5mb2N1cygpLCAibW91c2Vkb3duIiA9PT0gZS50eXBlID8gSXIodC5zdGFydENvbnRhaW5lcikgfHwgeS5wbGFjZUNhcmV0QXQoZS5jbGllbnRYLCBlLmNsaWVudFkpIDogeS5zZXRSbmcodCkpOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiByKCkgewogICAgICBSYW5nZS5wcm90b3R5cGUuZ2V0Q2xpZW50UmVjdHMgfHwgYS5vbigibW91c2Vkb3duIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdDsKICAgICAgICB1KGUpIHx8ICJIVE1MIiAhPT0gZS50YXJnZXQubm9kZU5hbWUgfHwgKCh0ID0gYS5nZXRCb2R5KCkpLmJsdXIoKSwgX3Iuc2V0RWRpdG9yVGltZW91dChhLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0LmZvY3VzKCk7CiAgICAgICAgfSkpOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvKCkgewogICAgICBhLm9uKCJjbGljayIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIHQgPSBlLnRhcmdldDsKICAgICAgICAvXihJTUd8SFIpJC8udGVzdCh0Lm5vZGVOYW1lKSAmJiAiZmFsc2UiICE9PSBiLmdldENvbnRlbnRFZGl0YWJsZVBhcmVudCh0KSAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCBhLnNlbGVjdGlvbi5zZWxlY3QodCksIGEubm9kZUNoYW5nZWQoKSksICJBIiA9PT0gdC5ub2RlTmFtZSAmJiBiLmhhc0NsYXNzKHQsICJtY2UtaXRlbS1hbmNob3IiKSAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCB5LnNlbGVjdCh0KSk7CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGkoKSB7CiAgICAgIGEub24oImtleWRvd24iLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGlmICghdShlKSAmJiBlLmtleUNvZGUgPT09IGggJiYgeS5pc0NvbGxhcHNlZCgpICYmIDAgPT09IHkuZ2V0Um5nKCkuc3RhcnRPZmZzZXQpIHsKICAgICAgICAgIHZhciB0ID0geS5nZXROb2RlKCkucHJldmlvdXNTaWJsaW5nOwogICAgICAgICAgaWYgKHQgJiYgdC5ub2RlTmFtZSAmJiAidGFibGUiID09PSB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCksICExOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gcygpIHsKICAgICAgYS5nZXRQYXJhbSgicmVhZG9ubHkiKSB8fCBhLm9uKCJCZWZvcmVFeGVjQ29tbWFuZCBtb3VzZWRvd24iLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgZSgiU3R5bGVXaXRoQ1NTIiwgITEpLCBlKCJlbmFibGVJbmxpbmVUYWJsZUVkaXRpbmciLCAhMSksIFRzKGEpIHx8IGUoImVuYWJsZU9iamVjdFJlc2l6aW5nIiwgITEpOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBjKCkgewogICAgICBhLmNvbnRlbnRTdHlsZXMucHVzaCgiaW1nOi1tb3otYnJva2VuIHstbW96LWZvcmNlLWJyb2tlbi1pbWFnZS1pY29uOjE7bWluLXdpZHRoOjI0cHg7bWluLWhlaWdodDoyNHB4fSIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGwoKSB7CiAgICAgIGEuaW5saW5lIHx8IGEub24oImtleWRvd24iLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSAmJiBhLmdldFdpbigpLmZvY3VzKCk7CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGYoKSB7CiAgICAgIGEuaW5saW5lIHx8IChhLmNvbnRlbnRTdHlsZXMucHVzaCgiYm9keSB7bWluLWhlaWdodDogMTUwcHh9IiksIGEub24oImNsaWNrIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdDsKICAgICAgICAiSFRNTCIgPT09IGUudGFyZ2V0Lm5vZGVOYW1lICYmICgxMSA8IHh0LmllID8gYS5nZXRCb2R5KCkuZm9jdXMoKSA6ICh0ID0gYS5zZWxlY3Rpb24uZ2V0Um5nKCksIGEuZ2V0Qm9keSgpLmZvY3VzKCksIGEuc2VsZWN0aW9uLnNldFJuZyh0KSwgYS5zZWxlY3Rpb24ubm9ybWFsaXplKCksIGEubm9kZUNoYW5nZWQoKSkpOwogICAgICB9KSk7CiAgICB9CgogICAgZnVuY3Rpb24gZCgpIHsKICAgICAgeHQubWFjICYmIGEub24oImtleWRvd24iLCBmdW5jdGlvbiAoZSkgewogICAgICAgICFCZi5tZXRhS2V5UHJlc3NlZChlKSB8fCBlLnNoaWZ0S2V5IHx8IDM3ICE9PSBlLmtleUNvZGUgJiYgMzkgIT09IGUua2V5Q29kZSB8fCAoZS5wcmV2ZW50RGVmYXVsdCgpLCBhLnNlbGVjdGlvbi5nZXRTZWwoKS5tb2RpZnkoIm1vdmUiLCAzNyA9PT0gZS5rZXlDb2RlID8gImJhY2t3YXJkIiA6ICJmb3J3YXJkIiwgImxpbmVib3VuZGFyeSIpKTsKICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gbSgpIHsKICAgICAgYS5vbigiY2xpY2siLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gZS50YXJnZXQ7CgogICAgICAgIGRvIHsKICAgICAgICAgIGlmICgiQSIgPT09IHQudGFnTmFtZSkgcmV0dXJuIHZvaWQgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0gd2hpbGUgKHQgPSB0LnBhcmVudE5vZGUpOwogICAgICB9KSwgYS5jb250ZW50U3R5bGVzLnB1c2goIi5tY2UtY29udGVudC1ib2R5IHstd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmV9Iik7CiAgICB9CgogICAgZnVuY3Rpb24gZygpIHsKICAgICAgYS5vbigiaW5pdCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICBhLmRvbS5iaW5kKGEuZ2V0Qm9keSgpLCAic3VibWl0IiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgdmFyIHAgPSBFdC5lYWNoLAogICAgICAgIGggPSBCZi5CQUNLU1BBQ0UsCiAgICAgICAgdiA9IEJmLkRFTEVURSwKICAgICAgICBiID0gYS5kb20sCiAgICAgICAgeSA9IGEuc2VsZWN0aW9uLAogICAgICAgIEMgPSBhLnBhcnNlciwKICAgICAgICB4ID0geHQuZ2Vja28sCiAgICAgICAgdyA9IHh0LmllLAogICAgICAgIFMgPSB4dC53ZWJraXQsCiAgICAgICAgRSA9ICJkYXRhOnRleHQvbWNlLWludGVybmFsLCIsCiAgICAgICAgTiA9IHcgPyAiVGV4dCIgOiAiVVJMIiwKICAgICAgICBrID0gdGU7CiAgICByZXR1cm4gbWgoYSkgPyAoUyAmJiAobigpLCBvKCksIGcoKSwgdCgpLCB4dC5pT1MgJiYgKGwoKSwgZigpLCBtKCkpKSwgeCAmJiAocigpLCBzKCksIGMoKSwgZCgpKSkgOiAoYS5vbigia2V5ZG93biIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGlmICghdShlKSAmJiBlLmtleUNvZGUgPT09IEJmLkJBQ0tTUEFDRSkgewogICAgICAgIHZhciB0LAogICAgICAgICAgICBuID0gKHQgPSB5LmdldFJuZygpKS5zdGFydENvbnRhaW5lciwKICAgICAgICAgICAgciA9IHQuc3RhcnRPZmZzZXQsCiAgICAgICAgICAgIG8gPSBiLmdldFJvb3QoKSwKICAgICAgICAgICAgaSA9IG47CgogICAgICAgIGlmICh0LmNvbGxhcHNlZCAmJiAwID09PSByKSB7CiAgICAgICAgICBmb3IgKDsgaSAmJiBpLnBhcmVudE5vZGUgJiYgaS5wYXJlbnROb2RlLmZpcnN0Q2hpbGQgPT09IGkgJiYgaS5wYXJlbnROb2RlICE9PSBvOykgewogICAgICAgICAgICBpID0gaS5wYXJlbnROb2RlOwogICAgICAgICAgfQoKICAgICAgICAgICJCTE9DS1FVT1RFIiA9PT0gaS50YWdOYW1lICYmIChhLmZvcm1hdHRlci50b2dnbGUoImJsb2NrcXVvdGUiLCBudWxsLCBpKSwgKHQgPSBiLmNyZWF0ZVJuZygpKS5zZXRTdGFydChuLCAwKSwgdC5zZXRFbmQobiwgMCksIHkuc2V0Um5nKHQpKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pLCBhLm9uKCJrZXlkb3duIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsCiAgICAgICAgICBuLAogICAgICAgICAgciwKICAgICAgICAgIG8sCiAgICAgICAgICBpID0gZS5rZXlDb2RlOwogICAgICB1KGUpIHx8IGkgIT09IHYgJiYgaSAhPT0gaCB8fCAodCA9IGEuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCksIG4gPSBhLmdldEJvZHkoKSwgdCAmJiAhYi5pc0VtcHR5KG4pIHx8ICF0ICYmIChyID0gUihhLnNlbGVjdGlvbi5nZXRSbmcoKSksIChvID0gYi5jcmVhdGVSbmcoKSkuc2VsZWN0Tm9kZShhLmdldEJvZHkoKSksIHIgIT09IFIobykpIHx8IChlLnByZXZlbnREZWZhdWx0KCksIGEuc2V0Q29udGVudCgiIiksIG4uZmlyc3RDaGlsZCAmJiBiLmlzQmxvY2sobi5maXJzdENoaWxkKSA/IGEuc2VsZWN0aW9uLnNldEN1cnNvckxvY2F0aW9uKG4uZmlyc3RDaGlsZCwgMCkgOiBhLnNlbGVjdGlvbi5zZXRDdXJzb3JMb2NhdGlvbihuLCAwKSwgYS5ub2RlQ2hhbmdlZCgpKSk7CiAgICB9KSwgeHQud2luZG93c1Bob25lIHx8IGEub24oImtleXVwIGZvY3VzaW4gbW91c2V1cCIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIEJmLm1vZGlmaWVyUHJlc3NlZChlKSB8fCB5Lm5vcm1hbGl6ZSgpOwogICAgfSwgITApLCBTICYmIChuKCksIG8oKSwgU3MoYSkgJiYgYS5vbigiaW5pdCIsIGZ1bmN0aW9uICgpIHsKICAgICAgZSgiRGVmYXVsdFBhcmFncmFwaFNlcGFyYXRvciIsIFNzKGEpKTsKICAgIH0pLCBnKCksIGkoKSwgQy5hZGROb2RlRmlsdGVyKCJiciIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGZvciAodmFyIHQgPSBlLmxlbmd0aDsgdC0tOykgewogICAgICAgICJBcHBsZS1pbnRlcmNoYW5nZS1uZXdsaW5lIiA9PT0gZVt0XS5hdHRyKCJjbGFzcyIpICYmIGVbdF0ucmVtb3ZlKCk7CiAgICAgIH0KICAgIH0pLCB4dC5pT1MgPyAobCgpLCBmKCksIG0oKSkgOiB0KCkpLCAxMSA8PSB4dC5pZSAmJiAoZigpLCBpKCkpLCB4dC5pZSAmJiAodCgpLCBlKCJBdXRvVXJsRGV0ZWN0IiwgITEpLCBhLm9uKCJkcmFnc3RhcnQiLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCwgbiwgcjsKICAgICAgKHQgPSBlKS5kYXRhVHJhbnNmZXIgJiYgKGEuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgJiYgIklNRyIgPT09IHQudGFyZ2V0LnRhZ05hbWUgJiYgeS5zZWxlY3QodC50YXJnZXQpLCAwIDwgKG4gPSBhLnNlbGVjdGlvbi5nZXRDb250ZW50KCkpLmxlbmd0aCAmJiAociA9IEUgKyBlc2NhcGUoYS5pZCkgKyAiLCIgKyBlc2NhcGUobiksIHQuZGF0YVRyYW5zZmVyLnNldERhdGEoTiwgcikpKTsKICAgIH0pLCBhLm9uKCJkcm9wIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsIG4sIHIsIG87CiAgICAgIHUoZSkgfHwgKHQgPSBlLmRhdGFUcmFuc2ZlciAmJiAobyA9IGUuZGF0YVRyYW5zZmVyLmdldERhdGEoTikpICYmIDAgPD0gby5pbmRleE9mKEUpID8gKG8gPSBvLnN1YnN0cihFLmxlbmd0aCkuc3BsaXQoIiwiKSwgewogICAgICAgIGlkOiB1bmVzY2FwZShvWzBdKSwKICAgICAgICBodG1sOiB1bmVzY2FwZShvWzFdKQogICAgICB9KSA6IG51bGwpICYmIHQuaWQgIT09IGEuaWQgJiYgKGUucHJldmVudERlZmF1bHQoKSwgbiA9IHdmKGUueCwgZS55LCBhLmdldERvYygpKSwgeS5zZXRSbmcobiksIHIgPSB0Lmh0bWwsIGEucXVlcnlDb21tYW5kU3VwcG9ydGVkKCJtY2VJbnNlcnRDbGlwYm9hcmRDb250ZW50IikgPyBhLmV4ZWNDb21tYW5kKCJtY2VJbnNlcnRDbGlwYm9hcmRDb250ZW50IiwgITEsIHsKICAgICAgICBjb250ZW50OiByLAogICAgICAgIGludGVybmFsOiAhMAogICAgICB9KSA6IGEuZXhlY0NvbW1hbmQoIm1jZUluc2VydENvbnRlbnQiLCAhMSwgcikpOwogICAgfSkpLCB4ICYmIChhLm9uKCJrZXlkb3duIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgaWYgKCF1KGUpICYmIGUua2V5Q29kZSA9PT0gaCAmJiBhLmdldEJvZHkoKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaHIiKS5sZW5ndGggJiYgeS5pc0NvbGxhcHNlZCgpICYmIDAgPT09IHkuZ2V0Um5nKCkuc3RhcnRPZmZzZXQpIHsKICAgICAgICB2YXIgdCA9IHkuZ2V0Tm9kZSgpLAogICAgICAgICAgICBuID0gdC5wcmV2aW91c1NpYmxpbmc7CiAgICAgICAgaWYgKCJIUiIgPT09IHQubm9kZU5hbWUpIHJldHVybiBiLnJlbW92ZSh0KSwgdm9pZCBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgbiAmJiBuLm5vZGVOYW1lICYmICJociIgPT09IG4ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJiAoYi5yZW1vdmUobiksIGUucHJldmVudERlZmF1bHQoKSk7CiAgICAgIH0KICAgIH0pLCByKCksIGEub24oImtleXByZXNzIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQ7CiAgICAgIGlmICghdShlKSAmJiAoOCA9PT0gZS5rZXlDb2RlIHx8IDQ2ID09PSBlLmtleUNvZGUpICYmIEEoKSkgcmV0dXJuIHQgPSBfKCksIGEuZ2V0RG9jKCkuZXhlY0NvbW1hbmQoImRlbGV0ZSIsICExLCBudWxsKSwgdCgpLCBlLnByZXZlbnREZWZhdWx0KCksICExOwogICAgfSksIGIuYmluZChhLmdldERvYygpLCAiY3V0IiwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQ7CiAgICAgICF1KGUpICYmIEEoKSAmJiAodCA9IF8oKSwgX3Iuc2V0RWRpdG9yVGltZW91dChhLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdCgpOwogICAgICB9KSk7CiAgICB9KSwgcygpLCBhLm9uKCJTZXRDb250ZW50IEV4ZWNDb21tYW5kIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgInNldGNvbnRlbnQiICE9PSBlLnR5cGUgJiYgIm1jZUluc2VydExpbmsiICE9PSBlLmNvbW1hbmQgfHwgcChiLnNlbGVjdCgiYSIpLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB0ID0gZS5wYXJlbnROb2RlLAogICAgICAgICAgICBuID0gYi5nZXRSb290KCk7CgogICAgICAgIGlmICh0Lmxhc3RDaGlsZCA9PT0gZSkgewogICAgICAgICAgZm9yICg7IHQgJiYgIWIuaXNCbG9jayh0KTspIHsKICAgICAgICAgICAgaWYgKHQucGFyZW50Tm9kZS5sYXN0Q2hpbGQgIT09IHQgfHwgdCA9PT0gbikgcmV0dXJuOwogICAgICAgICAgICB0ID0gdC5wYXJlbnROb2RlOwogICAgICAgICAgfQoKICAgICAgICAgIGIuYWRkKHQsICJiciIsIHsKICAgICAgICAgICAgImRhdGEtbWNlLWJvZ3VzIjogMQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pLCBjKCksIGQoKSwgaSgpKSksIHsKICAgICAgcmVmcmVzaENvbnRlbnRFZGl0YWJsZTogaywKICAgICAgaXNIaWRkZW46IGZ1bmN0aW9uIGlzSGlkZGVuKCkgewogICAgICAgIGlmICgheCB8fCBhLnJlbW92ZWQpIHJldHVybiAhMTsKICAgICAgICB2YXIgZSA9IGEuc2VsZWN0aW9uLmdldFNlbCgpOwogICAgICAgIHJldHVybiAhZSB8fCAhZS5yYW5nZUNvdW50IHx8IDAgPT09IGUucmFuZ2VDb3VudDsKICAgICAgfQogICAgfTsKCiAgICBmdW5jdGlvbiBfKCkgewogICAgICB2YXIgZSA9IGIuZ2V0QXR0cmlicyh5LmdldFN0YXJ0KCkuY2xvbmVOb2RlKCExKSk7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHQgPSB5LmdldFN0YXJ0KCk7CiAgICAgICAgdCAhPT0gYS5nZXRCb2R5KCkgJiYgKGIuc2V0QXR0cmliKHQsICJzdHlsZSIsIG51bGwpLCBwKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB0LnNldEF0dHJpYnV0ZU5vZGUoZS5jbG9uZU5vZGUoITApKTsKICAgICAgICB9KSk7CiAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gQSgpIHsKICAgICAgcmV0dXJuICF5LmlzQ29sbGFwc2VkKCkgJiYgYi5nZXRQYXJlbnQoeS5nZXRTdGFydCgpLCBiLmlzQmxvY2spICE9PSBiLmdldFBhcmVudCh5LmdldEVuZCgpLCBiLmlzQmxvY2spOwogICAgfQoKICAgIGZ1bmN0aW9uIFIoZSkgewogICAgICB2YXIgdCA9IGIuY3JlYXRlKCJib2R5IiksCiAgICAgICAgICBuID0gZS5jbG9uZUNvbnRlbnRzKCk7CiAgICAgIHJldHVybiB0LmFwcGVuZENoaWxkKG4pLCB5LnNlcmlhbGl6ZXIuc2VyaWFsaXplKHQsIHsKICAgICAgICBmb3JtYXQ6ICJodG1sIgogICAgICB9KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGYxKGUpIHsKICAgIHJldHVybiBhZShlLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gITEgPT09IGIoZSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGQxKGUpIHsKICAgIHZhciB0ID0gZS5zZXR0aW5ncywKICAgICAgICBuID0gZS5lZGl0b3JVcGxvYWQuYmxvYkNhY2hlOwogICAgcmV0dXJuIGYxKHsKICAgICAgYWxsb3dfY29uZGl0aW9uYWxfY29tbWVudHM6IHQuYWxsb3dfY29uZGl0aW9uYWxfY29tbWVudHMsCiAgICAgIGFsbG93X2h0bWxfZGF0YV91cmxzOiB0LmFsbG93X2h0bWxfZGF0YV91cmxzLAogICAgICBhbGxvd19zdmdfZGF0YV91cmxzOiB0LmFsbG93X3N2Z19kYXRhX3VybHMsCiAgICAgIGFsbG93X2h0bWxfaW5fbmFtZWRfYW5jaG9yOiB0LmFsbG93X2h0bWxfaW5fbmFtZWRfYW5jaG9yLAogICAgICBhbGxvd19zY3JpcHRfdXJsczogdC5hbGxvd19zY3JpcHRfdXJscywKICAgICAgYWxsb3dfdW5zYWZlX2xpbmtfdGFyZ2V0OiB0LmFsbG93X3Vuc2FmZV9saW5rX3RhcmdldCwKICAgICAgY29udmVydF9mb250c190b19zcGFuczogdC5jb252ZXJ0X2ZvbnRzX3RvX3NwYW5zLAogICAgICBmaXhfbGlzdF9lbGVtZW50czogdC5maXhfbGlzdF9lbGVtZW50cywKICAgICAgZm9udF9zaXplX2xlZ2FjeV92YWx1ZXM6IHQuZm9udF9zaXplX2xlZ2FjeV92YWx1ZXMsCiAgICAgIGZvcmNlZF9yb290X2Jsb2NrOiB0LmZvcmNlZF9yb290X2Jsb2NrLAogICAgICBmb3JjZWRfcm9vdF9ibG9ja19hdHRyczogdC5mb3JjZWRfcm9vdF9ibG9ja19hdHRycywKICAgICAgcGFkZF9lbXB0eV93aXRoX2JyOiB0LnBhZGRfZW1wdHlfd2l0aF9iciwKICAgICAgcHJlc2VydmVfY2RhdGE6IHQucHJlc2VydmVfY2RhdGEsCiAgICAgIHJlbW92ZV90cmFpbGluZ19icnM6IHQucmVtb3ZlX3RyYWlsaW5nX2JycywKICAgICAgaW5saW5lX3N0eWxlczogdC5pbmxpbmVfc3R5bGVzLAogICAgICByb290X25hbWU6IGUuaW5saW5lID8gZS5nZXRFbGVtZW50KCkubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA6IHZvaWQgMCwKICAgICAgdmFsaWRhdGU6ICEwLAogICAgICBibG9iX2NhY2hlOiBuLAogICAgICBkb2N1bWVudDogZS5nZXREb2MoKSwKICAgICAgaW1hZ2VzX2RhdGFpbWdfZmlsdGVyOiB0LmltYWdlc19kYXRhaW1nX2ZpbHRlcgogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBtMShlKSB7CiAgICB2YXIgdCwgdSwgbjsKICAgIGUuYmluZFBlbmRpbmdFdmVudERlbGVnYXRlcygpLCBlLmluaXRpYWxpemVkID0gITAsIGUuZmlyZSgiSW5pdCIpLCBlLmZvY3VzKCEwKSwgbiA9ICh1ID0gZSkuZG9tLmdldFJvb3QoKSwgdS5pbmxpbmUgfHwgVGwodSkgJiYgdS5zZWxlY3Rpb24uZ2V0U3RhcnQoITApICE9PSBuIHx8IGVmKG4pLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsCiAgICAgICAgICBuLAogICAgICAgICAgciwKICAgICAgICAgIG8sCiAgICAgICAgICBpID0gZS5nZXROb2RlKCksCiAgICAgICAgICBhID0gY24oaSkgPyBlZihpKS5nZXRPcihlKSA6IGU7CiAgICAgIHh0LmJyb3dzZXIuaXNJRSgpID8gKHQgPSB1LCBuID0gYS50b1JhbmdlKCksIHIgPSBOdC5mcm9tRG9tKHQuZ2V0Qm9keSgpKSwgbyA9IChhZCh0KSA/IHZlLmZyb20obikgOiB2ZS5ub25lKCkpLm1hcCh1ZCkuZmlsdGVyKGlkKHIpKSwgdC5ib29rbWFyayA9IG8uaXNTb21lKCkgPyBvIDogdC5ib29rbWFyaykgOiB1LnNlbGVjdGlvbi5zZXRSbmcoYS50b1JhbmdlKCkpOwogICAgfSksIGUubm9kZUNoYW5nZWQoewogICAgICBpbml0aWFsOiAhMAogICAgfSksIGUuZXhlY0NhbGxiYWNrKCJpbml0X2luc3RhbmNlX2NhbGxiYWNrIiwgZSksICh0ID0gZSkuc2V0dGluZ3MuYXV0b19mb2N1cyAmJiBfci5zZXRFZGl0b3JUaW1lb3V0KHQsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGUgPSAhMCA9PT0gdC5zZXR0aW5ncy5hdXRvX2ZvY3VzID8gdCA6IHQuZWRpdG9yTWFuYWdlci5nZXQodC5zZXR0aW5ncy5hdXRvX2ZvY3VzKTsKICAgICAgZS5kZXN0cm95ZWQgfHwgZS5mb2N1cygpOwogICAgfSwgMTAwKTsKICB9CgogIGZ1bmN0aW9uIGcxKGUpIHsKICAgIHJldHVybiAoZS5pbmxpbmUgPyBlLnVpIDogZS5kb20pLnN0eWxlU2hlZXRMb2FkZXI7CiAgfQoKICBmdW5jdGlvbiBwMShlKSB7CiAgICBmdW5jdGlvbiB0KCkgewogICAgICBvLnVubG9hZEFsbChhKSwgZS5pbmxpbmUgfHwgZS51aS5zdHlsZVNoZWV0TG9hZGVyLnVubG9hZEFsbChpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBuKCkgewogICAgICBlLnJlbW92ZWQgPyB0KCkgOiBlLm9uKCJyZW1vdmUiLCB0KTsKICAgIH0KCiAgICB2YXIgciwKICAgICAgICBvID0gZzEoZSksCiAgICAgICAgaSA9IERzKGUpLAogICAgICAgIGEgPSBlLmNvbnRlbnRDU1M7CiAgICAwIDwgZS5jb250ZW50U3R5bGVzLmxlbmd0aCAmJiAociA9ICIiLCBFdC5lYWNoKGUuY29udGVudFN0eWxlcywgZnVuY3Rpb24gKGUpIHsKICAgICAgciArPSBlICsgIlxyXG4iOwogICAgfSksIGUuZG9tLmFkZFN0eWxlKHIpKTsKICAgIHZhciB1LAogICAgICAgIHMsCiAgICAgICAgYywKICAgICAgICBsLAogICAgICAgIGYsCiAgICAgICAgZCwKICAgICAgICBtLAogICAgICAgIGcsCiAgICAgICAgcCwKICAgICAgICBoID0ga3IuYWxsKCh1ID0gZSwgcyA9IGEsIGMgPSBpLCBsID0gW25ldyBrcihmdW5jdGlvbiAoZSwgdCkgewogICAgICByZXR1cm4gZzEodSkubG9hZEFsbChzLCBlLCB0KTsKICAgIH0pXSwgdS5pbmxpbmUgPyBsIDogbC5jb25jYXQoW25ldyBrcihmdW5jdGlvbiAoZSwgdCkgewogICAgICByZXR1cm4gdS51aS5zdHlsZVNoZWV0TG9hZGVyLmxvYWRBbGwoYywgZSwgdCk7CiAgICB9KV0pKSkudGhlbihuKS5jYXRjaChuKTsKICAgIHJldHVybiBlLnNldHRpbmdzLmNvbnRlbnRfc3R5bGUgJiYgKGQgPSAoZiA9IGUpLnNldHRpbmdzLmNvbnRlbnRfc3R5bGUsIG0gPSBOdC5mcm9tRG9tKGYuZ2V0Qm9keSgpKSwgZyA9IGp0KEJuKG0pKSwgcG4ocCA9IE50LmZyb21UYWcoInN0eWxlIiksICJ0eXBlIiwgInRleHQvY3NzIiksIFBuKHAsIE50LmZyb21UZXh0KGQpKSwgUG4oZywgcCksIGYub24oInJlbW92ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgTG4ocCk7CiAgICB9KSksIGg7CiAgfQoKICBmdW5jdGlvbiBoMShlKSB7CiAgICB2YXIgdDsKICAgICEwICE9PSBlLnJlbW92ZWQgJiYgKG1oKHQgPSBlKSB8fCB0LmxvYWQoewogICAgICBpbml0aWFsOiAhMCwKICAgICAgZm9ybWF0OiAiaHRtbCIKICAgIH0pLCB0LnN0YXJ0Q29udGVudCA9IHQuZ2V0Q29udGVudCh7CiAgICAgIGZvcm1hdDogInJhdyIKICAgIH0pLCBtMShlKSk7CiAgfQoKICBmdW5jdGlvbiB2MSh0LCBlKSB7CiAgICB2YXIgbiA9IHQuc2V0dGluZ3MsCiAgICAgICAgciA9IHQuZ2V0RWxlbWVudCgpLAogICAgICAgIG8gPSB0LmdldERvYygpOwogICAgbi5pbmxpbmUgfHwgKHQuZ2V0RWxlbWVudCgpLnN0eWxlLnZpc2liaWxpdHkgPSB0Lm9yZ1Zpc2liaWxpdHkpLCBlIHx8IHQuaW5saW5lIHx8IChvLm9wZW4oKSwgby53cml0ZSh0LmlmcmFtZUhUTUwpLCBvLmNsb3NlKCkpLCB0LmlubGluZSAmJiAoTDEuYWRkQ2xhc3MociwgIm1jZS1jb250ZW50LWJvZHkiKSwgdC5jb250ZW50RG9jdW1lbnQgPSBvID0gZG9jdW1lbnQsIHQuY29udGVudFdpbmRvdyA9IHdpbmRvdywgdC5ib2R5RWxlbWVudCA9IHIsIHQuY29udGVudEFyZWFDb250YWluZXIgPSByKTsKICAgIHZhciB1LAogICAgICAgIGksCiAgICAgICAgYSwKICAgICAgICBzLAogICAgICAgIGMsCiAgICAgICAgbCwKICAgICAgICBmLAogICAgICAgIGQsCiAgICAgICAgbSwKICAgICAgICBnLAogICAgICAgIHAsCiAgICAgICAgaCA9IHQuZ2V0Qm9keSgpOwogICAgaC5kaXNhYmxlZCA9ICEwLCB0LnJlYWRvbmx5ID0gISFuLnJlYWRvbmx5LCB0LnJlYWRvbmx5IHx8ICh0LmlubGluZSAmJiAic3RhdGljIiA9PT0gTDEuZ2V0U3R5bGUoaCwgInBvc2l0aW9uIiwgITApICYmIChoLnN0eWxlLnBvc2l0aW9uID0gInJlbGF0aXZlIiksIGguY29udGVudEVkaXRhYmxlID0gdC5nZXRQYXJhbSgiY29udGVudF9lZGl0YWJsZV9zdGF0ZSIsICEwKSksIGguZGlzYWJsZWQgPSAhMSwgdC5lZGl0b3JVcGxvYWQgPSBLdih0KSwgdC5zY2hlbWEgPSB0byhuKSwgdC5kb20gPSBKYShvLCB7CiAgICAgIGtlZXBfdmFsdWVzOiAhMCwKICAgICAgdXJsX2NvbnZlcnRlcjogdC5jb252ZXJ0VVJMLAogICAgICB1cmxfY29udmVydGVyX3Njb3BlOiB0LAogICAgICBoZXhfY29sb3JzOiBuLmZvcmNlX2hleF9zdHlsZV9jb2xvcnMsCiAgICAgIHVwZGF0ZV9zdHlsZXM6ICEwLAogICAgICByb290X2VsZW1lbnQ6IHQuaW5saW5lID8gdC5nZXRCb2R5KCkgOiBudWxsLAogICAgICBjb2xsZWN0OiBmdW5jdGlvbiBjb2xsZWN0KCkgewogICAgICAgIHJldHVybiB0LmlubGluZTsKICAgICAgfSwKICAgICAgc2NoZW1hOiB0LnNjaGVtYSwKICAgICAgY29udGVudENzc0NvcnM6IHQuZ2V0UGFyYW0oImNvbnRlbnRfY3NzX2NvcnMiLCAhMSwgImJvb2xlYW4iKSwKICAgICAgcmVmZXJyZXJQb2xpY3k6IF9zKHQpLAogICAgICBvblNldEF0dHJpYjogZnVuY3Rpb24gb25TZXRBdHRyaWIoZSkgewogICAgICAgIHQuZmlyZSgiU2V0QXR0cmliIiwgZSk7CiAgICAgIH0KICAgIH0pLCB0LnBhcnNlciA9ICgoaSA9ICRoKGQxKHUgPSB0KSwgdS5zY2hlbWEpKS5hZGRBdHRyaWJ1dGVGaWx0ZXIoInNyYyxocmVmLHN0eWxlLHRhYmluZGV4IiwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgZm9yICh2YXIgbiwgciwgbyA9IGUubGVuZ3RoLCBpID0gdS5kb20sIGEgPSAiZGF0YS1tY2UtIiArIHQ7IG8tLTspIHsKICAgICAgICAociA9IChuID0gZVtvXSkuYXR0cih0KSkgJiYgIW4uYXR0cihhKSAmJiAwICE9PSByLmluZGV4T2YoImRhdGE6IikgJiYgMCAhPT0gci5pbmRleE9mKCJibG9iOiIpICYmICgic3R5bGUiID09PSB0ID8gKChyID0gaS5zZXJpYWxpemVTdHlsZShpLnBhcnNlU3R5bGUociksIG4ubmFtZSkpLmxlbmd0aCB8fCAociA9IG51bGwpLCBuLmF0dHIoYSwgciksIG4uYXR0cih0LCByKSkgOiAidGFiaW5kZXgiID09PSB0ID8gKG4uYXR0cihhLCByKSwgbi5hdHRyKHQsIG51bGwpKSA6IG4uYXR0cihhLCB1LmNvbnZlcnRVUkwociwgdCwgbi5uYW1lKSkpOwogICAgICB9CiAgICB9KSwgaS5hZGROb2RlRmlsdGVyKCJzY3JpcHQiLCBmdW5jdGlvbiAoZSkgewogICAgICBmb3IgKHZhciB0ID0gZS5sZW5ndGg7IHQtLTspIHsKICAgICAgICB2YXIgbiA9IGVbdF0sCiAgICAgICAgICAgIHIgPSBuLmF0dHIoInR5cGUiKSB8fCAibm8vdHlwZSI7CiAgICAgICAgMCAhPT0gci5pbmRleE9mKCJtY2UtIikgJiYgbi5hdHRyKCJ0eXBlIiwgIm1jZS0iICsgcik7CiAgICAgIH0KICAgIH0pLCB1LnNldHRpbmdzLnByZXNlcnZlX2NkYXRhICYmIGkuYWRkTm9kZUZpbHRlcigiI2NkYXRhIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgZm9yICh2YXIgdCA9IGUubGVuZ3RoOyB0LS07KSB7CiAgICAgICAgdmFyIG4gPSBlW3RdOwogICAgICAgIG4udHlwZSA9IDgsIG4ubmFtZSA9ICIjY29tbWVudCIsIG4udmFsdWUgPSAiW0NEQVRBWyIgKyB1LmRvbS5lbmNvZGUobi52YWx1ZSkgKyAiXV0iOwogICAgICB9CiAgICB9KSwgaS5hZGROb2RlRmlsdGVyKCJwLGgxLGgyLGgzLGg0LGg1LGg2LGRpdiIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGZvciAodmFyIHQgPSBlLmxlbmd0aCwgbiA9IHUuc2NoZW1hLmdldE5vbkVtcHR5RWxlbWVudHMoKTsgdC0tOykgewogICAgICAgIHZhciByID0gZVt0XTsKICAgICAgICByLmlzRW1wdHkobikgJiYgMCA9PT0gci5nZXRBbGwoImJyIikubGVuZ3RoICYmIChyLmFwcGVuZChuZXcgVWQoImJyIiwgMSkpLnNob3J0RW5kZWQgPSAhMCk7CiAgICAgIH0KICAgIH0pLCBpKSwgdC5zZXJpYWxpemVyID0gWGgoKGEgPSB0LnNldHRpbmdzLCBfZTIoX2UyKHt9LCBkMSh0KSksIGYxKHsKICAgICAgdXJsX2NvbnZlcnRlcjogYS51cmxfY29udmVydGVyLAogICAgICB1cmxfY29udmVydGVyX3Njb3BlOiBhLnVybF9jb252ZXJ0ZXJfc2NvcGUsCiAgICAgIGVsZW1lbnRfZm9ybWF0OiBhLmVsZW1lbnRfZm9ybWF0LAogICAgICBlbnRpdGllczogYS5lbnRpdGllcywKICAgICAgZW50aXR5X2VuY29kaW5nOiBhLmVudGl0eV9lbmNvZGluZywKICAgICAgaW5kZW50OiBhLmluZGVudCwKICAgICAgaW5kZW50X2FmdGVyOiBhLmluZGVudF9hZnRlciwKICAgICAgaW5kZW50X2JlZm9yZTogYS5pbmRlbnRfYmVmb3JlLAogICAgICBibG9ja19lbGVtZW50czogYS5ibG9ja19lbGVtZW50cywKICAgICAgYm9vbGVhbl9hdHRyaWJ1dGVzOiBhLmJvb2xlYW5fYXR0cmlidXRlcywKICAgICAgY3VzdG9tX2VsZW1lbnRzOiBhLmN1c3RvbV9lbGVtZW50cywKICAgICAgZXh0ZW5kZWRfdmFsaWRfZWxlbWVudHM6IGEuZXh0ZW5kZWRfdmFsaWRfZWxlbWVudHMsCiAgICAgIGludmFsaWRfZWxlbWVudHM6IGEuaW52YWxpZF9lbGVtZW50cywKICAgICAgaW52YWxpZF9zdHlsZXM6IGEuaW52YWxpZF9zdHlsZXMsCiAgICAgIG1vdmVfY2FyZXRfYmVmb3JlX29uX2VudGVyX2VsZW1lbnRzOiBhLm1vdmVfY2FyZXRfYmVmb3JlX29uX2VudGVyX2VsZW1lbnRzLAogICAgICBub25fZW1wdHlfZWxlbWVudHM6IGEubm9uX2VtcHR5X2VsZW1lbnRzLAogICAgICBzY2hlbWE6IGEuc2NoZW1hLAogICAgICBzZWxmX2Nsb3NpbmdfZWxlbWVudHM6IGEuc2VsZl9jbG9zaW5nX2VsZW1lbnRzLAogICAgICBzaG9ydF9lbmRlZF9lbGVtZW50czogYS5zaG9ydF9lbmRlZF9lbGVtZW50cywKICAgICAgc3BlY2lhbDogYS5zcGVjaWFsLAogICAgICB0ZXh0X2Jsb2NrX2VsZW1lbnRzOiBhLnRleHRfYmxvY2tfZWxlbWVudHMsCiAgICAgIHRleHRfaW5saW5lX2VsZW1lbnRzOiBhLnRleHRfaW5saW5lX2VsZW1lbnRzLAogICAgICB2YWxpZF9jaGlsZHJlbjogYS52YWxpZF9jaGlsZHJlbiwKICAgICAgdmFsaWRfY2xhc3NlczogYS52YWxpZF9jbGFzc2VzLAogICAgICB2YWxpZF9lbGVtZW50czogYS52YWxpZF9lbGVtZW50cywKICAgICAgdmFsaWRfc3R5bGVzOiBhLnZhbGlkX3N0eWxlcywKICAgICAgdmVyaWZ5X2h0bWw6IGEudmVyaWZ5X2h0bWwsCiAgICAgIHdoaXRlc3BhY2VfZWxlbWVudHM6IGEud2hpdGVzcGFjZV9lbGVtZW50cwogICAgfSkpKSwgdCksIHQuc2VsZWN0aW9uID0gTGgodC5kb20sIHQuZ2V0V2luKCksIHQuc2VyaWFsaXplciwgdCksIHQuYW5ub3RhdG9yID0gTWwodCksIHQuZm9ybWF0dGVyID0gSnYodCksIHQudW5kb01hbmFnZXIgPSBadih0KSwgdC5fbm9kZUNoYW5nZURpc3BhdGNoZXIgPSBuZXcgZTEodCksIHQuX3NlbGVjdGlvbk92ZXJyaWRlcyA9IGMxKHQpLCBkID0gdCwgbSA9IGN1KCksIGcgPSBydSghMSksIHAgPSBmdShmdW5jdGlvbiAoZSkgewogICAgICBkLmZpcmUoImxvbmdwcmVzcyIsIF9lMihfZTIoe30sIGUpLCB7CiAgICAgICAgdHlwZTogImxvbmdwcmVzcyIKICAgICAgfSkpLCBnLnNldCghMCk7CiAgICB9LCA0MDApLCBkLm9uKCJ0b3VjaHN0YXJ0IiwgZnVuY3Rpb24gKG4pIHsKICAgICAgUzAobikuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIHAuY2FuY2VsKCk7CiAgICAgICAgdmFyIHQgPSB7CiAgICAgICAgICB4OiBlLmNsaWVudFgsCiAgICAgICAgICB5OiBlLmNsaWVudFksCiAgICAgICAgICB0YXJnZXQ6IG4udGFyZ2V0CiAgICAgICAgfTsKICAgICAgICBwLnRocm90dGxlKG4pLCBnLnNldCghMSksIG0uc2V0KHQpOwogICAgICB9KTsKICAgIH0sICEwKSwgZC5vbigidG91Y2htb3ZlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgcC5jYW5jZWwoKSwgUzAoZSkuZWFjaChmdW5jdGlvbiAoaSkgewogICAgICAgIG0ub24oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0ID0gaSwKICAgICAgICAgICAgICBuID0gZSwKICAgICAgICAgICAgICByID0gTWF0aC5hYnModC5jbGllbnRYIC0gbi54KSwKICAgICAgICAgICAgICBvID0gTWF0aC5hYnModC5jbGllbnRZIC0gbi55KTsKICAgICAgICAgICg1IDwgciB8fCA1IDwgbykgJiYgKG0uY2xlYXIoKSwgZy5zZXQoITEpLCBkLmZpcmUoImxvbmdwcmVzc2NhbmNlbCIpKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LCAhMCksIGQub24oInRvdWNoZW5kIHRvdWNoY2FuY2VsIiwgZnVuY3Rpb24gKHQpIHsKICAgICAgcC5jYW5jZWwoKSwgInRvdWNoY2FuY2VsIiAhPT0gdC50eXBlICYmIG0uZ2V0KCkuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGUudGFyZ2V0LmlzRXF1YWxOb2RlKHQudGFyZ2V0KTsKICAgICAgfSkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgZy5nZXQoKSA/IHQucHJldmVudERlZmF1bHQoKSA6IGQuZmlyZSgidGFwIiwgX2UyKF9lMih7fSwgdCksIHsKICAgICAgICAgIHR5cGU6ICJ0YXAiCiAgICAgICAgfSkpOwogICAgICB9KTsKICAgIH0sICEwKSwgKGwgPSBjID0gdCkub24oImNsaWNrIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgbC5kb20uZ2V0UGFyZW50KGUudGFyZ2V0LCAiZGV0YWlscyIpICYmIGUucHJldmVudERlZmF1bHQoKTsKICAgIH0pLCAoZiA9IGMpLnBhcnNlci5hZGROb2RlRmlsdGVyKCJkZXRhaWxzIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgWShlLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGUuYXR0cigiZGF0YS1tY2Utb3BlbiIsIGUuYXR0cigib3BlbiIpKSwgZS5hdHRyKCJvcGVuIiwgIm9wZW4iKTsKICAgICAgfSk7CiAgICB9KSwgZi5zZXJpYWxpemVyLmFkZE5vZGVGaWx0ZXIoImRldGFpbHMiLCBmdW5jdGlvbiAoZSkgewogICAgICBZKGUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIHQgPSBlLmF0dHIoImRhdGEtbWNlLW9wZW4iKTsKICAgICAgICBlLmF0dHIoIm9wZW4iLCBYKHQpID8gdCA6IG51bGwpLCBlLmF0dHIoImRhdGEtbWNlLW9wZW4iLCBudWxsKTsKICAgICAgfSk7CiAgICB9KSwgbWgodCkgfHwgKHMgPSB0KS5vbigiY2xpY2siLCBmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCwgbiwgciwgbywgaTsKICAgICAgMyA8PSBlLmRldGFpbCAmJiAociA9ICh0ID0gcykuc2VsZWN0aW9uLmdldFJuZygpLCBvID0gYXMuZnJvbVJhbmdlU3RhcnQociksIGkgPSBhcy5mcm9tUmFuZ2VFbmQociksICFhcy5pc0VsZW1lbnRQb3NpdGlvbihvKSB8fCBuMShuID0gby5jb250YWluZXIoKSkgJiYgZWYobikuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiByLnNldFN0YXJ0KGUuY29udGFpbmVyKCksIGUub2Zmc2V0KCkpOwogICAgICB9KSwgIWFzLmlzRWxlbWVudFBvc2l0aW9uKGkpIHx8IG4xKG4gPSBvLmNvbnRhaW5lcigpKSAmJiB0ZihuKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIHIuc2V0RW5kKGUuY29udGFpbmVyKCksIGUub2Zmc2V0KCkpOwogICAgICB9KSwgdC5zZWxlY3Rpb24uc2V0Um5nKHZnKHIpKSk7CiAgICB9KTsKCiAgICB2YXIgdiwKICAgICAgICBiLAogICAgICAgIHksCiAgICAgICAgQywKICAgICAgICB4LAogICAgICAgIHcsCiAgICAgICAgX1MsCiAgICAgICAgRSwKICAgICAgICBOLAogICAgICAgIGsgPSBtaCh2ID0gdCkgPyBydShudWxsKSA6IFBDKHYpOwoKICAgIE4gPSBrLCAoRSA9IHQpLmFkZENvbW1hbmQoImRlbGV0ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGUsCiAgICAgICAgICB0ID0gTjsKICAgICAgeDAoZSA9IEUpIHx8IFBiKGUsICExKSB8fCBBYihlLCAhMSkgfHwgbDAoZSwgdCwgITEpIHx8IHZiKGUsICExKSB8fCBoZyhlKSB8fCBMYihlLCAhMSkgfHwgcDAoZSwgITEpIHx8IENiKGUpIHx8IG0wKGUsICExKSB8fCAodzAoZSwgIkRlbGV0ZSIpLCB1YihlKSk7CiAgICB9KSwgRS5hZGRDb21tYW5kKCJmb3J3YXJkRGVsZXRlIiwgZnVuY3Rpb24gKCkgewogICAgICB2YXIgZSwKICAgICAgICAgIHQgPSBOOwogICAgICBQYihlID0gRSwgITApIHx8IEFiKGUsICEwKSB8fCBsMChlLCB0LCAhMCkgfHwgdmIoZSwgITApIHx8IGhnKGUpIHx8IExiKGUsICEwKSB8fCBwMChlLCAhMCkgfHwgQ2IoZSkgfHwgbTAoZSwgITApIHx8IHcwKGUsICJGb3J3YXJkRGVsZXRlIik7CiAgICB9KSwgU3MoYiA9IHQpICYmIGIub24oIk5vZGVDaGFuZ2UiLCBBKE4wLCBiKSksIEMgPSAoeSA9IHQpLmRvbSwgeCA9IFNzKHkpLCB3ID0geS5nZXRQYXJhbSgicGxhY2Vob2xkZXIiLCBnYy5nZXRBdHRyaWIoeS5nZXRFbGVtZW50KCksICJwbGFjZWhvbGRlciIpLCAic3RyaW5nIiksIF9TID0gZnVuY3Rpb24gUyhlLCB0KSB7CiAgICAgIHZhciBuLCByLCBvOwogICAgICAhZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoZWIoZSkpIHsKICAgICAgICAgIHZhciB0ID0gZS5rZXlDb2RlOwogICAgICAgICAgcmV0dXJuICF0YihlKSAmJiAoQmYubWV0YUtleVByZXNzZWQoZSkgfHwgZS5hbHRLZXkgfHwgMTEyIDw9IHQgJiYgdCA8PSAxMjMgfHwgRChteSwgdCkpOwogICAgICAgIH0KICAgICAgfShlKSAmJiAobiA9IHkuZ2V0Qm9keSgpLCByID0gIShlYihvID0gZSkgJiYgISh0YihvKSB8fCAia2V5dXAiID09PSBvLnR5cGUgJiYgMjI5ID09PSBvLmtleUNvZGUpKSAmJiBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICAgIGlmIChXcihOdC5mcm9tRG9tKHQpLCAhMSkpIHsKICAgICAgICAgIHZhciByID0gIiIgPT09IG4sCiAgICAgICAgICAgICAgbyA9IHQuZmlyc3RFbGVtZW50Q2hpbGQ7CiAgICAgICAgICByZXR1cm4gIW8gfHwgIWUuZ2V0U3R5bGUodC5maXJzdEVsZW1lbnRDaGlsZCwgInBhZGRpbmctbGVmdCIpICYmICFlLmdldFN0eWxlKHQuZmlyc3RFbGVtZW50Q2hpbGQsICJwYWRkaW5nLXJpZ2h0IikgJiYgKHIgPyAhZS5pc0Jsb2NrKG8pIDogbiA9PT0gby5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAhMTsKICAgICAgfShDLCBuLCB4KSwgIiIgIT09IEMuZ2V0QXR0cmliKG4sIGd5KSA9PT0gciAmJiAhdCB8fCAoQy5zZXRBdHRyaWIobiwgZ3ksIHIgPyB3IDogbnVsbCksIEMuc2V0QXR0cmliKG4sICJhcmlhLXBsYWNlaG9sZGVyIiwgciA/IHcgOiBudWxsKSwgeS5maXJlKCJQbGFjZWhvbGRlclRvZ2dsZSIsIHsKICAgICAgICBzdGF0ZTogcgogICAgICB9KSwgeS5vbihyID8gImtleWRvd24iIDogImtleXVwIiwgX1MpLCB5Lm9mZihyID8gImtleXVwIiA6ICJrZXlkb3duIiwgX1MpKSk7CiAgICB9LCB3ICYmIHkub24oImluaXQiLCBmdW5jdGlvbiAoZSkgewogICAgICBfUyhlLCAhMCksIHkub24oImNoYW5nZSBTZXRDb250ZW50IEV4ZWNDb21tYW5kIiwgX1MpLCB5Lm9uKCJwYXN0ZSIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIF9yLnNldEVkaXRvclRpbWVvdXQoeSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIF9TKGUpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pOwoKICAgIHZhciBfID0gZ2godCk7CgogICAgKGZ1bmN0aW9uICh0KSB7CiAgICAgIHZhciBlID0gdC5zZXR0aW5ncywKICAgICAgICAgIG4gPSB0LmdldERvYygpLAogICAgICAgICAgciA9IHQuZ2V0Qm9keSgpOwogICAgICB0LmZpcmUoIlByZUluaXQiKSwgZS5icm93c2VyX3NwZWxsY2hlY2sgfHwgZS5nZWNrb19zcGVsbGNoZWNrIHx8IChuLmJvZHkuc3BlbGxjaGVjayA9ICExLCBMMS5zZXRBdHRyaWIociwgInNwZWxsY2hlY2siLCAiZmFsc2UiKSksIHQucXVpcmtzID0gbDEodCksIHQuZmlyZSgiUG9zdFJlbmRlciIpOwogICAgICB2YXIgbyA9IHQuZ2V0UGFyYW0oImRpcmVjdGlvbmFsaXR5IiwgdXUuaXNSdGwoKSA/ICJydGwiIDogdm9pZCAwKTsKICAgICAgdm9pZCAwICE9PSBvICYmIChyLmRpciA9IG8pLCBlLnByb3RlY3QgJiYgdC5vbigiQmVmb3JlU2V0Q29udGVudCIsIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgRXQuZWFjaChlLnByb3RlY3QsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB0LmNvbnRlbnQgPSB0LmNvbnRlbnQucmVwbGFjZShlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gIlx4M2MhLS1tY2U6cHJvdGVjdGVkICIgKyBlc2NhcGUoZSkgKyAiLS1ceDNlIjsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KSwgdC5vbigiU2V0Q29udGVudCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICB0LmFkZFZpc3VhbCh0LmdldEJvZHkoKSk7CiAgICAgIH0pLCB0Lm9uKCJjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICB0LmNvbXBvc2luZyA9ICJjb21wb3NpdGlvbnN0YXJ0IiA9PT0gZS50eXBlOwogICAgICB9KTsKICAgIH0pKHQpLCBfLmZvbGQoZnVuY3Rpb24gKCkgewogICAgICBwMSh0KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gaDEodCk7CiAgICAgIH0pOwogICAgfSwgZnVuY3Rpb24gKGUpIHsKICAgICAgdC5zZXRQcm9ncmVzc1N0YXRlKCEwKSwgcDEodCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgZSgpLnRoZW4oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHQuc2V0UHJvZ3Jlc3NTdGF0ZSghMSksIGgxKHQpOwogICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB0Lm5vdGlmaWNhdGlvbk1hbmFnZXIub3Blbih7CiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgIHRleHQ6IFN0cmluZyhlKQogICAgICAgICAgfSksIGgxKHQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gYjEoZSwgdCkgewogICAgdmFyIG4sCiAgICAgICAgciwKICAgICAgICBvLAogICAgICAgIGksCiAgICAgICAgYSA9IGUudHJhbnNsYXRlKGUuZ2V0UGFyYW0oImlmcmFtZV9hcmlhX3RleHQiLCAiUmljaCBUZXh0IEFyZWEuIFByZXNzIEFMVC0wIGZvciBoZWxwLiIsICJzdHJpbmciKSksCiAgICAgICAgdSA9IChuID0gZS5pZCwgciA9IGEsIHQuaGVpZ2h0LCBvID0gZS5nZXRQYXJhbSgiaWZyYW1lX2F0dHJzIiwge30pLCBobihpID0gTnQuZnJvbVRhZygiaWZyYW1lIiksIG8pLCBobihpLCB7CiAgICAgIGlkOiBuICsgIl9pZnIiLAogICAgICBmcmFtZUJvcmRlcjogIjAiLAogICAgICBhbGxvd1RyYW5zcGFyZW5jeTogInRydWUiLAogICAgICB0aXRsZTogcgogICAgfSksIGd1KGksICJ0b3gtZWRpdC1hcmVhX19pZnJhbWUiKSwgaS5kb20pOwoKICAgIHUub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICB1Lm9ubG9hZCA9IG51bGwsIGUuZmlyZSgibG9hZCIpOwogICAgfTsKCiAgICB2YXIgcyA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgIGlmIChkb2N1bWVudC5kb21haW4gIT09IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAmJiB4dC5icm93c2VyLmlzSUUoKSkgewogICAgICAgIHZhciBuID0ganYoIm1jZSIpOwoKICAgICAgICBlW25dID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgdjEoZSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHIgPSAnamF2YXNjcmlwdDooZnVuY3Rpb24oKXtkb2N1bWVudC5vcGVuKCk7ZG9jdW1lbnQuZG9tYWluPSInICsgZG9jdW1lbnQuZG9tYWluICsgJyI7dmFyIGVkID0gd2luZG93LnBhcmVudC50aW55bWNlLmdldCgiJyArIGUuaWQgKyAnIik7ZG9jdW1lbnQud3JpdGUoZWQuaWZyYW1lSFRNTCk7ZG9jdW1lbnQuY2xvc2UoKTtlZC4nICsgbiArICIodHJ1ZSk7fSkoKSI7CiAgICAgICAgcmV0dXJuIEkxLnNldEF0dHJpYih0LCAic3JjIiwgciksICEwOwogICAgICB9CgogICAgICByZXR1cm4gITE7CiAgICB9KGUsIHUpOwoKICAgIHJldHVybiBlLmNvbnRlbnRBcmVhQ29udGFpbmVyID0gdC5pZnJhbWVDb250YWluZXIsIGUuaWZyYW1lRWxlbWVudCA9IHUsIGUuaWZyYW1lSFRNTCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gZS5nZXRQYXJhbSgiZG9jdHlwZSIsICI8IURPQ1RZUEUgaHRtbD4iKSArICI8aHRtbD48aGVhZD4iOwogICAgICBlLmdldFBhcmFtKCJkb2N1bWVudF9iYXNlX3VybCIsICIiKSAhPT0gZS5kb2N1bWVudEJhc2VVcmwgJiYgKHQgKz0gJzxiYXNlIGhyZWY9IicgKyBlLmRvY3VtZW50QmFzZVVSSS5nZXRVUkkoKSArICciIC8+JyksIHQgKz0gJzxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04IiAvPic7CiAgICAgIHZhciBuID0geHMoZSwgImJvZHlfaWQiLCAidGlueW1jZSIpLAogICAgICAgICAgciA9IHhzKGUsICJib2R5X2NsYXNzIiwgIiIpOwogICAgICByZXR1cm4gd3MoZSkgJiYgKHQgKz0gJzxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtU2VjdXJpdHktUG9saWN5IiBjb250ZW50PSInICsgd3MoZSkgKyAnIiAvPicpLCB0ICsgKCc8L2hlYWQ+PGJvZHkgaWQ9IicgKyBuICsgJyIgY2xhc3M9Im1jZS1jb250ZW50LWJvZHkgJyArIHIgKyAnIiBkYXRhLWlkPSInICsgZS5pZCkgKyAnIj48YnI+PC9ib2R5PjwvaHRtbD4nOwogICAgfShlKSwgSTEuYWRkKHQuaWZyYW1lQ29udGFpbmVyLCB1KSwgczsKICB9CgogIGZ1bmN0aW9uIHkxKGUpIHsKICAgIHJldHVybiBlLnJlcGxhY2UoL15cLS8sICIiKTsKICB9CgogIGZ1bmN0aW9uIEMxKGUpIHsKICAgIHJldHVybiB7CiAgICAgIGVkaXRvckNvbnRhaW5lcjogZSwKICAgICAgaWZyYW1lQ29udGFpbmVyOiBlLAogICAgICBhcGk6IHt9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24geDEoZSkgewogICAgdmFyIHQsCiAgICAgICAgbiwKICAgICAgICByLAogICAgICAgIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgcyA9IGUuZ2V0RWxlbWVudCgpOwogICAgcmV0dXJuIGUub3JnRGlzcGxheSA9IHMuc3R5bGUuZGlzcGxheSwgWChCcyhlKSkgPyBlLnRoZW1lLnJlbmRlclVJKCkgOiB5KEJzKGUpKSA/IChuID0gKHQgPSBlKS5nZXRFbGVtZW50KCksIChyID0gQnModCkodCwgbikpLmVkaXRvckNvbnRhaW5lci5ub2RlVHlwZSAmJiAoci5lZGl0b3JDb250YWluZXIuaWQgPSByLmVkaXRvckNvbnRhaW5lci5pZCB8fCB0LmlkICsgIl9wYXJlbnQiKSwgci5pZnJhbWVDb250YWluZXIgJiYgci5pZnJhbWVDb250YWluZXIubm9kZVR5cGUgJiYgKHIuaWZyYW1lQ29udGFpbmVyLmlkID0gci5pZnJhbWVDb250YWluZXIuaWQgfHwgdC5pZCArICJfaWZyYW1lY29udGFpbmVyIiksIHIuaGVpZ2h0ID0gci5pZnJhbWVIZWlnaHQgfHwgbi5vZmZzZXRIZWlnaHQsIHIpIDogKHUgPSAobyA9IGUpLmdldEVsZW1lbnQoKSwgby5pbmxpbmUgPyBDMShudWxsKSA6IChpID0gdSwgYSA9IE0xLmNyZWF0ZSgiZGl2IiksIE0xLmluc2VydEFmdGVyKGEsIGkpLCBDMShhKSkpOwogIH0KCiAgZnVuY3Rpb24gdzEoZSkgewogICAgdmFyIG4sIHQsIHIsIG8sIGksIGEsIHUsIHM7CiAgICBlLmZpcmUoIlNjcmlwdHNMb2FkZWQiKSwgbiA9IGUsIHQgPSBFdC50cmltKGtzKG4pKSwgciA9IG4udWkucmVnaXN0cnkuZ2V0QWxsKCkuaWNvbnMsIG5lKF9lMihfZTIoe30sIF92LmdldCgiZGVmYXVsdCIpLmljb25zKSwgX3YuZ2V0KHQpLmljb25zKSwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgTmUociwgdCkgfHwgbi51aS5yZWdpc3RyeS5hZGRJY29uKHQsIGUpOwogICAgfSksIGEgPSBCcyhvID0gZSksIFgoYSkgPyAoby5zZXR0aW5ncy50aGVtZSA9IHkxKGEpLCBpID0gQnYuZ2V0KGEpLCBvLnRoZW1lID0gbmV3IGkobywgQnYudXJsc1thXSksIG8udGhlbWUuaW5pdCAmJiBvLnRoZW1lLmluaXQobywgQnYudXJsc1thXSB8fCBvLmRvY3VtZW50QmFzZVVybC5yZXBsYWNlKC9cLyQvLCAiIiksIG8uJCkpIDogby50aGVtZSA9IHt9LCBzID0gW10sIEV0LmVhY2goTHModSA9IGUpLnNwbGl0KC9bICxdLyksIGZ1bmN0aW9uIChlKSB7CiAgICAgIEYxKHUsIHMsIHkxKGUpKTsKICAgIH0pOwogICAgdmFyIGMgPSB4MShlKSwKICAgICAgICBsID0gZSwKICAgICAgICBmID0gdmUuZnJvbShjLmFwaSkuZ2V0T3Ioe30pLAogICAgICAgIGQgPSB7CiAgICAgIHNob3c6IHZlLmZyb20oZi5zaG93KS5nZXRPcih0ZSksCiAgICAgIGhpZGU6IHZlLmZyb20oZi5oaWRlKS5nZXRPcih0ZSksCiAgICAgIGRpc2FibGU6IHZlLmZyb20oZi5kaXNhYmxlKS5nZXRPcih0ZSksCiAgICAgIGlzRGlzYWJsZWQ6IHZlLmZyb20oZi5pc0Rpc2FibGVkKS5nZXRPcihSKSwKICAgICAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7CiAgICAgICAgbC5tb2RlLmlzUmVhZE9ubHkoKSB8fCB2ZS5mcm9tKGYuZW5hYmxlKS5tYXAoeCk7CiAgICAgIH0KICAgIH07CiAgICBsLnVpID0gX2UyKF9lMih7fSwgbC51aSksIGQpOwogICAgdmFyIG0sCiAgICAgICAgZywKICAgICAgICBwLAogICAgICAgIGggPSB7CiAgICAgIGVkaXRvckNvbnRhaW5lcjogYy5lZGl0b3JDb250YWluZXIsCiAgICAgIGlmcmFtZUNvbnRhaW5lcjogYy5pZnJhbWVDb250YWluZXIKICAgIH07CiAgICByZXR1cm4gZS5lZGl0b3JDb250YWluZXIgPSBoLmVkaXRvckNvbnRhaW5lciB8fCBudWxsLCB6dihlKSwgZS5pbmxpbmUgPyB2MShlKSA6IChwID0gYjEobSA9IGUsIGcgPSBoKSwgZy5lZGl0b3JDb250YWluZXIgJiYgKEkxLmdldChnLmVkaXRvckNvbnRhaW5lcikuc3R5bGUuZGlzcGxheSA9IG0ub3JnRGlzcGxheSwgbS5oaWRkZW4gPSBJMS5pc0hpZGRlbihnLmVkaXRvckNvbnRhaW5lcikpLCBtLmdldEVsZW1lbnQoKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiLCBJMS5zZXRBdHRyaWIobS5pZCwgImFyaWEtaGlkZGVuIiwgInRydWUiKSwgdm9pZCAocCB8fCB2MShtKSkpOwogIH0KCiAgZnVuY3Rpb24gUzEoZSkgewogICAgcmV0dXJuICItIiA9PT0gZS5jaGFyQXQoMCk7CiAgfQoKICBmdW5jdGlvbiBFMSh0LCBlLCBuKSB7CiAgICByZXR1cm4gdmUuZnJvbShlKS5maWx0ZXIoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIDAgPCBlLmxlbmd0aCAmJiAhX3YuaGFzKGUpOwogICAgfSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdXJsOiB0LmVkaXRvck1hbmFnZXIuYmFzZVVSTCArICIvaWNvbnMvIiArIGUgKyAiL2ljb25zIiArIG4gKyAiLmpzIiwKICAgICAgICBuYW1lOiB2ZS5zb21lKGUpCiAgICAgIH07CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIE4xKGMsIGwpIHsKICAgIHZhciBlLAogICAgICAgIHQsCiAgICAgICAgZiA9IHR1LlNjcmlwdExvYWRlciwKICAgICAgICBuID0gZiwKICAgICAgICByID0gbCwKICAgICAgICBvID0gZnVuY3Rpb24gbygpIHsKICAgICAgdmFyIHIsIG8sIHQsIG4sIGUsIGksIGEsIHUsIHM7CiAgICAgIGUgPSBmLCB1ID0gQXMoaSA9IGMpLCBzID0gaS5nZXRQYXJhbSgibGFuZ3VhZ2VfdXJsIiwgIiIsICJzdHJpbmciKSwgITEgPT09IHV1Lmhhc0NvZGUodSkgJiYgImVuIiAhPT0gdSAmJiAoYSA9ICIiICE9PSBzID8gcyA6IGkuZWRpdG9yTWFuYWdlci5iYXNlVVJMICsgIi9sYW5ncy8iICsgdSArICIuanMiLCBlLmFkZChhLCB0ZSwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgTXYoaSwgIkxhbmd1YWdlTG9hZEVycm9yIiwgRnYoImxhbmd1YWdlIiwgYSwgdSkpOwogICAgICB9KSksIHQgPSBmLCBZKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgZm9yICh2YXIgdCA9IFtdLCBuID0gZnVuY3Rpb24gbihlKSB7CiAgICAgICAgICB0LnB1c2goZSk7CiAgICAgICAgfSwgciA9IDA7IHIgPCBlLmxlbmd0aDsgcisrKSB7CiAgICAgICAgICBlW3JdLmVhY2gobik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdDsKICAgICAgfShbRTEobiA9IGMsICJkZWZhdWx0IiwgbCksIHZlLmZyb20obi5nZXRQYXJhbSgiaWNvbnNfdXJsIiwgIiIsICJzdHJpbmciKSkuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIDAgPCBlLmxlbmd0aDsKICAgICAgfSkubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHVybDogZSwKICAgICAgICAgIG5hbWU6IHZlLm5vbmUoKQogICAgICAgIH07CiAgICAgIH0pLm9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBFMShuLCBrcyhuKSwgIiIpOwogICAgICB9KV0pLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHQuYWRkKGUudXJsLCB0ZSwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBNdihuLCAiSWNvbnNMb2FkRXJyb3IiLCBGdigiaWNvbnMiLCBlLnVybCwgZS5uYW1lLmdldE9yVW5kZWZpbmVkKCkpKTsKICAgICAgICB9KTsKICAgICAgfSksIHIgPSBjLCBvID0gbCwgRXQuZWFjaChyLmdldFBhcmFtKCJleHRlcm5hbF9wbHVnaW5zIiksIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgT3YubG9hZCh0LCBlLCB0ZSwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBVdihyLCBlLCB0KTsKICAgICAgICB9KSwgci5zZXR0aW5ncy5wbHVnaW5zICs9ICIgIiArIHQ7CiAgICAgIH0pLCBFdC5lYWNoKExzKHIpLnNwbGl0KC9bICxdLyksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIHQsIG47CiAgICAgICAgKGUgPSBFdC50cmltKGUpKSAmJiAhT3YudXJsc1tlXSAmJiAoUzEoZSkgPyAoZSA9IGUuc3Vic3RyKDEsIGUubGVuZ3RoKSwgdCA9IE92LmRlcGVuZGVuY2llcyhlKSwgRXQuZWFjaCh0LCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQgPSBPdi5jcmVhdGVVcmwoewogICAgICAgICAgICBwcmVmaXg6ICJwbHVnaW5zLyIsCiAgICAgICAgICAgIHJlc291cmNlOiBlLAogICAgICAgICAgICBzdWZmaXg6ICIvcGx1Z2luIiArIG8gKyAiLmpzIgogICAgICAgICAgfSwgZSk7CiAgICAgICAgICBPdi5sb2FkKHQucmVzb3VyY2UsIHQsIHRlLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgVXYociwgdC5wcmVmaXggKyB0LnJlc291cmNlICsgdC5zdWZmaXgsIHQucmVzb3VyY2UpOwogICAgICAgICAgfSk7CiAgICAgICAgfSkpIDogKG4gPSB7CiAgICAgICAgICBwcmVmaXg6ICJwbHVnaW5zLyIsCiAgICAgICAgICByZXNvdXJjZTogZSwKICAgICAgICAgIHN1ZmZpeDogIi9wbHVnaW4iICsgbyArICIuanMiCiAgICAgICAgfSwgT3YubG9hZChlLCBuLCB0ZSwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBVdihyLCBuLnByZWZpeCArIG4ucmVzb3VyY2UgKyBuLnN1ZmZpeCwgZSk7CiAgICAgICAgfSkpKTsKICAgICAgfSksIGYubG9hZFF1ZXVlKGZ1bmN0aW9uICgpIHsKICAgICAgICBjLnJlbW92ZWQgfHwgdzEoYyk7CiAgICAgIH0sIGMsIGZ1bmN0aW9uICgpIHsKICAgICAgICBjLnJlbW92ZWQgfHwgdzEoYyk7CiAgICAgIH0pOwogICAgfSwKICAgICAgICBpID0gQnMoZSA9IGMpOwoKICAgIFgoaSkgPyAoUzEoaSkgfHwgTmUoQnYudXJscywgaSkgfHwgKCh0ID0gZS5nZXRQYXJhbSgidGhlbWVfdXJsIikpID8gQnYubG9hZChpLCBlLmRvY3VtZW50QmFzZVVSSS50b0Fic29sdXRlKHQpKSA6IEJ2LmxvYWQoaSwgInRoZW1lcy8iICsgaSArICIvdGhlbWUiICsgciArICIuanMiKSksIG4ubG9hZFF1ZXVlKGZ1bmN0aW9uICgpIHsKICAgICAgQnYud2FpdEZvcihpLCBvKTsKICAgIH0pKSA6IG8oKTsKICB9CgogIGZ1bmN0aW9uIGsxKGEpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoaSwgZSkgewogICAgICByZXR1cm4gdmUuZnJvbShlKS5tYXAoTnQuZnJvbURvbSkuZmlsdGVyKGtuKS5iaW5kKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIG4gPSBhLCB0ID0gaSwgciA9IGUuZG9tLCBBZyhOdC5mcm9tRG9tKHIpLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIHduKHQgPSBlLCBuKS5vclRodW5rKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuICJmb250IiA9PT0ga3QodCkgPyB1ZSh6MSwgbikuYmluZChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIHJldHVybiBibih0LCBlKTsKICAgICAgICAgICAgfSkgOiB2ZS5ub25lKCk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciB0OwogICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gamUoTnQuZnJvbURvbSh0KSwgZSk7CiAgICAgICAgfSkub3IoKG8gPSBlLmRvbSwgdmUuZnJvbShKYS5ET00uZ2V0U3R5bGUobywgYSwgITApKSkpOwogICAgICAgIHZhciBuLCB0LCByLCBvOwogICAgICB9KS5nZXRPcigiIik7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gXzEoZSkgewogICAgcmV0dXJuIGVmKGUuZ2V0Qm9keSgpKS5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBlLmNvbnRhaW5lcigpOwogICAgICByZXR1cm4gam4odCkgPyB0LnBhcmVudE5vZGUgOiB0OwogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBBMShlLCB0KSB7CiAgICByZXR1cm4gbiA9IGUsIHIgPSBhKHZlLnNvbWUsIHQpLCBvID0gbiwgdmUuZnJvbShvLnNlbGVjdGlvbi5nZXRSbmcoKSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICB2YXIgdCA9IG8uZ2V0Qm9keSgpOwogICAgICByZXR1cm4gZS5zdGFydENvbnRhaW5lciA9PT0gdCAmJiAwID09PSBlLnN0YXJ0T2Zmc2V0ID8gdmUubm9uZSgpIDogdmUuZnJvbShvLnNlbGVjdGlvbi5nZXRTdGFydCghMCkpOwogICAgfSkub3JUaHVuayhBKF8xLCBuKSkubWFwKE50LmZyb21Eb20pLmZpbHRlcihrbikuYmluZChyKTsKICAgIHZhciBuLCByLCBvOwogIH0KCiAgZnVuY3Rpb24gUjEoZSwgdCkgewogICAgaWYgKC9eWzAtOS5dKyQvLnRlc3QodCkpIHsKICAgICAgdmFyIG4gPSBwYXJzZUludCh0LCAxMCk7CgogICAgICBpZiAoMSA8PSBuICYmIG4gPD0gNykgewogICAgICAgIHZhciByID0gRXQuZXhwbG9kZShlLmdldFBhcmFtKCJmb250X3NpemVfc3R5bGVfdmFsdWVzIiwgInh4LXNtYWxsLHgtc21hbGwsc21hbGwsbWVkaXVtLGxhcmdlLHgtbGFyZ2UseHgtbGFyZ2UiKSksCiAgICAgICAgICAgIG8gPSBFdC5leHBsb2RlKGUuZ2V0UGFyYW0oImZvbnRfc2l6ZV9jbGFzc2VzIiwgIiIpKTsKICAgICAgICByZXR1cm4gbyA/IG9bbiAtIDFdIHx8IHQgOiByW24gLSAxXSB8fCB0OwogICAgICB9CgogICAgICByZXR1cm4gdDsKICAgIH0KCiAgICByZXR1cm4gdDsKICB9CgogIHZhciBEMSA9IFluLAogICAgICBUMSA9IFhuLAogICAgICBPMSA9IGZ1bmN0aW9uIE8xKGUpIHsKICAgIGUub24oZnVuY3Rpb24gKGUpIHsKICAgICAgbzEoZS5naG9zdCk7CiAgICB9KSwgZS5jbGVhcigpOwogIH0sCiAgICAgIEIxID0gWG4sCiAgICAgIFAxID0gWW4sCiAgICAgIEwxID0gSmEuRE9NLAogICAgICBJMSA9IEphLkRPTSwKICAgICAgTTEgPSBKYS5ET00sCiAgICAgIEYxID0gZnVuY3Rpb24gRjEodCwgbiwgcikgewogICAgdmFyIG8sCiAgICAgICAgaSwKICAgICAgICBhLAogICAgICAgIHUsCiAgICAgICAgZSA9IE92LmdldChyKSwKICAgICAgICBzID0gT3YudXJsc1tyXSB8fCB0LmRvY3VtZW50QmFzZVVybC5yZXBsYWNlKC9cLyQvLCAiIik7CiAgICBpZiAociA9IEV0LnRyaW0ociksIGUgJiYgLTEgPT09IEV0LmluQXJyYXkobiwgcikgJiYgKEV0LmVhY2goT3YuZGVwZW5kZW5jaWVzKHIpLCBmdW5jdGlvbiAoZSkgewogICAgICBGMSh0LCBuLCBlKTsKICAgIH0pLCAhdC5wbHVnaW5zW3JdKSkgdHJ5IHsKICAgICAgdmFyIGMgPSBuZXcgZSh0LCBzLCB0LiQpOwogICAgICAodC5wbHVnaW5zW3JdID0gYykuaW5pdCAmJiAoYy5pbml0KHQsIHMpLCBuLnB1c2gocikpOwogICAgfSBjYXRjaCAoZSkgewogICAgICBpID0gciwgYSA9IGUsIHZmKG8gPSB0LCAiUGx1Z2luTG9hZEVycm9yIiwgewogICAgICAgIG1lc3NhZ2U6IHUgPSB1dS50cmFuc2xhdGUoWyJGYWlsZWQgdG8gaW5pdGlhbGl6ZSBwbHVnaW46IHswfSIsIGldKQogICAgICB9KSwgYXkodSwgYSksIEl2KG8sIHUpOwogICAgfQogIH0sCiAgICAgIFUxID0gSmEuRE9NLAogICAgICB6MSA9IHsKICAgICJmb250LXNpemUiOiAic2l6ZSIsCiAgICAiZm9udC1mYW1pbHkiOiAiZmFjZSIKICB9LAogICAgICBIMSA9IGsxKCJmb250LXNpemUiKSwKICAgICAgajEgPSBpKGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gZS5yZXBsYWNlKC9bXCdcIlxcXS9nLCAiIikucmVwbGFjZSgvLFxzKy9nLCAiLCIpOwogIH0sIGsxKCJmb250LWZhbWlseSIpKSwKICAgICAgVjEgPSBFdC5lYWNoLAogICAgICBxMSA9IEV0Lm1hcCwKICAgICAgJDEgPSBFdC5pbkFycmF5LAogICAgICBXMSA9IChLMS5wcm90b3R5cGUuZXhlY0NvbW1hbmQgPSBmdW5jdGlvbiAodCwgbiwgciwgZSkgewogICAgdmFyIG8sCiAgICAgICAgaSwKICAgICAgICBhID0gITEsCiAgICAgICAgdSA9IHRoaXM7CgogICAgaWYgKCF1LmVkaXRvci5yZW1vdmVkKSB7CiAgICAgIGlmICgibWNlZm9jdXMiICE9PSB0LnRvTG93ZXJDYXNlKCkgJiYgKC9eKG1jZUFkZFVuZG9MZXZlbHxtY2VFbmRVbmRvTGV2ZWx8bWNlQmVnaW5VbmRvTGV2ZWx8bWNlUmVwYWludCkkLy50ZXN0KHQpIHx8IGUgJiYgZS5za2lwX2ZvY3VzID8gbGQoaSA9IHUuZWRpdG9yKS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGkuc2VsZWN0aW9uLnNldFJuZyhlKTsKICAgICAgfSkgOiB1LmVkaXRvci5mb2N1cygpKSwgKGUgPSB1LmVkaXRvci5maXJlKCJCZWZvcmVFeGVjQ29tbWFuZCIsIHsKICAgICAgICBjb21tYW5kOiB0LAogICAgICAgIHVpOiBuLAogICAgICAgIHZhbHVlOiByCiAgICAgIH0pKS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuICExOwogICAgICB2YXIgcyA9IHQudG9Mb3dlckNhc2UoKTsKICAgICAgaWYgKG8gPSB1LmNvbW1hbmRzLmV4ZWNbc10pIHJldHVybiBvKHMsIG4sIHIpLCB1LmVkaXRvci5maXJlKCJFeGVjQ29tbWFuZCIsIHsKICAgICAgICBjb21tYW5kOiB0LAogICAgICAgIHVpOiBuLAogICAgICAgIHZhbHVlOiByCiAgICAgIH0pLCAhMDsKICAgICAgaWYgKFYxKHRoaXMuZWRpdG9yLnBsdWdpbnMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKGUuZXhlY0NvbW1hbmQgJiYgZS5leGVjQ29tbWFuZCh0LCBuLCByKSkgcmV0dXJuIHUuZWRpdG9yLmZpcmUoIkV4ZWNDb21tYW5kIiwgewogICAgICAgICAgY29tbWFuZDogdCwKICAgICAgICAgIHVpOiBuLAogICAgICAgICAgdmFsdWU6IHIKICAgICAgICB9KSwgIShhID0gITApOwogICAgICB9KSwgYSkgcmV0dXJuIGE7CiAgICAgIGlmICh1LmVkaXRvci50aGVtZSAmJiB1LmVkaXRvci50aGVtZS5leGVjQ29tbWFuZCAmJiB1LmVkaXRvci50aGVtZS5leGVjQ29tbWFuZCh0LCBuLCByKSkgcmV0dXJuIHUuZWRpdG9yLmZpcmUoIkV4ZWNDb21tYW5kIiwgewogICAgICAgIGNvbW1hbmQ6IHQsCiAgICAgICAgdWk6IG4sCiAgICAgICAgdmFsdWU6IHIKICAgICAgfSksICEwOwoKICAgICAgdHJ5IHsKICAgICAgICBhID0gdS5lZGl0b3IuZ2V0RG9jKCkuZXhlY0NvbW1hbmQodCwgbiwgcik7CiAgICAgIH0gY2F0Y2ggKGUpIHt9CgogICAgICByZXR1cm4gISFhICYmICh1LmVkaXRvci5maXJlKCJFeGVjQ29tbWFuZCIsIHsKICAgICAgICBjb21tYW5kOiB0LAogICAgICAgIHVpOiBuLAogICAgICAgIHZhbHVlOiByCiAgICAgIH0pLCAhMCk7CiAgICB9CiAgfSwgSzEucHJvdG90eXBlLnF1ZXJ5Q29tbWFuZFN0YXRlID0gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0OwoKICAgIGlmICghdGhpcy5lZGl0b3IucXVpcmtzLmlzSGlkZGVuKCkgJiYgIXRoaXMuZWRpdG9yLnJlbW92ZWQpIHsKICAgICAgaWYgKGUgPSBlLnRvTG93ZXJDYXNlKCksIHQgPSB0aGlzLmNvbW1hbmRzLnN0YXRlW2VdKSByZXR1cm4gdChlKTsKCiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmdldERvYygpLnF1ZXJ5Q29tbWFuZFN0YXRlKGUpOwogICAgICB9IGNhdGNoIChlKSB7fQoKICAgICAgcmV0dXJuICExOwogICAgfQogIH0sIEsxLnByb3RvdHlwZS5xdWVyeUNvbW1hbmRWYWx1ZSA9IGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgdDsKCiAgICBpZiAoIXRoaXMuZWRpdG9yLnF1aXJrcy5pc0hpZGRlbigpICYmICF0aGlzLmVkaXRvci5yZW1vdmVkKSB7CiAgICAgIGlmIChlID0gZS50b0xvd2VyQ2FzZSgpLCB0ID0gdGhpcy5jb21tYW5kcy52YWx1ZVtlXSkgcmV0dXJuIHQoZSk7CgogICAgICB0cnkgewogICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXREb2MoKS5xdWVyeUNvbW1hbmRWYWx1ZShlKTsKICAgICAgfSBjYXRjaCAoZSkge30KICAgIH0KICB9LCBLMS5wcm90b3R5cGUuYWRkQ29tbWFuZHMgPSBmdW5jdGlvbiAoZSwgbikgewogICAgdm9pZCAwID09PSBuICYmIChuID0gImV4ZWMiKTsKICAgIHZhciByID0gdGhpczsKICAgIFYxKGUsIGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgIFYxKGUudG9Mb3dlckNhc2UoKS5zcGxpdCgiLCIpLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHIuY29tbWFuZHNbbl1bZV0gPSB0OwogICAgICB9KTsKICAgIH0pOwogIH0sIEsxLnByb3RvdHlwZS5hZGRDb21tYW5kID0gZnVuY3Rpb24gKGUsIG8sIGkpIHsKICAgIHZhciBhID0gdGhpczsKICAgIGUgPSBlLnRvTG93ZXJDYXNlKCksIHRoaXMuY29tbWFuZHMuZXhlY1tlXSA9IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7CiAgICAgIHJldHVybiBvLmNhbGwoaSB8fCBhLmVkaXRvciwgdCwgbiwgcik7CiAgICB9OwogIH0sIEsxLnByb3RvdHlwZS5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoZSkgewogICAgaWYgKGUgPSBlLnRvTG93ZXJDYXNlKCksIHRoaXMuY29tbWFuZHMuZXhlY1tlXSkgcmV0dXJuICEwOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXREb2MoKS5xdWVyeUNvbW1hbmRTdXBwb3J0ZWQoZSk7CiAgICB9IGNhdGNoIChlKSB7fQoKICAgIHJldHVybiAhMTsKICB9LCBLMS5wcm90b3R5cGUuYWRkUXVlcnlTdGF0ZUhhbmRsZXIgPSBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgdmFyIHIgPSB0aGlzOwogICAgZSA9IGUudG9Mb3dlckNhc2UoKSwgdGhpcy5jb21tYW5kcy5zdGF0ZVtlXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHQuY2FsbChuIHx8IHIuZWRpdG9yKTsKICAgIH07CiAgfSwgSzEucHJvdG90eXBlLmFkZFF1ZXJ5VmFsdWVIYW5kbGVyID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgIHZhciByID0gdGhpczsKICAgIGUgPSBlLnRvTG93ZXJDYXNlKCksIHRoaXMuY29tbWFuZHMudmFsdWVbZV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0LmNhbGwobiB8fCByLmVkaXRvcik7CiAgICB9OwogIH0sIEsxLnByb3RvdHlwZS5oYXNDdXN0b21Db21tYW5kID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiBlID0gZS50b0xvd2VyQ2FzZSgpLCAhIXRoaXMuY29tbWFuZHMuZXhlY1tlXTsKICB9LCBLMS5wcm90b3R5cGUuZXhlY05hdGl2ZUNvbW1hbmQgPSBmdW5jdGlvbiAoZSwgdCwgbikgewogICAgcmV0dXJuIHZvaWQgMCA9PT0gdCAmJiAodCA9ICExKSwgdm9pZCAwID09PSBuICYmIChuID0gbnVsbCksIHRoaXMuZWRpdG9yLmdldERvYygpLmV4ZWNDb21tYW5kKGUsIHQsIG4pOwogIH0sIEsxLnByb3RvdHlwZS5pc0Zvcm1hdE1hdGNoID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB0aGlzLmVkaXRvci5mb3JtYXR0ZXIubWF0Y2goZSk7CiAgfSwgSzEucHJvdG90eXBlLnRvZ2dsZUZvcm1hdCA9IGZ1bmN0aW9uIChlLCB0KSB7CiAgICB0aGlzLmVkaXRvci5mb3JtYXR0ZXIudG9nZ2xlKGUsIHQpLCB0aGlzLmVkaXRvci5ub2RlQ2hhbmdlZCgpOwogIH0sIEsxLnByb3RvdHlwZS5zdG9yZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIChlKSB7CiAgICB0aGlzLnNlbGVjdGlvbkJvb2ttYXJrID0gdGhpcy5lZGl0b3Iuc2VsZWN0aW9uLmdldEJvb2ttYXJrKGUpOwogIH0sIEsxLnByb3RvdHlwZS5yZXN0b3JlU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5lZGl0b3Iuc2VsZWN0aW9uLm1vdmVUb0Jvb2ttYXJrKHRoaXMuc2VsZWN0aW9uQm9va21hcmspOwogIH0sIEsxLnByb3RvdHlwZS5zZXR1cENvbW1hbmRzID0gZnVuY3Rpb24gKHUpIHsKICAgIHZhciBvID0gdGhpczsKCiAgICBmdW5jdGlvbiBlKHIpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZSA9IHUuc2VsZWN0aW9uLAogICAgICAgICAgICB0ID0gZS5pc0NvbGxhcHNlZCgpID8gW3UuZG9tLmdldFBhcmVudChlLmdldE5vZGUoKSwgdS5kb20uaXNCbG9jayldIDogZS5nZXRTZWxlY3RlZEJsb2NrcygpLAogICAgICAgICAgICBuID0gcTEodCwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiAhIXUuZm9ybWF0dGVyLm1hdGNoTm9kZShlLCByKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gLTEgIT09ICQxKG4sICEwKTsKICAgICAgfTsKICAgIH0KCiAgICB0aGlzLmFkZENvbW1hbmRzKHsKICAgICAgIm1jZVJlc2V0RGVzaWduTW9kZSxtY2VCZWdpblVuZG9MZXZlbCI6IHRlLAogICAgICAibWNlRW5kVW5kb0xldmVsLG1jZUFkZFVuZG9MZXZlbCI6IGZ1bmN0aW9uIG1jZUVuZFVuZG9MZXZlbE1jZUFkZFVuZG9MZXZlbCgpIHsKICAgICAgICB1LnVuZG9NYW5hZ2VyLmFkZCgpOwogICAgICB9LAogICAgICBtY2VGb2N1czogZnVuY3Rpb24gbWNlRm9jdXMoZSwgdCwgbikgewogICAgICAgIHZhciByLCBvOwogICAgICAgIG8gPSBuLCAociA9IHUpLnJlbW92ZWQgfHwgKG8gPyBNZCA6IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICB2YXIgZSA9IHQuc2VsZWN0aW9uLAogICAgICAgICAgICAgIG4gPSB0LmdldEJvZHkoKSwKICAgICAgICAgICAgICByID0gZS5nZXRSbmcoKTsKICAgICAgICAgIHQucXVpcmtzLnJlZnJlc2hDb250ZW50RWRpdGFibGUoKSwgdm9pZCAwICE9PSB0LmJvb2ttYXJrICYmICExID09PSB2ZCh0KSAmJiBsZCh0KS5lYWNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHQuc2VsZWN0aW9uLnNldFJuZyhlKSwgciA9IGU7CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBvLAogICAgICAgICAgICAgIGksCiAgICAgICAgICAgICAgYSA9IChvID0gdCwgaSA9IGUuZ2V0Tm9kZSgpLCBvLmRvbS5nZXRQYXJlbnQoaSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgcmV0dXJuICJ0cnVlIiA9PT0gby5kb20uZ2V0Q29udGVudEVkaXRhYmxlKGUpOwogICAgICAgICAgfSkpOwogICAgICAgICAgaWYgKHQuJC5jb250YWlucyhuLCBhKSkgcmV0dXJuIGhkKGEpLCBwZCh0LCByKSwgTWQodCk7CiAgICAgICAgICB0LmlubGluZSB8fCAoeHQub3BlcmEgfHwgaGQobiksIHQuZ2V0V2luKCkuZm9jdXMoKSksICh4dC5nZWNrbyB8fCB0LmlubGluZSkgJiYgKGhkKG4pLCBwZCh0LCByKSksIE1kKHQpOwogICAgICAgIH0pKHIpOwogICAgICB9LAogICAgICAiQ3V0LENvcHksUGFzdGUiOiBmdW5jdGlvbiBDdXRDb3B5UGFzdGUoZSkgewogICAgICAgIHZhciB0LAogICAgICAgICAgICBuLAogICAgICAgICAgICByID0gdS5nZXREb2MoKTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIG8uZXhlY05hdGl2ZUNvbW1hbmQoZSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgdCA9ICEwOwogICAgICAgIH0KCiAgICAgICAgISh0ID0gInBhc3RlIiA9PT0gZSAmJiAhci5xdWVyeUNvbW1hbmRFbmFibGVkKGUpIHx8IHQpICYmIHIucXVlcnlDb21tYW5kU3VwcG9ydGVkKGUpIHx8IChuID0gdS50cmFuc2xhdGUoIllvdXIgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgZGlyZWN0IGFjY2VzcyB0byB0aGUgY2xpcGJvYXJkLiBQbGVhc2UgdXNlIHRoZSBDdHJsK1gvQy9WIGtleWJvYXJkIHNob3J0Y3V0cyBpbnN0ZWFkLiIpLCB4dC5tYWMgJiYgKG4gPSBuLnJlcGxhY2UoL0N0cmxcKy9nLCAiXHUyMzE4KyIpKSwgdS5ub3RpZmljYXRpb25NYW5hZ2VyLm9wZW4oewogICAgICAgICAgdGV4dDogbiwKICAgICAgICAgIHR5cGU6ICJlcnJvciIKICAgICAgICB9KSk7CiAgICAgIH0sCiAgICAgIHVubGluazogZnVuY3Rpb24gdW5saW5rKCkgewogICAgICAgIHZhciBlOwogICAgICAgIHUuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkgPyAoZSA9IHUuZG9tLmdldFBhcmVudCh1LnNlbGVjdGlvbi5nZXRTdGFydCgpLCAiYSIpKSAmJiB1LmRvbS5yZW1vdmUoZSwgITApIDogdS5mb3JtYXR0ZXIucmVtb3ZlKCJsaW5rIik7CiAgICAgIH0sCiAgICAgICJKdXN0aWZ5TGVmdCxKdXN0aWZ5Q2VudGVyLEp1c3RpZnlSaWdodCxKdXN0aWZ5RnVsbCxKdXN0aWZ5Tm9uZSI6IGZ1bmN0aW9uIEp1c3RpZnlMZWZ0SnVzdGlmeUNlbnRlckp1c3RpZnlSaWdodEp1c3RpZnlGdWxsSnVzdGlmeU5vbmUoZSkgewogICAgICAgIHZhciB0ID0gZS5zdWJzdHJpbmcoNyk7CiAgICAgICAgImZ1bGwiID09PSB0ICYmICh0ID0gImp1c3RpZnkiKSwgVjEoImxlZnQsY2VudGVyLHJpZ2h0LGp1c3RpZnkiLnNwbGl0KCIsIiksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB0ICE9PSBlICYmIHUuZm9ybWF0dGVyLnJlbW92ZSgiYWxpZ24iICsgZSk7CiAgICAgICAgfSksICJub25lIiAhPT0gdCAmJiBvLnRvZ2dsZUZvcm1hdCgiYWxpZ24iICsgdCk7CiAgICAgIH0sCiAgICAgICJJbnNlcnRVbm9yZGVyZWRMaXN0LEluc2VydE9yZGVyZWRMaXN0IjogZnVuY3Rpb24gSW5zZXJ0VW5vcmRlcmVkTGlzdEluc2VydE9yZGVyZWRMaXN0KGUpIHsKICAgICAgICB2YXIgdDsKICAgICAgICBvLmV4ZWNOYXRpdmVDb21tYW5kKGUpOwogICAgICAgIHZhciBuID0gdS5kb20uZ2V0UGFyZW50KHUuc2VsZWN0aW9uLmdldE5vZGUoKSwgIm9sLHVsIik7CiAgICAgICAgbiAmJiAodCA9IG4ucGFyZW50Tm9kZSwgL14oSFsxLTZdfFB8QUREUkVTU3xQUkUpJC8udGVzdCh0Lm5vZGVOYW1lKSAmJiAoby5zdG9yZVNlbGVjdGlvbigpLCB1LmRvbS5zcGxpdCh0LCBuKSwgby5yZXN0b3JlU2VsZWN0aW9uKCkpKTsKICAgICAgfSwKICAgICAgIkJvbGQsSXRhbGljLFVuZGVybGluZSxTdHJpa2V0aHJvdWdoLFN1cGVyc2NyaXB0LFN1YnNjcmlwdCI6IGZ1bmN0aW9uIEJvbGRJdGFsaWNVbmRlcmxpbmVTdHJpa2V0aHJvdWdoU3VwZXJzY3JpcHRTdWJzY3JpcHQoZSkgewogICAgICAgIG8udG9nZ2xlRm9ybWF0KGUpOwogICAgICB9LAogICAgICAiRm9yZUNvbG9yLEhpbGl0ZUNvbG9yIjogZnVuY3Rpb24gRm9yZUNvbG9ySGlsaXRlQ29sb3IoZSwgdCwgbikgewogICAgICAgIG8udG9nZ2xlRm9ybWF0KGUsIHsKICAgICAgICAgIHZhbHVlOiBuCiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIEZvbnROYW1lOiBmdW5jdGlvbiBGb250TmFtZShlLCB0LCBuKSB7CiAgICAgICAgdmFyIHIsIG87CiAgICAgICAgbyA9IFIxKHIgPSB1LCBuKSwgci5mb3JtYXR0ZXIudG9nZ2xlKCJmb250bmFtZSIsIHsKICAgICAgICAgIHZhbHVlOiBUKG8uc3BsaXQoL1xzKixccyovKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgcmV0dXJuIC0xID09PSBlLmluZGV4T2YoIiAiKSB8fCBHZShlLCAnIicpIHx8IEdlKGUsICInIikgPyBlIDogIiciICsgZSArICInIjsKICAgICAgICAgIH0pLmpvaW4oIiwiKQogICAgICAgIH0pLCByLm5vZGVDaGFuZ2VkKCk7CiAgICAgIH0sCiAgICAgIEZvbnRTaXplOiBmdW5jdGlvbiBGb250U2l6ZShlLCB0LCBuKSB7CiAgICAgICAgdmFyIHI7CiAgICAgICAgKHIgPSB1KS5mb3JtYXR0ZXIudG9nZ2xlKCJmb250c2l6ZSIsIHsKICAgICAgICAgIHZhbHVlOiBSMShyLCBuKQogICAgICAgIH0pLCByLm5vZGVDaGFuZ2VkKCk7CiAgICAgIH0sCiAgICAgIExpbmVIZWlnaHQ6IGZ1bmN0aW9uIExpbmVIZWlnaHQoZSwgdCwgbikgewogICAgICAgIHZhciByOwogICAgICAgIChyID0gdSkuZm9ybWF0dGVyLnRvZ2dsZSgibGluZWhlaWdodCIsIHsKICAgICAgICAgIHZhbHVlOiBTdHJpbmcobikKICAgICAgICB9KSwgci5ub2RlQ2hhbmdlZCgpOwogICAgICB9LAogICAgICBMYW5nOiBmdW5jdGlvbiBMYW5nKGUsIHQsIG4pIHsKICAgICAgICBvLnRvZ2dsZUZvcm1hdChlLCB7CiAgICAgICAgICB2YWx1ZTogbi5jb2RlLAogICAgICAgICAgY3VzdG9tVmFsdWU6IG4uY3VzdG9tQ29kZQogICAgICAgIH0pOwogICAgICB9LAogICAgICBSZW1vdmVGb3JtYXQ6IGZ1bmN0aW9uIFJlbW92ZUZvcm1hdChlKSB7CiAgICAgICAgdS5mb3JtYXR0ZXIucmVtb3ZlKGUpOwogICAgICB9LAogICAgICBtY2VCbG9ja1F1b3RlOiBmdW5jdGlvbiBtY2VCbG9ja1F1b3RlKCkgewogICAgICAgIG8udG9nZ2xlRm9ybWF0KCJibG9ja3F1b3RlIik7CiAgICAgIH0sCiAgICAgIEZvcm1hdEJsb2NrOiBmdW5jdGlvbiBGb3JtYXRCbG9jayhlLCB0LCBuKSB7CiAgICAgICAgcmV0dXJuIG8udG9nZ2xlRm9ybWF0KG4gfHwgInAiKTsKICAgICAgfSwKICAgICAgbWNlQ2xlYW51cDogZnVuY3Rpb24gbWNlQ2xlYW51cCgpIHsKICAgICAgICB2YXIgZSA9IHUuc2VsZWN0aW9uLmdldEJvb2ttYXJrKCk7CiAgICAgICAgdS5zZXRDb250ZW50KHUuZ2V0Q29udGVudCgpKSwgdS5zZWxlY3Rpb24ubW92ZVRvQm9va21hcmsoZSk7CiAgICAgIH0sCiAgICAgIG1jZVJlbW92ZU5vZGU6IGZ1bmN0aW9uIG1jZVJlbW92ZU5vZGUoZSwgdCwgbikgewogICAgICAgIHZhciByID0gbiB8fCB1LnNlbGVjdGlvbi5nZXROb2RlKCk7CiAgICAgICAgciAhPT0gdS5nZXRCb2R5KCkgJiYgKG8uc3RvcmVTZWxlY3Rpb24oKSwgdS5kb20ucmVtb3ZlKHIsICEwKSwgby5yZXN0b3JlU2VsZWN0aW9uKCkpOwogICAgICB9LAogICAgICBtY2VTZWxlY3ROb2RlRGVwdGg6IGZ1bmN0aW9uIG1jZVNlbGVjdE5vZGVEZXB0aChlLCB0LCBuKSB7CiAgICAgICAgdmFyIHIgPSAwOwogICAgICAgIHUuZG9tLmdldFBhcmVudCh1LnNlbGVjdGlvbi5nZXROb2RlKCksIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBpZiAoMSA9PT0gZS5ub2RlVHlwZSAmJiByKysgPT09IG4pIHJldHVybiB1LnNlbGVjdGlvbi5zZWxlY3QoZSksICExOwogICAgICAgIH0sIHUuZ2V0Qm9keSgpKTsKICAgICAgfSwKICAgICAgbWNlU2VsZWN0Tm9kZTogZnVuY3Rpb24gbWNlU2VsZWN0Tm9kZShlLCB0LCBuKSB7CiAgICAgICAgdS5zZWxlY3Rpb24uc2VsZWN0KG4pOwogICAgICB9LAogICAgICBtY2VJbnNlcnRDb250ZW50OiBmdW5jdGlvbiBtY2VJbnNlcnRDb250ZW50KGUsIHQsIG4pIHsKICAgICAgICB2YXIgciwgbywgaSwgYTsKICAgICAgICByID0gdSwgbyA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIGUpIHJldHVybiB7CiAgICAgICAgICAgIGNvbnRlbnQ6IGUsCiAgICAgICAgICAgIGRldGFpbHM6IHt9CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHQgPSBFdC5leHRlbmQoewogICAgICAgICAgICBwYXN0ZTogZS5wYXN0ZSwKICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgIHBhc3RlOiBlLnBhc3RlCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIGUpOwogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgY29udGVudDogZS5jb250ZW50LAogICAgICAgICAgICBkZXRhaWxzOiB0CiAgICAgICAgICB9OwogICAgICAgIH0obiksIGkgPSBvLmNvbnRlbnQsIGEgPSBvLmRldGFpbHMsIHBoKHIpLmVkaXRvci5pbnNlcnRDb250ZW50KGksIGEpOwogICAgICB9LAogICAgICBtY2VJbnNlcnRSYXdIVE1MOiBmdW5jdGlvbiBtY2VJbnNlcnRSYXdIVE1MKGUsIHQsIG4pIHsKICAgICAgICB1LnNlbGVjdGlvbi5zZXRDb250ZW50KCJ0aW55X21jZV9tYXJrZXIiKTsKICAgICAgICB2YXIgciA9IHUuZ2V0Q29udGVudCgpOwogICAgICAgIHUuc2V0Q29udGVudChyLnJlcGxhY2UoL3RpbnlfbWNlX21hcmtlci9nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gbjsKICAgICAgICB9KSk7CiAgICAgIH0sCiAgICAgIG1jZUluc2VydE5ld0xpbmU6IGZ1bmN0aW9uIG1jZUluc2VydE5ld0xpbmUoZSwgdCwgbikgewogICAgICAgIF9DKHUsIG4pOwogICAgICB9LAogICAgICBtY2VUb2dnbGVGb3JtYXQ6IGZ1bmN0aW9uIG1jZVRvZ2dsZUZvcm1hdChlLCB0LCBuKSB7CiAgICAgICAgby50b2dnbGVGb3JtYXQobik7CiAgICAgIH0sCiAgICAgIG1jZVNldENvbnRlbnQ6IGZ1bmN0aW9uIG1jZVNldENvbnRlbnQoZSwgdCwgbikgewogICAgICAgIHUuc2V0Q29udGVudChuKTsKICAgICAgfSwKICAgICAgIkluZGVudCxPdXRkZW50IjogZnVuY3Rpb24gSW5kZW50T3V0ZGVudChlKSB7CiAgICAgICAgQzAodSwgZSk7CiAgICAgIH0sCiAgICAgIG1jZVJlcGFpbnQ6IHRlLAogICAgICBJbnNlcnRIb3Jpem9udGFsUnVsZTogZnVuY3Rpb24gSW5zZXJ0SG9yaXpvbnRhbFJ1bGUoKSB7CiAgICAgICAgdS5leGVjQ29tbWFuZCgibWNlSW5zZXJ0Q29udGVudCIsICExLCAiPGhyIC8+Iik7CiAgICAgIH0sCiAgICAgIG1jZVRvZ2dsZVZpc3VhbEFpZDogZnVuY3Rpb24gbWNlVG9nZ2xlVmlzdWFsQWlkKCkgewogICAgICAgIHUuaGFzVmlzdWFsID0gIXUuaGFzVmlzdWFsLCB1LmFkZFZpc3VhbCgpOwogICAgICB9LAogICAgICBtY2VSZXBsYWNlQ29udGVudDogZnVuY3Rpb24gbWNlUmVwbGFjZUNvbnRlbnQoZSwgdCwgbikgewogICAgICAgIHUuZXhlY0NvbW1hbmQoIm1jZUluc2VydENvbnRlbnQiLCAhMSwgbi5yZXBsYWNlKC9ce1wkc2VsZWN0aW9uXH0vZywgdS5zZWxlY3Rpb24uZ2V0Q29udGVudCh7CiAgICAgICAgICBmb3JtYXQ6ICJ0ZXh0IgogICAgICAgIH0pKSk7CiAgICAgIH0sCiAgICAgIG1jZUluc2VydExpbms6IGZ1bmN0aW9uIG1jZUluc2VydExpbmsoZSwgdCwgbikgewogICAgICAgICJzdHJpbmciID09IHR5cGVvZiBuICYmIChuID0gewogICAgICAgICAgaHJlZjogbgogICAgICAgIH0pOwogICAgICAgIHZhciByID0gdS5kb20uZ2V0UGFyZW50KHUuc2VsZWN0aW9uLmdldE5vZGUoKSwgImEiKTsKICAgICAgICBuLmhyZWYgPSBuLmhyZWYucmVwbGFjZSgvIC9nLCAiJTIwIiksIHIgJiYgbi5ocmVmIHx8IHUuZm9ybWF0dGVyLnJlbW92ZSgibGluayIpLCBuLmhyZWYgJiYgdS5mb3JtYXR0ZXIuYXBwbHkoImxpbmsiLCBuLCByKTsKICAgICAgfSwKICAgICAgc2VsZWN0QWxsOiBmdW5jdGlvbiBzZWxlY3RBbGwoKSB7CiAgICAgICAgdmFyIGUsCiAgICAgICAgICAgIHQgPSB1LmRvbS5nZXRQYXJlbnQodS5zZWxlY3Rpb24uZ2V0U3RhcnQoKSwgWG4pOwogICAgICAgIHQgJiYgKChlID0gdS5kb20uY3JlYXRlUm5nKCkpLnNlbGVjdE5vZGVDb250ZW50cyh0KSwgdS5zZWxlY3Rpb24uc2V0Um5nKGUpKTsKICAgICAgfSwKICAgICAgbWNlTmV3RG9jdW1lbnQ6IGZ1bmN0aW9uIG1jZU5ld0RvY3VtZW50KCkgewogICAgICAgIHUuc2V0Q29udGVudCgiIik7CiAgICAgIH0sCiAgICAgIEluc2VydExpbmVCcmVhazogZnVuY3Rpb24gSW5zZXJ0TGluZUJyZWFrKGUsIHQsIG4pIHsKICAgICAgICByZXR1cm4gcEModSwgbiksICEwOwogICAgICB9CiAgICB9KSwgby5hZGRDb21tYW5kcyh7CiAgICAgIEp1c3RpZnlMZWZ0OiBlKCJhbGlnbmxlZnQiKSwKICAgICAgSnVzdGlmeUNlbnRlcjogZSgiYWxpZ25jZW50ZXIiKSwKICAgICAgSnVzdGlmeVJpZ2h0OiBlKCJhbGlnbnJpZ2h0IiksCiAgICAgIEp1c3RpZnlGdWxsOiBlKCJhbGlnbmp1c3RpZnkiKSwKICAgICAgIkJvbGQsSXRhbGljLFVuZGVybGluZSxTdHJpa2V0aHJvdWdoLFN1cGVyc2NyaXB0LFN1YnNjcmlwdCI6IGZ1bmN0aW9uIEJvbGRJdGFsaWNVbmRlcmxpbmVTdHJpa2V0aHJvdWdoU3VwZXJzY3JpcHRTdWJzY3JpcHQoZSkgewogICAgICAgIHJldHVybiBvLmlzRm9ybWF0TWF0Y2goZSk7CiAgICAgIH0sCiAgICAgIG1jZUJsb2NrUXVvdGU6IGZ1bmN0aW9uIG1jZUJsb2NrUXVvdGUoKSB7CiAgICAgICAgcmV0dXJuIG8uaXNGb3JtYXRNYXRjaCgiYmxvY2txdW90ZSIpOwogICAgICB9LAogICAgICBPdXRkZW50OiBmdW5jdGlvbiBPdXRkZW50KCkgewogICAgICAgIHJldHVybiBiMCh1KTsKICAgICAgfSwKICAgICAgIkluc2VydFVub3JkZXJlZExpc3QsSW5zZXJ0T3JkZXJlZExpc3QiOiBmdW5jdGlvbiBJbnNlcnRVbm9yZGVyZWRMaXN0SW5zZXJ0T3JkZXJlZExpc3QoZSkgewogICAgICAgIHZhciB0ID0gdS5kb20uZ2V0UGFyZW50KHUuc2VsZWN0aW9uLmdldE5vZGUoKSwgInVsLG9sIik7CiAgICAgICAgcmV0dXJuIHQgJiYgKCJpbnNlcnR1bm9yZGVyZWRsaXN0IiA9PT0gZSAmJiAiVUwiID09PSB0LnRhZ05hbWUgfHwgImluc2VydG9yZGVyZWRsaXN0IiA9PT0gZSAmJiAiT0wiID09PSB0LnRhZ05hbWUpOwogICAgICB9CiAgICB9LCAic3RhdGUiKSwgby5hZGRDb21tYW5kcyh7CiAgICAgIFVuZG86IGZ1bmN0aW9uIFVuZG8oKSB7CiAgICAgICAgdS51bmRvTWFuYWdlci51bmRvKCk7CiAgICAgIH0sCiAgICAgIFJlZG86IGZ1bmN0aW9uIFJlZG8oKSB7CiAgICAgICAgdS51bmRvTWFuYWdlci5yZWRvKCk7CiAgICAgIH0KICAgIH0pLCBvLmFkZFF1ZXJ5VmFsdWVIYW5kbGVyKCJGb250TmFtZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIEExKHQgPSB1LCBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBqMSh0LmdldEJvZHkoKSwgZS5kb20pOwogICAgICB9KS5nZXRPcigiIik7CiAgICAgIHZhciB0OwogICAgfSwgdGhpcyksIG8uYWRkUXVlcnlWYWx1ZUhhbmRsZXIoIkZvbnRTaXplIiwgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gQTEodCA9IHUsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIEgxKHQuZ2V0Qm9keSgpLCBlLmRvbSk7CiAgICAgIH0pLmdldE9yKCIiKTsKICAgICAgdmFyIHQ7CiAgICB9LCB0aGlzKSwgby5hZGRRdWVyeVZhbHVlSGFuZGxlcigiTGluZUhlaWdodCIsIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIEExKHQgPSB1LCBmdW5jdGlvbiAobikgewogICAgICAgIHZhciBlID0gTnQuZnJvbURvbSh0LmdldEJvZHkoKSk7CiAgICAgICAgcmV0dXJuIEFnKG4sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gd24oZSwgImxpbmUtaGVpZ2h0Iik7CiAgICAgICAgfSwgQShqZSwgZSkpLmdldE9yVGh1bmsoZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIGUgPSBwYXJzZUZsb2F0KHhuKG4sICJsaW5lLWhlaWdodCIpKSwKICAgICAgICAgICAgICB0ID0gcGFyc2VGbG9hdCh4bihuLCAiZm9udC1zaXplIikpOwogICAgICAgICAgcmV0dXJuIFN0cmluZyhlIC8gdCk7CiAgICAgICAgfSk7CiAgICAgIH0pLmdldE9yKCIiKTsKICAgICAgdmFyIHQ7CiAgICB9LCB0aGlzKTsKICB9LCBLMSk7CgogIGZ1bmN0aW9uIEsxKGUpIHsKICAgIHRoaXMuY29tbWFuZHMgPSB7CiAgICAgIHN0YXRlOiB7fSwKICAgICAgZXhlYzoge30sCiAgICAgIHZhbHVlOiB7fQogICAgfSwgdGhpcy5lZGl0b3IgPSBlLCB0aGlzLnNldHVwQ29tbWFuZHMoZSk7CiAgfQoKICBmdW5jdGlvbiBYMShlLCB0LCBuKSB7CiAgICB2YXIgciwgbywgaSwgYSwgdSwgczsKICAgIHB1KGUsIHQpICYmICExID09PSBuID8gKG8gPSB0LCBtdShyID0gZSkgPyByLmRvbS5jbGFzc0xpc3QucmVtb3ZlKG8pIDogKHUgPSBvLCAwIDwgKHMgPSBVKGR1KGEgPSByLCAiY2xhc3MiKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIGUgIT09IHU7CiAgICB9KSkubGVuZ3RoID8gcG4oYSwgImNsYXNzIiwgcy5qb2luKCIgIikpIDogeW4oYSwgImNsYXNzIikpLCAwID09PSAobXUoaSA9IHIpID8gaS5kb20uY2xhc3NMaXN0IDogZHUoaSwgImNsYXNzIikpLmxlbmd0aCAmJiB5bihpLCAiY2xhc3MiKSkgOiBuICYmIGd1KGUsIHQpOwogIH0KCiAgZnVuY3Rpb24gWTEoZSwgdCwgbikgewogICAgdHJ5IHsKICAgICAgZS5nZXREb2MoKS5leGVjQ29tbWFuZCh0LCAhMSwgU3RyaW5nKG4pKTsKICAgIH0gY2F0Y2ggKGUpIHt9CiAgfQoKICBmdW5jdGlvbiBHMShlLCB0KSB7CiAgICBlLmRvbS5jb250ZW50RWRpdGFibGUgPSB0ID8gInRydWUiIDogImZhbHNlIjsKICB9CgogIGZ1bmN0aW9uIEoxKGUsIHQpIHsKICAgIHZhciBuLAogICAgICAgIHIsCiAgICAgICAgbyA9IE50LmZyb21Eb20oZS5nZXRCb2R5KCkpOwogICAgWDEobywgIm1jZS1jb250ZW50LXJlYWRvbmx5IiwgdCksIHQgPyAoZS5zZWxlY3Rpb24uY29udHJvbFNlbGVjdGlvbi5oaWRlUmVzaXplUmVjdCgpLCBlLl9zZWxlY3Rpb25PdmVycmlkZXMuaGlkZUZha2VDYXJldCgpLCB2ZS5mcm9tKGUuc2VsZWN0aW9uLmdldE5vZGUoKSkuZWFjaChmdW5jdGlvbiAoZSkgewogICAgICBlLnJlbW92ZUF0dHJpYnV0ZSgiZGF0YS1tY2Utc2VsZWN0ZWQiKTsKICAgIH0pLCBHMShvLCAhKGUucmVhZG9ubHkgPSAhMCkpLCBZKGh1KG8sICcqW2NvbnRlbnRlZGl0YWJsZT0idHJ1ZSJdJyksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHBuKGUsIGV4LCAidHJ1ZSIpLCBHMShlLCAhMSk7CiAgICB9KSkgOiAoRzEobywgIShlLnJlYWRvbmx5ID0gITEpKSwgWShodShvLCAiKlsiICsgZXggKyAnPSJ0cnVlIl0nKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgeW4oZSwgZXgpLCBHMShlLCAhMCk7CiAgICB9KSwgWTEoZSwgIlN0eWxlV2l0aENTUyIsICExKSwgWTEoZSwgImVuYWJsZUlubGluZVRhYmxlRWRpdGluZyIsICExKSwgWTEoZSwgImVuYWJsZU9iamVjdFJlc2l6aW5nIiwgITEpLCAodmQobiA9IGUpIHx8IChyID0gbiwgdGQoQm4oTnQuZnJvbURvbShyLmdldEVsZW1lbnQoKSkpKS5maWx0ZXIoZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuICEodm9pZCAwICE9PSAodCA9IGUuZG9tLmNsYXNzTGlzdCkgJiYgKHQuY29udGFpbnMoInRveC1lZGl0LWFyZWEiKSB8fCB0LmNvbnRhaW5zKCJ0b3gtZWRpdC1hcmVhX19pZnJhbWUiKSB8fCB0LmNvbnRhaW5zKCJtY2UtY29udGVudC1ib2R5IikpKSAmJiBkZChyLCBlLmRvbSk7CiAgICAgIHZhciB0OwogICAgfSkuaXNTb21lKCkpKSAmJiBlLmZvY3VzKCksIGUuc2VsZWN0aW9uLnNldFJuZyhlLnNlbGVjdGlvbi5nZXRSbmcoKSksIGUubm9kZUNoYW5nZWQoKSk7CiAgfQoKICBmdW5jdGlvbiBRMShlKSB7CiAgICByZXR1cm4gZS5yZWFkb25seTsKICB9CgogIGZ1bmN0aW9uIFoxKHQpIHsKICAgIHQucGFyc2VyLmFkZEF0dHJpYnV0ZUZpbHRlcigiY29udGVudGVkaXRhYmxlIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgUTEodCkgJiYgWShlLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGUuYXR0cihleCwgZS5hdHRyKCJjb250ZW50ZWRpdGFibGUiKSksIGUuYXR0cigiY29udGVudGVkaXRhYmxlIiwgImZhbHNlIik7CiAgICAgIH0pOwogICAgfSksIHQuc2VyaWFsaXplci5hZGRBdHRyaWJ1dGVGaWx0ZXIoZXgsIGZ1bmN0aW9uIChlKSB7CiAgICAgIFExKHQpICYmIFkoZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICBlLmF0dHIoImNvbnRlbnRlZGl0YWJsZSIsIGUuYXR0cihleCkpOwogICAgICB9KTsKICAgIH0pLCB0LnNlcmlhbGl6ZXIuYWRkVGVtcEF0dHIoZXgpOwogIH0KCiAgdmFyIGV4ID0gImRhdGEtbWNlLWNvbnRlbnRlZGl0YWJsZSIsCiAgICAgIHR4ID0gRXQubWFrZU1hcCgiZm9jdXMgYmx1ciBmb2N1c2luIGZvY3Vzb3V0IGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgYmVmb3JlcGFzdGUgcGFzdGUgY3V0IGNvcHkgc2VsZWN0aW9uY2hhbmdlIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSB3aGVlbCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IGJlZm9yZWlucHV0IGNvbnRleHRtZW51IGRyYWdzdGFydCBkcmFnZW5kIGRyYWdvdmVyIGRyYWdnZXN0dXJlIGRyYWdkcm9wIGRyb3AgZHJhZyBzdWJtaXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZSB0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCIsICIgIiksCiAgICAgIG54ID0gKHJ4LmlzTmF0aXZlID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiAhIXR4W2UudG9Mb3dlckNhc2UoKV07CiAgfSwgcngucHJvdG90eXBlLmZpcmUgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgdmFyIG4gPSBlLnRvTG93ZXJDYXNlKCksCiAgICAgICAgciA9IGlvKG4sIHQgfHwge30sIHRoaXMuc2NvcGUpOwogICAgdGhpcy5zZXR0aW5ncy5iZWZvcmVGaXJlICYmIHRoaXMuc2V0dGluZ3MuYmVmb3JlRmlyZShyKTsKICAgIHZhciBvID0gdGhpcy5iaW5kaW5nc1tuXTsKICAgIGlmIChvKSBmb3IgKHZhciBpID0gMCwgYSA9IG8ubGVuZ3RoOyBpIDwgYTsgaSsrKSB7CiAgICAgIHZhciB1ID0gb1tpXTsKCiAgICAgIGlmICghdS5yZW1vdmVkKSB7CiAgICAgICAgaWYgKHUub25jZSAmJiB0aGlzLm9mZihuLCB1LmZ1bmMpLCByLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHJldHVybiByOwogICAgICAgIGlmICghMSA9PT0gdS5mdW5jLmNhbGwodGhpcy5zY29wZSwgcikpIHJldHVybiByLnByZXZlbnREZWZhdWx0KCksIHI7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByOwogIH0sIHJ4LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7CiAgICBpZiAodCA9ICExID09PSB0ID8gUiA6IHQpIHsKICAgICAgdmFyIG8gPSB7CiAgICAgICAgZnVuYzogdCwKICAgICAgICByZW1vdmVkOiAhMQogICAgICB9OwogICAgICByICYmIEV0LmV4dGVuZChvLCByKTsKCiAgICAgIGZvciAodmFyIGkgPSBlLnRvTG93ZXJDYXNlKCkuc3BsaXQoIiAiKSwgYSA9IGkubGVuZ3RoOyBhLS07KSB7CiAgICAgICAgdmFyIHUgPSBpW2FdLAogICAgICAgICAgICBzID0gdGhpcy5iaW5kaW5nc1t1XTsKICAgICAgICBzIHx8IChzID0gW10sIHRoaXMudG9nZ2xlRXZlbnQodSwgITApKSwgcyA9IG4gPyBBZShbb10sIHMsICEwKSA6IEFlKEFlKFtdLCBzLCAhMCksIFtvXSwgITEpLCB0aGlzLmJpbmRpbmdzW3VdID0gczsKICAgICAgfQogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0sIHJ4LnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgdmFyIG4gPSB0aGlzOwogICAgaWYgKGUpIGZvciAodmFyIHIgPSBlLnRvTG93ZXJDYXNlKCkuc3BsaXQoIiAiKSwgbyA9IHIubGVuZ3RoOyBvLS07KSB7CiAgICAgIHZhciBpLAogICAgICAgICAgYSA9IHJbb10sCiAgICAgICAgICB1ID0gdGhpcy5iaW5kaW5nc1thXTsKICAgICAgaWYgKCFhKSByZXR1cm4gbmUodGhpcy5iaW5kaW5ncywgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICBuLnRvZ2dsZUV2ZW50KHQsICExKSwgZGVsZXRlIG4uYmluZGluZ3NbdF07CiAgICAgIH0pLCB0aGlzOwogICAgICB1ICYmICh0ID8gKHUgPSAoaSA9IEIodSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gZS5mdW5jID09PSB0OwogICAgICB9KSkuZmFpbCwgdGhpcy5iaW5kaW5nc1thXSA9IHUsIFkoaS5wYXNzLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGUucmVtb3ZlZCA9ICEwOwogICAgICB9KSkgOiB1Lmxlbmd0aCA9IDAsIHUubGVuZ3RoIHx8ICh0aGlzLnRvZ2dsZUV2ZW50KGUsICExKSwgZGVsZXRlIHRoaXMuYmluZGluZ3NbYV0pKTsKICAgIH0gZWxzZSBuZSh0aGlzLmJpbmRpbmdzLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICBuLnRvZ2dsZUV2ZW50KHQsICExKTsKICAgIH0pLCB0aGlzLmJpbmRpbmdzID0ge307CiAgICByZXR1cm4gdGhpczsKICB9LCByeC5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICByZXR1cm4gdGhpcy5vbihlLCB0LCBuLCB7CiAgICAgIG9uY2U6ICEwCiAgICB9KTsKICB9LCByeC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiBlID0gZS50b0xvd2VyQ2FzZSgpLCAhKCF0aGlzLmJpbmRpbmdzW2VdIHx8IDAgPT09IHRoaXMuYmluZGluZ3NbZV0ubGVuZ3RoKTsKICB9LCByeCk7CgogIGZ1bmN0aW9uIHJ4KGUpIHsKICAgIHRoaXMuYmluZGluZ3MgPSB7fSwgdGhpcy5zZXR0aW5ncyA9IGUgfHwge30sIHRoaXMuc2NvcGUgPSB0aGlzLnNldHRpbmdzLnNjb3BlIHx8IHRoaXMsIHRoaXMudG9nZ2xlRXZlbnQgPSB0aGlzLnNldHRpbmdzLnRvZ2dsZUV2ZW50IHx8IFI7CiAgfQoKICBmdW5jdGlvbiBveChuKSB7CiAgICByZXR1cm4gbi5fZXZlbnREaXNwYXRjaGVyIHx8IChuLl9ldmVudERpc3BhdGNoZXIgPSBuZXcgbngoewogICAgICBzY29wZTogbiwKICAgICAgdG9nZ2xlRXZlbnQ6IGZ1bmN0aW9uIHRvZ2dsZUV2ZW50KGUsIHQpIHsKICAgICAgICBueC5pc05hdGl2ZShlKSAmJiBuLnRvZ2dsZU5hdGl2ZUV2ZW50ICYmIG4udG9nZ2xlTmF0aXZlRXZlbnQoZSwgdCk7CiAgICAgIH0KICAgIH0pKSwgbi5fZXZlbnREaXNwYXRjaGVyOwogIH0KCiAgZnVuY3Rpb24gaXgoZSwgdCkgewogICAgaWYgKCJzZWxlY3Rpb25jaGFuZ2UiID09PSB0KSByZXR1cm4gZS5nZXREb2MoKTsKICAgIGlmICghZS5pbmxpbmUgJiYgL15tb3VzZXx0b3VjaHxjbGlja3xjb250ZXh0bWVudXxkcm9wfGRyYWdvdmVyfGRyYWdlbmQvLnRlc3QodCkpIHJldHVybiBlLmdldERvYygpLmRvY3VtZW50RWxlbWVudDsKICAgIHZhciBuID0gT3MoZSk7CiAgICByZXR1cm4gbiA/IChlLmV2ZW50Um9vdCB8fCAoZS5ldmVudFJvb3QgPSBkeC5zZWxlY3QobilbMF0pLCBlLmV2ZW50Um9vdCkgOiBlLmdldEJvZHkoKTsKICB9CgogIGZ1bmN0aW9uIGF4KGUsIHQsIG4pIHsKICAgIHZhciByLCBvLCBpLCBhOwogICAgZS5oaWRkZW4gfHwgUTEoZSkgPyBRMShlKSAmJiAociA9IGUsICJjbGljayIgIT09IChvID0gbikudHlwZSB8fCBCZi5tZXRhS2V5UHJlc3NlZChvKSB8fCAoaSA9IE50LmZyb21Eb20oby50YXJnZXQpLCBhID0gciwgYnIoaSwgImEiLCBmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gamUoZSwgTnQuZnJvbURvbShhLmdldEJvZHkoKSkpOwogICAgfSkuYmluZChmdW5jdGlvbiAoZSkgewogICAgICByZXR1cm4gYm4oZSwgImhyZWYiKTsKICAgIH0pLmVhY2goZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQsIG47CiAgICAgIG8ucHJldmVudERlZmF1bHQoKSwgL14jLy50ZXN0KGUpID8gKHQgPSByLmRvbS5zZWxlY3QoZSArICcsW25hbWU9IicgKyAoR2UobiA9IGUsICIjIikgPyBuLnN1YnN0cmluZygiIyIubGVuZ3RoKSA6IG4pICsgJyJdJykpLmxlbmd0aCAmJiByLnNlbGVjdGlvbi5zY3JvbGxJbnRvVmlldyh0WzBdLCAhMCkgOiB3aW5kb3cub3BlbihlLCAiX2JsYW5rIiwgInJlbD1ub29wZW5lciBub3JlZmVycmVyLG1lbnViYXI9eWVzLHRvb2xiYXI9eWVzLGxvY2F0aW9uPXllcyxzdGF0dXM9eWVzLHJlc2l6YWJsZT15ZXMsc2Nyb2xsYmFycz15ZXMiKTsKICAgIH0pKSkgOiBlLmZpcmUodCwgbik7CiAgfQoKICBmdW5jdGlvbiB1eChpLCBhKSB7CiAgICB2YXIgZSwgdDsKICAgIGkuZGVsZWdhdGVzIHx8IChpLmRlbGVnYXRlcyA9IHt9KSwgaS5kZWxlZ2F0ZXNbYV0gfHwgaS5yZW1vdmVkIHx8ICh0ID0gaXgoaSwgYSksIE9zKGkpID8gKGx4IHx8IChseCA9IHt9LCBpLmVkaXRvck1hbmFnZXIub24oInJlbW92ZUVkaXRvciIsIGZ1bmN0aW9uICgpIHsKICAgICAgaS5lZGl0b3JNYW5hZ2VyLmFjdGl2ZUVkaXRvciB8fCBseCAmJiAobmUobHgsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgaS5kb20udW5iaW5kKGl4KGksIHQpKTsKICAgICAgfSksIGx4ID0gbnVsbCk7CiAgICB9KSksIGx4W2FdIHx8IChseFthXSA9IGUgPSBmdW5jdGlvbiBlKF9lNCkgewogICAgICBmb3IgKHZhciB0ID0gX2U0LnRhcmdldCwgbiA9IGkuZWRpdG9yTWFuYWdlci5nZXQoKSwgciA9IG4ubGVuZ3RoOyByLS07KSB7CiAgICAgICAgdmFyIG8gPSBuW3JdLmdldEJvZHkoKTsKICAgICAgICBvICE9PSB0ICYmICFkeC5pc0NoaWxkT2YodCwgbykgfHwgYXgobltyXSwgYSwgX2U0KTsKICAgICAgfQogICAgfSwgZHguYmluZCh0LCBhLCBlKSkpIDogKGR4LmJpbmQodCwgYSwgZSA9IGZ1bmN0aW9uIGUoX2U1KSB7CiAgICAgIGF4KGksIGEsIF9lNSk7CiAgICB9KSwgaS5kZWxlZ2F0ZXNbYV0gPSBlKSk7CiAgfQoKICBmdW5jdGlvbiBzeChlLCB0LCBuLCByKSB7CiAgICB2YXIgbyA9IG5bdC5nZXQoKV0sCiAgICAgICAgaSA9IG5bcl07CgogICAgdHJ5IHsKICAgICAgaS5hY3RpdmF0ZSgpOwogICAgfSBjYXRjaCAoZSkgewogICAgICByZXR1cm4gdm9pZCBjb25zb2xlLmVycm9yKCJwcm9ibGVtIHdoaWxlIGFjdGl2YXRpbmcgZWRpdG9yIG1vZGUgIiArIHIgKyAiOiIsIGUpOwogICAgfQoKICAgIG8uZGVhY3RpdmF0ZSgpLCBvLmVkaXRvclJlYWRPbmx5ICE9PSBpLmVkaXRvclJlYWRPbmx5ICYmIEoxKGUsIGkuZWRpdG9yUmVhZE9ubHkpLCB0LnNldChyKSwgZS5maXJlKCJTd2l0Y2hNb2RlIiwgewogICAgICBtb2RlOiByCiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGN4KGUpIHsKICAgIHZhciB0LAogICAgICAgIG4gPSB7fTsKICAgIHB4KGh4KGUudG9Mb3dlckNhc2UoKSwgIisiKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgZSBpbiBieCA/IG5bZV0gPSAhMCA6IC9eWzAtOV17Mix9JC8udGVzdChlKSA/IG4ua2V5Q29kZSA9IHBhcnNlSW50KGUsIDEwKSA6IChuLmNoYXJDb2RlID0gZS5jaGFyQ29kZUF0KDApLCBuLmtleUNvZGUgPSB2eFtlXSB8fCBlLnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKSk7CiAgICB9KTsKICAgIHZhciByID0gW24ua2V5Q29kZV07CgogICAgZm9yICh0IGluIGJ4KSB7CiAgICAgIG5bdF0gPyByLnB1c2godCkgOiBuW3RdID0gITE7CiAgICB9CgogICAgcmV0dXJuIG4uaWQgPSByLmpvaW4oIiwiKSwgbi5hY2Nlc3MgJiYgKG4uYWx0ID0gITAsIHh0Lm1hYyA/IG4uY3RybCA9ICEwIDogbi5zaGlmdCA9ICEwKSwgbi5tZXRhICYmICh4dC5tYWMgPyBuLm1ldGEgPSAhMCA6IChuLmN0cmwgPSAhMCwgbi5tZXRhID0gITEpKSwgbjsKICB9CgogIHZhciBseCwKICAgICAgZnggPSB7CiAgICBmaXJlOiBmdW5jdGlvbiBmaXJlKGUsIHQsIG4pIHsKICAgICAgaWYgKHRoaXMucmVtb3ZlZCAmJiAicmVtb3ZlIiAhPT0gZSAmJiAiZGV0YWNoIiAhPT0gZSkgcmV0dXJuIHQ7CiAgICAgIHZhciByID0gb3godGhpcykuZmlyZShlLCB0KTsKICAgICAgaWYgKCExICE9PSBuICYmIHRoaXMucGFyZW50KSBmb3IgKHZhciBvID0gdGhpcy5wYXJlbnQoKTsgbyAmJiAhci5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpOykgewogICAgICAgIG8uZmlyZShlLCByLCAhMSksIG8gPSBvLnBhcmVudCgpOwogICAgICB9CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIG9uOiBmdW5jdGlvbiBvbihlLCB0LCBuKSB7CiAgICAgIHJldHVybiBveCh0aGlzKS5vbihlLCB0LCBuKTsKICAgIH0sCiAgICBvZmY6IGZ1bmN0aW9uIG9mZihlLCB0KSB7CiAgICAgIHJldHVybiBveCh0aGlzKS5vZmYoZSwgdCk7CiAgICB9LAogICAgb25jZTogZnVuY3Rpb24gb25jZShlLCB0KSB7CiAgICAgIHJldHVybiBveCh0aGlzKS5vbmNlKGUsIHQpOwogICAgfSwKICAgIGhhc0V2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiBoYXNFdmVudExpc3RlbmVycyhlKSB7CiAgICAgIHJldHVybiBveCh0aGlzKS5oYXMoZSk7CiAgICB9CiAgfSwKICAgICAgZHggPSBKYS5ET00sCiAgICAgIG14ID0gX2UyKF9lMih7fSwgZngpLCB7CiAgICBiaW5kUGVuZGluZ0V2ZW50RGVsZWdhdGVzOiBmdW5jdGlvbiBiaW5kUGVuZGluZ0V2ZW50RGVsZWdhdGVzKCkgewogICAgICB2YXIgdCA9IHRoaXM7CiAgICAgIEV0LmVhY2godC5fcGVuZGluZ05hdGl2ZUV2ZW50cywgZnVuY3Rpb24gKGUpIHsKICAgICAgICB1eCh0LCBlKTsKICAgICAgfSk7CiAgICB9LAogICAgdG9nZ2xlTmF0aXZlRXZlbnQ6IGZ1bmN0aW9uIHRvZ2dsZU5hdGl2ZUV2ZW50KGUsIHQpIHsKICAgICAgdmFyIG4gPSB0aGlzOwogICAgICAiZm9jdXMiICE9PSBlICYmICJibHVyIiAhPT0gZSAmJiAobi5yZW1vdmVkIHx8ICh0ID8gbi5pbml0aWFsaXplZCA/IHV4KG4sIGUpIDogbi5fcGVuZGluZ05hdGl2ZUV2ZW50cyA/IG4uX3BlbmRpbmdOYXRpdmVFdmVudHMucHVzaChlKSA6IG4uX3BlbmRpbmdOYXRpdmVFdmVudHMgPSBbZV0gOiBuLmluaXRpYWxpemVkICYmIChuLmRvbS51bmJpbmQoaXgobiwgZSksIGUsIG4uZGVsZWdhdGVzW2VdKSwgZGVsZXRlIG4uZGVsZWdhdGVzW2VdKSkpOwogICAgfSwKICAgIHVuYmluZEFsbE5hdGl2ZUV2ZW50czogZnVuY3Rpb24gdW5iaW5kQWxsTmF0aXZlRXZlbnRzKCkgewogICAgICB2YXIgbiA9IHRoaXMsCiAgICAgICAgICBlID0gbi5nZXRCb2R5KCksCiAgICAgICAgICB0ID0gbi5kb207CiAgICAgIG4uZGVsZWdhdGVzICYmIChuZShuLmRlbGVnYXRlcywgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICBuLmRvbS51bmJpbmQoaXgobiwgdCksIHQsIGUpOwogICAgICB9KSwgZGVsZXRlIG4uZGVsZWdhdGVzKSwgIW4uaW5saW5lICYmIGUgJiYgdCAmJiAoZS5vbmxvYWQgPSBudWxsLCB0LnVuYmluZChuLmdldFdpbigpKSwgdC51bmJpbmQobi5nZXREb2MoKSkpLCB0ICYmICh0LnVuYmluZChlKSwgdC51bmJpbmQobi5nZXRDb250YWluZXIoKSkpOwogICAgfQogIH0pLAogICAgICBneCA9IFsiZGVzaWduIiwgInJlYWRvbmx5Il0sCiAgICAgIHB4ID0gRXQuZWFjaCwKICAgICAgaHggPSBFdC5leHBsb2RlLAogICAgICB2eCA9IHsKICAgIGYxOiAxMTIsCiAgICBmMjogMTEzLAogICAgZjM6IDExNCwKICAgIGY0OiAxMTUsCiAgICBmNTogMTE2LAogICAgZjY6IDExNywKICAgIGY3OiAxMTgsCiAgICBmODogMTE5LAogICAgZjk6IDEyMCwKICAgIGYxMDogMTIxLAogICAgZjExOiAxMjIsCiAgICBmMTI6IDEyMwogIH0sCiAgICAgIGJ4ID0gRXQubWFrZU1hcCgiYWx0LGN0cmwsc2hpZnQsbWV0YSxhY2Nlc3MiKSwKICAgICAgeXggPSAoQ3gucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChlLCBuLCB0LCByKSB7CiAgICB2YXIgbyA9IHRoaXMsCiAgICAgICAgaSA9IG8ubm9ybWFsaXplQ29tbWFuZEZ1bmModCk7CiAgICByZXR1cm4gcHgoaHgoRXQudHJpbShlKSksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gby5jcmVhdGVTaG9ydGN1dChlLCBuLCBpLCByKTsKICAgICAgby5zaG9ydGN1dHNbdC5pZF0gPSB0OwogICAgfSksICEwOwogIH0sIEN4LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoZSkgewogICAgdmFyIHQgPSB0aGlzLmNyZWF0ZVNob3J0Y3V0KGUpOwogICAgcmV0dXJuICEhdGhpcy5zaG9ydGN1dHNbdC5pZF0gJiYgKGRlbGV0ZSB0aGlzLnNob3J0Y3V0c1t0LmlkXSwgITApOwogIH0sIEN4LnByb3RvdHlwZS5ub3JtYWxpemVDb21tYW5kRnVuYyA9IGZ1bmN0aW9uIChlKSB7CiAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgbiA9IGU7CiAgICByZXR1cm4gInN0cmluZyIgPT0gdHlwZW9mIG4gPyBmdW5jdGlvbiAoKSB7CiAgICAgIHQuZWRpdG9yLmV4ZWNDb21tYW5kKG4sICExLCBudWxsKTsKICAgIH0gOiBFdC5pc0FycmF5KG4pID8gZnVuY3Rpb24gKCkgewogICAgICB0LmVkaXRvci5leGVjQ29tbWFuZChuWzBdLCBuWzFdLCBuWzJdKTsKICAgIH0gOiBuOwogIH0sIEN4LnByb3RvdHlwZS5jcmVhdGVTaG9ydGN1dCA9IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7CiAgICB2YXIgbyA9IEV0Lm1hcChoeChlLCAiPiIpLCBjeCk7CiAgICByZXR1cm4gb1tvLmxlbmd0aCAtIDFdID0gRXQuZXh0ZW5kKG9bby5sZW5ndGggLSAxXSwgewogICAgICBmdW5jOiBuLAogICAgICBzY29wZTogciB8fCB0aGlzLmVkaXRvcgogICAgfSksIEV0LmV4dGVuZChvWzBdLCB7CiAgICAgIGRlc2M6IHRoaXMuZWRpdG9yLnRyYW5zbGF0ZSh0KSwKICAgICAgc3VicGF0dGVybnM6IG8uc2xpY2UoMSkKICAgIH0pOwogIH0sIEN4LnByb3RvdHlwZS5oYXNNb2RpZmllciA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleTsKICB9LCBDeC5wcm90b3R5cGUuaXNGdW5jdGlvbktleSA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gImtleWRvd24iID09PSBlLnR5cGUgJiYgMTEyIDw9IGUua2V5Q29kZSAmJiBlLmtleUNvZGUgPD0gMTIzOwogIH0sIEN4LnByb3RvdHlwZS5tYXRjaFNob3J0Y3V0ID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgIHJldHVybiAhIXQgJiYgdC5jdHJsID09PSBlLmN0cmxLZXkgJiYgdC5tZXRhID09PSBlLm1ldGFLZXkgJiYgdC5hbHQgPT09IGUuYWx0S2V5ICYmIHQuc2hpZnQgPT09IGUuc2hpZnRLZXkgJiYgISEoZS5rZXlDb2RlID09PSB0LmtleUNvZGUgfHwgZS5jaGFyQ29kZSAmJiBlLmNoYXJDb2RlID09PSB0LmNoYXJDb2RlKSAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCAhMCk7CiAgfSwgQ3gucHJvdG90eXBlLmV4ZWN1dGVTaG9ydGN1dEFjdGlvbiA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gZS5mdW5jID8gZS5mdW5jLmNhbGwoZS5zY29wZSkgOiBudWxsOwogIH0sIEN4KTsKCiAgZnVuY3Rpb24gQ3goZSkgewogICAgdGhpcy5zaG9ydGN1dHMgPSB7fSwgdGhpcy5wZW5kaW5nUGF0dGVybnMgPSBbXSwgdGhpcy5lZGl0b3IgPSBlOwogICAgdmFyIG4gPSB0aGlzOwogICAgZS5vbigia2V5dXAga2V5cHJlc3Mga2V5ZG93biIsIGZ1bmN0aW9uICh0KSB7CiAgICAgICFuLmhhc01vZGlmaWVyKHQpICYmICFuLmlzRnVuY3Rpb25LZXkodCkgfHwgdC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAocHgobi5zaG9ydGN1dHMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKG4ubWF0Y2hTaG9ydGN1dCh0LCBlKSkgcmV0dXJuIG4ucGVuZGluZ1BhdHRlcm5zID0gZS5zdWJwYXR0ZXJucy5zbGljZSgwKSwgImtleWRvd24iID09PSB0LnR5cGUgJiYgbi5leGVjdXRlU2hvcnRjdXRBY3Rpb24oZSksICEwOwogICAgICB9KSwgbi5tYXRjaFNob3J0Y3V0KHQsIG4ucGVuZGluZ1BhdHRlcm5zWzBdKSAmJiAoMSA9PT0gbi5wZW5kaW5nUGF0dGVybnMubGVuZ3RoICYmICJrZXlkb3duIiA9PT0gdC50eXBlICYmIG4uZXhlY3V0ZVNob3J0Y3V0QWN0aW9uKG4ucGVuZGluZ1BhdHRlcm5zWzBdKSwgbi5wZW5kaW5nUGF0dGVybnMuc2hpZnQoKSkpOwogICAgfSk7CiAgfQoKICB2YXIgeHggPSBKYS5ET00sCiAgICAgIHd4ID0gRXQuZXh0ZW5kLAogICAgICBTeCA9IEV0LmVhY2gsCiAgICAgIEV4ID0gRXQucmVzb2x2ZSwKICAgICAgTnggPSB4dC5pZSwKICAgICAga3ggPSAoX3gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICAgICFmdW5jdGlvbiAodCkgewogICAgICB2YXIgZSA9IHQuaWQ7CiAgICAgIHV1LnNldENvZGUoQXModCkpOwoKICAgICAgdmFyIG4sCiAgICAgICAgICByLAogICAgICAgICAgbywKICAgICAgICAgIGksCiAgICAgICAgICBhID0gZnVuY3Rpb24gYSgpIHsKICAgICAgICBVMS51bmJpbmQod2luZG93LCAicmVhZHkiLCBhKSwgdC5yZW5kZXIoKTsKICAgICAgfTsKCiAgICAgIGFpLkV2ZW50LmRvbUxvYWRlZCA/IHQuZ2V0RWxlbWVudCgpICYmIHh0LmNvbnRlbnRFZGl0YWJsZSAmJiAobiA9IE50LmZyb21Eb20odC5nZXRFbGVtZW50KCkpLCByID0gTChuLmRvbS5hdHRyaWJ1dGVzLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgIHJldHVybiBlW3QubmFtZV0gPSB0LnZhbHVlLCBlOwogICAgICB9LCB7fSksIHQub24oInJlbW92ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICBPKG4uZG9tLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4geW4obiwgZS5uYW1lKSwgMDsKICAgICAgICB9KSwgaG4obiwgcik7CiAgICAgIH0pLCB0LnVpLnN0eWxlU2hlZXRMb2FkZXIgPSBBci5mb3JFbGVtZW50KG4sIHsKICAgICAgICBjb250ZW50Q3NzQ29yczogKG8gPSB0KS5nZXRQYXJhbSgiY29udGVudF9jc3NfY29ycyIpLAogICAgICAgIHJlZmVycmVyUG9saWN5OiBfcyhvKQogICAgICB9KSwgdC5nZXRQYXJhbSgiaW5saW5lIikgPyB0LmlubGluZSA9ICEwIDogKHQub3JnVmlzaWJpbGl0eSA9IHQuZ2V0RWxlbWVudCgpLnN0eWxlLnZpc2liaWxpdHksIHQuZ2V0RWxlbWVudCgpLnN0eWxlLnZpc2liaWxpdHkgPSAiaGlkZGVuIiksIChpID0gdC5nZXRFbGVtZW50KCkuZm9ybSB8fCBVMS5nZXRQYXJlbnQoZSwgImZvcm0iKSkgJiYgKHQuZm9ybUVsZW1lbnQgPSBpLCB0LmdldFBhcmFtKCJoaWRkZW5faW5wdXQiKSAmJiAhSG4odC5nZXRFbGVtZW50KCkpICYmIChVMS5pbnNlcnRBZnRlcihVMS5jcmVhdGUoImlucHV0IiwgewogICAgICAgIHR5cGU6ICJoaWRkZW4iLAogICAgICAgIG5hbWU6IGUKICAgICAgfSksIGUpLCB0Lmhhc0hpZGRlbklucHV0ID0gITApLCB0LmZvcm1FdmVudERlbGVnYXRlID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICB0LmZpcmUoZS50eXBlLCBlKTsKICAgICAgfSwgVTEuYmluZChpLCAic3VibWl0IHJlc2V0IiwgdC5mb3JtRXZlbnREZWxlZ2F0ZSksIHQub24oInJlc2V0IiwgZnVuY3Rpb24gKCkgewogICAgICAgIHQucmVzZXRDb250ZW50KCk7CiAgICAgIH0pLCAhdC5nZXRQYXJhbSgic3VibWl0X3BhdGNoIikgfHwgaS5zdWJtaXQubm9kZVR5cGUgfHwgaS5zdWJtaXQubGVuZ3RoIHx8IGkuX21jZU9sZFN1Ym1pdCB8fCAoaS5fbWNlT2xkU3VibWl0ID0gaS5zdWJtaXQsIGkuc3VibWl0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB0LmVkaXRvck1hbmFnZXIudHJpZ2dlclNhdmUoKSwgdC5zZXREaXJ0eSghMSksIGkuX21jZU9sZFN1Ym1pdChpKTsKICAgICAgfSkpLCB0LndpbmRvd01hbmFnZXIgPSBQdih0KSwgdC5ub3RpZmljYXRpb25NYW5hZ2VyID0gdXYodCksICJ4bWwiID09PSB0LmdldFBhcmFtKCJlbmNvZGluZyIpICYmIHQub24oIkdldENvbnRlbnQiLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGUuc2F2ZSAmJiAoZS5jb250ZW50ID0gVTEuZW5jb2RlKGUuY29udGVudCkpOwogICAgICB9KSwgdC5nZXRQYXJhbSgiYWRkX2Zvcm1fc3VibWl0X3RyaWdnZXIiKSAmJiB0Lm9uKCJzdWJtaXQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdC5pbml0aWFsaXplZCAmJiB0LnNhdmUoKTsKICAgICAgfSksIHQuZ2V0UGFyYW0oImFkZF91bmxvYWRfdHJpZ2dlciIpICYmICh0Ll9iZWZvcmVVbmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgIXQuaW5pdGlhbGl6ZWQgfHwgdC5kZXN0cm95ZWQgfHwgdC5pc0hpZGRlbigpIHx8IHQuc2F2ZSh7CiAgICAgICAgICBmb3JtYXQ6ICJyYXciLAogICAgICAgICAgbm9fZXZlbnRzOiAhMCwKICAgICAgICAgIHNldF9kaXJ0eTogITEKICAgICAgICB9KTsKICAgICAgfSwgdC5lZGl0b3JNYW5hZ2VyLm9uKCJCZWZvcmVVbmxvYWQiLCB0Ll9iZWZvcmVVbmxvYWQpKSwgdC5lZGl0b3JNYW5hZ2VyLmFkZCh0KSwgTjEodCwgdC5zdWZmaXgpKSA6IFUxLmJpbmQod2luZG93LCAicmVhZHkiLCBhKTsKICAgIH0odGhpcyk7CiAgfSwgX3gucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKGUpIHsKICAgIHRoaXMuZXhlY0NvbW1hbmQoIm1jZUZvY3VzIiwgITEsIGUpOwogIH0sIF94LnByb3RvdHlwZS5oYXNGb2N1cyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB2ZCh0aGlzKTsKICB9LCBfeC5wcm90b3R5cGUuZXhlY0NhbGxiYWNrID0gZnVuY3Rpb24gKGUpIHsKICAgIGZvciAodmFyIHQgPSBbXSwgbiA9IDE7IG4gPCBhcmd1bWVudHMubGVuZ3RoOyBuKyspIHsKICAgICAgdFtuIC0gMV0gPSBhcmd1bWVudHNbbl07CiAgICB9CgogICAgdmFyIHIsCiAgICAgICAgbyA9IHRoaXMuc2V0dGluZ3NbZV07CiAgICBpZiAobykgcmV0dXJuIHRoaXMuY2FsbGJhY2tMb29rdXAgJiYgKHIgPSB0aGlzLmNhbGxiYWNrTG9va3VwW2VdKSAmJiAobyA9IHIuZnVuYywgciA9IHIuc2NvcGUpLCAic3RyaW5nIiA9PSB0eXBlb2YgbyAmJiAociA9IChyID0gby5yZXBsYWNlKC9cLlx3KyQvLCAiIikpID8gRXgocikgOiAwLCBvID0gRXgobyksIHRoaXMuY2FsbGJhY2tMb29rdXAgPSB0aGlzLmNhbGxiYWNrTG9va3VwIHx8IHt9LCB0aGlzLmNhbGxiYWNrTG9va3VwW2VdID0gewogICAgICBmdW5jOiBvLAogICAgICBzY29wZTogcgogICAgfSksIG8uYXBwbHkociB8fCB0aGlzLCB0KTsKICB9LCBfeC5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB1dS50cmFuc2xhdGUoZSk7CiAgfSwgX3gucHJvdG90eXBlLmdldFBhcmFtID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgIHJldHVybiBpID0gdCwgYSA9IG4sIGwgPSAobyA9IGUpIGluIChyID0gdGhpcykuc2V0dGluZ3MgPyByLnNldHRpbmdzW29dIDogaSwgImhhc2giID09PSBhID8gKGMgPSB7fSwgInN0cmluZyIgPT0gdHlwZW9mIChzID0gbCkgPyBZKDAgPCBzLmluZGV4T2YoIj0iKSA/IHMuc3BsaXQoL1s7LF0oPyFbXj07LF0qKD86WzssXXwkKSkvKSA6IHMuc3BsaXQoIiwiKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgdmFyIHQgPSBlLnNwbGl0KCI9Iik7CiAgICAgIDEgPCB0Lmxlbmd0aCA/IGNbRXQudHJpbSh0WzBdKV0gPSBFdC50cmltKHRbMV0pIDogY1tFdC50cmltKHRbMF0pXSA9IEV0LnRyaW0odFswXSk7CiAgICB9KSA6IGMgPSBzLCBjKSA6ICJzdHJpbmciID09PSBhID8gcnYoWCwgciwgbykuZ2V0T3IoaSkgOiAibnVtYmVyIiA9PT0gYSA/IHJ2KEUsIHIsIG8pLmdldE9yKGkpIDogImJvb2xlYW4iID09PSBhID8gcnYodiwgciwgbykuZ2V0T3IoaSkgOiAib2JqZWN0IiA9PT0gYSA/IHJ2KGgsIHIsIG8pLmdldE9yKGkpIDogImFycmF5IiA9PT0gYSA/IHJ2KFMsIHIsIG8pLmdldE9yKGkpIDogInN0cmluZ1tdIiA9PT0gYSA/IHJ2KCh1ID0gWCwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIFMoZSkgJiYgaihlLCB1KTsKICAgIH0pLCByLCBvKS5nZXRPcihpKSA6ICJmdW5jdGlvbiIgPT09IGEgPyBydih5LCByLCBvKS5nZXRPcihpKSA6IGw7CiAgICB2YXIgciwgbywgaSwgYSwgdSwgcywgYywgbDsKICB9LCBfeC5wcm90b3R5cGUuaGFzUGx1Z2luID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgIHJldHVybiAhKCFEKExzKHRoaXMpLnNwbGl0KC9bICxdLyksIGUpIHx8IHQgJiYgdm9pZCAwID09PSBPdi5nZXQoZSkpOwogIH0sIF94LnByb3RvdHlwZS5ub2RlQ2hhbmdlZCA9IGZ1bmN0aW9uIChlKSB7CiAgICB0aGlzLl9ub2RlQ2hhbmdlRGlzcGF0Y2hlci5ub2RlQ2hhbmdlZChlKTsKICB9LCBfeC5wcm90b3R5cGUuYWRkQ29tbWFuZCA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICB0aGlzLmVkaXRvckNvbW1hbmRzLmFkZENvbW1hbmQoZSwgdCwgbik7CiAgfSwgX3gucHJvdG90eXBlLmFkZFF1ZXJ5U3RhdGVIYW5kbGVyID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgIHRoaXMuZWRpdG9yQ29tbWFuZHMuYWRkUXVlcnlTdGF0ZUhhbmRsZXIoZSwgdCwgbik7CiAgfSwgX3gucHJvdG90eXBlLmFkZFF1ZXJ5VmFsdWVIYW5kbGVyID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgIHRoaXMuZWRpdG9yQ29tbWFuZHMuYWRkUXVlcnlWYWx1ZUhhbmRsZXIoZSwgdCwgbik7CiAgfSwgX3gucHJvdG90eXBlLmFkZFNob3J0Y3V0ID0gZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsKICAgIHRoaXMuc2hvcnRjdXRzLmFkZChlLCB0LCBuLCByKTsKICB9LCBfeC5wcm90b3R5cGUuZXhlY0NvbW1hbmQgPSBmdW5jdGlvbiAoZSwgdCwgbiwgcikgewogICAgcmV0dXJuIHRoaXMuZWRpdG9yQ29tbWFuZHMuZXhlY0NvbW1hbmQoZSwgdCwgbiwgcik7CiAgfSwgX3gucHJvdG90eXBlLnF1ZXJ5Q29tbWFuZFN0YXRlID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB0aGlzLmVkaXRvckNvbW1hbmRzLnF1ZXJ5Q29tbWFuZFN0YXRlKGUpOwogIH0sIF94LnByb3RvdHlwZS5xdWVyeUNvbW1hbmRWYWx1ZSA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gdGhpcy5lZGl0b3JDb21tYW5kcy5xdWVyeUNvbW1hbmRWYWx1ZShlKTsKICB9LCBfeC5wcm90b3R5cGUucXVlcnlDb21tYW5kU3VwcG9ydGVkID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB0aGlzLmVkaXRvckNvbW1hbmRzLnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZChlKTsKICB9LCBfeC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuaGlkZGVuICYmICh0aGlzLmhpZGRlbiA9ICExLCB0aGlzLmlubGluZSA/IHRoaXMuZ2V0Qm9keSgpLmNvbnRlbnRFZGl0YWJsZSA9ICJ0cnVlIiA6ICh4eC5zaG93KHRoaXMuZ2V0Q29udGFpbmVyKCkpLCB4eC5oaWRlKHRoaXMuaWQpKSwgdGhpcy5sb2FkKCksIHRoaXMuZmlyZSgic2hvdyIpKTsKICB9LCBfeC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlID0gdGhpcywKICAgICAgICB0ID0gZS5nZXREb2MoKTsKICAgIGUuaGlkZGVuIHx8IChOeCAmJiB0ICYmICFlLmlubGluZSAmJiB0LmV4ZWNDb21tYW5kKCJTZWxlY3RBbGwiKSwgZS5zYXZlKCksIGUuaW5saW5lID8gKGUuZ2V0Qm9keSgpLmNvbnRlbnRFZGl0YWJsZSA9ICJmYWxzZSIsIGUgPT09IGUuZWRpdG9yTWFuYWdlci5mb2N1c2VkRWRpdG9yICYmIChlLmVkaXRvck1hbmFnZXIuZm9jdXNlZEVkaXRvciA9IG51bGwpKSA6ICh4eC5oaWRlKGUuZ2V0Q29udGFpbmVyKCkpLCB4eC5zZXRTdHlsZShlLmlkLCAiZGlzcGxheSIsIGUub3JnRGlzcGxheSkpLCBlLmhpZGRlbiA9ICEwLCBlLmZpcmUoImhpZGUiKSk7CiAgfSwgX3gucHJvdG90eXBlLmlzSGlkZGVuID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuICEhdGhpcy5oaWRkZW47CiAgfSwgX3gucHJvdG90eXBlLnNldFByb2dyZXNzU3RhdGUgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgdGhpcy5maXJlKCJQcm9ncmVzc1N0YXRlIiwgewogICAgICBzdGF0ZTogZSwKICAgICAgdGltZTogdAogICAgfSk7CiAgfSwgX3gucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoZSkgewogICAgdmFyIHQgPSB0aGlzLmdldEVsZW1lbnQoKTsKICAgIGlmICh0aGlzLnJlbW92ZWQpIHJldHVybiAiIjsKCiAgICBpZiAodCkgewogICAgICAoZSA9IGUgfHwge30pLmxvYWQgPSAhMDsKICAgICAgdmFyIG4gPSBIbih0KSA/IHQudmFsdWUgOiB0LmlubmVySFRNTCwKICAgICAgICAgIHIgPSB0aGlzLnNldENvbnRlbnQobiwgZSk7CiAgICAgIHJldHVybiBlLmVsZW1lbnQgPSB0LCBlLm5vX2V2ZW50cyB8fCB0aGlzLmZpcmUoIkxvYWRDb250ZW50IiwgZSksIGUuZWxlbWVudCA9IHQgPSBudWxsLCByOwogICAgfQogIH0sIF94LnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0LAogICAgICAgIG4sCiAgICAgICAgciA9IHRoaXMsCiAgICAgICAgbyA9IHIuZ2V0RWxlbWVudCgpOwogICAgaWYgKG8gJiYgci5pbml0aWFsaXplZCAmJiAhci5yZW1vdmVkKSByZXR1cm4gKGUgPSBlIHx8IHt9KS5zYXZlID0gITAsIGUuZWxlbWVudCA9IG8sIGUuY29udGVudCA9IHIuZ2V0Q29udGVudChlKSwgZS5ub19ldmVudHMgfHwgci5maXJlKCJTYXZlQ29udGVudCIsIGUpLCAicmF3IiA9PT0gZS5mb3JtYXQgJiYgci5maXJlKCJSYXdTYXZlQ29udGVudCIsIGUpLCB0ID0gZS5jb250ZW50LCBIbihvKSA/IG8udmFsdWUgPSB0IDogKCFlLmlzX3JlbW92aW5nICYmIHIuaW5saW5lIHx8IChvLmlubmVySFRNTCA9IHQpLCAobiA9IHh4LmdldFBhcmVudChyLmlkLCAiZm9ybSIpKSAmJiBTeChuLmVsZW1lbnRzLCBmdW5jdGlvbiAoZSkgewogICAgICBpZiAoZS5uYW1lID09PSByLmlkKSByZXR1cm4gZS52YWx1ZSA9IHQsICExOwogICAgfSkpLCBlLmVsZW1lbnQgPSBvID0gbnVsbCwgITEgIT09IGUuc2V0X2RpcnR5ICYmIHIuc2V0RGlydHkoITEpLCB0OwogIH0sIF94LnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgIHJldHVybiBZaCh0aGlzLCBlLCB0KTsKICB9LCBfeC5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gdCA9IHRoaXMsIHIgPSAobiA9IHZvaWQgMCA9PT0gKG4gPSBlKSA/IHt9IDogbikuZm9ybWF0IHx8ICJodG1sIiwgbyA9IG4sIHBoKHQpLmVkaXRvci5nZXRDb250ZW50KG8sIHIpOwogICAgdmFyIHQsIG4sIHIsIG87CiAgfSwgX3gucHJvdG90eXBlLmluc2VydENvbnRlbnQgPSBmdW5jdGlvbiAoZSwgdCkgewogICAgdCAmJiAoZSA9IHd4KHsKICAgICAgY29udGVudDogZQogICAgfSwgdCkpLCB0aGlzLmV4ZWNDb21tYW5kKCJtY2VJbnNlcnRDb250ZW50IiwgITEsIGUpOwogIH0sIF94LnByb3RvdHlwZS5yZXNldENvbnRlbnQgPSBmdW5jdGlvbiAoZSkgewogICAgdm9pZCAwID09PSBlID8gWWgodGhpcywgdGhpcy5zdGFydENvbnRlbnQsIHsKICAgICAgZm9ybWF0OiAicmF3IgogICAgfSkgOiBZaCh0aGlzLCBlKSwgdGhpcy51bmRvTWFuYWdlci5yZXNldCgpLCB0aGlzLnNldERpcnR5KCExKSwgdGhpcy5ub2RlQ2hhbmdlZCgpOwogIH0sIF94LnByb3RvdHlwZS5pc0RpcnR5ID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuICF0aGlzLmlzTm90RGlydHk7CiAgfSwgX3gucHJvdG90eXBlLnNldERpcnR5ID0gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0ID0gIXRoaXMuaXNOb3REaXJ0eTsKICAgIHRoaXMuaXNOb3REaXJ0eSA9ICFlLCBlICYmIGUgIT09IHQgJiYgdGhpcy5maXJlKCJkaXJ0eSIpOwogIH0sIF94LnByb3RvdHlwZS5nZXRDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5jb250YWluZXIgfHwgKHRoaXMuY29udGFpbmVyID0geHguZ2V0KHRoaXMuZWRpdG9yQ29udGFpbmVyIHx8IHRoaXMuaWQgKyAiX3BhcmVudCIpKSwgdGhpcy5jb250YWluZXI7CiAgfSwgX3gucHJvdG90eXBlLmdldENvbnRlbnRBcmVhQ29udGFpbmVyID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuY29udGVudEFyZWFDb250YWluZXI7CiAgfSwgX3gucHJvdG90eXBlLmdldEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy50YXJnZXRFbG0gfHwgKHRoaXMudGFyZ2V0RWxtID0geHguZ2V0KHRoaXMuaWQpKSwgdGhpcy50YXJnZXRFbG07CiAgfSwgX3gucHJvdG90eXBlLmdldFdpbiA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlOwogICAgcmV0dXJuIHRoaXMuY29udGVudFdpbmRvdyB8fCAoZSA9IHRoaXMuaWZyYW1lRWxlbWVudCkgJiYgKHRoaXMuY29udGVudFdpbmRvdyA9IGUuY29udGVudFdpbmRvdyksIHRoaXMuY29udGVudFdpbmRvdzsKICB9LCBfeC5wcm90b3R5cGUuZ2V0RG9jID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGU7CiAgICByZXR1cm4gdGhpcy5jb250ZW50RG9jdW1lbnQgfHwgKGUgPSB0aGlzLmdldFdpbigpKSAmJiAodGhpcy5jb250ZW50RG9jdW1lbnQgPSBlLmRvY3VtZW50KSwgdGhpcy5jb250ZW50RG9jdW1lbnQ7CiAgfSwgX3gucHJvdG90eXBlLmdldEJvZHkgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZSA9IHRoaXMuZ2V0RG9jKCk7CiAgICByZXR1cm4gdGhpcy5ib2R5RWxlbWVudCB8fCAoZSA/IGUuYm9keSA6IG51bGwpOwogIH0sIF94LnByb3RvdHlwZS5jb252ZXJ0VVJMID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgIHZhciByID0gdGhpcy5zZXR0aW5nczsKICAgIHJldHVybiByLnVybGNvbnZlcnRlcl9jYWxsYmFjayA/IHRoaXMuZXhlY0NhbGxiYWNrKCJ1cmxjb252ZXJ0ZXJfY2FsbGJhY2siLCBlLCBuLCAhMCwgdCkgOiAhci5jb252ZXJ0X3VybHMgfHwgbiAmJiAiTElOSyIgPT09IG4ubm9kZU5hbWUgfHwgMCA9PT0gZS5pbmRleE9mKCJmaWxlOiIpIHx8IDAgPT09IGUubGVuZ3RoID8gZSA6IHIucmVsYXRpdmVfdXJscyA/IHRoaXMuZG9jdW1lbnRCYXNlVVJJLnRvUmVsYXRpdmUoZSkgOiB0aGlzLmRvY3VtZW50QmFzZVVSSS50b0Fic29sdXRlKGUsIHIucmVtb3ZlX3NjcmlwdF9ob3N0KTsKICB9LCBfeC5wcm90b3R5cGUuYWRkVmlzdWFsID0gZnVuY3Rpb24gKGUpIHsKICAgIHZhciB0OwogICAgdCA9IGUsIGhoKHRoaXMpLmVkaXRvci5hZGRWaXN1YWwodCk7CiAgfSwgX3gucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlLCB0LCBuLCByLCBvOwogICAgKGUgPSB0aGlzKS5yZW1vdmVkIHx8ICh0ID0gZS5fc2VsZWN0aW9uT3ZlcnJpZGVzLCBuID0gZS5lZGl0b3JVcGxvYWQsIHIgPSBlLmdldEJvZHkoKSwgbyA9IGUuZ2V0RWxlbWVudCgpLCByICYmIGUuc2F2ZSh7CiAgICAgIGlzX3JlbW92aW5nOiAhMAogICAgfSksIGUucmVtb3ZlZCA9ICEwLCBlLnVuYmluZEFsbE5hdGl2ZUV2ZW50cygpLCBlLmhhc0hpZGRlbklucHV0ICYmIG8gJiYgaHYucmVtb3ZlKG8ubmV4dFNpYmxpbmcpLCBlLmZpcmUoInJlbW92ZSIpLCBlLmVkaXRvck1hbmFnZXIucmVtb3ZlKGUpLCAhZS5pbmxpbmUgJiYgciAmJiBodi5zZXRTdHlsZShlLmlkLCAiZGlzcGxheSIsIGUub3JnRGlzcGxheSksIGUuZmlyZSgiZGV0YWNoIiksIGh2LnJlbW92ZShlLmdldENvbnRhaW5lcigpKSwgR2godCksIEdoKG4pLCBlLmRlc3Ryb3koKSk7CiAgfSwgX3gucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoZSkgewogICAgdmFyIHQsIG4sIHIsIG8sIGksIGEsIHU7CiAgICBuID0gZSwgYSA9ICh0ID0gdGhpcykuc2VsZWN0aW9uLCB1ID0gdC5kb20sIHQuZGVzdHJveWVkIHx8IChuIHx8IHQucmVtb3ZlZCA/IChuIHx8ICh0LmVkaXRvck1hbmFnZXIub2ZmKCJiZWZvcmV1bmxvYWQiLCB0Ll9iZWZvcmVVbmxvYWQpLCB0LnRoZW1lICYmIHQudGhlbWUuZGVzdHJveSAmJiB0LnRoZW1lLmRlc3Ryb3koKSwgR2goYSksIEdoKHUpKSwgKG8gPSAociA9IHQpLmZvcm1FbGVtZW50KSAmJiAoby5fbWNlT2xkU3VibWl0ICYmIChvLnN1Ym1pdCA9IG8uX21jZU9sZFN1Ym1pdCwgby5fbWNlT2xkU3VibWl0ID0gbnVsbCksIGh2LnVuYmluZChvLCAic3VibWl0IHJlc2V0Iiwgci5mb3JtRXZlbnREZWxlZ2F0ZSkpLCAoaSA9IHQpLmNvbnRlbnRBcmVhQ29udGFpbmVyID0gaS5mb3JtRWxlbWVudCA9IGkuY29udGFpbmVyID0gaS5lZGl0b3JDb250YWluZXIgPSBudWxsLCBpLmJvZHlFbGVtZW50ID0gaS5jb250ZW50RG9jdW1lbnQgPSBpLmNvbnRlbnRXaW5kb3cgPSBudWxsLCBpLmlmcmFtZUVsZW1lbnQgPSBpLnRhcmdldEVsbSA9IG51bGwsIGkuc2VsZWN0aW9uICYmIChpLnNlbGVjdGlvbiA9IGkuc2VsZWN0aW9uLndpbiA9IGkuc2VsZWN0aW9uLmRvbSA9IGkuc2VsZWN0aW9uLmRvbS5kb2MgPSBudWxsKSwgdC5kZXN0cm95ZWQgPSAhMCkgOiB0LnJlbW92ZSgpKTsKICB9LCBfeC5wcm90b3R5cGUudXBsb2FkSW1hZ2VzID0gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB0aGlzLmVkaXRvclVwbG9hZC51cGxvYWRJbWFnZXMoZSk7CiAgfSwgX3gucHJvdG90eXBlLl9zY2FuRm9ySW1hZ2VzID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZWRpdG9yVXBsb2FkLnNjYW5Gb3JJbWFnZXMoKTsKICB9LCBfeC5wcm90b3R5cGUuYWRkQnV0dG9uID0gZnVuY3Rpb24gKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCJlZGl0b3IuYWRkQnV0dG9uIGhhcyBiZWVuIHJlbW92ZWQgaW4gdGlueW1jZSA1eCwgdXNlIGVkaXRvci51aS5yZWdpc3RyeS5hZGRCdXR0b24gb3IgZWRpdG9yLnVpLnJlZ2lzdHJ5LmFkZFRvZ2dsZUJ1dHRvbiBvciBlZGl0b3IudWkucmVnaXN0cnkuYWRkU3BsaXRCdXR0b24gaW5zdGVhZCIpOwogIH0sIF94LnByb3RvdHlwZS5hZGRTaWRlYmFyID0gZnVuY3Rpb24gKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCJlZGl0b3IuYWRkU2lkZWJhciBoYXMgYmVlbiByZW1vdmVkIGluIHRpbnltY2UgNXgsIHVzZSBlZGl0b3IudWkucmVnaXN0cnkuYWRkU2lkZWJhciBpbnN0ZWFkIik7CiAgfSwgX3gucHJvdG90eXBlLmFkZE1lbnVJdGVtID0gZnVuY3Rpb24gKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCJlZGl0b3IuYWRkTWVudUl0ZW0gaGFzIGJlZW4gcmVtb3ZlZCBpbiB0aW55bWNlIDV4LCB1c2UgZWRpdG9yLnVpLnJlZ2lzdHJ5LmFkZE1lbnVJdGVtIGluc3RlYWQiKTsKICB9LCBfeC5wcm90b3R5cGUuYWRkQ29udGV4dFRvb2xiYXIgPSBmdW5jdGlvbiAoKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoImVkaXRvci5hZGRDb250ZXh0VG9vbGJhciBoYXMgYmVlbiByZW1vdmVkIGluIHRpbnltY2UgNXgsIHVzZSBlZGl0b3IudWkucmVnaXN0cnkuYWRkQ29udGV4dFRvb2xiYXIgaW5zdGVhZCIpOwogIH0sIF94KTsKCiAgZnVuY3Rpb24gX3goZSwgdCwgbikgewogICAgdmFyIHIsCiAgICAgICAgbywKICAgICAgICBpLAogICAgICAgIGEsCiAgICAgICAgdSwKICAgICAgICBzLAogICAgICAgIGMsCiAgICAgICAgbCwKICAgICAgICBmLAogICAgICAgIGQsCiAgICAgICAgbSwKICAgICAgICBnLAogICAgICAgIHAsCiAgICAgICAgaCwKICAgICAgICB2LAogICAgICAgIGIsCiAgICAgICAgeSwKICAgICAgICBDLAogICAgICAgIHggPSB0aGlzOwoKICAgIGZ1bmN0aW9uIHcobiwgcikgewogICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICByZXR1cm4gbltlLnRvTG93ZXJDYXNlKCldID0gX2UyKF9lMih7fSwgdCksIHsKICAgICAgICAgIHR5cGU6IHIKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KCiAgICB0aGlzLnBsdWdpbnMgPSB7fSwgdGhpcy5jb250ZW50Q1NTID0gW10sIHRoaXMuY29udGVudFN0eWxlcyA9IFtdLCB0aGlzLmxvYWRlZENTUyA9IHt9LCB0aGlzLmlzTm90RGlydHkgPSAhMSwgdGhpcy5lZGl0b3JNYW5hZ2VyID0gbiwgdGhpcy5kb2N1bWVudEJhc2VVcmwgPSBuLmRvY3VtZW50QmFzZVVSTCwgd3godGhpcywgbXgpLCB0aGlzLnNldHRpbmdzID0gKGQgPSAoZiA9IHRoaXMpLmRvY3VtZW50QmFzZVVybCwgbSA9IG4uZGVmYXVsdFNldHRpbmdzLCBwID0gZCwgaCA9IHd2LCB2ID0gZiwgYiA9IHsKICAgICAgaWQ6IGUsCiAgICAgIHRoZW1lOiAic2lsdmVyIiwKICAgICAgdG9vbGJhcl9tb2RlOiBldihnID0gdCwgImZsb2F0aW5nIiksCiAgICAgIHBsdWdpbnM6ICIiLAogICAgICBkb2N1bWVudF9iYXNlX3VybDogcCwKICAgICAgYWRkX2Zvcm1fc3VibWl0X3RyaWdnZXI6ICEwLAogICAgICBzdWJtaXRfcGF0Y2g6ICEwLAogICAgICBhZGRfdW5sb2FkX3RyaWdnZXI6ICEwLAogICAgICBjb252ZXJ0X3VybHM6ICEwLAogICAgICByZWxhdGl2ZV91cmxzOiAhMCwKICAgICAgcmVtb3ZlX3NjcmlwdF9ob3N0OiAhMCwKICAgICAgb2JqZWN0X3Jlc2l6aW5nOiAhMCwKICAgICAgZG9jdHlwZTogIjwhRE9DVFlQRSBodG1sPiIsCiAgICAgIHZpc3VhbDogITAsCiAgICAgIGZvbnRfc2l6ZV9sZWdhY3lfdmFsdWVzOiAieHgtc21hbGwsc21hbGwsbWVkaXVtLGxhcmdlLHgtbGFyZ2UseHgtbGFyZ2UsMzAwJSIsCiAgICAgIGZvcmNlZF9yb290X2Jsb2NrOiAicCIsCiAgICAgIGhpZGRlbl9pbnB1dDogITAsCiAgICAgIGlubGluZV9zdHlsZXM6ICEwLAogICAgICBjb252ZXJ0X2ZvbnRzX3RvX3NwYW5zOiAhMCwKICAgICAgaW5kZW50OiAhMCwKICAgICAgaW5kZW50X2JlZm9yZTogInAsaDEsaDIsaDMsaDQsaDUsaDYsYmxvY2txdW90ZSxkaXYsdGl0bGUsc3R5bGUscHJlLHNjcmlwdCx0ZCx0aCx1bCxvbCxsaSxkbCxkdCxkZCxhcmVhLHRhYmxlLHRoZWFkLHRmb290LHRib2R5LHRyLHNlY3Rpb24sc3VtbWFyeSxhcnRpY2xlLGhncm91cCxhc2lkZSxmaWd1cmUsZmlnY2FwdGlvbixvcHRpb24sb3B0Z3JvdXAsZGF0YWxpc3QiLAogICAgICBpbmRlbnRfYWZ0ZXI6ICJwLGgxLGgyLGgzLGg0LGg1LGg2LGJsb2NrcXVvdGUsZGl2LHRpdGxlLHN0eWxlLHByZSxzY3JpcHQsdGQsdGgsdWwsb2wsbGksZGwsZHQsZGQsYXJlYSx0YWJsZSx0aGVhZCx0Zm9vdCx0Ym9keSx0cixzZWN0aW9uLHN1bW1hcnksYXJ0aWNsZSxoZ3JvdXAsYXNpZGUsZmlndXJlLGZpZ2NhcHRpb24sb3B0aW9uLG9wdGdyb3VwLGRhdGFsaXN0IiwKICAgICAgZW50aXR5X2VuY29kaW5nOiAibmFtZWQiLAogICAgICB1cmxfY29udmVydGVyOiB2LmNvbnZlcnRVUkwsCiAgICAgIHVybF9jb252ZXJ0ZXJfc2NvcGU6IHYKICAgIH0sIHkgPSBfZTIoX2UyKHt9LCBiKSwgaCA/IGt2IDoge30pLCAhMSAhPT0gKEMgPSBudihTdiB8fCBFdiwgU3YsIHksIG0sIGcpKS5kZXByZWNhdGlvbl93YXJuaW5ncyAmJiBKaChnLCBDKSwgQyksIHRoaXMuc2V0dGluZ3Muc3VmZml4ICYmIChuLnN1ZmZpeCA9IHRoaXMuc2V0dGluZ3Muc3VmZml4KSwgdGhpcy5zdWZmaXggPSBuLnN1ZmZpeCwgdGhpcy5zZXR0aW5ncy5iYXNlX3VybCAmJiBuLl9zZXRCYXNlVXJsKHRoaXMuc2V0dGluZ3MuYmFzZV91cmwpLCB0aGlzLmJhc2VVcmkgPSBuLmJhc2VVUkksIHRoaXMuc2V0dGluZ3MucmVmZXJyZXJfcG9saWN5ICYmICh0dS5TY3JpcHRMb2FkZXIuX3NldFJlZmVycmVyUG9saWN5KHRoaXMuc2V0dGluZ3MucmVmZXJyZXJfcG9saWN5KSwgSmEuRE9NLnN0eWxlU2hlZXRMb2FkZXIuX3NldFJlZmVycmVyUG9saWN5KHRoaXMuc2V0dGluZ3MucmVmZXJyZXJfcG9saWN5KSksIHN1Lmxhbmd1YWdlTG9hZCA9IHRoaXMuc2V0dGluZ3MubGFuZ3VhZ2VfbG9hZCwgc3UuYmFzZVVSTCA9IG4uYmFzZVVSTCwgdGhpcy5pZCA9IGUsIHRoaXMuc2V0RGlydHkoITEpLCB0aGlzLmRvY3VtZW50QmFzZVVSSSA9IG5ldyBLZCh0aGlzLnNldHRpbmdzLmRvY3VtZW50X2Jhc2VfdXJsLCB7CiAgICAgIGJhc2VfdXJpOiB0aGlzLmJhc2VVcmkKICAgIH0pLCB0aGlzLmJhc2VVUkkgPSB0aGlzLmJhc2VVcmksIHRoaXMuaW5saW5lID0gISF0aGlzLnNldHRpbmdzLmlubGluZSwgdGhpcy5zaG9ydGN1dHMgPSBuZXcgeXgodGhpcyksIHRoaXMuZWRpdG9yQ29tbWFuZHMgPSBuZXcgVzEodGhpcyksIHRoaXMuc2V0dGluZ3MuY2FjaGVfc3VmZml4ICYmICh4dC5jYWNoZVN1ZmZpeCA9IHRoaXMuc2V0dGluZ3MuY2FjaGVfc3VmZml4LnJlcGxhY2UoL15bXD9cJl0rLywgIiIpKSwgdGhpcy51aSA9IHsKICAgICAgcmVnaXN0cnk6IHsKICAgICAgICBhZGRBdXRvY29tcGxldGVyOiAodSA9IHt9LCAociA9IHsKICAgICAgICAgIGFkZEJ1dHRvbjogdyhvID0ge30sICJidXR0b24iKSwKICAgICAgICAgIGFkZEdyb3VwVG9vbGJhckJ1dHRvbjogdyhvLCAiZ3JvdXB0b29sYmFyYnV0dG9uIiksCiAgICAgICAgICBhZGRUb2dnbGVCdXR0b246IHcobywgInRvZ2dsZWJ1dHRvbiIpLAogICAgICAgICAgYWRkTWVudUJ1dHRvbjogdyhvLCAibWVudWJ1dHRvbiIpLAogICAgICAgICAgYWRkU3BsaXRCdXR0b246IHcobywgInNwbGl0YnV0dG9uIiksCiAgICAgICAgICBhZGRNZW51SXRlbTogdyhpID0ge30sICJtZW51aXRlbSIpLAogICAgICAgICAgYWRkTmVzdGVkTWVudUl0ZW06IHcoaSwgIm5lc3RlZG1lbnVpdGVtIiksCiAgICAgICAgICBhZGRUb2dnbGVNZW51SXRlbTogdyhpLCAidG9nZ2xlbWVudWl0ZW0iKSwKICAgICAgICAgIGFkZEF1dG9jb21wbGV0ZXI6IHcoYSA9IHt9LCAiYXV0b2NvbXBsZXRlciIpLAogICAgICAgICAgYWRkQ29udGV4dE1lbnU6IHcocyA9IHt9LCAiY29udGV4dG1lbnUiKSwKICAgICAgICAgIGFkZENvbnRleHRUb29sYmFyOiB3KGMgPSB7fSwgImNvbnRleHR0b29sYmFyIiksCiAgICAgICAgICBhZGRDb250ZXh0Rm9ybTogdyhjLCAiY29udGV4dGZvcm0iKSwKICAgICAgICAgIGFkZFNpZGViYXI6IHcobCA9IHt9LCAic2lkZWJhciIpLAogICAgICAgICAgYWRkSWNvbjogZnVuY3Rpb24gYWRkSWNvbihlLCB0KSB7CiAgICAgICAgICAgIHJldHVybiB1W2UudG9Mb3dlckNhc2UoKV0gPSB0OwogICAgICAgICAgfSwKICAgICAgICAgIGdldEFsbDogZnVuY3Rpb24gZ2V0QWxsKCkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIGJ1dHRvbnM6IG8sCiAgICAgICAgICAgICAgbWVudUl0ZW1zOiBpLAogICAgICAgICAgICAgIGljb25zOiB1LAogICAgICAgICAgICAgIHBvcHVwczogYSwKICAgICAgICAgICAgICBjb250ZXh0TWVudXM6IHMsCiAgICAgICAgICAgICAgY29udGV4dFRvb2xiYXJzOiBjLAogICAgICAgICAgICAgIHNpZGViYXJzOiBsCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgfSkuYWRkQXV0b2NvbXBsZXRlciksCiAgICAgICAgYWRkQnV0dG9uOiByLmFkZEJ1dHRvbiwKICAgICAgICBhZGRDb250ZXh0Rm9ybTogci5hZGRDb250ZXh0Rm9ybSwKICAgICAgICBhZGRDb250ZXh0TWVudTogci5hZGRDb250ZXh0TWVudSwKICAgICAgICBhZGRDb250ZXh0VG9vbGJhcjogci5hZGRDb250ZXh0VG9vbGJhciwKICAgICAgICBhZGRJY29uOiByLmFkZEljb24sCiAgICAgICAgYWRkTWVudUJ1dHRvbjogci5hZGRNZW51QnV0dG9uLAogICAgICAgIGFkZE1lbnVJdGVtOiByLmFkZE1lbnVJdGVtLAogICAgICAgIGFkZE5lc3RlZE1lbnVJdGVtOiByLmFkZE5lc3RlZE1lbnVJdGVtLAogICAgICAgIGFkZFNpZGViYXI6IHIuYWRkU2lkZWJhciwKICAgICAgICBhZGRTcGxpdEJ1dHRvbjogci5hZGRTcGxpdEJ1dHRvbiwKICAgICAgICBhZGRUb2dnbGVCdXR0b246IHIuYWRkVG9nZ2xlQnV0dG9uLAogICAgICAgIGFkZEdyb3VwVG9vbGJhckJ1dHRvbjogci5hZGRHcm91cFRvb2xiYXJCdXR0b24sCiAgICAgICAgYWRkVG9nZ2xlTWVudUl0ZW06IHIuYWRkVG9nZ2xlTWVudUl0ZW0sCiAgICAgICAgZ2V0QWxsOiByLmdldEFsbAogICAgICB9LAogICAgICBzdHlsZVNoZWV0TG9hZGVyOiB2b2lkIDAsCiAgICAgIHNob3c6IHRlLAogICAgICBoaWRlOiB0ZSwKICAgICAgZW5hYmxlOiB0ZSwKICAgICAgZGlzYWJsZTogdGUsCiAgICAgIGlzRGlzYWJsZWQ6IFIKICAgIH07CgogICAgdmFyIFMsCiAgICAgICAgRSwKICAgICAgICBOLAogICAgICAgIGssCiAgICAgICAgXywKICAgICAgICBBID0gKGsgPSBydSgiZGVzaWduIiksIF8gPSBydSh7CiAgICAgIGRlc2lnbjogewogICAgICAgIGFjdGl2YXRlOiB0ZSwKICAgICAgICBkZWFjdGl2YXRlOiB0ZSwKICAgICAgICBlZGl0b3JSZWFkT25seTogITEKICAgICAgfSwKICAgICAgcmVhZG9ubHk6IHsKICAgICAgICBhY3RpdmF0ZTogdGUsCiAgICAgICAgZGVhY3RpdmF0ZTogdGUsCiAgICAgICAgZWRpdG9yUmVhZE9ubHk6ICEwCiAgICAgIH0KICAgIH0pLCAoRSA9IFMgPSB0aGlzKS5zZXJpYWxpemVyID8gWjEoRSkgOiBFLm9uKCJQcmVJbml0IiwgZnVuY3Rpb24gKCkgewogICAgICBaMShFKTsKICAgIH0pLCAoTiA9IFMpLm9uKCJTaG93Q2FyZXQiLCBmdW5jdGlvbiAoZSkgewogICAgICBRMShOKSAmJiBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB9KSwgTi5vbigiT2JqZWN0U2VsZWN0ZWQiLCBmdW5jdGlvbiAoZSkgewogICAgICBRMShOKSAmJiBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB9KSwgewogICAgICBpc1JlYWRPbmx5OiBmdW5jdGlvbiBpc1JlYWRPbmx5KCkgewogICAgICAgIHJldHVybiBRMShTKTsKICAgICAgfSwKICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoZSkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSwgdCwgbiwgcikgewogICAgICAgICAgaWYgKHIgIT09IG4uZ2V0KCkpIHsKICAgICAgICAgICAgaWYgKCFOZSh0LCByKSkgdGhyb3cgbmV3IEVycm9yKCJFZGl0b3IgbW9kZSAnIiArIHIgKyAiJyBpcyBpbnZhbGlkIik7CiAgICAgICAgICAgIGUuaW5pdGlhbGl6ZWQgPyBzeChlLCBuLCB0LCByKSA6IGUub24oImluaXQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHN4KGUsIG4sIHQsIHIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KFMsIF8uZ2V0KCksIGssIGUpOwogICAgICB9LAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gay5nZXQoKTsKICAgICAgfSwKICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKGUsIHQpIHsKICAgICAgICBfLnNldChmdW5jdGlvbiAoZSwgdCwgbikgewogICAgICAgICAgdmFyIHI7CiAgICAgICAgICBpZiAoRChneCwgdCkpIHRocm93IG5ldyBFcnJvcigiQ2Fubm90IG92ZXJyaWRlIGRlZmF1bHQgbW9kZSAiICsgdCk7CiAgICAgICAgICByZXR1cm4gX2UyKF9lMih7fSwgZSksICgociA9IHt9KVt0XSA9IF9lMihfZTIoe30sIG4pLCB7CiAgICAgICAgICAgIGRlYWN0aXZhdGU6IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIG4uZGVhY3RpdmF0ZSgpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoInByb2JsZW0gd2hpbGUgZGVhY3RpdmF0aW5nIGVkaXRvciBtb2RlICIgKyB0ICsgIjoiLCBlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLCByKSk7CiAgICAgICAgfShfLmdldCgpLCBlLCB0KSk7CiAgICAgIH0KICAgIH0pOwoKICAgIHRoaXMubW9kZSA9IEEsIHRoaXMuc2V0TW9kZSA9IEEuc2V0LCBuLmZpcmUoIlNldHVwRWRpdG9yIiwgewogICAgICBlZGl0b3I6IHRoaXMKICAgIH0pLCB0aGlzLmV4ZWNDYWxsYmFjaygic2V0dXAiLCB0aGlzKSwgdGhpcy4kID0gV2Eub3ZlcnJpZGVEZWZhdWx0cyhmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgY29udGV4dDogeC5pbmxpbmUgPyB4LmdldEJvZHkoKSA6IHguZ2V0RG9jKCksCiAgICAgICAgZWxlbWVudDogeC5nZXRCb2R5KCkKICAgICAgfTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gQXgodCkgewogICAgdmFyIG4gPSB0LnR5cGU7CiAgICBQeChIeC5nZXQoKSwgZnVuY3Rpb24gKGUpIHsKICAgICAgc3dpdGNoIChuKSB7CiAgICAgICAgY2FzZSAic2Nyb2xsIjoKICAgICAgICAgIGUuZmlyZSgiU2Nyb2xsV2luZG93IiwgdCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAicmVzaXplIjoKICAgICAgICAgIGUuZmlyZSgiUmVzaXplV2luZG93IiwgdCk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gUngoZSkgewogICAgZSAhPT0gTXggJiYgKGUgPyBXYSh3aW5kb3cpLm9uKCJyZXNpemUgc2Nyb2xsIiwgQXgpIDogV2Eod2luZG93KS5vZmYoInJlc2l6ZSBzY3JvbGwiLCBBeCksIE14ID0gZSk7CiAgfQoKICBmdW5jdGlvbiBEeCh0KSB7CiAgICB2YXIgZSA9IFV4OwogICAgZGVsZXRlIEZ4W3QuaWRdOwoKICAgIGZvciAodmFyIG4gPSAwOyBuIDwgRngubGVuZ3RoOyBuKyspIHsKICAgICAgaWYgKEZ4W25dID09PSB0KSB7CiAgICAgICAgRnguc3BsaWNlKG4sIDEpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIFV4ID0gVShVeCwgZnVuY3Rpb24gKGUpIHsKICAgICAgcmV0dXJuIHQgIT09IGU7CiAgICB9KSwgSHguYWN0aXZlRWRpdG9yID09PSB0ICYmIChIeC5hY3RpdmVFZGl0b3IgPSAwIDwgVXgubGVuZ3RoID8gVXhbMF0gOiBudWxsKSwgSHguZm9jdXNlZEVkaXRvciA9PT0gdCAmJiAoSHguZm9jdXNlZEVkaXRvciA9IG51bGwpLCBlLmxlbmd0aCAhPT0gVXgubGVuZ3RoOwogIH0KCiAgdmFyIFR4LAogICAgICBPeCA9IEphLkRPTSwKICAgICAgQnggPSBFdC5leHBsb2RlLAogICAgICBQeCA9IEV0LmVhY2gsCiAgICAgIEx4ID0gRXQuZXh0ZW5kLAogICAgICBJeCA9IDAsCiAgICAgIE14ID0gITEsCiAgICAgIEZ4ID0gW10sCiAgICAgIFV4ID0gW10sCiAgICAgIHp4ID0gIkNTUzFDb21wYXQiICE9PSBkb2N1bWVudC5jb21wYXRNb2RlLAogICAgICBIeCA9IF9lMihfZTIoe30sIGZ4KSwgewogICAgYmFzZVVSSTogbnVsbCwKICAgIGJhc2VVUkw6IG51bGwsCiAgICBkZWZhdWx0U2V0dGluZ3M6IHt9LAogICAgZG9jdW1lbnRCYXNlVVJMOiBudWxsLAogICAgc3VmZml4OiBudWxsLAogICAgJDogV2EsCiAgICBtYWpvclZlcnNpb246ICI1IiwKICAgIG1pbm9yVmVyc2lvbjogIjEwLjAiLAogICAgcmVsZWFzZURhdGU6ICIyMDIxLTEwLTExIiwKICAgIGVkaXRvcnM6IEZ4LAogICAgaTE4bjogdXUsCiAgICBhY3RpdmVFZGl0b3I6IG51bGwsCiAgICBmb2N1c2VkRWRpdG9yOiBudWxsLAogICAgc2V0dGluZ3M6IHt9LAogICAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKCkgewogICAgICB2YXIgZSwKICAgICAgICAgIHQgPSAiIiwKICAgICAgICAgIG4gPSBLZC5nZXREb2N1bWVudEJhc2VVcmwoZG9jdW1lbnQubG9jYXRpb24pOwogICAgICAvXlteOl0rOlwvXC9cLz9bXlwvXStcLy8udGVzdChuKSAmJiAobiA9IG4ucmVwbGFjZSgvW1w/I10uKiQvLCAiIikucmVwbGFjZSgvW1wvXFxdW15cL10rJC8sICIiKSwgL1tcL1xcXSQvLnRlc3QobikgfHwgKG4gKz0gIi8iKSk7CiAgICAgIHZhciByID0gd2luZG93LnRpbnltY2UgfHwgd2luZG93LnRpbnlNQ0VQcmVJbml0OwogICAgICBpZiAocikgZSA9IHIuYmFzZSB8fCByLmJhc2VVUkwsIHQgPSByLnN1ZmZpeDtlbHNlIHsKICAgICAgICBmb3IgKHZhciBvLCBpID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNjcmlwdCIpLCBhID0gMDsgYSA8IGkubGVuZ3RoOyBhKyspIHsKICAgICAgICAgIGlmICgiIiAhPT0gKG8gPSBpW2FdLnNyYyB8fCAiIikpIHsKICAgICAgICAgICAgdmFyIHUgPSBvLnN1YnN0cmluZyhvLmxhc3RJbmRleE9mKCIvIikpOwoKICAgICAgICAgICAgaWYgKC90aW55bWNlKFwuZnVsbHxcLmpxdWVyeXwpKFwubWlufFwuZGV2fClcLmpzLy50ZXN0KG8pKSB7CiAgICAgICAgICAgICAgLTEgIT09IHUuaW5kZXhPZigiLm1pbiIpICYmICh0ID0gIi5taW4iKSwgZSA9IG8uc3Vic3RyaW5nKDAsIG8ubGFzdEluZGV4T2YoIi8iKSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICFlICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgKC0xICE9PSAobyA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjKS5pbmRleE9mKCIubWluIikgJiYgKHQgPSAiLm1pbiIpLCBlID0gby5zdWJzdHJpbmcoMCwgby5sYXN0SW5kZXhPZigiLyIpKSk7CiAgICAgIH0KICAgICAgdGhpcy5iYXNlVVJMID0gbmV3IEtkKG4pLnRvQWJzb2x1dGUoZSksIHRoaXMuZG9jdW1lbnRCYXNlVVJMID0gbiwgdGhpcy5iYXNlVVJJID0gbmV3IEtkKHRoaXMuYmFzZVVSTCksIHRoaXMuc3VmZml4ID0gdCwgdGhpcy5vbigiQWRkRWRpdG9yIiwgQShtZCwgdGhpcykpLCB0aGlzLm9uKCJSZW1vdmVFZGl0b3IiLCBBKGdkLCB0aGlzKSk7CiAgICB9LAogICAgb3ZlcnJpZGVEZWZhdWx0czogZnVuY3Rpb24gb3ZlcnJpZGVEZWZhdWx0cyhlKSB7CiAgICAgIHZhciB0ID0gZS5iYXNlX3VybDsKICAgICAgdCAmJiB0aGlzLl9zZXRCYXNlVXJsKHQpOwogICAgICB2YXIgbiA9IGUuc3VmZml4OwogICAgICBlLnN1ZmZpeCAmJiAodGhpcy5zdWZmaXggPSBuKTsKICAgICAgdmFyIHIgPSAodGhpcy5kZWZhdWx0U2V0dGluZ3MgPSBlKS5wbHVnaW5fYmFzZV91cmxzOwogICAgICB2b2lkIDAgIT09IHIgJiYgbmUociwgZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICBzdS5QbHVnaW5NYW5hZ2VyLnVybHNbdF0gPSBlOwogICAgICB9KTsKICAgIH0sCiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHIpIHsKICAgICAgZnVuY3Rpb24gdShlKSB7CiAgICAgICAgdmFyIHQgPSBlLmlkOwogICAgICAgIHJldHVybiB0IHx8ICh0ID0gdWUoZSwgIm5hbWUiKS5maWx0ZXIoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiAhT3guZ2V0KGUpOwogICAgICAgIH0pLmdldE9yVGh1bmsoT3gudW5pcXVlSWQpLCBlLnNldEF0dHJpYnV0ZSgiaWQiLCB0KSksIHQ7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHMoZSwgdCkgewogICAgICAgIHJldHVybiB0LmNvbnN0cnVjdG9yID09PSBSZWdFeHAgPyB0LnRlc3QoZS5jbGFzc05hbWUpIDogT3guaGFzQ2xhc3MoZSwgdCk7CiAgICAgIH0KCiAgICAgIHZhciBuLAogICAgICAgICAgYyA9IHRoaXMsCiAgICAgICAgICBsID0gRXQubWFrZU1hcCgiYXJlYSBiYXNlIGJhc2Vmb250IGJyIGNvbCBmcmFtZSBociBpbWcgaW5wdXQgaXNpbmRleCBsaW5rIG1ldGEgcGFyYW0gZW1iZWQgc291cmNlIHdiciB0cmFjayBjb2xncm91cCBvcHRpb24gdGFibGUgdGJvZHkgdGZvb3QgdGhlYWQgdHIgdGggdGQgc2NyaXB0IG5vc2NyaXB0IHN0eWxlIHRleHRhcmVhIHZpZGVvIGF1ZGlvIGlmcmFtZSBvYmplY3QgbWVudSIsICIgIiksCiAgICAgICAgICBmID0gZnVuY3Rpb24gZihlKSB7CiAgICAgICAgbiA9IGU7CiAgICAgIH0sCiAgICAgICAgICB0ID0gZnVuY3Rpb24gdCgpIHsKICAgICAgICBmdW5jdGlvbiBuKGUsIHQsIG4pIHsKICAgICAgICAgIHZhciByID0gbmV3IGt4KGUsIHQsIGMpOwogICAgICAgICAgYS5wdXNoKHIpLCByLm9uKCJpbml0IiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICArK2kgPT09IG8ubGVuZ3RoICYmIGYoYSk7CiAgICAgICAgICB9KSwgci50YXJnZXRFbG0gPSByLnRhcmdldEVsbSB8fCBuLCByLnJlbmRlcigpOwogICAgICAgIH0KCiAgICAgICAgdmFyIG8sCiAgICAgICAgICAgIGUsCiAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICBhID0gW107CiAgICAgICAgT3gudW5iaW5kKHdpbmRvdywgInJlYWR5IiwgdCksIChlID0gci5vbnBhZ2Vsb2FkKSAmJiBlLmFwcGx5KGMsIFtdKSwgbyA9IFdhLnVuaXF1ZShmdW5jdGlvbiAodCkgewogICAgICAgICAgdmFyIG4gPSBbXTsKICAgICAgICAgIGlmICh4dC5icm93c2VyLmlzSUUoKSAmJiB4dC5icm93c2VyLnZlcnNpb24ubWFqb3IgPCAxMSkgcmV0dXJuIGF5KCJUaW55TUNFIGRvZXMgbm90IHN1cHBvcnQgdGhlIGJyb3dzZXIgeW91IGFyZSB1c2luZy4gRm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgYnJvd3NlcnMgcGxlYXNlIHNlZTogaHR0cHM6Ly93d3cudGlueW1jZS5jb20vZG9jcy9nZXQtc3RhcnRlZC9zeXN0ZW0tcmVxdWlyZW1lbnRzLyIpLCBbXTsKICAgICAgICAgIGlmICh6eCkgcmV0dXJuIGF5KCJGYWlsZWQgdG8gaW5pdGlhbGl6ZSB0aGUgZWRpdG9yIGFzIHRoZSBkb2N1bWVudCBpcyBub3QgaW4gc3RhbmRhcmRzIG1vZGUuIFRpbnlNQ0UgcmVxdWlyZXMgc3RhbmRhcmRzIG1vZGUuIiksIFtdOwogICAgICAgICAgaWYgKHQudHlwZXMpIHJldHVybiBQeCh0LnR5cGVzLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBuID0gbi5jb25jYXQoT3guc2VsZWN0KGUuc2VsZWN0b3IpKTsKICAgICAgICAgIH0pLCBuOwogICAgICAgICAgaWYgKHQuc2VsZWN0b3IpIHJldHVybiBPeC5zZWxlY3QodC5zZWxlY3Rvcik7CiAgICAgICAgICBpZiAodC50YXJnZXQpIHJldHVybiBbdC50YXJnZXRdOwoKICAgICAgICAgIHN3aXRjaCAodC5tb2RlKSB7CiAgICAgICAgICAgIGNhc2UgImV4YWN0IjoKICAgICAgICAgICAgICB2YXIgZSA9IHQuZWxlbWVudHMgfHwgIiI7CiAgICAgICAgICAgICAgMCA8IGUubGVuZ3RoICYmIFB4KEJ4KGUpLCBmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBPeC5nZXQodCk7CiAgICAgICAgICAgICAgICBlID8gbi5wdXNoKGUpIDogUHgoZG9jdW1lbnQuZm9ybXMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgIFB4KGUuZWxlbWVudHMsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgZS5uYW1lID09PSB0ICYmICh0ID0gIm1jZV9lZGl0b3JfIiArIEl4KyssIE94LnNldEF0dHJpYihlLCAiaWQiLCB0KSwgbi5wdXNoKGUpKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgInRleHRhcmVhcyI6CiAgICAgICAgICAgIGNhc2UgInNwZWNpZmljX3RleHRhcmVhcyI6CiAgICAgICAgICAgICAgUHgoT3guc2VsZWN0KCJ0ZXh0YXJlYSIpLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgdC5lZGl0b3JfZGVzZWxlY3RvciAmJiBzKGUsIHQuZWRpdG9yX2Rlc2VsZWN0b3IpIHx8IHQuZWRpdG9yX3NlbGVjdG9yICYmICFzKGUsIHQuZWRpdG9yX3NlbGVjdG9yKSB8fCBuLnB1c2goZSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIG47CiAgICAgICAgfShyKSksIHIudHlwZXMgPyBQeChyLnR5cGVzLCBmdW5jdGlvbiAodCkgewogICAgICAgICAgRXQuZWFjaChvLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gIU94LmlzKGUsIHQuc2VsZWN0b3IpIHx8IChuKHUoZSksIEx4KHt9LCByLCB0KSwgZSksICExKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pIDogKEV0LmVhY2gobywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciB0OwogICAgICAgICAgKHQgPSBjLmdldChlLmlkKSkgJiYgdC5pbml0aWFsaXplZCAmJiAhKHQuZ2V0Q29udGFpbmVyKCkgfHwgdC5nZXRCb2R5KCkpLnBhcmVudE5vZGUgJiYgKER4KHQpLCB0LnVuYmluZEFsbE5hdGl2ZUV2ZW50cygpLCB0LmRlc3Ryb3koITApLCB0LnJlbW92ZWQgPSAhMCk7CiAgICAgICAgfSksIDAgPT09IChvID0gRXQuZ3JlcChvLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuICFjLmdldChlLmlkKTsKICAgICAgICB9KSkubGVuZ3RoID8gZihbXSkgOiBQeChvLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIHQgPSBlOwogICAgICAgICAgci5pbmxpbmUgJiYgdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgaW4gbCA/IGF5KCJDb3VsZCBub3QgaW5pdGlhbGl6ZSBpbmxpbmUgZWRpdG9yIG9uIGludmFsaWQgaW5saW5lIHRhcmdldCBlbGVtZW50IiwgZSkgOiBuKHUoZSksIHIsIGUpOwogICAgICAgIH0pKTsKICAgICAgfTsKCiAgICAgIHJldHVybiBjLnNldHRpbmdzID0gciwgT3guYmluZCh3aW5kb3csICJyZWFkeSIsIHQpLCBuZXcga3IoZnVuY3Rpb24gKHQpIHsKICAgICAgICBuID8gdChuKSA6IGYgPSBmdW5jdGlvbiBmKGUpIHsKICAgICAgICAgIHQoZSk7CiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0OiBmdW5jdGlvbiBnZXQodCkgewogICAgICByZXR1cm4gMCA9PT0gYXJndW1lbnRzLmxlbmd0aCA/IFV4LnNsaWNlKDApIDogWCh0KSA/IE0oVXgsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGUuaWQgPT09IHQ7CiAgICAgIH0pLmdldE9yKG51bGwpIDogRSh0KSAmJiBVeFt0XSB8fCBudWxsOwogICAgfSwKICAgIGFkZDogZnVuY3Rpb24gYWRkKGUpIHsKICAgICAgdmFyIG4gPSB0aGlzOwogICAgICByZXR1cm4gRnhbZS5pZF0gPT09IGUgfHwgKG51bGwgPT09IG4uZ2V0KGUuaWQpICYmICgibGVuZ3RoIiAhPT0gZS5pZCAmJiAoRnhbZS5pZF0gPSBlKSwgRngucHVzaChlKSwgVXgucHVzaChlKSksIFJ4KCEwKSwgbi5hY3RpdmVFZGl0b3IgPSBlLCBuLmZpcmUoIkFkZEVkaXRvciIsIHsKICAgICAgICBlZGl0b3I6IGUKICAgICAgfSksIFR4IHx8IChUeCA9IGZ1bmN0aW9uIFR4KGUpIHsKICAgICAgICB2YXIgdCA9IG4uZmlyZSgiQmVmb3JlVW5sb2FkIik7CiAgICAgICAgaWYgKHQucmV0dXJuVmFsdWUpIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCksIGUucmV0dXJuVmFsdWUgPSB0LnJldHVyblZhbHVlLCB0LnJldHVyblZhbHVlOwogICAgICB9LCB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigiYmVmb3JldW5sb2FkIiwgVHgpKSksIGU7CiAgICB9LAogICAgY3JlYXRlRWRpdG9yOiBmdW5jdGlvbiBjcmVhdGVFZGl0b3IoZSwgdCkgewogICAgICByZXR1cm4gdGhpcy5hZGQobmV3IGt4KGUsIHQsIHRoaXMpKTsKICAgIH0sCiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShlKSB7CiAgICAgIHZhciB0LAogICAgICAgICAgbiwKICAgICAgICAgIHIgPSB0aGlzOwoKICAgICAgaWYgKGUpIHsKICAgICAgICBpZiAoIVgoZSkpIHJldHVybiBuID0gZSwgbChyLmdldChuLmlkKSkgPyBudWxsIDogKER4KG4pICYmIHIuZmlyZSgiUmVtb3ZlRWRpdG9yIiwgewogICAgICAgICAgZWRpdG9yOiBuCiAgICAgICAgfSksIDAgPT09IFV4Lmxlbmd0aCAmJiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigiYmVmb3JldW5sb2FkIiwgVHgpLCBuLnJlbW92ZSgpLCBSeCgwIDwgVXgubGVuZ3RoKSwgbik7CiAgICAgICAgUHgoT3guc2VsZWN0KGUpLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgKG4gPSByLmdldChlLmlkKSkgJiYgci5yZW1vdmUobik7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBmb3IgKHQgPSBVeC5sZW5ndGggLSAxOyAwIDw9IHQ7IHQtLSkgewogICAgICAgIHIucmVtb3ZlKFV4W3RdKTsKICAgICAgfQogICAgfSwKICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiBleGVjQ29tbWFuZChlLCB0LCBuKSB7CiAgICAgIHZhciByID0gdGhpcy5nZXQobik7CgogICAgICBzd2l0Y2ggKGUpIHsKICAgICAgICBjYXNlICJtY2VBZGRFZGl0b3IiOgogICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KG4pIHx8IG5ldyBreChuLCB0aGlzLnNldHRpbmdzLCB0aGlzKS5yZW5kZXIoKSwgITA7CgogICAgICAgIGNhc2UgIm1jZVJlbW92ZUVkaXRvciI6CiAgICAgICAgICByZXR1cm4gciAmJiByLnJlbW92ZSgpLCAhMDsKCiAgICAgICAgY2FzZSAibWNlVG9nZ2xlRWRpdG9yIjoKICAgICAgICAgIHJldHVybiByID8gci5pc0hpZGRlbigpID8gci5zaG93KCkgOiByLmhpZGUoKSA6IHRoaXMuZXhlY0NvbW1hbmQoIm1jZUFkZEVkaXRvciIsICExLCBuKSwgITA7CiAgICAgIH0KCiAgICAgIHJldHVybiAhIXRoaXMuYWN0aXZlRWRpdG9yICYmIHRoaXMuYWN0aXZlRWRpdG9yLmV4ZWNDb21tYW5kKGUsIHQsIG4pOwogICAgfSwKICAgIHRyaWdnZXJTYXZlOiBmdW5jdGlvbiB0cmlnZ2VyU2F2ZSgpIHsKICAgICAgUHgoVXgsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgZS5zYXZlKCk7CiAgICAgIH0pOwogICAgfSwKICAgIGFkZEkxOG46IGZ1bmN0aW9uIGFkZEkxOG4oZSwgdCkgewogICAgICB1dS5hZGQoZSwgdCk7CiAgICB9LAogICAgdHJhbnNsYXRlOiBmdW5jdGlvbiB0cmFuc2xhdGUoZSkgewogICAgICByZXR1cm4gdXUudHJhbnNsYXRlKGUpOwogICAgfSwKICAgIHNldEFjdGl2ZTogZnVuY3Rpb24gc2V0QWN0aXZlKGUpIHsKICAgICAgdmFyIHQgPSB0aGlzLmFjdGl2ZUVkaXRvcjsKICAgICAgdGhpcy5hY3RpdmVFZGl0b3IgIT09IGUgJiYgKHQgJiYgdC5maXJlKCJkZWFjdGl2YXRlIiwgewogICAgICAgIHJlbGF0ZWRUYXJnZXQ6IGUKICAgICAgfSksIGUuZmlyZSgiYWN0aXZhdGUiLCB7CiAgICAgICAgcmVsYXRlZFRhcmdldDogdAogICAgICB9KSksIHRoaXMuYWN0aXZlRWRpdG9yID0gZTsKICAgIH0sCiAgICBfc2V0QmFzZVVybDogZnVuY3Rpb24gX3NldEJhc2VVcmwoZSkgewogICAgICB0aGlzLmJhc2VVUkwgPSBuZXcgS2QodGhpcy5kb2N1bWVudEJhc2VVUkwpLnRvQWJzb2x1dGUoZS5yZXBsYWNlKC9cLyskLywgIiIpKSwgdGhpcy5iYXNlVVJJID0gbmV3IEtkKHRoaXMuYmFzZVVSTCk7CiAgICB9CiAgfSk7CgogIGZ1bmN0aW9uIGp4KGUsIHQsIG4pIHsKICAgIHZhciByID0gdC54LAogICAgICAgIG8gPSB0LnksCiAgICAgICAgaSA9IGUudywKICAgICAgICBhID0gZS5oLAogICAgICAgIHUgPSB0LncsCiAgICAgICAgcyA9IHQuaCwKICAgICAgICBjID0gKG4gfHwgIiIpLnNwbGl0KCIiKTsKICAgIHJldHVybiAiYiIgPT09IGNbMF0gJiYgKG8gKz0gcyksICJyIiA9PT0gY1sxXSAmJiAociArPSB1KSwgImMiID09PSBjWzBdICYmIChvICs9IEp4KHMgLyAyKSksICJjIiA9PT0gY1sxXSAmJiAociArPSBKeCh1IC8gMikpLCAiYiIgPT09IGNbM10gJiYgKG8gLT0gYSksICJyIiA9PT0gY1s0XSAmJiAociAtPSBpKSwgImMiID09PSBjWzNdICYmIChvIC09IEp4KGEgLyAyKSksICJjIiA9PT0gY1s0XSAmJiAociAtPSBKeChpIC8gMikpLCBxeChyLCBvLCBpLCBhKTsKICB9CgogIGZ1bmN0aW9uIFZ4KCkge30KCiAgSHguc2V0dXAoKTsKCiAgZnVuY3Rpb24gcXgoZSwgdCwgbiwgcikgewogICAgcmV0dXJuIHsKICAgICAgeDogZSwKICAgICAgeTogdCwKICAgICAgdzogbiwKICAgICAgaDogcgogICAgfTsKICB9CgogIHZhciAkeCwKICAgICAgV3gsCiAgICAgIF9LeCwKICAgICAgWHgsCiAgICAgIFl4ID0gTWF0aC5taW4sCiAgICAgIEd4ID0gTWF0aC5tYXgsCiAgICAgIEp4ID0gTWF0aC5yb3VuZCwKICAgICAgUXggPSB7CiAgICBpbmZsYXRlOiBmdW5jdGlvbiBpbmZsYXRlKGUsIHQsIG4pIHsKICAgICAgcmV0dXJuIHF4KGUueCAtIHQsIGUueSAtIG4sIGUudyArIDIgKiB0LCBlLmggKyAyICogbik7CiAgICB9LAogICAgcmVsYXRpdmVQb3NpdGlvbjogangsCiAgICBmaW5kQmVzdFJlbGF0aXZlUG9zaXRpb246IGZ1bmN0aW9uIGZpbmRCZXN0UmVsYXRpdmVQb3NpdGlvbihlLCB0LCBuLCByKSB7CiAgICAgIGZvciAodmFyIG8sIGkgPSAwOyBpIDwgci5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICgobyA9IGp4KGUsIHQsIHJbaV0pKS54ID49IG4ueCAmJiBvLnggKyBvLncgPD0gbi53ICsgbi54ICYmIG8ueSA+PSBuLnkgJiYgby55ICsgby5oIDw9IG4uaCArIG4ueSkgcmV0dXJuIHJbaV07CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfSwKICAgIGludGVyc2VjdDogZnVuY3Rpb24gaW50ZXJzZWN0KGUsIHQpIHsKICAgICAgdmFyIG4gPSBHeChlLngsIHQueCksCiAgICAgICAgICByID0gR3goZS55LCB0LnkpLAogICAgICAgICAgbyA9IFl4KGUueCArIGUudywgdC54ICsgdC53KSwKICAgICAgICAgIGkgPSBZeChlLnkgKyBlLmgsIHQueSArIHQuaCk7CiAgICAgIHJldHVybiBvIC0gbiA8IDAgfHwgaSAtIHIgPCAwID8gbnVsbCA6IHF4KG4sIHIsIG8gLSBuLCBpIC0gcik7CiAgICB9LAogICAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKGUsIHQsIG4pIHsKICAgICAgdmFyIHIgPSBlLngsCiAgICAgICAgICBvID0gZS55LAogICAgICAgICAgaSA9IGUueCArIGUudywKICAgICAgICAgIGEgPSBlLnkgKyBlLmgsCiAgICAgICAgICB1ID0gdC54ICsgdC53LAogICAgICAgICAgcyA9IHQueSArIHQuaCwKICAgICAgICAgIGMgPSBHeCgwLCB0LnggLSByKSwKICAgICAgICAgIGwgPSBHeCgwLCB0LnkgLSBvKSwKICAgICAgICAgIGYgPSBHeCgwLCBpIC0gdSksCiAgICAgICAgICBkID0gR3goMCwgYSAtIHMpOwogICAgICByZXR1cm4gciArPSBjLCBvICs9IGwsIG4gJiYgKGkgKz0gYywgYSArPSBsLCByIC09IGYsIG8gLT0gZCksIHF4KHIsIG8sIChpIC09IGYpIC0gciwgKGEgLT0gZCkgLSBvKTsKICAgIH0sCiAgICBjcmVhdGU6IHF4LAogICAgZnJvbUNsaWVudFJlY3Q6IGZ1bmN0aW9uIGZyb21DbGllbnRSZWN0KGUpIHsKICAgICAgcmV0dXJuIHF4KGUubGVmdCwgZS50b3AsIGUud2lkdGgsIGUuaGVpZ2h0KTsKICAgIH0KICB9LAogICAgICBaeCA9ICgkeCA9IHt9LCBXeCA9IHt9LCB7CiAgICBsb2FkOiBmdW5jdGlvbiBsb2FkKHIsIG8pIHsKICAgICAgdmFyIGkgPSAnU2NyaXB0IGF0IFVSTCAiJyArIG8gKyAnIiBmYWlsZWQgdG8gbG9hZCcsCiAgICAgICAgICBhID0gJ1NjcmlwdCBhdCBVUkwgIicgKyBvICsgIlwiIGRpZCBub3QgY2FsbCBgdGlueW1jZS5SZXNvdXJjZS5hZGQoJyIgKyByICsgIicsIGRhdGEpYCB3aXRoaW4gMSBzZWNvbmQiOwogICAgICBpZiAodm9pZCAwICE9PSAkeFtyXSkgcmV0dXJuICR4W3JdOwogICAgICB2YXIgZSA9IG5ldyBrcihmdW5jdGlvbiAoZSwgdCkgewogICAgICAgIHZhciBuID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsKICAgICAgICAgIGZ1bmN0aW9uIHIobikgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGZvciAodmFyIGUgPSBbXSwgdCA9IDA7IHQgPCBhcmd1bWVudHMubGVuZ3RoOyB0KyspIHsKICAgICAgICAgICAgICAgIGVbdF0gPSBhcmd1bWVudHNbdF07CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBvIHx8IChvID0gITAsIG51bGwgIT09IGkgJiYgKGNsZWFyVGltZW91dChpKSwgaSA9IG51bGwpLCBuLmFwcGx5KG51bGwsIGUpKTsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KCiAgICAgICAgICB2b2lkIDAgPT09IG4gJiYgKG4gPSAxZTMpOwogICAgICAgICAgdmFyIG8gPSAhMSwKICAgICAgICAgICAgICBpID0gbnVsbCwKICAgICAgICAgICAgICBhID0gcihlKSwKICAgICAgICAgICAgICB1ID0gcih0KTsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHsKICAgICAgICAgICAgICBmb3IgKHZhciBlID0gW10sIHQgPSAwOyB0IDwgYXJndW1lbnRzLmxlbmd0aDsgdCsrKSB7CiAgICAgICAgICAgICAgICBlW3RdID0gYXJndW1lbnRzW3RdOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgbyB8fCBudWxsICE9PSBpIHx8IChpID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdS5hcHBseShudWxsLCBlKTsKICAgICAgICAgICAgICB9LCBuKSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlc29sdmU6IGEsCiAgICAgICAgICAgIHJlamVjdDogdQogICAgICAgICAgfTsKICAgICAgICB9KGUsIHQpOwoKICAgICAgICBXeFtyXSA9IG4ucmVzb2x2ZSwgdHUuU2NyaXB0TG9hZGVyLmxvYWRTY3JpcHQobywgZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIG4uc3RhcnQoYSk7CiAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIG4ucmVqZWN0KGkpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgcmV0dXJuICR4W3JdID0gZTsKICAgIH0sCiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChlLCB0KSB7CiAgICAgIHZvaWQgMCAhPT0gV3hbZV0gJiYgKFd4W2VdKHQpLCBkZWxldGUgV3hbZV0pLCAkeFtlXSA9IGtyLnJlc29sdmUodCk7CiAgICB9CiAgfSksCiAgICAgIGV3ID0gRXQuZWFjaCwKICAgICAgdHcgPSBFdC5leHRlbmQ7CgogIFZ4LmV4dGVuZCA9IF9LeCA9IGZ1bmN0aW9uIEt4KG4pIHsKICAgIGZ1bmN0aW9uIHIoKSB7CiAgICAgIHZhciBlLCB0LCBuOwogICAgICBpZiAoIVh4ICYmICh0aGlzLmluaXQgJiYgdGhpcy5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHQgPSB0aGlzLk1peGlucykpIGZvciAoZSA9IHQubGVuZ3RoOyBlLS07KSB7CiAgICAgICAgKG4gPSB0W2VdKS5pbml0ICYmIG4uaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdCgpIHsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgdmFyIG8gPSB0aGlzLnByb3RvdHlwZTsKICAgIFh4ID0gITA7CiAgICB2YXIgaSA9IG5ldyB0aGlzKCk7CiAgICByZXR1cm4gWHggPSAhMSwgbi5NaXhpbnMgJiYgKGV3KG4uTWl4aW5zLCBmdW5jdGlvbiAoZSkgewogICAgICBmb3IgKHZhciB0IGluIGUpIHsKICAgICAgICAiaW5pdCIgIT09IHQgJiYgKG5bdF0gPSBlW3RdKTsKICAgICAgfQogICAgfSksIG8uTWl4aW5zICYmIChuLk1peGlucyA9IG8uTWl4aW5zLmNvbmNhdChuLk1peGlucykpKSwgbi5NZXRob2RzICYmIGV3KG4uTWV0aG9kcy5zcGxpdCgiLCIpLCBmdW5jdGlvbiAoZSkgewogICAgICBuW2VdID0gdDsKICAgIH0pLCBuLlByb3BlcnRpZXMgJiYgZXcobi5Qcm9wZXJ0aWVzLnNwbGl0KCIsIiksIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciB0ID0gIl8iICsgZTsKCiAgICAgIG5bZV0gPSBmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiB2b2lkIDAgIT09IGUgPyAodGhpc1t0XSA9IGUsIHRoaXMpIDogdGhpc1t0XTsKICAgICAgfTsKICAgIH0pLCBuLlN0YXRpY3MgJiYgZXcobi5TdGF0aWNzLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICByW3RdID0gZTsKICAgIH0pLCBuLkRlZmF1bHRzICYmIG8uRGVmYXVsdHMgJiYgKG4uRGVmYXVsdHMgPSB0dyh7fSwgby5EZWZhdWx0cywgbi5EZWZhdWx0cykpLCBuZShuLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICB2YXIgbiwgcjsKICAgICAgImZ1bmN0aW9uIiA9PSB0eXBlb2YgZSAmJiBvW3RdID8gaVt0XSA9IChuID0gdCwgciA9IGUsIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZSA9IHRoaXMuX3N1cGVyOwogICAgICAgIHRoaXMuX3N1cGVyID0gb1tuXTsKICAgICAgICB2YXIgdCA9IHIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICByZXR1cm4gdGhpcy5fc3VwZXIgPSBlLCB0OwogICAgICB9KSA6IGlbdF0gPSBlOwogICAgfSksIHIucHJvdG90eXBlID0gaSwgKHIuY29uc3RydWN0b3IgPSByKS5leHRlbmQgPSBfS3gsIHI7CiAgfTsKCiAgdmFyIG53LAogICAgICBydywKICAgICAgb3csCiAgICAgIGl3ID0gTWF0aC5taW4sCiAgICAgIGF3ID0gTWF0aC5tYXgsCiAgICAgIHV3ID0gTWF0aC5yb3VuZCwKICAgICAgc3cgPSB7CiAgICBzZXJpYWxpemU6IGZ1bmN0aW9uIHNlcmlhbGl6ZShlKSB7CiAgICAgIHZhciB0ID0gSlNPTi5zdHJpbmdpZnkoZSk7CiAgICAgIHJldHVybiBYKHQpID8gdC5yZXBsYWNlKC9bXHUwMDgwLVx1RkZGRl0vZywgZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgdCA9IGUuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNik7CiAgICAgICAgcmV0dXJuICJcXHUiICsgIjAwMDAiLnN1YnN0cmluZyh0Lmxlbmd0aCkgKyB0OwogICAgICB9KSA6IHQ7CiAgICB9LAogICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKGUpIHsKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShlKTsKICAgICAgfSBjYXRjaCAoZSkge30KICAgIH0KICB9LAogICAgICBjdyA9IHsKICAgIGNhbGxiYWNrczoge30sCiAgICBjb3VudDogMCwKICAgIHNlbmQ6IGZ1bmN0aW9uIHNlbmQodCkgewogICAgICB2YXIgbiA9IHRoaXMsCiAgICAgICAgICByID0gSmEuRE9NLAogICAgICAgICAgbyA9ICh2b2lkIDAgIT09IHQuY291bnQgPyB0IDogbikuY291bnQsCiAgICAgICAgICBpID0gInRpbnltY2VfanNvbnBfIiArIG87CiAgICAgIG4uY2FsbGJhY2tzW29dID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICByLnJlbW92ZShpKSwgZGVsZXRlIG4uY2FsbGJhY2tzW29dLCB0LmNhbGxiYWNrKGUpOwogICAgICB9LCByLmFkZChyLmRvYy5ib2R5LCAic2NyaXB0IiwgewogICAgICAgIGlkOiBpLAogICAgICAgIHNyYzogdC51cmwsCiAgICAgICAgdHlwZTogInRleHQvamF2YXNjcmlwdCIKICAgICAgfSksIG4uY291bnQrKzsKICAgIH0KICB9LAogICAgICBsdyA9IF9lMihfZTIoe30sIGZ4KSwgewogICAgc2VuZDogZnVuY3Rpb24gc2VuZChlKSB7CiAgICAgIHZhciB0LAogICAgICAgICAgbiA9IDAsCiAgICAgICAgICByID0gZnVuY3Rpb24gcigpIHsKICAgICAgICAhZS5hc3luYyB8fCA0ID09PSB0LnJlYWR5U3RhdGUgfHwgMWU0IDwgbisrID8gKGUuc3VjY2VzcyAmJiBuIDwgMWU0ICYmIDIwMCA9PT0gdC5zdGF0dXMgPyBlLnN1Y2Nlc3MuY2FsbChlLnN1Y2Nlc3Nfc2NvcGUsICIiICsgdC5yZXNwb25zZVRleHQsIHQsIGUpIDogZS5lcnJvciAmJiBlLmVycm9yLmNhbGwoZS5lcnJvcl9zY29wZSwgMWU0IDwgbiA/ICJUSU1FRF9PVVQiIDogIkdFTkVSQUwiLCB0LCBlKSwgdCA9IG51bGwpIDogX3Iuc2V0VGltZW91dChyLCAxMCk7CiAgICAgIH07CgogICAgICBpZiAoZS5zY29wZSA9IGUuc2NvcGUgfHwgdGhpcywgZS5zdWNjZXNzX3Njb3BlID0gZS5zdWNjZXNzX3Njb3BlIHx8IGUuc2NvcGUsIGUuZXJyb3Jfc2NvcGUgPSBlLmVycm9yX3Njb3BlIHx8IGUuc2NvcGUsIGUuYXN5bmMgPSAhMSAhPT0gZS5hc3luYywgZS5kYXRhID0gZS5kYXRhIHx8ICIiLCBsdy5maXJlKCJiZWZvcmVJbml0aWFsaXplIiwgewogICAgICAgIHNldHRpbmdzOiBlCiAgICAgIH0pLCAodCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpKS5vdmVycmlkZU1pbWVUeXBlICYmIHQub3ZlcnJpZGVNaW1lVHlwZShlLmNvbnRlbnRfdHlwZSksIHQub3BlbihlLnR5cGUgfHwgKGUuZGF0YSA/ICJQT1NUIiA6ICJHRVQiKSwgZS51cmwsIGUuYXN5bmMpLCBlLmNyb3NzRG9tYWluICYmICh0LndpdGhDcmVkZW50aWFscyA9ICEwKSwgZS5jb250ZW50X3R5cGUgJiYgdC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLCBlLmNvbnRlbnRfdHlwZSksIGUucmVxdWVzdGhlYWRlcnMgJiYgRXQuZWFjaChlLnJlcXVlc3RoZWFkZXJzLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHQuc2V0UmVxdWVzdEhlYWRlcihlLmtleSwgZS52YWx1ZSk7CiAgICAgIH0pLCB0LnNldFJlcXVlc3RIZWFkZXIoIlgtUmVxdWVzdGVkLVdpdGgiLCAiWE1MSHR0cFJlcXVlc3QiKSwgKHQgPSBsdy5maXJlKCJiZWZvcmVTZW5kIiwgewogICAgICAgIHhocjogdCwKICAgICAgICBzZXR0aW5nczogZQogICAgICB9KS54aHIpLnNlbmQoZS5kYXRhKSwgIWUuYXN5bmMpIHJldHVybiByKCk7CgogICAgICBfci5zZXRUaW1lb3V0KHIsIDEwKTsKICAgIH0KICB9KSwKICAgICAgZncgPSBFdC5leHRlbmQsCiAgICAgIGR3ID0gKG13LnNlbmRSUEMgPSBmdW5jdGlvbiAoZSkgewogICAgcmV0dXJuIG5ldyBtdygpLnNlbmQoZSk7CiAgfSwgbXcucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZSkgewogICAgdmFyIG4gPSBlLmVycm9yLAogICAgICAgIHIgPSBlLnN1Y2Nlc3MsCiAgICAgICAgbyA9IGZ3KHRoaXMuc2V0dGluZ3MsIGUpOwogICAgby5zdWNjZXNzID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgKGUgPSB2b2lkIDAgPT09IChlID0gc3cucGFyc2UoZSkpID8gewogICAgICAgIGVycm9yOiAiSlNPTiBQYXJzZSBlcnJvci4iCiAgICAgIH0gOiBlKS5lcnJvciA/IG4uY2FsbChvLmVycm9yX3Njb3BlIHx8IG8uc2NvcGUsIGUuZXJyb3IsIHQpIDogci5jYWxsKG8uc3VjY2Vzc19zY29wZSB8fCBvLnNjb3BlLCBlLnJlc3VsdCk7CiAgICB9LCBvLmVycm9yID0gZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgbiAmJiBuLmNhbGwoby5lcnJvcl9zY29wZSB8fCBvLnNjb3BlLCBlLCB0KTsKICAgIH0sIG8uZGF0YSA9IHN3LnNlcmlhbGl6ZSh7CiAgICAgIGlkOiBlLmlkIHx8ICJjIiArIHRoaXMuY291bnQrKywKICAgICAgbWV0aG9kOiBlLm1ldGhvZCwKICAgICAgcGFyYW1zOiBlLnBhcmFtcwogICAgfSksIG8uY29udGVudF90eXBlID0gImFwcGxpY2F0aW9uL2pzb24iLCBsdy5zZW5kKG8pOwogIH0sIG13KTsKCiAgZnVuY3Rpb24gbXcoZSkgewogICAgdGhpcy5zZXR0aW5ncyA9IGZ3KHt9LCBlKSwgdGhpcy5jb3VudCA9IDA7CiAgfQoKICB0cnkgewogICAgdmFyIGd3LAogICAgICAgIHB3ID0gIl9fc3RvcmFnZV90ZXN0X18iOwogICAgKGd3ID0gd2luZG93LmxvY2FsU3RvcmFnZSkuc2V0SXRlbShwdywgcHcpLCBndy5yZW1vdmVJdGVtKHB3KTsKICB9IGNhdGNoIChlKSB7CiAgICBudyA9IHt9LCBydyA9IFtdLCBvdyA9IHsKICAgICAgZ2V0SXRlbTogZnVuY3Rpb24gZ2V0SXRlbShlKSB7CiAgICAgICAgcmV0dXJuIG53W2VdIHx8IG51bGw7CiAgICAgIH0sCiAgICAgIHNldEl0ZW06IGZ1bmN0aW9uIHNldEl0ZW0oZSwgdCkgewogICAgICAgIHJ3LnB1c2goZSksIG53W2VdID0gU3RyaW5nKHQpOwogICAgICB9LAogICAgICBrZXk6IGZ1bmN0aW9uIGtleShlKSB7CiAgICAgICAgcmV0dXJuIHJ3W2VdOwogICAgICB9LAogICAgICByZW1vdmVJdGVtOiBmdW5jdGlvbiByZW1vdmVJdGVtKHQpIHsKICAgICAgICBydyA9IHJ3LmZpbHRlcihmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIGUgPT09IHQ7CiAgICAgICAgfSksIGRlbGV0ZSBud1t0XTsKICAgICAgfSwKICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkgewogICAgICAgIHJ3ID0gW10sIG53ID0ge307CiAgICAgIH0sCiAgICAgIGxlbmd0aDogMAogICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG93LCAibGVuZ3RoIiwgewogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gcncubGVuZ3RoOwogICAgICB9LAogICAgICBjb25maWd1cmFibGU6ICExLAogICAgICBlbnVtZXJhYmxlOiAhMQogICAgfSksIGd3ID0gb3c7CiAgfQoKICB2YXIgaHcgPSB7CiAgICBnZW9tOiB7CiAgICAgIFJlY3Q6IFF4CiAgICB9LAogICAgdXRpbDogewogICAgICBQcm9taXNlOiBrciwKICAgICAgRGVsYXk6IF9yLAogICAgICBUb29sczogRXQsCiAgICAgIFZLOiBCZiwKICAgICAgVVJJOiBLZCwKICAgICAgQ2xhc3M6IFZ4LAogICAgICBFdmVudERpc3BhdGNoZXI6IG54LAogICAgICBPYnNlcnZhYmxlOiBmeCwKICAgICAgSTE4bjogdXUsCiAgICAgIFhIUjogbHcsCiAgICAgIEpTT046IHN3LAogICAgICBKU09OUmVxdWVzdDogZHcsCiAgICAgIEpTT05QOiBjdywKICAgICAgTG9jYWxTdG9yYWdlOiBndywKICAgICAgQ29sb3I6IGZ1bmN0aW9uIENvbG9yKGUpIHsKICAgICAgICBmdW5jdGlvbiB0KGUpIHsKICAgICAgICAgIHZhciB0OwogICAgICAgICAgcmV0dXJuICJvYmplY3QiID09IF90eXBlb2YoZSkgPyAiciIgaW4gZSA/ICh1ID0gZS5yLCBzID0gZS5nLCBjID0gZS5iKSA6ICJ2IiBpbiBlICYmIGZ1bmN0aW9uIChlLCB0LCBuKSB7CiAgICAgICAgICAgIGlmIChlID0gKHBhcnNlSW50KGUsIDEwKSB8fCAwKSAlIDM2MCwgdCA9IHBhcnNlSW50KHQsIDEwKSAvIDEwMCwgbiA9IHBhcnNlSW50KG4sIDEwKSAvIDEwMCwgdCA9IGF3KDAsIGl3KHQsIDEpKSwgbiA9IGF3KDAsIGl3KG4sIDEpKSwgMCAhPT0gdCkgewogICAgICAgICAgICAgIHZhciByID0gZSAvIDYwLAogICAgICAgICAgICAgICAgICBvID0gbiAqIHQsCiAgICAgICAgICAgICAgICAgIGkgPSBvICogKDEgLSBNYXRoLmFicyhyICUgMiAtIDEpKSwKICAgICAgICAgICAgICAgICAgYSA9IG4gLSBvOwoKICAgICAgICAgICAgICBzd2l0Y2ggKE1hdGguZmxvb3IocikpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgdSA9IG8sIHMgPSBpLCBjID0gMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICB1ID0gaSwgcyA9IG8sIGMgPSAwOwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIHUgPSAwLCBzID0gbywgYyA9IGk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgdSA9IDAsIHMgPSBpLCBjID0gbzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICB1ID0gaSwgcyA9IDAsIGMgPSBvOwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgIHUgPSBvLCBzID0gMCwgYyA9IGk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIHUgPSBzID0gYyA9IDA7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB1ID0gdXcoMjU1ICogKHUgKyBhKSksIHMgPSB1dygyNTUgKiAocyArIGEpKSwgYyA9IHV3KDI1NSAqIChjICsgYSkpOwogICAgICAgICAgICB9IGVsc2UgdSA9IHMgPSBjID0gdXcoMjU1ICogbik7CiAgICAgICAgICB9KGUuaCwgZS5zLCBlLnYpIDogKHQgPSAvcmdiXHMqXChccyooWzAtOV0rKVxzKixccyooWzAtOV0rKVxzKixccyooWzAtOV0rKVteXCldKlwpL2dpLmV4ZWMoZSkpID8gKHUgPSBwYXJzZUludCh0WzFdLCAxMCksIHMgPSBwYXJzZUludCh0WzJdLCAxMCksIGMgPSBwYXJzZUludCh0WzNdLCAxMCkpIDogKHQgPSAvIyhbMC1GXXsyfSkoWzAtRl17Mn0pKFswLUZdezJ9KS9naS5leGVjKGUpKSA/ICh1ID0gcGFyc2VJbnQodFsxXSwgMTYpLCBzID0gcGFyc2VJbnQodFsyXSwgMTYpLCBjID0gcGFyc2VJbnQodFszXSwgMTYpKSA6ICh0ID0gLyMoWzAtRl0pKFswLUZdKShbMC1GXSkvZ2kuZXhlYyhlKSkgJiYgKHUgPSBwYXJzZUludCh0WzFdICsgdFsxXSwgMTYpLCBzID0gcGFyc2VJbnQodFsyXSArIHRbMl0sIDE2KSwgYyA9IHBhcnNlSW50KHRbM10gKyB0WzNdLCAxNikpLCB1ID0gdSA8IDAgPyAwIDogMjU1IDwgdSA/IDI1NSA6IHUsIHMgPSBzIDwgMCA/IDAgOiAyNTUgPCBzID8gMjU1IDogcywgYyA9IGMgPCAwID8gMCA6IDI1NSA8IGMgPyAyNTUgOiBjLCBuOwogICAgICAgIH0KCiAgICAgICAgdmFyIG4gPSB7fSwKICAgICAgICAgICAgdSA9IDAsCiAgICAgICAgICAgIHMgPSAwLAogICAgICAgICAgICBjID0gMDsKICAgICAgICByZXR1cm4gZSAmJiB0KGUpLCBuLnRvUmdiID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcjogdSwKICAgICAgICAgICAgZzogcywKICAgICAgICAgICAgYjogYwogICAgICAgICAgfTsKICAgICAgICB9LCBuLnRvSHN2ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIGUgPSB1LCB0ID0gcywgbiA9IGMsIG8gPSAwLCAoaSA9IGl3KGUgLz0gMjU1LCBpdyh0IC89IDI1NSwgbiAvPSAyNTUpKSkgPT09IChhID0gYXcoZSwgYXcodCwgbikpKSA/IHsKICAgICAgICAgICAgaDogMCwKICAgICAgICAgICAgczogMCwKICAgICAgICAgICAgdjogMTAwICogKG8gPSBpKQogICAgICAgICAgfSA6IChyID0gKGEgLSBpKSAvIGEsIHsKICAgICAgICAgICAgaDogdXcoNjAgKiAoKGUgPT09IGkgPyAzIDogbiA9PT0gaSA/IDEgOiA1KSAtIChlID09PSBpID8gdCAtIG4gOiBuID09PSBpID8gZSAtIHQgOiBuIC0gZSkgLyAoKG8gPSBhKSAtIGkpKSksCiAgICAgICAgICAgIHM6IHV3KDEwMCAqIHIpLAogICAgICAgICAgICB2OiB1dygxMDAgKiBvKQogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgZSwgdCwgbiwgciwgbywgaSwgYTsKICAgICAgICB9LCBuLnRvSGV4ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgZnVuY3Rpb24gZShlKSB7CiAgICAgICAgICAgIHJldHVybiAxIDwgKGUgPSBwYXJzZUludChlLCAxMCkudG9TdHJpbmcoMTYpKS5sZW5ndGggPyBlIDogIjAiICsgZTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gIiMiICsgZSh1KSArIGUocykgKyBlKGMpOwogICAgICAgIH0sIG4ucGFyc2UgPSB0LCBuOwogICAgICB9LAogICAgICBJbWFnZVVwbG9hZGVyOiBmdW5jdGlvbiBJbWFnZVVwbG9hZGVyKG4pIHsKICAgICAgICB2YXIgZSA9IEh2KCksCiAgICAgICAgICAgIHIgPSBXdihuLCBlKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgdXBsb2FkOiBmdW5jdGlvbiB1cGxvYWQoZSwgdCkgewogICAgICAgICAgICByZXR1cm4gci51cGxvYWQoZSwgKHQgPSB2b2lkIDAgPT09IHQgfHwgdCkgPyAkdihuKSA6IHZvaWQgMCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfQogICAgfSwKICAgIGRvbTogewogICAgICBFdmVudFV0aWxzOiBhaSwKICAgICAgU2l6emxlOiBhYSwKICAgICAgRG9tUXVlcnk6IFdhLAogICAgICBUcmVlV2Fsa2VyOiBSciwKICAgICAgVGV4dFNlZWtlcjogTnUsCiAgICAgIERPTVV0aWxzOiBKYSwKICAgICAgU2NyaXB0TG9hZGVyOiB0dSwKICAgICAgUmFuZ2VVdGlsczogT2YsCiAgICAgIFNlcmlhbGl6ZXI6IFhoLAogICAgICBTdHlsZVNoZWV0TG9hZGVyOiB3ciwKICAgICAgQ29udHJvbFNlbGVjdGlvbjogQ2YsCiAgICAgIEJvb2ttYXJrTWFuYWdlcjogRmwsCiAgICAgIFNlbGVjdGlvbjogTGgsCiAgICAgIEV2ZW50OiBhaS5FdmVudAogICAgfSwKICAgIGh0bWw6IHsKICAgICAgU3R5bGVzOiBybywKICAgICAgRW50aXRpZXM6IEdvLAogICAgICBOb2RlOiBVZCwKICAgICAgU2NoZW1hOiB0bywKICAgICAgU2F4UGFyc2VyOiBHZCwKICAgICAgRG9tUGFyc2VyOiAkaCwKICAgICAgV3JpdGVyOiB0bSwKICAgICAgU2VyaWFsaXplcjogbm0KICAgIH0sCiAgICBFbnY6IHh0LAogICAgQWRkT25NYW5hZ2VyOiBzdSwKICAgIEFubm90YXRvcjogTWwsCiAgICBGb3JtYXR0ZXI6IEp2LAogICAgVW5kb01hbmFnZXI6IFp2LAogICAgRWRpdG9yQ29tbWFuZHM6IFcxLAogICAgV2luZG93TWFuYWdlcjogUHYsCiAgICBOb3RpZmljYXRpb25NYW5hZ2VyOiB1diwKICAgIEVkaXRvck9ic2VydmFibGU6IG14LAogICAgU2hvcnRjdXRzOiB5eCwKICAgIEVkaXRvcjoga3gsCiAgICBGb2N1c01hbmFnZXI6IExkLAogICAgRWRpdG9yTWFuYWdlcjogSHgsCiAgICBET006IEphLkRPTSwKICAgIFNjcmlwdExvYWRlcjogdHUuU2NyaXB0TG9hZGVyLAogICAgUGx1Z2luTWFuYWdlcjogT3YsCiAgICBUaGVtZU1hbmFnZXI6IEJ2LAogICAgSWNvbk1hbmFnZXI6IF92LAogICAgUmVzb3VyY2U6IFp4LAogICAgdHJpbTogRXQudHJpbSwKICAgIGlzQXJyYXk6IEV0LmlzQXJyYXksCiAgICBpczogRXQuaXMsCiAgICB0b0FycmF5OiBFdC50b0FycmF5LAogICAgbWFrZU1hcDogRXQubWFrZU1hcCwKICAgIGVhY2g6IEV0LmVhY2gsCiAgICBtYXA6IEV0Lm1hcCwKICAgIGdyZXA6IEV0LmdyZXAsCiAgICBpbkFycmF5OiBFdC5pbkFycmF5LAogICAgZXh0ZW5kOiBFdC5leHRlbmQsCiAgICBjcmVhdGU6IEV0LmNyZWF0ZSwKICAgIHdhbGs6IEV0LndhbGssCiAgICBjcmVhdGVOUzogRXQuY3JlYXRlTlMsCiAgICByZXNvbHZlOiBFdC5yZXNvbHZlLAogICAgZXhwbG9kZTogRXQuZXhwbG9kZSwKICAgIF9hZGRDYWNoZVN1ZmZpeDogRXQuX2FkZENhY2hlU3VmZml4LAogICAgaXNPcGVyYTogeHQub3BlcmEsCiAgICBpc1dlYktpdDogeHQud2Via2l0LAogICAgaXNJRTogeHQuaWUsCiAgICBpc0dlY2tvOiB4dC5nZWNrbywKICAgIGlzTWFjOiB4dC5tYWMKICB9LAogICAgICB2dyA9IEV0LmV4dGVuZChIeCwgaHcpLAogICAgICBidyA9IHZ3OwogIHdpbmRvdy50aW55bWNlID0gYncsIHdpbmRvdy50aW55TUNFID0gYncsIGZ1bmN0aW9uIChlKSB7CiAgICBpZiAoIm9iamVjdCIgPT0gKHR5cGVvZiBtb2R1bGUgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKG1vZHVsZSkpKSB0cnkgewogICAgICBtb2R1bGUuZXhwb3J0cyA9IGU7CiAgICB9IGNhdGNoIChlKSB7fQogIH0odncpOwp9KCk7"},null]}