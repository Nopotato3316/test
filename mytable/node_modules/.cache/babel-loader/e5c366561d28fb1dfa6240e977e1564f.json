{"remainingRequest":"C:\\Users\\ren\\Desktop\\test\\mytable\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\ren\\Desktop\\test\\mytable\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ren\\Desktop\\test\\mytable\\src\\components\\mytinymce\\plugins\\image\\plugin.min.js","dependencies":[{"path":"C:\\Users\\ren\\Desktop\\test\\mytable\\src\\components\\mytinymce\\plugins\\image\\plugin.min.js","mtime":1633891664000},{"path":"C:\\Users\\ren\\Desktop\\test\\mytable\\babel.config.js","mtime":1634872674031},{"path":"C:\\Users\\ren\\Desktop\\test\\mytable\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ren\\Desktop\\test\\mytable\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ren\\Desktop\\test\\mytable\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}